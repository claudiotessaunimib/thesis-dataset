package org.mewx.wenku8.util;import androidx.test.filters.SmallTest;import org.junit.Test;import static org.junit.Assert.assertEquals;@SmallTestpublic class LightUserSessionTest {    @Test    public void decodeThenEncodeUserInfo() {        final String src = "Z1NxZFhlPT0=|Z1dwUlhiPT0=";        LightUserSession.decAndSetUserFile(src);        assertEquals("abc", LightUserSession.getUsernameOrEmail());        assertEquals("123", LightUserSession.getPassword());        assertEquals(src, LightUserSession.encUserFile());    }    @Test    public void encodeThenDecodeUserInfo() {        LightUserSession.setUserInfo("xyz", "987");        LightUserSession.decAndSetUserFile(LightUserSession.encUserFile());        assertEquals("xyz", LightUserSession.getUsernameOrEmail());        assertEquals("987", LightUserSession.getPassword());    }}package org.mewx.wenku8.util;import android.content.Intent;import android.os.AsyncTask;import android.util.Log;import android.widget.Toast;import org.mewx.wenku8.MyApp;import org.mewx.wenku8.R;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.global.api.Wenku8API;import org.mewx.wenku8.global.api.Wenku8Error;import org.mewx.wenku8.service.HeartbeatSessionKeeper;import java.io.UnsupportedEncodingException;public class LightUserSession {    public static AsyncInitUserInfo aiui;     private static boolean logStatus = false;     private static String usernameOrEmail = null;    private static String password = null;    private static String SESSION = null;    public static String getLoggedAs() {        return ( logStatus && SESSION != null && SESSION.length() != 0 && isUserInfoSet()) ? usernameOrEmail : "";    }    public static String getUsernameOrEmail() {        return usernameOrEmail == null ? "" : usernameOrEmail;    }    public static String getPassword() {        return password == null ? "" : password;    }    public static String getSession() {        if (SESSION != null) {            Log.d(LightUserSession.class.getSimpleName(), SESSION);        }        return SESSION == null ? "" : SESSION;    }    public static void setSession(String s) {        if(s != null && s.length() != 0) SESSION = s;    }    public static boolean getLogStatus() {        return logStatus;    }    public static boolean loadUserInfoSet() {        byte[] bytes;        if(LightCache.testFileExist(GlobalConfig.getFirstFullUserAccountSaveFilePath())) {            bytes = LightCache.loadFile(GlobalConfig.getFirstFullUserAccountSaveFilePath());        }        else if(LightCache.testFileExist(GlobalConfig.getSecondFullUserAccountSaveFilePath())) {            bytes = LightCache.loadFile(GlobalConfig.getSecondFullUserAccountSaveFilePath());        }        else {            return false;         }        try {            Log.d("MewX", new String(bytes, "UTF-8"));            decAndSetUserFile(new String(bytes, "UTF-8"));        } catch (Exception e) {            e.printStackTrace();            return false;         }        return true;    }    public static boolean saveUserInfoSet() {        LightCache.saveFile(GlobalConfig.getFirstFullUserAccountSaveFilePath(), encUserFile().getBytes(), true);        if (!LightCache.testFileExist(GlobalConfig.getFirstFullUserAccountSaveFilePath())) {            LightCache.saveFile(GlobalConfig.getSecondFullUserAccountSaveFilePath(), encUserFile().getBytes(), true);            return LightCache.testFileExist(GlobalConfig.getSecondFullUserAccountSaveFilePath());        }        return true;    }    private static byte[] executeLoginRequest(String usernameOrEmail, String password){        if (usernameOrEmail == null || password == null) {            return null;        }        if (usernameOrEmail.contains("@")) {            return LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserLoginEmailParams(usernameOrEmail, password));        } else {            return LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserLoginParams(usernameOrEmail, password));        }    }    public static Wenku8Error.ErrorCode doLoginFromFile() {        if(!isUserInfoSet()) loadUserInfoSet();        if(!isUserInfoSet()) return Wenku8Error.ErrorCode.USER_INFO_EMPTY;        byte[] b = executeLoginRequest(usernameOrEmail, password);        if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;        try {            String result = new String(b, "UTF-8");            if(!LightTool.isInteger(result)) {                return Wenku8Error.ErrorCode.RETURNED_VALUE_EXCEPTION;            }            if(Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(result)) == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED)                logStatus = true;            return Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(result));         } catch (UnsupportedEncodingException e) {            e.printStackTrace();            return Wenku8Error.ErrorCode.BYTE_TO_STRING_EXCEPTION;        }    }    public static Wenku8Error.ErrorCode doLoginFromGiven(String name, String pwd) {        byte[] b = executeLoginRequest(name, pwd);        if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;        try {            String result = new String(b, "UTF-8");            if(!LightTool.isInteger(result)) {                return Wenku8Error.ErrorCode.RETURNED_VALUE_EXCEPTION;            }            if(Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(result)) == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) {                logStatus = true;                setUserInfo(name, pwd);                saveUserInfoSet();            }            return Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(result));         } catch (UnsupportedEncodingException e) {            e.printStackTrace();            return Wenku8Error.ErrorCode.BYTE_TO_STRING_EXCEPTION;        }    }    public static void logOut() {        logStatus = false;        setUserInfo("", "");        if(!LightCache.deleteFile(GlobalConfig.getFirstFullUserAccountSaveFilePath())) {            LightCache.deleteFile(GlobalConfig.getSecondFullUserAccountSaveFilePath());        }        if(!LightCache.deleteFile(GlobalConfig.getFirstUserAvatarSaveFilePath())) {            LightCache.deleteFile(GlobalConfig.getSecondUserAvatarSaveFilePath());        }    }    public static Wenku8Error.ErrorCode heartbeatLogin() {        Toast.makeText(MyApp.getContext(), "Heartbeat test", Toast.LENGTH_SHORT).show();        return doLoginFromFile();    }    public static boolean isUserInfoSet() {        return usernameOrEmail != null && password != null && usernameOrEmail.length() != 0 && password.length() != 0;    }    public static void setUserInfo(String username, String password) {        LightUserSession.usernameOrEmail = username;        LightUserSession.password = password;    }    public static void decAndSetUserFile(String raw) {        try {            String[] a = raw.split("\\|");             if (a.length != 2 || a[0].length() == 0 || a[1].length() == 0) {                setUserInfo("", "");                return;             }            char[] temp_username = LightBase64.DecodeBase64String(a[0]).toCharArray();            char[] temp_password = LightBase64.DecodeBase64String(a[1]).toCharArray();            int equal_pos;            String result = new String(temp_username);            equal_pos = result.indexOf('=');            for (int i = 0, j = equal_pos == -1 ? temp_username.length - 1 : equal_pos - 1; i < j; i++, j--) {                char temp = temp_username[i];                temp_username[i] = temp_username[j];                temp_username[j] = temp;            }            result = new String(temp_password);            equal_pos = result.indexOf('=');            for (int i = 0, j = equal_pos == -1 ? temp_password.length - 1 : equal_pos - 1; i < j; i++, j--) {                char temp = temp_password[i];                temp_password[i] = temp_password[j];                temp_password[j] = temp;            }            temp_username = LightBase64.DecodeBase64String(new String(temp_username)).toCharArray();            temp_password = LightBase64.DecodeBase64String(new String(temp_password)).toCharArray();            for (int i = 0; i < temp_username.length; i++) {                if ('a' <= temp_username[i] && temp_username[i] <= 'z')                    temp_username[i] -= ('a' - 'A');                else if ('A' <= temp_username[i] && temp_username[i] <= 'Z')                    temp_username[i] += ('a' - 'A');            }            for (int i = 0; i < temp_password.length; i++) {                if ('a' <= temp_password[i] && temp_password[i] <= 'z')                    temp_password[i] -= ('a' - 'A');                else if ('A' <= temp_password[i] && temp_password[i] <= 'Z')                    temp_password[i] += ('a' - 'A');            }            setUserInfo(LightBase64.DecodeBase64String(new String(temp_username)),                    LightBase64.DecodeBase64String(new String(temp_password)));        }        catch (Exception e) {            e.printStackTrace();        }    }    public static String encUserFile() {        if(!isUserInfoSet())            return "";         char[] temp_username = LightBase64.EncodeBase64(usernameOrEmail).toCharArray();        char[] temp_password = LightBase64.EncodeBase64(password).toCharArray();        for(int i = 0; i < temp_username.length; i ++) {            if('a' <= temp_username[i] && temp_username[i] <= 'z' )                temp_username[i] -= ('a' - 'A');            else if('A' <= temp_username[i] && temp_username[i] <= 'Z')                temp_username[i] += ('a' - 'A');        }        for(int i = 0; i < temp_password.length; i ++) {            if('a' <= temp_password[i] && temp_password[i] <= 'z' )                temp_password[i] -= ('a' - 'A');            else if('A' <= temp_password[i] && temp_password[i] <= 'Z')                temp_password[i] += ('a' - 'A');        }        int equal_pos;        temp_username = LightBase64.EncodeBase64(new String(temp_username)).toCharArray();        String result = new String(temp_username);        equal_pos = result.indexOf('=');        for(int i = 0, j = equal_pos == -1 ? temp_username.length - 1 : equal_pos - 1; i < j; i ++, j --) {            char temp = temp_username[i];            temp_username[i] = temp_username[j];            temp_username[j] = temp;        }        temp_password = LightBase64.EncodeBase64(new String(temp_password)).toCharArray();        result = new String(temp_password);        equal_pos = result.indexOf('=');        for(int i = 0, j = equal_pos == -1 ? temp_password.length - 1 : equal_pos - 1; i < j; i ++, j --) {            char temp = temp_password[i];            temp_password[i] = temp_password[j];            temp_password[j] = temp;        }        result = LightBase64.EncodeBase64(new String(temp_username)) + "|" + LightBase64.EncodeBase64(new String(temp_password));        return result;    }    public static class AsyncInitUserInfo extends AsyncTask<Integer, Integer, Wenku8Error.ErrorCode> {        @Override        protected Wenku8Error.ErrorCode doInBackground(Integer... params) {            loadUserInfoSet();            return doLoginFromFile();        }        @Override        protected void onPostExecute(Wenku8Error.ErrorCode e) {            super.onPostExecute(e);            if(e == Wenku8Error.ErrorCode.SYSTEM_2_ERROR_USERNAME || e == Wenku8Error.ErrorCode.SYSTEM_3_ERROR_PASSWORD) {                if(!LightCache.deleteFile(GlobalConfig.getFirstFullUserAccountSaveFilePath()))                    LightCache.deleteFile(GlobalConfig.getSecondFullUserAccountSaveFilePath());                if(!LightCache.deleteFile(GlobalConfig.getFirstUserAvatarSaveFilePath()))                    LightCache.deleteFile(GlobalConfig.getSecondUserAvatarSaveFilePath());                usernameOrEmail = "";                password = "";                Toast.makeText(MyApp.getContext(), MyApp.getContext().getResources().getString(R.string.system_log_info_outofdate), Toast.LENGTH_SHORT).show();                return;            }            if(LightUserSession.logStatus) {                Intent intent = new Intent(MyApp.getContext(),HeartbeatSessionKeeper.class);                MyApp.getContext().startService(intent);            }        }    }}package org.mewx.wenku8.util;import android.content.ContentValues;import androidx.annotation.Nullable;import android.util.Log;import java.io.BufferedInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.util.Objects;import java.util.zip.GZIPInputStream;public class LightNetwork {	public static String encodeToHttp(String str) {		return encodeToHttp(str, "UTF-8");	}	public static String encodeToHttp(String str, String encoding) {		String enc;		try {			enc = URLEncoder.encode(str, encoding);		} catch (UnsupportedEncodingException e) {			e.printStackTrace();			Log.v("MewX-Net", Objects.requireNonNull(e.getMessage()));			enc = ""; 		}		return enc;	}	@Nullable	public static byte[] LightHttpPostConnection(String u, ContentValues values) {		return LightHttpPostConnection(u, values, true);	}	@Nullable	public static byte[] LightHttpPostConnection(String u, ContentValues values, boolean withSession) {		URL url;		HttpURLConnection http;		try {			url = new URL(u);			http = (HttpURLConnection) url.openConnection();            http.setRequestMethod("POST");			http.setRequestProperty("Accept-Encoding", "gzip"); 			if(withSession && LightUserSession.getSession().length() != 0) {				http.setRequestProperty("Cookie", "PHPSESSID=" + LightUserSession.getSession());			}			http.setConnectTimeout(3000);			http.setReadTimeout(5000);			http.setDoOutput(true); 			http.setInstanceFollowRedirects(true); 		} catch (Exception e) {			e.printStackTrace();			return null; 		}		StringBuilder params = new StringBuilder();		for( String key : values.keySet() ) {			if( !(values.get(key) instanceof String)) continue;			params.append("&").append(key).append("=").append(values.get(key)); 		}		byte[] bytes = params.toString().getBytes();		try {			http.getOutputStream().write(bytes); 			InputStream inStream=http.getInputStream(); 			ByteArrayOutputStream outStream = new ByteArrayOutputStream(); 			if(http.getContentEncoding() != null && http.getContentEncoding().toLowerCase().contains("gzip")) {				inStream = new GZIPInputStream(new BufferedInputStream(inStream));			}			if (http.getHeaderField("Set-Cookie") != null && http.getHeaderField("Set-Cookie").contains("PHPSESSID")) {				int index =http.getHeaderField("Set-Cookie").indexOf("PHPSESSID");				LightUserSession.setSession(						http.getHeaderField("Set-Cookie").substring(index + 9 + 1, http.getHeaderField("Set-Cookie").indexOf(";", index))				);			}			byte[] buffer = new byte[1024];			int len;			while( (len = inStream.read(buffer)) !=-1 )				outStream.write(buffer, 0, len); 			byte[] data = outStream.toByteArray(); 			outStream.close();			inStream.close();			return data; 		} catch (IOException e) {			e.printStackTrace();			return null; 		}	}	@Nullable	public static byte[] LightHttpDownload(String url) {		InputStream inputStream;		try {			URL localURL = new URL(url);			HttpURLConnection httpURLConnection = (HttpURLConnection)localURL.openConnection();            httpURLConnection.setConnectTimeout(3000);            httpURLConnection.setReadTimeout(8000);			if (httpURLConnection.getResponseCode() != HttpURLConnection.HTTP_OK)				throw new Exception("HTTP Request is not success, Response code is " + httpURLConnection.getResponseCode());			inputStream = httpURLConnection.getInputStream();            byte[] b = new byte[1024];            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();            int len;            while ((len = inputStream.read(b)) != -1) byteArrayOutputStream.write(b, 0, len);            byteArrayOutputStream.close();			inputStream.close();            byteArrayOutputStream.close();			return byteArrayOutputStream.toByteArray();		} catch (Exception e) {			e.printStackTrace();			return null;		}	}}package org.mewx.wenku8.global.api;import android.content.ContentValues;import androidx.annotation.Nullable;import androidx.annotation.VisibleForTesting;import org.mewx.wenku8.BuildConfig;import org.mewx.wenku8.R;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.util.LightBase64;import org.mewx.wenku8.util.LightNetwork;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.Map;@SuppressWarnings("unused")public class Wenku8API {    public static String NoticeString = "";    public static final String REGISTER_URL = "http:    public static final String BASE_URL = "http:    public static final String RELAY_URL = "https:    private static final String NovelFinishedSC = "已完成", NovelFinishedTC = "已完成",            NovelNotFinishedSC = "连载中", NovelNotFinishedTC = "連載中";    public static String getCoverURL(int aid) {        return "http:    }    public static final int MIN_REPLY_TEXT = 7;    private static final HashSet<String> badWords = new HashSet<>(Arrays.asList(            "共产党", "政府", "毛泽东", "邓小平", "江泽民", "胡锦涛", "温家宝", "习近平",            "李克强", "台独", "藏独", "反日", "反共", "反中", "达赖", "刘晓波", "毛主席", "愤青",            "反华", "右翼", "游行", "示威", "静坐", "公安", "李洪志", "法轮功", "刷分", "路过路过",            ".......", "。。。。", "色情", "吃屎", "你妈", "他妈", "她妈", "操你", "垃圾", "去死",            "迷魂药", "催情药", "毒品",            "共產黨", "政府", "毛澤東", "鄧小平", "江澤民", "胡錦濤", "溫家寶", "習近平",            "李克強", "臺獨", "藏獨", "反日", "反共", "反中", "達賴", "劉曉波", "毛主席", "憤青",            "反華", "右翼", "遊行", "示威", "靜坐", "公安", "李洪誌", "法輪功", "刷分", "路過路過",            ".......", "。。。。", "色情", "吃屎", "你媽", "他媽", "她媽", "操你", "垃圾", "去死",            "迷魂藥", "催情藥", "毒品",            "blablabla"    ));    public enum LANG {        SC,         TC     }    private static int getLANG(LANG l) {        switch (l) {            case SC:                return 0;            case TC:                return 1;            default:                return 0;         }    }    public enum STATUS {        FINISHED,         NOT_FINISHED     }    public static STATUS getSTATUSByInt(int i) {        return i == 0 ? STATUS.NOT_FINISHED : STATUS.FINISHED;    }    public static STATUS getSTATUSByString(String s) {        return s.equals(NovelNotFinishedSC) || s.equals(NovelNotFinishedTC) ? STATUS.NOT_FINISHED : STATUS.FINISHED;    }    public static String getStatusBySTATUS(STATUS s) {        switch (GlobalConfig.getCurrentLang()) {            case TC:                if (s == STATUS.FINISHED)                    return NovelFinishedTC;                else                    return NovelNotFinishedTC;            case SC:            default:                if (s == STATUS.FINISHED)                    return NovelFinishedSC;                else                    return NovelNotFinishedSC;        }    }    public enum NOVELSORTBY {        allVisit, allVote, monthVisit, monthVote, weekVisit, weekVote, dayVisit, dayVote, postDate, lastUpdate, goodNum, size, fullFlag    }    public static NOVELSORTBY getNOVELSORTBY(String n) {        switch (n) {            case "allvisit":                return NOVELSORTBY.allVisit;            case "monthvisit":                return NOVELSORTBY.monthVisit;            case "monthvote":                return NOVELSORTBY.monthVote;            case "weekvisit":                return NOVELSORTBY.weekVisit;            case "weekvote":                return NOVELSORTBY.weekVote;            case "dayvisit":                return NOVELSORTBY.dayVisit;            case "dayvote":                return NOVELSORTBY.dayVote;            case "postdate":                return NOVELSORTBY.postDate;            case "lastupdate":                return NOVELSORTBY.lastUpdate;            case "goodnum":                return NOVELSORTBY.goodNum;            case "size":                return NOVELSORTBY.size;            case "fullflag":                return NOVELSORTBY.fullFlag;            case "allvote":            default:                return NOVELSORTBY.allVote;         }    }    public static String getNOVELSORTBY(NOVELSORTBY n) {        switch (n) {            case allVisit:                return "allvisit";            case allVote:                return "allvote";            case monthVisit:                return "monthvisit";            case monthVote:                return "monthvote";            case weekVisit:                return "weekvisit";            case weekVote:                return "weekvote";            case dayVisit:                return "dayvisit";            case dayVote:                return "dayvote";            case postDate:                return "postdate";            case lastUpdate:                return "lastupdate";            case goodNum:                return "goodnum";            case size:                return "size";            case fullFlag:                return "fullflag";            default:                return "allvote";         }    }    public static int getNOVELSORTBY_ChsId(NOVELSORTBY n) {        switch (n) {            case allVisit:                return R.string.tab_allvisit;            case monthVisit:                return R.string.tab_monthvisit;            case monthVote:                return R.string.tab_monthvote;            case weekVisit:                return R.string.tab_weekvisit;            case weekVote:                return R.string.tab_weekvote;            case dayVisit:                return R.string.tab_dayvisit;            case dayVote:                return R.string.tab_dayvote;            case postDate:                return R.string.tab_postdate;            case lastUpdate:                return R.string.tab_lastupdate;            case goodNum:                return R.string.tab_goodnum;            case size:                return R.string.tab_size;            case fullFlag:                return R.string.tab_fullflag;            case allVote:            default:                return R.string.tab_allvote;         }    }    public static int getErrorInfo_ResId(int errNo) {        switch (errNo) {            case 0:                return R.string.error_00;            case 1:                return R.string.error_01;            case 2:                return R.string.error_02;            case 3:                return R.string.error_03;            case 4:                return R.string.error_04;            case 5:                return R.string.error_05;            case 6:                return R.string.error_06;            case 7:                return R.string.error_07;            case 8:                return R.string.error_08;            case 9:                return R.string.error_09;            case 10:                return R.string.error_10;            case 11:                return R.string.error_11;            case 22:                return R.string.error_22;            default:                return R.string.error_unknown;        }    }    @VisibleForTesting    static Map<String, String> getEncryptedMAP(String str) {        Map<String, String> params = new HashMap<>();        params.put("appver", BuildConfig.VERSION_NAME);        params.put("request", LightBase64.EncodeBase64(str));        params.put("timetoken", "" + System.currentTimeMillis());        return params;    }    private static ContentValues getEncryptedCV(String str) {        ContentValues cv = new ContentValues();        Map<String, String> map = getEncryptedMAP(str);        for (String key : map.keySet()) {            cv.put(key, map.get(key));        }        return cv;    }    public static ContentValues getNovelCover(int aid) {        return getEncryptedCV("action=book&do=cover&aid=" + aid);    }    public static ContentValues getNovelShortInfo(int aid, LANG l) {        return getEncryptedCV("action=book&do=info&aid=" + aid + "&t=" + getLANG(l));    }    public static ContentValues getNovelShortInfoUpdate_CV(int aid, LANG l) {        return getEncryptedCV("action=book&do=bookinfo&aid=" + aid + "&t=" + getLANG(l));    }    public static ContentValues getNovelFullIntro(int aid, LANG l) {        return getEncryptedCV("action=book&do=intro&aid=" + aid + "&t="                + getLANG(l));    }    public static ContentValues getNovelFullMeta(int aid, LANG l) {        return getEncryptedCV("action=book&do=meta&aid=" + aid + "&t="                + getLANG(l));    }    public static ContentValues getNovelIndex(int aid, LANG l) {        return getEncryptedCV("action=book&do=list&aid=" + aid + "&t="                + getLANG(l));    }    public static ContentValues getNovelContent(int aid, int cid, LANG l) {        return getEncryptedCV("action=book&do=text&aid=" + aid + "&cid=" + cid                + "&t=" + getLANG(l));    }    public static ContentValues searchNovelByNovelName(String novelName, LANG l) {        return getEncryptedCV("action=search&searchtype=articlename&searchkey="                + LightNetwork.encodeToHttp(novelName) + "&t=" + getLANG(l));    }    public static ContentValues searchNovelByAuthorName(String authorName,                                                        LANG l) {        return getEncryptedCV("action=search&searchtype=author&searchkey="                + LightNetwork.encodeToHttp(authorName) + "&t=" + getLANG(l));    }    public static ContentValues getNovelList(NOVELSORTBY n, int page) {        return getEncryptedCV("action=articlelist&sort=" + getNOVELSORTBY(n)                + "&page=" + page);    }    public static ContentValues getNovelListWithInfo(NOVELSORTBY n, int page, LANG l) {        return getEncryptedCV("action=novellist&sort=" + getNOVELSORTBY(n)                + "&page=" + page + "&t=" + getLANG(l));    }    public static ContentValues getLibraryList() {        return getEncryptedCV("action=xml&item=sort&t=0");    }    public static ContentValues getNovelListByLibrary(int sortId, int page) {        return getEncryptedCV("action=articlelist&sort=" + sortId + "&page="                + page);    }    public static ContentValues getNovelListByLibraryWithInfo(int sortId,                                                              int page, LANG l) {        return getEncryptedCV("action=novellist&sort=" + sortId + "&page="                + page + "&t=" + getLANG(l));    }    public static ContentValues getUserLoginParams(String username, String password) {        String temp = "action=login&username=" + LightNetwork.encodeToHttp(username) + "&password=" + LightNetwork.encodeToHttp(password);        return getEncryptedCV(temp);    }    public static ContentValues getUserLoginEmailParams(String email, String password) {        String temp = "action=loginemail&username=" + LightNetwork.encodeToHttp(email) + "&password=" + LightNetwork.encodeToHttp(password);        return getEncryptedCV(temp);    }    public static ContentValues getUserAvatar( ) {        return getEncryptedCV("action=avatar");    }    public static ContentValues getUserLogoutParams( ) {        return getEncryptedCV("action=logout");    }    public static ContentValues getUserInfoParams( ) {        return getEncryptedCV("action=userinfo");    }    public static ContentValues getUserSignParams( ) {        return getEncryptedCV("action=block&do=sign");     }    public static ContentValues getVoteNovelParams(int aid) {        return getEncryptedCV("action=book&do=vote&aid=" + aid);    }    public static ContentValues getBookshelfListAid(LANG l) {        return getEncryptedCV("action=bookcase&do=list&t=" + getLANG(l));    }    public static ContentValues getBookshelfListParams(LANG l) {        return getEncryptedCV("action=bookcase&t=" + getLANG(l));    }    public static ContentValues getAddToBookshelfParams(int aid) {        return getEncryptedCV("action=bookcase&do=add&aid=" + aid);    }    public static ContentValues getDelFromBookshelfParams(int aid) {        return getEncryptedCV("action=bookcase&do=del&aid=" + aid);    }    @Nullable    public static String searchBadWords(String source) {        source = source.replaceAll("\\s", "");        for (String badWord : badWords) {            if (source.contains(badWord)) {                return badWord;            }        }        return null;    }    public static ContentValues getCommentListParams(int aid, int page) {        if (page < 1) page = 1;        return getEncryptedCV("action=review&do=list&aid=" + aid + "&page=" + page + "&t=" + getLANG(GlobalConfig.getCurrentLang()));    }    public static ContentValues getCommentContentParams(int rid, int page) {        if (page < 1) page = 1;        return getEncryptedCV("action=review&do=show&rid=" + rid + "&page=" + page + "&t=" + getLANG(GlobalConfig.getCurrentLang()));    }    public static ContentValues getCommentNewThreadParams(int aid, String title, String content) {        return getEncryptedCV("action=review&do=post&aid=" + aid                + "&title=" + LightBase64.EncodeBase64(LightNetwork.encodeToHttp(title, "GBK"))                + "&content=" + LightBase64.EncodeBase64(LightNetwork.encodeToHttp(content, "GBK")));    }    public static ContentValues getCommentReplyParams(int rid, String content) {        return getEncryptedCV("action=review&do=reply&rid=" + rid                + "&content=" + LightBase64.EncodeBase64(LightNetwork.encodeToHttp(content, "GBK")));    }}package org.mewx.wenku8.service;import android.app.Service;import android.content.Intent;import android.os.IBinder;import android.widget.Toast;import org.mewx.wenku8.MyApp;import org.mewx.wenku8.global.api.Wenku8Error;import org.mewx.wenku8.util.LightUserSession;import java.util.Timer;import java.util.TimerTask;public class HeartbeatSessionKeeper extends Service {    private int interval = 60 * 10 * 1000;    public void setInterval(int i) {        if(i > 0)            interval = i;    }    @Override    public IBinder onBind(Intent intent) {        return null;    }    @Override    public int onStartCommand(Intent intent, int flags, int startId) {        Timer timer = new Timer();        timer.schedule(new TimerTask() {            @Override            public void run() {                Wenku8Error.ErrorCode err = LightUserSession.heartbeatLogin();                Toast.makeText(MyApp.getContext(), err.toString(), Toast.LENGTH_SHORT).show();            }        }, 0, interval);        return super.onStartCommand(intent, flags, startId);    }}package org.mewx.wenku8.global;import android.content.ContentValues;import android.content.Context;import android.graphics.Bitmap;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.util.Log;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;import com.nostra13.universalimageloader.core.DisplayImageOptions;import com.nostra13.universalimageloader.core.ImageLoader;import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;import org.mewx.wenku8.MyApp;import org.mewx.wenku8.R;import org.mewx.wenku8.global.api.Wenku8API;import org.mewx.wenku8.util.LightCache;import org.mewx.wenku8.util.LightNetwork;import org.mewx.wenku8.util.LightTool;import org.mewx.wenku8.util.SaveFileMigration;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.util.ArrayList;@SuppressWarnings({"UnusedDeclaration"})public class GlobalConfig {    public static final String blogPageUrl = "https:    public static final String versionCheckUrl = "https:    public static final String noticeCheckSc = "https:    public static final String noticeCheckTc = "https:    public static final String saveFolderName = "saves";    public static final String imgsSaveFolderName = "imgs";    public static final String customFolderName = "custom";    private static final String saveSearchHistoryFileName = "search_history.wk8";    private static final String saveReadSavesFileName = "read_saves.wk8";    private static final String saveReadSavesV1FileName = "read_saves_v1.wk8";    private static final String saveLocalBookshelfFileName = "bookshelf_local.wk8";    private static final String saveSetting = "settings.wk8";    private static final String saveUserAccountFileName = "cert.wk8";     private static final String saveUserAvatarFileName = "avatar.jpg";    private static final String saveNoticeString = "notice.wk8";     private static int maxSearchHistory = 20;     public static final String UNKNOWN = "Unknown";    private static boolean lookupInternalStorageOnly = false;    private static boolean isInBookshelf = false;    private static boolean isInLatest = false;    private static boolean doLoadImage = true;    private static boolean externalStoragePathAvailable = true;    private static Wenku8API.LANG currentLang = Wenku8API.LANG.SC;    public static String pathPickedSave;     private static ArrayList<String> searchHistory = null;    private static ArrayList<ReadSaves> readSaves = null;     private static ArrayList<Integer> bookshelf = null;    private static ArrayList<ReadSavesV1> readSavesV1 = null;     private static ContentValues allSetting = null;    public static class ReadSaves {         public int cid;        public int pos;         public int height;     }    public static class ReadSavesV1 {         public int aid;        public int vid;        public int cid;        public int lineId;        public int wordId;    }    public enum SettingItems {        version,         language,        menu_bg_id,         menu_bg_path,         reader_font_path,         reader_font_size,         reader_line_distance,         reader_paragraph_distance,         reader_paragraph_edge_distance,         reader_background_path,     }    public static void setCurrentLang(Wenku8API.LANG l) {        currentLang = l;        setToAllSetting(SettingItems.language, currentLang.toString());    }    public static Wenku8API.LANG getCurrentLang() {        String temp = getFromAllSetting(SettingItems.language);        if(temp == null) {            setToAllSetting(SettingItems.language, currentLang.toString());        }        else if(!temp.equals(currentLang.toString())) {            if(temp.equals(Wenku8API.LANG.SC.toString()))                currentLang = Wenku8API.LANG.SC;            else if(temp.equals(Wenku8API.LANG.TC.toString()))                currentLang = Wenku8API.LANG.TC;            else                currentLang = Wenku8API.LANG.SC;        }        return currentLang;    }    public static void initImageLoader(Context context) {        UnlimitedDiscCache localUnlimitedDiscCache = new UnlimitedDiscCache(                new File(GlobalConfig.getDefaultStoragePath() + "cache"),                new File(context.getCacheDir() + File.separator + "imgs"));        DisplayImageOptions localDisplayImageOptions = new DisplayImageOptions.Builder()                .resetViewBeforeLoading(true)                .cacheOnDisk(true)                .cacheInMemory(true)                .bitmapConfig(Bitmap.Config.RGB_565)                .resetViewBeforeLoading(true)                .displayer(new FadeInBitmapDisplayer(250)).build();        ImageLoaderConfiguration localImageLoaderConfiguration = new ImageLoaderConfiguration.Builder(context)                .diskCache(localUnlimitedDiscCache)                .defaultDisplayImageOptions(localDisplayImageOptions).build();        ImageLoader.getInstance().init(localImageLoaderConfiguration);    }    public static String getOpensourceLicense() {        InputStream is = MyApp.getContext().getResources().openRawResource(R.raw.license);        BufferedReader reader = new BufferedReader(new InputStreamReader(is));        StringBuilder sb = new StringBuilder();        String line;        try {            while ((line = reader.readLine()) != null) {                sb.append(line).append("\n");            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                is.close();            } catch (IOException e) {                e.printStackTrace();            }        }        return sb.toString();    }    public static void setExternalStoragePathAvailable(boolean available) {        externalStoragePathAvailable = available;    }    public static String getDefaultStoragePath() {        if (lookupInternalStorageOnly || !externalStoragePathAvailable) {            return SaveFileMigration.getInternalSavePath();        }        return SaveFileMigration.getExternalStoragePath();    }    public static String getBackupStoragePath() {        String internalPath = SaveFileMigration.getInternalSavePath();        return getDefaultStoragePath().equals(internalPath) ?                SaveFileMigration.getExternalStoragePath() : internalPath;    }    public static boolean doCacheImage() {        return doLoadImage;     }    public static int getShowTextSize() {        return 18;     }    public static int getShowTextPaddingTop() {        return 48;     }    public static int getShowTextPaddingLeft() {        return 32;     }    public static int getShowTextPaddingRight() {        return 32;     }    public static int getTextLoadWay() {        return 2;    }    public static String getFirstFullSaveFilePath() {        return getDefaultStoragePath() + saveFolderName + File.separator;    }    public static String getSecondFullSaveFilePath() {        return getBackupStoragePath() + saveFolderName + File.separator;    }    public static String getFirstFullUserAccountSaveFilePath() {        return getFirstFullSaveFilePath() + saveUserAccountFileName;    }    public static String getSecondFullUserAccountSaveFilePath() {        return getSecondFullSaveFilePath() + saveUserAccountFileName;    }    public static String getFirstUserAvatarSaveFilePath() {        return getFirstFullSaveFilePath() + saveUserAvatarFileName;    }    public static String getSecondUserAvatarSaveFilePath() {        return getSecondFullSaveFilePath() + saveUserAvatarFileName;    }    public static String generateImageFileNameByURL(String url) {        String[] s = url.split("/");        StringBuilder result = new StringBuilder();        boolean canStart = false;        for (String temp : s) {            if (!canStart && temp.contains("."))                canStart = true;             else if (canStart)                result.append(temp);        }        return result.toString();    }    @NonNull    private static String loadFullSaveFileContent(@NonNull String FileName) {        String h = "";        if (LightCache.testFileExist(getDefaultStoragePath() + saveFolderName + File.separator + FileName)) {            try {                byte[] b = LightCache.loadFile(getDefaultStoragePath() + saveFolderName + File.separator + FileName);                if(b == null) return "";                h = new String(b, "UTF-8");            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }        } else if (LightCache.testFileExist(getBackupStoragePath() + saveFolderName + File.separator + FileName)) {            try {                byte[] b = LightCache.loadFile(getBackupStoragePath() + saveFolderName + File.separator + FileName);                if(b == null) return "";                h = new String(b, "UTF-8");            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }        }        return h;    }    private static boolean writeFullSaveFileContent(String FileName, @NonNull String s) {        String path = "", fileName = FileName;        if (FileName.contains(File.separator)) {            path = FileName.substring(0, FileName.lastIndexOf(File.separator));            fileName = FileName.substring(FileName.lastIndexOf(File.separator)                    + File.separator.length(), FileName.length());        }        if (!LightCache.saveFile(getDefaultStoragePath() + saveFolderName + File.separator + path, fileName, s.getBytes(), true))             return LightCache.saveFile(getBackupStoragePath() + saveFolderName                    + File.separator + path, fileName, s.getBytes(), true);        return true;    }    @NonNull    public static String loadFullFileFromSaveFolder(String subFolderName, String fileName) {        return loadFullSaveFileContent(subFolderName + File.separator                + fileName);    }    public static boolean writeFullFileIntoSaveFolder(String subFolderName, String fileName, String s) {        return writeFullSaveFileContent(subFolderName + File.separator                + fileName, s);    }    public static void loadLocalBookShelf() {        bookshelf = new ArrayList<>();        String h = loadFullSaveFileContent(saveLocalBookshelfFileName);        String[] p = h.split("\\|\\|");         for (String t : p) {            if (t.equals(""))                continue;            bookshelf.add(Integer.valueOf(t));        }    }    public static void writeLocalBookShelf() {        if (bookshelf == null)            loadLocalBookShelf();        String s = "";        for (int i = 0; i < bookshelf.size(); i++) {            if (i != 0)                s += "||";            s += bookshelf.get(i);        }        writeFullSaveFileContent(saveLocalBookshelfFileName, s);    }    public static void addToLocalBookshelf(int aid) {        if (bookshelf == null)            loadLocalBookShelf();        if (bookshelf.indexOf(aid) == -1)            bookshelf.add(0, aid);         writeLocalBookShelf();    }    public static void removeFromLocalBookshelf(int aid) {        if (bookshelf == null) {            loadLocalBookShelf();        }        int i = bookshelf.indexOf(aid);        if (i != -1) {            bookshelf.remove(i);        }        writeLocalBookShelf();    }    public static ArrayList<Integer> getLocalBookshelfList() {        if (bookshelf == null)            loadLocalBookShelf();        return bookshelf;    }    public static boolean testInLocalBookshelf(int aid) {        if (bookshelf == null) {            loadLocalBookShelf();        }        return bookshelf.contains(aid);    }    public static void moveBookToTheTopOfBookshelf(int aid) {        int i = bookshelf.indexOf(aid);        if (i == -1) {            return;        }        bookshelf.remove(i);        bookshelf.add(0, aid);        writeLocalBookShelf();    }    public static boolean testInBookshelf() {        return isInBookshelf;    }    public static void EnterBookshelf() {        isInBookshelf = true;    }    public static void LeaveBookshelf() {        isInBookshelf = false;    }    public static boolean testInLatest() {        return isInLatest;    }    public static void EnterLatest() {        isInLatest = true;    }    public static void LeaveLatest() {        isInLatest = false;    }    public static void readSearchHistory() {        searchHistory = new ArrayList<>();        String h = loadFullSaveFileContent(saveSearchHistoryFileName);        int i = 0, temp;        while (true) {            temp = h.indexOf("[", i);             if (temp == -1)                break;            i = temp + 1;            temp = h.indexOf("]", i);             if (temp == -1)                break;            searchHistory.add(h.substring(i, temp));        }    }    public static void writeSearchHistory() {        StringBuilder temp = new StringBuilder();        for (int i = 0; i < searchHistory.size(); i++) {            temp.append("[").append(searchHistory.get(i)).append("]");        }        writeFullSaveFileContent(saveSearchHistoryFileName, temp.toString());    }    public static ArrayList<String> getSearchHistory() {        if (searchHistory == null)            readSearchHistory();        return searchHistory;    }    public static void addSearchHistory(String record) {        if (searchHistory == null)            readSearchHistory();        if (searchHistory.indexOf("[") != -1)            return;         while(true) {            int pos = searchHistory.indexOf(record);            if(pos < 0)                break;            else                searchHistory.remove(pos);        }        while (searchHistory.size() >= maxSearchHistory)            searchHistory.remove(maxSearchHistory - 1);         searchHistory.add(0, record);         writeSearchHistory();     }    public static void deleteSearchHistory(String record) {        if (searchHistory == null)            readSearchHistory();        if (searchHistory.indexOf("[") != -1)            return;         while(true) {            int pos = searchHistory.indexOf(record);            if(pos < 0)                break;            else                searchHistory.remove(pos);        }        writeSearchHistory();     }    @Deprecated    public static void onSearchClicked(int index) {        if (index >= searchHistory.size())            return;        String temp = searchHistory.get(index);        searchHistory.remove(index);        searchHistory.add(0, temp);        writeSearchHistory();     }    public static void clearSearchHistory() {        searchHistory = new ArrayList<>();        writeSearchHistory();     }    public static int getMaxSearchHistory( ) {        return maxSearchHistory;    }    public static void setMaxSearchHistory( int size ) {        if(size > 0)            maxSearchHistory = size;    }    public static void loadReadSaves() {        readSaves = new ArrayList<>();        String h = loadFullSaveFileContent(saveReadSavesFileName);        String[] p = h.split("\\|\\|");         for (String temp : p) {            Log.v("MewX", temp);            String[] parts = temp.split(",,");            if (parts.length != 3)                continue;            ReadSaves rs = new ReadSaves();            rs.cid = Integer.valueOf(parts[0]);            rs.pos = Integer.valueOf(parts[1]);            rs.height = Integer.valueOf(parts[2]);            readSaves.add(rs);        }    }    public static void writeReadSaves() {        if (readSaves == null)            loadReadSaves();        StringBuilder t = new StringBuilder();        for (int i = 0; i < readSaves.size(); i++) {            if (i != 0)                t.append("||");            t.append(readSaves.get(i).cid).append(",,")                    .append(readSaves.get(i).pos).append(",,")                    .append(readSaves.get(i).height);        }        writeFullSaveFileContent(saveReadSavesFileName, t.toString());    }    public static void addReadSavesRecord(int c, int p, int h) {        if (p < 100)            return;         if (readSaves == null)            loadReadSaves();        for (int i = 0; i < readSaves.size(); i++) {            if (readSaves.get(i).cid == c) {                readSaves.get(i).pos = p;                readSaves.get(i).height = h;                writeReadSaves();                return;            }        }        ReadSaves rs = new ReadSaves();        rs.cid = c;        rs.pos = p;        rs.height = h;        readSaves.add(rs);        writeReadSaves();    }    public static int getReadSavesRecord(int c, int h) {        if (readSaves == null)            loadReadSaves();        for (int i = 0; i < readSaves.size(); i++) {            if (readSaves.get(i).cid == c) {                return readSaves.get(i).pos;            }        }        return 0;    }    public static void loadReadSavesV1() {        readSavesV1 = new ArrayList<>();        String h = loadFullSaveFileContent(saveReadSavesV1FileName);        String[] p = h.split("\\|\\|");         OutLoop:        for (String temp : p) {            Log.v("MewX", temp);            String[] parts = temp.split(":");             if (parts.length != 5)                continue;            for(String str : parts) if(!LightTool.isInteger(str)) continue OutLoop;            ReadSavesV1 rs = new ReadSavesV1();            rs.aid = Integer.valueOf(parts[0]);            rs.vid = Integer.valueOf(parts[1]);            rs.cid = Integer.valueOf(parts[2]);            rs.lineId = Integer.valueOf(parts[3]);            rs.wordId = Integer.valueOf(parts[4]);            readSavesV1.add(rs);        }    }    public static void writeReadSavesV1() {        if (readSavesV1 == null)            loadReadSavesV1();        StringBuilder t = new StringBuilder();        for (int i = 0; i < readSavesV1.size(); i++) {            if (i != 0)                t.append("||");            t.append(readSavesV1.get(i).aid).append(":")                    .append(readSavesV1.get(i).vid).append(":")                    .append(readSavesV1.get(i).cid).append(":")                    .append(readSavesV1.get(i).lineId).append(":")                    .append(readSavesV1.get(i).wordId);        }        writeFullSaveFileContent(saveReadSavesV1FileName, t.toString());    }    public static void addReadSavesRecordV1(int aid, int vid, int cid, int lineId, int wordId) {        if (readSavesV1 == null)            loadReadSavesV1();        for (int i = 0; i < readSavesV1.size(); i ++) {            if (readSavesV1.get(i).aid == aid) {                readSavesV1.get(i).vid = vid;                readSavesV1.get(i).cid = cid;                readSavesV1.get(i).lineId = lineId;                readSavesV1.get(i).wordId = wordId;                writeReadSavesV1();                return;            }        }        ReadSavesV1 rs = new ReadSavesV1();        rs.aid = aid;        rs.vid = vid;        rs.cid = cid;        rs.lineId = lineId;        rs.wordId = wordId;        readSavesV1.add(rs);        writeReadSavesV1();    }    public static void removeReadSavesRecordV1(int aid) {        if (readSavesV1 == null)            loadReadSavesV1();        int i = 0;        for( ; i < readSavesV1.size(); i ++) {            if(readSavesV1.get(i).aid == aid) break;        }        if(i < readSavesV1.size()) readSavesV1.remove(i);        writeReadSavesV1();    }    @Nullable    public static ReadSavesV1 getReadSavesRecordV1(int aid) {        if (readSavesV1 == null)            loadReadSavesV1();        for (int i = 0; i < readSavesV1.size(); i ++) {            if (readSavesV1.get(i).aid == aid) return readSavesV1.get(i);        }        return null;    }    public static void loadAllSetting() {        lookupInternalStorageOnly = SaveFileMigration.migrationCompleted();        allSetting = new ContentValues();        String h = loadFullSaveFileContent(saveSetting);        String[] sets = h.split("\\|\\|\\|\\|");        for(String set : sets) {            String[] temp = set.split("::::");            if(temp.length != 2 || temp[0] == null || temp[0].length() == 0 || temp[1] == null || temp[1].length() == 0) continue;            allSetting.put(temp[0], temp[1]);        }        String version = getFromAllSetting(SettingItems.version);        if(version == null || version.isEmpty()) {            setToAllSetting(SettingItems.version, "1");        }    }    public static void saveAllSetting() {        if(allSetting == null) loadAllSetting();        StringBuilder result = new StringBuilder();        for( String key : allSetting.keySet() ) {            if(!result.toString().equals("")) result.append("||||");            result.append(key).append("::::").append(allSetting.getAsString(key));        }        writeFullSaveFileContent(saveSetting, result.toString());    }    @Nullable    public static String getFromAllSetting(SettingItems name) {        if(allSetting == null) loadAllSetting();        return allSetting.getAsString(name.toString());    }    public static void setToAllSetting(SettingItems name, String value) {        if(allSetting == null) loadAllSetting();        if(name != null && value != null) {            allSetting.remove(name.toString());            allSetting.put(name.toString(), value);            saveAllSetting();        }    }    public static boolean saveNovelContentImage(String url) {        String imgFileName = generateImageFileNameByURL(url);        String defaultFullPath = getFirstFullSaveFilePath() + imgsSaveFolderName + File.separator + imgFileName;        String fallbackFullPath = getSecondFullSaveFilePath() + imgsSaveFolderName + File.separator + imgFileName;        if (!LightCache.testFileExist(defaultFullPath) && !LightCache.testFileExist(fallbackFullPath)) {            byte[] fileContent = LightNetwork.LightHttpDownload(url);            if (fileContent == null)                return false;             return LightCache.saveFile(defaultFullPath, fileContent, true)                    || LightCache.saveFile(fallbackFullPath, fileContent, true);        }        return true;     }    public static String getAvailableNovelContentImagePath(String fileName) {        String defaultFullPath = getFirstFullSaveFilePath() + imgsSaveFolderName + File.separator + fileName;        String fallbackFullPath = getSecondFullSaveFilePath() + imgsSaveFolderName + File.separator + fileName;        if (LightCache.testFileExist(defaultFullPath)) {            return defaultFullPath;        } else if (LightCache.testFileExist(fallbackFullPath)) {            return fallbackFullPath;        } else {            return null;        }    }    public static boolean isNetworkAvailable(Context context) {        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);        if (cm != null) {            NetworkInfo activeNetwork = cm.getActiveNetworkInfo();            return activeNetwork != null;        }        return false;     }    @NonNull    public static String loadSavedNotice() {        return loadFullSaveFileContent(saveNoticeString);    }    public static void writeTheNotice(@NonNull String noticeStr) {        writeFullSaveFileContent(saveNoticeString, noticeStr);    }}package org.mewx.wenku8.fragment;import android.annotation.SuppressLint;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Point;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TableRow;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.ActionBarDrawerToggle;import androidx.appcompat.widget.Toolbar;import androidx.drawerlayout.widget.DrawerLayout;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentActivity;import com.afollestad.materialdialogs.MaterialDialog;import com.afollestad.materialdialogs.StackingBehavior;import com.afollestad.materialdialogs.Theme;import com.google.firebase.analytics.FirebaseAnalytics;import com.makeramen.roundedimageview.RoundedImageView;import org.mewx.wenku8.R;import org.mewx.wenku8.activity.MainActivity;import org.mewx.wenku8.activity.UserInfoActivity;import org.mewx.wenku8.activity.UserLoginActivity;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.util.LightCache;import org.mewx.wenku8.util.LightTool;import org.mewx.wenku8.util.LightUserSession;public class NavigationDrawerFragment extends Fragment {    private static final String TAG = NavigationDrawerFragment.class.getSimpleName();    private FirebaseAnalytics mFirebaseAnalytics;    private View mFragmentContainerView;    private ImageView bgImage;    private MainActivity mainActivity = null;    private DrawerLayout mDrawerLayout;    private ActionBarDrawerToggle mActionBarDrawerToggle;    private TextView tvUserName;    private RoundedImageView rivUserAvatar;    private boolean fakeDarkSwitcher = false;    public NavigationDrawerFragment() {    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        return inflater.inflate(R.layout.layout_main_menu, container, false);    }    private View.OnClickListener generateNavigationButtonOnClickListener(            @NonNull MainActivity.FragmentMenuOption targetFragment, @NonNull Fragment fragment) {        return v -> {            if (mainActivity.getCurrentFragment() == targetFragment) {                return;            }            clearAllButtonColor();            setHighLightButton(targetFragment);            mainActivity.setCurrentFragment(targetFragment);            mainActivity.changeFragment(fragment);            closeDrawer();            Bundle bundle = new Bundle();            bundle.putString(FirebaseAnalytics.Param.SCREEN_NAME, fragment.getClass().getSimpleName());            bundle.putString(FirebaseAnalytics.Param.SCREEN_CLASS, fragment.getClass().getSimpleName());            mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SCREEN_VIEW, bundle);        };    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        try {            mainActivity.findViewById(R.id.main_menu_rklist).setOnClickListener(                    generateNavigationButtonOnClickListener(                            MainActivity.FragmentMenuOption.RKLIST, new RKListFragment())            );            mainActivity.findViewById(R.id.main_menu_latest).setOnClickListener(                    generateNavigationButtonOnClickListener(                            MainActivity.FragmentMenuOption.LATEST, new LatestFragment())            );            mainActivity.findViewById(R.id.main_menu_fav).setOnClickListener(                    generateNavigationButtonOnClickListener(                            MainActivity.FragmentMenuOption.FAV, new FavFragment())            );            mainActivity.findViewById(R.id.main_menu_config).setOnClickListener(                    generateNavigationButtonOnClickListener(                            MainActivity.FragmentMenuOption.CONFIG, new ConfigFragment())            );            mainActivity.findViewById(R.id.main_menu_open_source).setOnClickListener(v -> {                        FragmentActivity fragmentActivity = getActivity();                        if (fragmentActivity == null) return;                        new MaterialDialog.Builder(fragmentActivity)                                .theme(Theme.LIGHT)                                .title(R.string.main_menu_statement)                                .content(GlobalConfig.getOpensourceLicense())                                .stackingBehavior(StackingBehavior.ALWAYS)                                .positiveColorRes(R.color.dlgPositiveButtonColor)                                .positiveText(R.string.dialog_positive_known)                                .show();                    }            );            mainActivity.findViewById(R.id.main_menu_dark_mode_switcher).setOnClickListener(v -> openOrCloseDarkMode());        } catch (NullPointerException e) {            Toast.makeText(mainActivity, "NullPointerException in onActivityCreated();", Toast.LENGTH_SHORT).show();            e.printStackTrace();        }        FragmentActivity activity = getActivity();        if (activity != null) {            rivUserAvatar = activity.findViewById(R.id.user_avatar);            tvUserName = activity.findViewById(R.id.user_name);        }        View.OnClickListener ocl = v -> {            if(!LightUserSession.getLogStatus() && GlobalConfig.isNetworkAvailable(getActivity())) {                if(!LightUserSession.isUserInfoSet()) {                    Intent intent = new Intent(getActivity(), UserLoginActivity.class);                    startActivity(intent);                }                else {                    if(LightUserSession.aiui.getStatus() == AsyncTask.Status.FINISHED) {                        Toast.makeText(getActivity(), "Relogged.", Toast.LENGTH_SHORT).show();                        LightUserSession.aiui = new LightUserSession.AsyncInitUserInfo();                        LightUserSession.aiui.execute();                    }                }            }            else if(!GlobalConfig.isNetworkAvailable(getActivity())) {                Toast.makeText(getActivity(), getResources().getString(R.string.system_network_error), Toast.LENGTH_SHORT).show();            }            else {                Intent intent = new Intent(getActivity(), UserInfoActivity.class);                startActivity(intent);            }        };        rivUserAvatar.setOnClickListener(ocl);        tvUserName.setOnClickListener(ocl);        if(activity != null && !GlobalConfig.isNetworkAvailable(activity)) {            clearAllButtonColor();            setHighLightButton(MainActivity.FragmentMenuOption.FAV);            mainActivity.setCurrentFragment(MainActivity.FragmentMenuOption.FAV);            mainActivity.changeFragment(new FavFragment());        }        else {            clearAllButtonColor();            setHighLightButton(mainActivity.getCurrentFragment());            mainActivity.changeFragment(new LatestFragment());        }        if (activity != null) {            bgImage = activity.findViewById(R.id.bg_img);            updateMenuBackground();        }    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    public void setup(int fragmentId, DrawerLayout drawerLayout, Toolbar toolbar) {        mainActivity = (MainActivity) getActivity();        if (mainActivity == null)            Toast.makeText(getActivity(), "mainActivity == null !!! in setup()", Toast.LENGTH_SHORT).show();        mFirebaseAnalytics = FirebaseAnalytics.getInstance(mainActivity);        mFragmentContainerView = mainActivity.findViewById(fragmentId);        mDrawerLayout = drawerLayout;        mActionBarDrawerToggle = new ActionBarDrawerToggle(mainActivity, mDrawerLayout, toolbar, R.string.drawer_open, R.string.drawer_close) {            @Override            public void onDrawerClosed(View drawerView) {                super.onDrawerClosed(drawerView);                if (!isAdded()) return;                mainActivity.invalidateOptionsMenu();            }            @Override            public void onDrawerOpened(View drawerView) {                super.onDrawerOpened(drawerView);                if (!isAdded()) return;                mainActivity.invalidateOptionsMenu();                updateNavigationBar();            }        };        mDrawerLayout.post(() -> mActionBarDrawerToggle.syncState());        mDrawerLayout.addDrawerListener(mActionBarDrawerToggle);        updateNavigationBar();    }    private void clearOneButtonColor(int iconId, int textId, int backgroundId) {        ImageButton imageButton = mainActivity.findViewById(iconId);        if (imageButton != null) {            imageButton.setColorFilter(getResources().getColor(R.color.menu_text_color));        }        TextView textView = mainActivity.findViewById(textId);        if (textView != null) {            textView.setTextColor(getResources().getColor(R.color.menu_text_color));        }        TableRow tableRow = mainActivity.findViewById(backgroundId);        if (tableRow != null) {            tableRow.setBackground(getResources().getDrawable(R.drawable.btn_menu_item));        }    }    private void clearAllButtonColor() {        clearOneButtonColor(R.id.main_menu_ic_rklist, R.id.main_menu_text_rklist, R.id.main_menu_rklist);        clearOneButtonColor(R.id.main_menu_ic_latest, R.id.main_menu_text_latest, R.id.main_menu_latest);        clearOneButtonColor(R.id.main_menu_ic_fav, R.id.main_menu_text_fav, R.id.main_menu_fav);        clearOneButtonColor(R.id.main_menu_ic_config, R.id.main_menu_text_config, R.id.main_menu_config);    }    @SuppressLint("NewApi")    private void setHighLightButton(int iconId, int textId, int backgroundId) {        ImageButton icon = mainActivity.findViewById(iconId);        if (icon != null) {            icon.setColorFilter(getResources().getColor(R.color.menu_text_color_selected));        }        TextView textView = mainActivity.findViewById(textId);        if (textView != null) {            textView.setTextColor(getResources().getColor(R.color.menu_item_white));        }        TableRow tableRow = mainActivity.findViewById(backgroundId);        if (tableRow != null) {            tableRow.setBackground(getResources().getDrawable(R.drawable.btn_menu_item_selected));        }    }    private void setHighLightButton(MainActivity.FragmentMenuOption f) {        switch (f) {            case RKLIST:                setHighLightButton(R.id.main_menu_ic_rklist, R.id.main_menu_text_rklist, R.id.main_menu_rklist);                break;            case LATEST:                setHighLightButton(R.id.main_menu_ic_latest, R.id.main_menu_text_latest, R.id.main_menu_latest);                break;            case FAV:                setHighLightButton(R.id.main_menu_ic_fav, R.id.main_menu_text_fav, R.id.main_menu_fav);                break;            case CONFIG:                setHighLightButton(R.id.main_menu_ic_config, R.id.main_menu_text_config, R.id.main_menu_config);                break;        }    }    private void openOrCloseDarkMode() {        TextView darkModeSwitcherText = mainActivity.findViewById(R.id.main_menu_dark_mode_switcher);        if (darkModeSwitcherText != null) {            darkModeSwitcherText.setTextColor(getResources().getColor(                    fakeDarkSwitcher ? R.color.menu_text_color : R.color.menu_text_color_selected            ));            darkModeSwitcherText.setBackground(getResources().getDrawable(                    fakeDarkSwitcher ?R.drawable.btn_menu_item :R.drawable.btn_menu_item_selected            ));        }        fakeDarkSwitcher = !fakeDarkSwitcher;        Toast.makeText(getActivity(), "夜间模式到阅读界面去试试~", Toast.LENGTH_SHORT).show();    }    private void updateNavigationBar() {        if (Build.VERSION.SDK_INT < 19) {            return;        }        FragmentActivity activity = getActivity();        Point navBar = LightTool.getNavigationBarSize(getActivity());        LinearLayout ll = mainActivity.findViewById(R.id.main_menu_bottom_layout);        if (activity != null && navBar.y == 0) {            ll.setPadding(0, 0, 0, 0);         }        else if (activity != null && (navBar.y < 10 || navBar.y >= LightTool.getAppUsableScreenSize(activity).y)) {            ll.setPadding(0, 0, 0, LightTool.getAppUsableScreenSize(activity).y / 10);        }        else {            ll.setPadding(0, 0, 0, navBar.y);         }    }    @Override    public void onResume() {        super.onResume();        if(LightUserSession.isUserInfoSet() && !tvUserName.getText().toString().equals(LightUserSession.getUsernameOrEmail())                && (LightCache.testFileExist(GlobalConfig.getFirstUserAvatarSaveFilePath())                || LightCache.testFileExist(GlobalConfig.getSecondUserAvatarSaveFilePath()))) {            tvUserName.setText(LightUserSession.getUsernameOrEmail());            String avatarPath;            if(LightCache.testFileExist(GlobalConfig.getFirstUserAvatarSaveFilePath()))                avatarPath = GlobalConfig.getFirstUserAvatarSaveFilePath();            else                avatarPath = GlobalConfig.getSecondUserAvatarSaveFilePath();            BitmapFactory.Options options = new BitmapFactory.Options();            options.inSampleSize = 2;            Bitmap bm = BitmapFactory.decodeFile(avatarPath, options);            if(bm != null)                rivUserAvatar.setImageBitmap(bm);        }        else if(!LightUserSession.isUserInfoSet()) {            tvUserName.setText(getResources().getString(R.string.main_menu_not_login));            rivUserAvatar.setImageDrawable(getResources().getDrawable(R.drawable.ic_noavatar));        }        updateMenuBackground();    }    private void updateMenuBackground() {        String settingMenuBgId = GlobalConfig.getFromAllSetting(GlobalConfig.SettingItems.menu_bg_id);        if(settingMenuBgId != null) {            switch (settingMenuBgId) {                case "0":                    Bitmap bmMenuBackground;                    try {                        bmMenuBackground = BitmapFactory.decodeFile(GlobalConfig.getFromAllSetting(GlobalConfig.SettingItems.menu_bg_path));                    } catch (OutOfMemoryError oome) {                        try {                            BitmapFactory.Options options = new BitmapFactory.Options();                            options.inSampleSize = 2;                            bmMenuBackground = BitmapFactory.decodeFile(GlobalConfig.getFromAllSetting(GlobalConfig.SettingItems.menu_bg_path), options);                            if(bmMenuBackground == null) throw new Exception("PictureLoadFailureException");                        } catch(Exception e) {                            e.printStackTrace();                            Toast.makeText(getActivity(), "Exception: " + e.toString() + "\n可能的原因有：图片不在内置SD卡；图片格式不正确；图片像素尺寸太大，请使用小一点的图，谢谢，此功能为试验性功能；", Toast.LENGTH_SHORT).show();                            bgImage.setImageDrawable(getResources().getDrawable(R.drawable.bg_avatar_04));                            return;                        }                    }                    bgImage.setImageBitmap(bmMenuBackground);                    break;                case "1":                    bgImage.setImageDrawable(getResources().getDrawable(R.drawable.bg_avatar_01));                    break;                case "2":                    bgImage.setImageDrawable(getResources().getDrawable(R.drawable.bg_avatar_02));                    break;                case "3":                    bgImage.setImageDrawable(getResources().getDrawable(R.drawable.bg_avatar_03));                    break;                case "4":                    bgImage.setImageDrawable(getResources().getDrawable(R.drawable.bg_avatar_04));                    break;                case "5":                    bgImage.setImageDrawable(getResources().getDrawable(R.drawable.bg_avatar_05));                    break;            }        }    }    public void openDrawer() {        mDrawerLayout.openDrawer(mFragmentContainerView);    }    public void closeDrawer() {        mDrawerLayout.closeDrawer(mFragmentContainerView);    }    @Override    public void onDetach() {        super.onDetach();    }    public boolean isDrawerOpen() {        return mDrawerLayout != null && mDrawerLayout.isDrawerOpen(mFragmentContainerView);    }    @Override    public void onSaveInstanceState(@NonNull Bundle outState) {        super.onSaveInstanceState(outState);    }}package org.mewx.wenku8.fragment;import android.content.ContentValues;import android.content.Intent;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.core.app.ActivityCompat;import androidx.core.app.ActivityOptionsCompat;import androidx.core.util.Pair;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;import com.afollestad.materialdialogs.GravityEnum;import com.afollestad.materialdialogs.MaterialDialog;import com.afollestad.materialdialogs.Theme;import org.mewx.wenku8.MyApp;import org.mewx.wenku8.R;import org.mewx.wenku8.activity.NovelInfoActivity;import org.mewx.wenku8.adapter.NovelItemAdapterUpdate;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.global.api.NovelItemInfoUpdate;import org.mewx.wenku8.global.api.NovelItemMeta;import org.mewx.wenku8.global.api.VolumeList;import org.mewx.wenku8.global.api.Wenku8API;import org.mewx.wenku8.global.api.Wenku8Error;import org.mewx.wenku8.global.api.Wenku8Parser;import org.mewx.wenku8.listener.MyItemClickListener;import org.mewx.wenku8.listener.MyItemLongClickListener;import org.mewx.wenku8.listener.MyOptionClickListener;import org.mewx.wenku8.util.LightCache;import org.mewx.wenku8.util.LightNetwork;import org.mewx.wenku8.util.LightTool;import org.mewx.wenku8.util.LightUserSession;import java.io.File;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Objects;import java.util.regex.Matcher;import java.util.regex.Pattern;public class FavFragment extends Fragment implements MyItemClickListener, MyItemLongClickListener, MyOptionClickListener {    private SwipeRefreshLayout mSwipeRefreshLayout;    private RecyclerView mRecyclerView = null;    private int timecount;    private final List<Integer> listNovelItemAid = new ArrayList<>();     private final List<NovelItemInfoUpdate> listNovelItemInfo = new ArrayList<>();     public static FavFragment newInstance() {        return new FavFragment();    }    public FavFragment() {    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);    }    @Override    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View rootView = inflater.inflate(R.layout.fragment_fav, container, false);        mSwipeRefreshLayout = rootView.findViewById(R.id.swipe_refresh_layout);        timecount = 0;        LinearLayoutManager mLayoutManager = new LinearLayoutManager(getActivity());        mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);        mRecyclerView = rootView.findViewById(R.id.novel_item_list);        mRecyclerView.setHasFixedSize(false);         mRecyclerView.setItemAnimator(new DefaultItemAnimator());        mRecyclerView.setLayoutManager(mLayoutManager);        mSwipeRefreshLayout.setColorSchemeColors(getResources().getColor(R.color.myAccentColor));        mSwipeRefreshLayout.setOnRefreshListener(() -> new AsyncLoadAllFromCloud().execute(1));        return rootView;    }    @Override    public void onItemClick(View view, int position) {        Intent intent = new Intent(getActivity(), NovelInfoActivity.class);        intent.putExtra("aid", listNovelItemAid.get(position));        intent.putExtra("from", "fav");        intent.putExtra("title", ((TextView) view.findViewById(R.id.novel_title)).getText());        GlobalConfig.moveBookToTheTopOfBookshelf(listNovelItemAid.get(position));         if(Build.VERSION.SDK_INT < 21) {            startActivity(intent);        }        else {            ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity(),                    Pair.create(view.findViewById(R.id.novel_cover), "novel_cover"),                    Pair.create(view.findViewById(R.id.novel_title), "novel_title"));            ActivityCompat.startActivity(getActivity(), intent, options.toBundle());        }    }    @Override    public void onOptionButtonClick(View view, final int position) {        new MaterialDialog.Builder(getActivity())                .theme(Theme.LIGHT)                .title(R.string.dialog_title_choose_delete_option)                .backgroundColorRes(R.color.dlgBackgroundColor)                .titleColorRes(R.color.dlgTitleColor)                .negativeText(R.string.dialog_negative_pass)                .negativeColorRes(R.color.dlgNegativeButtonColor)                .itemsGravity(GravityEnum.CENTER)                .items(R.array.cleanup_option)                .itemsCallback(new MaterialDialog.ListCallback() {                    @Override                    public void onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {                        switch (which) {                            case 0:                                new MaterialDialog.Builder(getActivity())                                        .callback(new MaterialDialog.ButtonCallback() {                                            @Override                                            public void onPositive(MaterialDialog dialog) {                                                super.onPositive(dialog);                                                int aid = listNovelItemAid.get(position);                                                String novelFullVolume = GlobalConfig.loadFullFileFromSaveFolder("intro", aid + "-volume.xml");                                                if(novelFullVolume.isEmpty()) return;                                                List<VolumeList> listVolume = Wenku8Parser.getVolumeList(novelFullVolume);                                                if(listVolume.isEmpty()) return;                                                cleanVolumesCache(listVolume);                                            }                                        })                                        .theme(Theme.LIGHT)                                        .content(R.string.dialog_sure_to_clear_cache)                                        .contentGravity(GravityEnum.CENTER)                                        .positiveText(R.string.dialog_positive_sure)                                        .negativeText(R.string.dialog_negative_preferno)                                        .show();                                break;                            case 1:                                new MaterialDialog.Builder(getActivity())                                        .callback(new MaterialDialog.ButtonCallback() {                                            @Override                                            public void onPositive(MaterialDialog dialog) {                                                super.onPositive(dialog);                                                int aid = listNovelItemAid.get(position);                                                listNovelItemAid.remove(position);                                                new AsyncRemoveBookFromCloud().execute(aid);                                                refreshList(timecount ++);                                            }                                        })                                        .theme(Theme.LIGHT)                                        .content(R.string.dialog_content_want_to_delete)                                        .contentGravity(GravityEnum.CENTER)                                        .positiveText(R.string.dialog_positive_sure)                                        .negativeText(R.string.dialog_negative_preferno)                                        .show();                                break;                        }                    }                })                .show();    }    @Override    public void onItemLongClick(View view, int position) {    }    private void cleanVolumesCache(List<VolumeList> listVolume) {        for (VolumeList vl : listVolume) {            vl.cleanLocalCache();        }    }    private void refreshList(int time) {        if(time == 0) {            mSwipeRefreshLayout.setRefreshing(true);            new AsyncLoadAllFromCloud().execute();        }        else {            loadAllLocal();        }    }    private void loadAllLocal() {        int retValue = 0;        boolean datasetChanged = false;        listNovelItemAid.clear();        listNovelItemAid.addAll(GlobalConfig.getLocalBookshelfList());        aids:        for (int j = 0; j < listNovelItemAid.size(); j++) {            int aid = listNovelItemAid.get(j);            for (int i = j; i < listNovelItemInfo.size(); i++) {                final NovelItemInfoUpdate info = listNovelItemInfo.get(i);                if (info.aid == aid) {                    if (i == j) continue aids;                    listNovelItemInfo.remove(i);                    listNovelItemInfo.add(j, info);                    datasetChanged = true;                    continue aids;                }            }            final String xml = GlobalConfig.loadFullFileFromSaveFolder("intro", aid + "-intro.xml");            NovelItemInfoUpdate info;            if (xml.isEmpty()) {                retValue = -1;                info = new NovelItemInfoUpdate(aid);            }            else {                info = NovelItemInfoUpdate.convertFromMeta(Objects.requireNonNull(Wenku8Parser.parseNovelFullMeta(xml)));            }            datasetChanged = true;            listNovelItemInfo.add(j, info);        }        if (listNovelItemInfo.size() > listNovelItemAid.size()) {            listNovelItemInfo.subList(listNovelItemAid.size(), listNovelItemInfo.size()).clear();        }        if(retValue != 0) {            Toast.makeText(getActivity(), getResources().getString(R.string.bookshelf_intro_load_failed), Toast.LENGTH_SHORT).show();        }        if (mRecyclerView.getAdapter() == null) {            NovelItemAdapterUpdate adapter = new NovelItemAdapterUpdate();            adapter.refreshDataset(listNovelItemInfo);            adapter.setOnItemClickListener(FavFragment.this);            adapter.setOnDeleteClickListener(FavFragment.this);            adapter.setOnItemLongClickListener(FavFragment.this);            mRecyclerView.setAdapter(adapter);        }        if (datasetChanged) {            mRecyclerView.getAdapter().notifyDataSetChanged();        }        mSwipeRefreshLayout.setRefreshing(false);    }    private class AsyncLoadAllFromCloud extends AsyncTask<Integer, Integer, Wenku8Error.ErrorCode> {        private MaterialDialog md;        private boolean isLoading;         private boolean forceLoad = false;        @Override        protected void onPreExecute() {            super.onPreExecute();            loadAllLocal();            isLoading = true;            md = new MaterialDialog.Builder(getActivity())                    .theme(Theme.LIGHT)                    .content(R.string.dialog_content_sync)                    .progress(false, 1, true)                    .cancelable(true)                    .cancelListener(dialog -> {                        isLoading = false;                        md.dismiss();                    })                    .show();            md.setProgress(0);            md.setMaxProgress(0);            md.show();        }        @Override        protected Wenku8Error.ErrorCode doInBackground(Integer... params) {            if(params != null && params.length != 0) forceLoad = true;            byte[] b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getBookshelfListAid(GlobalConfig.getCurrentLang()));            if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;            if(LightTool.isInteger(new String(b))) {                if(Wenku8Error.getSystemDefinedErrorCode(Integer.parseInt(new String(b))) == Wenku8Error.ErrorCode.SYSTEM_4_NOT_LOGGED_IN) {                    Wenku8Error.ErrorCode temp = LightUserSession.doLoginFromFile();                    if(temp != Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) return temp;                     b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getBookshelfListAid(GlobalConfig.getCurrentLang()));                    if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                }            }            List<Integer> listResultList = new ArrayList<>();             try {                Log.d("MewX", new String(b, "UTF-8"));                Pattern p = Pattern.compile("aid=\"(.*)\"");                 Matcher m = p.matcher(new String(b, "UTF-8"));                while (m.find()) {                    try {                        listResultList.add(Integer.valueOf(m.group(1)));                    } catch (NumberFormatException e) {                        Log.e(FavFragment.class.getSimpleName(), "Found and skipped broken aid.");                    }                }            } catch (UnsupportedEncodingException e) {                e.printStackTrace();            }            List<Integer> listAll = new ArrayList<>();            listAll.addAll(GlobalConfig.getLocalBookshelfList());             listAll.addAll(listResultList);            List<Integer> localOnly = new ArrayList<>();            localOnly.addAll(listAll);            localOnly.removeAll(listResultList);             List<Integer> listDiff = new ArrayList<>();            listDiff.addAll(listAll);            if(!forceLoad) {                listDiff.removeAll(GlobalConfig.getLocalBookshelfList());            }            else {                HashSet<Integer> hs = new HashSet<>(listDiff);                listDiff.clear();                listDiff.addAll(hs);            }            if(listDiff.size() == 0 && localOnly.size() == 0) {                return Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED;            }            int count = 0;            md.setMaxProgress(listDiff.size());            for(Integer aid : listDiff) {                if(!isLoading) return Wenku8Error.ErrorCode.USER_CANCELLED_TASK;                String volumeXml, introXml;                List<VolumeList> vl;                NovelItemMeta ni;                try {                    ContentValues cv = Wenku8API.getNovelIndex(aid, GlobalConfig.getCurrentLang());                    byte[] tempVolumeXml = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, cv);                    if(!isLoading) return Wenku8Error.ErrorCode.USER_CANCELLED_TASK;                    if(tempVolumeXml == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                    volumeXml = new String(tempVolumeXml, "UTF-8");                    if(!isLoading) return Wenku8Error.ErrorCode.USER_CANCELLED_TASK;                    byte[] tempIntroXml = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL,                            Wenku8API.getNovelFullMeta(aid, GlobalConfig.getCurrentLang()));                    if (tempIntroXml == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                    introXml = new String(tempIntroXml, "UTF-8");                    vl = Wenku8Parser.getVolumeList(volumeXml);                    ni = Wenku8Parser.parseNovelFullMeta(introXml);                    if (vl.isEmpty() || ni == null) return Wenku8Error.ErrorCode.XML_PARSE_FAILED;                    if(!isLoading) return Wenku8Error.ErrorCode.USER_CANCELLED_TASK;                    cv = Wenku8API.getNovelFullIntro(ni.aid, GlobalConfig.getCurrentLang());                    byte[] tempFullIntro = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, cv);                    if (tempFullIntro == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                    ni.fullIntro = new String(tempFullIntro, "UTF-8");                    GlobalConfig.writeFullFileIntoSaveFolder("intro", aid + "-volume.xml", volumeXml);                    GlobalConfig.writeFullFileIntoSaveFolder("intro", aid + "-introfull.xml", ni.fullIntro);                    GlobalConfig.writeFullFileIntoSaveFolder("intro", aid + "-intro.xml", introXml);                } catch (Exception e) {                    e.printStackTrace();                }                GlobalConfig.addToLocalBookshelf(aid);                publishProgress(++ count);            }            List<Integer> copy = new ArrayList<>(localOnly);             for(Integer aid : copy) {                b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getAddToBookshelfParams(aid));                if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                try {                    if(LightTool.isInteger(new String(b, "UTF-8"))) {                        Wenku8Error.ErrorCode result = Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(new String(b, "UTF-8")));                        if(result == Wenku8Error.ErrorCode.SYSTEM_6_BOOKSHELF_FULL) {                            return result;                        }                        else if(result == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED || result == Wenku8Error.ErrorCode.SYSTEM_5_ALREADY_IN_BOOKSHELF) {                            localOnly.remove(aid);                         }                    }                } catch (UnsupportedEncodingException e) {                    e.printStackTrace();                }            }            return Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED;        }        @Override        protected void onProgressUpdate(Integer... values) {            super.onProgressUpdate(values);            md.setProgress(values[0]);        }        @Override        protected void onPostExecute(Wenku8Error.ErrorCode errorCode) {            super.onPostExecute(errorCode);            isLoading = false;            md.dismiss();            if(errorCode != Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) {                Toast.makeText(MyApp.getContext(), errorCode.toString(), Toast.LENGTH_SHORT).show();                refreshList(timecount ++);            }            else {                loadAllLocal();            }        }    }    class AsyncRemoveBookFromCloud extends AsyncTask<Integer, Integer, Wenku8Error.ErrorCode> {        MaterialDialog md;        int aid;        @Override        protected void onPreExecute() {            super.onPreExecute();            md = new MaterialDialog.Builder(getActivity())                    .theme(Theme.LIGHT)                    .content(R.string.dialog_content_novel_remove_from_cloud)                    .contentColorRes(R.color.dlgContentColor)                    .progress(true, 0)                    .show();        }        @Override        protected Wenku8Error.ErrorCode doInBackground(Integer... params) {            aid = params[0];            byte[] bytes = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getDelFromBookshelfParams(aid));            if(bytes == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;            String result;            try {                result = new String(bytes, "UTF-8");                Log.d("MewX", result);                if (!LightTool.isInteger(result))                    return Wenku8Error.ErrorCode.RETURNED_VALUE_EXCEPTION;                if(Wenku8Error.getSystemDefinedErrorCode(Integer.parseInt(result)) != Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED                        && Wenku8Error.getSystemDefinedErrorCode(Integer.parseInt(result)) != Wenku8Error.ErrorCode.SYSTEM_4_NOT_LOGGED_IN                        && Wenku8Error.getSystemDefinedErrorCode(Integer.parseInt(result)) != Wenku8Error.ErrorCode.SYSTEM_7_NOVEL_NOT_IN_BOOKSHELF) {                    return Wenku8Error.getSystemDefinedErrorCode(Integer.parseInt(result));                }                else {                    List<VolumeList> listVolume;                    String novelFullVolume;                    novelFullVolume = GlobalConfig.loadFullFileFromSaveFolder("intro", aid + "-volume.xml");                    if(novelFullVolume.isEmpty()) return Wenku8Error.ErrorCode.ERROR_DEFAULT;                    listVolume = Wenku8Parser.getVolumeList(novelFullVolume);                    if(listVolume.isEmpty()) return Wenku8Error.ErrorCode.XML_PARSE_FAILED;                    cleanVolumesCache(listVolume);                    LightCache.deleteFile(GlobalConfig.getFirstFullSaveFilePath(), "intro" + File.separator + aid + "-intro.xml");                    LightCache.deleteFile(GlobalConfig.getFirstFullSaveFilePath(), "intro" + File.separator + aid + "-introfull.xml");                    LightCache.deleteFile(GlobalConfig.getFirstFullSaveFilePath(), "intro" + File.separator + aid + "-volume.xml");                    LightCache.deleteFile(GlobalConfig.getSecondFullSaveFilePath(), "intro" + File.separator + aid + "-intro.xml");                    LightCache.deleteFile(GlobalConfig.getSecondFullSaveFilePath(), "intro" + File.separator + aid + "-introfull.xml");                    LightCache.deleteFile(GlobalConfig.getSecondFullSaveFilePath(), "intro" + File.separator + aid + "-volume.xml");                    GlobalConfig.removeFromLocalBookshelf(aid);                    if (!GlobalConfig.testInLocalBookshelf(aid)) {                         return Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED;                    } else {                        return Wenku8Error.ErrorCode.LOCAL_BOOK_REMOVE_FAILED;                    }                }            } catch (UnsupportedEncodingException e) {                return Wenku8Error.ErrorCode.BYTE_TO_STRING_EXCEPTION;            }        }        @Override        protected void onPostExecute(Wenku8Error.ErrorCode err) {            super.onPostExecute(err);            md.dismiss();            if (err == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) {                Toast.makeText(getActivity(), getResources().getString(R.string.bookshelf_removed), Toast.LENGTH_SHORT).show();                loadAllLocal();            } else {                Toast.makeText(getActivity(), err.toString(), Toast.LENGTH_SHORT).show();            }        }    }    @Override    public void onPause() {        super.onPause();        GlobalConfig.LeaveBookshelf();    }    @Override    public void onResume() {        super.onResume();        GlobalConfig.EnterBookshelf();        refreshList(timecount ++);    }}package org.mewx.wenku8.activity;import android.Manifest;import android.app.Activity;import android.content.Intent;import android.content.pm.PackageManager;import android.content.res.Configuration;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.util.Log;import android.view.Menu;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.fragment.app.Fragment;import androidx.fragment.app.FragmentTransaction;import com.afollestad.materialdialogs.MaterialDialog;import com.afollestad.materialdialogs.Theme;import com.google.firebase.analytics.FirebaseAnalytics;import com.nostra13.universalimageloader.core.ImageLoader;import org.mewx.wenku8.R;import org.mewx.wenku8.async.CheckAppNewVersion;import org.mewx.wenku8.async.UpdateNotificationMessage;import org.mewx.wenku8.fragment.NavigationDrawerFragment;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.global.api.Wenku8API;import org.mewx.wenku8.util.LightCache;import org.mewx.wenku8.util.LightUserSession;import org.mewx.wenku8.util.SaveFileMigration;import java.io.File;import java.io.FileNotFoundException;import java.util.List;import java.util.Locale;import java.util.Timer;import java.util.TimerTask;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.atomic.AtomicBoolean;public class MainActivity extends BaseMaterialActivity {    private static final String TAG = MainActivity.class.getSimpleName();    private static final int EXTERNAL_SAVE_MIGRATION_API = Build.VERSION_CODES.Q;     private static final int REQUEST_WRITE_EXTERNAL = 100;    private static final int REQUEST_READ_EXTERNAL = 101;    private static final int REQUEST_READ_MEDIA_IMAGES = 102;    private static final int REQUEST_READ_EXTERNAL_SAVES = 103;    private static final AtomicBoolean NEW_VERSION_CHECKED = new AtomicBoolean(false);    public enum FragmentMenuOption {        RKLIST, LATEST, FAV, CONFIG    }    private FragmentMenuOption status = FragmentMenuOption.LATEST;    public FragmentMenuOption getCurrentFragment() {        return status;    }    public void setCurrentFragment(FragmentMenuOption f) {        status = f;    }    private NavigationDrawerFragment mNavigationDrawerFragment;    private FirebaseAnalytics mFirebaseAnalytics;    private static Boolean isExit = false;     private void initialApp() {        Locale locale;        switch (GlobalConfig.getCurrentLang()) {            case TC:                locale = Locale.TRADITIONAL_CHINESE;                break;            case SC:            default:                locale = Locale.SIMPLIFIED_CHINESE;                break;        }        Configuration config = new Configuration();        config.locale = locale;        Locale.setDefault(locale);        getBaseContext().getResources().updateConfiguration(config, getBaseContext().getResources().getDisplayMetrics());        if (SaveFileMigration.migrationCompleted()) {            Log.i(TAG, "Save file migration has completed.");        } else {            if (missingPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_WRITE_EXTERNAL);            }        }        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {            if (missingPermission(Manifest.permission.READ_MEDIA_IMAGES)) {                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.READ_MEDIA_IMAGES}, REQUEST_READ_MEDIA_IMAGES);            }        } else {            if (missingPermission(Manifest.permission.READ_EXTERNAL_STORAGE)) {                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_EXTERNAL);            }        }        if (Build.VERSION.SDK_INT >= EXTERNAL_SAVE_MIGRATION_API) {            if (!LightCache.testFileExist(SaveFileMigration.getExternalStoragePath())) {                GlobalConfig.setExternalStoragePathAvailable(false);            }        } else {            LightCache.saveFile(GlobalConfig.getDefaultStoragePath() + "imgs", ".nomedia", "".getBytes(), false);            LightCache.saveFile(GlobalConfig.getDefaultStoragePath() + GlobalConfig.customFolderName, ".nomedia", "".getBytes(), false);            LightCache.saveFile(GlobalConfig.getBackupStoragePath() + "imgs", ".nomedia", "".getBytes(), false);            LightCache.saveFile(GlobalConfig.getBackupStoragePath() + GlobalConfig.customFolderName, ".nomedia", "".getBytes(), false);            GlobalConfig.setExternalStoragePathAvailable(LightCache.testFileExist(SaveFileMigration.getExternalStoragePath() + "imgs" + File.separator + ".nomedia", true));        }        LightUserSession.aiui = new LightUserSession.AsyncInitUserInfo();        LightUserSession.aiui.execute();        GlobalConfig.loadAllSetting();        Wenku8API.NoticeString = GlobalConfig.loadSavedNotice();    }    private void startOldSaveMigration() {        if (Build.VERSION.SDK_INT < EXTERNAL_SAVE_MIGRATION_API || SaveFileMigration.migrationCompleted()                || (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU                && missingPermission(Manifest.permission.READ_EXTERNAL_STORAGE))) {            return;        }        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && SaveFileMigration.migrationEligible()) {            Log.d(TAG, "startOldSaveMigration: Eligible");            new MaterialDialog.Builder(MainActivity.this)                    .theme(Theme.LIGHT)                    .backgroundColorRes(R.color.dlgBackgroundColor)                    .contentColorRes(R.color.dlgContentColor)                    .positiveColorRes(R.color.dlgPositiveButtonColor)                    .neutralColorRes(R.color.dlgNegativeButtonColor)                    .negativeColorRes(R.color.myAccentColor)                    .content(R.string.system_save_need_to_migrate)                    .positiveText(R.string.dialog_positive_upgrade)                    .neutralText(R.string.dialog_negative_pass_for_now)                    .negativeText(R.string.dialog_negative_never)                    .onPositive((unused1, unused2) -> {                        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);                        intent.addCategory(Intent.CATEGORY_DEFAULT);                        startActivityForResult(Intent.createChooser(intent, "Choose directory"), REQUEST_READ_EXTERNAL_SAVES);                    })                    .onNegative((dialog, which) -> SaveFileMigration.markMigrationCompleted())                    .cancelable(false)                    .show();            return;        }        runExternalSaveMigration();    }    private void runExternalSaveMigration() {        MaterialDialog progressDialog = new MaterialDialog.Builder(MainActivity.this)                .theme(Theme.LIGHT)                .content(R.string.system_save_upgrading)                .progress(false, 1, false)                .cancelable(false)                .show();        ExecutorService executor = Executors.newSingleThreadExecutor();        Handler handler = new Handler(Looper.getMainLooper());         executor.execute(() -> {            List<Uri> filesToCopy = SaveFileMigration.generateMigrationPlan();            Bundle saveMigrationFilesTotalParams = new Bundle();            saveMigrationFilesTotalParams.putString("count", "" + filesToCopy.size());            mFirebaseAnalytics.logEvent("save_migration_files_total", saveMigrationFilesTotalParams);            if (filesToCopy.isEmpty()) {                Log.d(TAG, "Empty list of files to copy");                handler.post(progressDialog::dismiss);                SaveFileMigration.markMigrationCompleted();                return;            }            handler.post(() -> progressDialog.setMaxProgress(filesToCopy.size()));            int progress = 0;            int failedFiles = 0;            for (Uri filePath : filesToCopy) {                try {                    String targetFilePath = SaveFileMigration.migrateFile(filePath);                    if (!LightCache.testFileExist(targetFilePath, true)) {                        Log.d(TAG, String.format("Failed migrating: %s (from %s)", targetFilePath, filePath));                        failedFiles++;                    }                } catch (FileNotFoundException e) {                    failedFiles++;                    e.printStackTrace();                }                progress++;                int finalProgress = progress;                handler.post(() -> progressDialog.setProgress(finalProgress));            }            try {                Thread.sleep(2000);            } catch (InterruptedException e) {                throw new RuntimeException(e);            }            int finalFailedFiles = failedFiles;            Bundle saveMigrationFilesFailedParams = new Bundle();            saveMigrationFilesFailedParams.putString("failed", "" + finalFailedFiles);            mFirebaseAnalytics.logEvent("save_migration_files_failed", saveMigrationFilesFailedParams);            handler.post(() -> {                SaveFileMigration.markMigrationCompleted();                progressDialog.dismiss();                new MaterialDialog.Builder(MainActivity.this)                        .theme(Theme.LIGHT)                        .backgroundColorRes(R.color.dlgBackgroundColor)                        .contentColorRes(R.color.dlgContentColor)                        .positiveColorRes(R.color.dlgPositiveButtonColor)                        .content(R.string.system_save_migrated, filesToCopy.size(), finalFailedFiles)                        .positiveText(R.string.dialog_positive_sure)                        .onPositive((unused1, unused2) -> reloadApp())                        .cancelable(false)                        .show();            });        });    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        initMaterialStyle(R.layout.layout_main, HomeIndicatorStyle.HAMBURGER);        initialApp();        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);        if (ImageLoader.getInstance() == null || !ImageLoader.getInstance().isInited()) {            GlobalConfig.initImageLoader(this);        }        startOldSaveMigration();        mNavigationDrawerFragment = (NavigationDrawerFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_drawer);        if (mNavigationDrawerFragment != null) {            mNavigationDrawerFragment.setup(R.id.fragment_drawer, findViewById(R.id.drawer), getToolbar());        }        getToolbar().setOnMenuItemClickListener(item -> {            if (item.getItemId() == R.id.action_search) {                startActivity(new Intent(MainActivity.this, SearchActivity.class));                overridePendingTransition(R.anim.fade_in, R.anim.hold);             }            return true;        });    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        if (!mNavigationDrawerFragment.isDrawerOpen()) {            switch (status) {                case LATEST:                    if (getSupportActionBar() != null)                        getSupportActionBar().setTitle(getResources().getString(R.string.main_menu_latest));                    getMenuInflater().inflate(R.menu.menu_latest, menu);                    break;                case RKLIST:                    if (getSupportActionBar() != null)                        getSupportActionBar().setTitle(getResources().getString(R.string.main_menu_rklist));                    break;                case FAV:                    if (getSupportActionBar() != null)                        getSupportActionBar().setTitle(getResources().getString(R.string.main_menu_fav));                    break;                case CONFIG:                    if (getSupportActionBar() != null)                        getSupportActionBar().setTitle(getResources().getString(R.string.main_menu_config));                    break;            }        } else {            if (getSupportActionBar() != null)                getSupportActionBar().setTitle(getResources().getString(R.string.app_name));        }        return true;    }    public void changeFragment(Fragment targetFragment) {        if (getSupportActionBar() != null) {            if (status == FragmentMenuOption.RKLIST)                getSupportActionBar().setElevation(0);            else                getSupportActionBar().setElevation(getResources().getDimension(R.dimen.toolbar_elevation));        }        getSupportFragmentManager().beginTransaction()                .replace(R.id.container, targetFragment, "fragment")                .setTransitionStyle(FragmentTransaction.TRANSIT_FRAGMENT_FADE)                .commit();    }    @Override    protected void onResume() {        super.onResume();        if (!NEW_VERSION_CHECKED.getAndSet(true)) {            new CheckAppNewVersion(MainActivity.this).execute();            new UpdateNotificationMessage().execute();        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        switch (requestCode) {            case REQUEST_WRITE_EXTERNAL:            case REQUEST_READ_EXTERNAL:                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {                    break;                }            case REQUEST_READ_MEDIA_IMAGES:                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    reloadApp();                } else {                    Toast.makeText(this, getResources().getText(R.string.missing_permission), Toast.LENGTH_LONG).show();                }        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == REQUEST_READ_EXTERNAL_SAVES && resultCode == Activity.RESULT_OK && data != null) {            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {                return;            }            Uri wenku8Uri = data.getData();            String wenku8Path = wenku8Uri.getPath();            if (!wenku8Uri.getLastPathSegment().endsWith("wenku8") || wenku8Path.contains("DCIM") || wenku8Path.contains("Picture")) {                Log.i(TAG, "LastPathSegment: " + wenku8Uri.getLastPathSegment());                Log.i(TAG, "Selected path for save migration doesn't look right: " + wenku8Uri);                Bundle saveMigrationParams = new Bundle();                saveMigrationParams.putString("path", wenku8Path);                saveMigrationParams.putString("valid_path", "false");                mFirebaseAnalytics.logEvent("save_migration_path_selection", saveMigrationParams);                new MaterialDialog.Builder(MainActivity.this)                        .theme(Theme.LIGHT)                        .backgroundColorRes(R.color.dlgBackgroundColor)                        .contentColorRes(R.color.dlgContentColor)                        .positiveColorRes(R.color.dlgPositiveButtonColor)                        .neutralColorRes(R.color.dlgNegativeButtonColor)                        .negativeColorRes(R.color.myAccentColor)                        .content(R.string.dialog_content_wrong_path, wenku8Path.replace("/tree/primary:", "/"))                        .positiveText(R.string.dialog_positive_retry)                        .neutralText(R.string.dialog_negative_pass_for_now)                        .negativeText(R.string.dialog_negative_never)                        .onPositive((unused1, unused2) -> reloadApp())                        .onNegative((dialog, which) -> SaveFileMigration.markMigrationCompleted())                        .cancelable(false)                        .show();                return;            } else {                Bundle saveMigrationParams = new Bundle();                saveMigrationParams.putString("path", wenku8Path);                saveMigrationParams.putString("valid_path", "true");                mFirebaseAnalytics.logEvent("save_migration_path_selection", saveMigrationParams);            }            getContentResolver().takePersistableUriPermission(wenku8Uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);            Log.i(TAG, "Selected the right directory: " + wenku8Path);            SaveFileMigration.overrideExternalPath(wenku8Uri);            runExternalSaveMigration();        }    }    @Override    public void onBackPressed() {        if (mNavigationDrawerFragment.isDrawerOpen())            mNavigationDrawerFragment.closeDrawer();        else            exitBy2Click();    }    private void exitBy2Click() {        Timer tExit;        if (!isExit) {            isExit = true;             Toast.makeText(                    this,                    this.getResources().getString(R.string.press_twice_to_exit),                    Toast.LENGTH_SHORT).show();            tExit = new Timer();            tExit.schedule(new TimerTask() {                @Override                public void run() {                    isExit = false;                 }            }, 2000);         } else {            finish();        }    }    private boolean missingPermission(String permissionName) {        return ContextCompat.checkSelfPermission(this, permissionName) != PackageManager.PERMISSION_GRANTED;    }    private void reloadApp() {        Intent i = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName());        if (i != null) {            i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);            startActivity(i);        }    }}package org.mewx.wenku8.activity;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.TextView;import android.widget.Toast;import com.afollestad.materialdialogs.GravityEnum;import com.afollestad.materialdialogs.MaterialDialog;import com.afollestad.materialdialogs.Theme;import com.google.firebase.analytics.FirebaseAnalytics;import com.makeramen.roundedimageview.RoundedImageView;import org.mewx.wenku8.R;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.global.api.UserInfo;import org.mewx.wenku8.global.api.Wenku8API;import org.mewx.wenku8.global.api.Wenku8Error;import org.mewx.wenku8.util.LightCache;import org.mewx.wenku8.util.LightNetwork;import org.mewx.wenku8.util.LightTool;import org.mewx.wenku8.util.LightUserSession;import java.io.UnsupportedEncodingException;public class UserInfoActivity extends BaseMaterialActivity {    private FirebaseAnalytics mFirebaseAnalytics;    private RoundedImageView rivAvatar;    private TextView tvUserName, tvNickyName, tvScore, tvExperience, tvRank;    private TextView tvLogout;    private UserInfo ui;    private AsyncGetUserInfo agui;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        initMaterialStyle(R.layout.layout_account_info);        mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);        rivAvatar = findViewById(R.id.user_avatar);        tvUserName = findViewById(R.id.username);        tvNickyName = findViewById(R.id.nickname);        tvScore = findViewById(R.id.score);        tvExperience = findViewById(R.id.experience);        tvRank = findViewById(R.id.rank);        tvLogout = findViewById(R.id.btn_logout);        agui = new AsyncGetUserInfo();        agui.execute();    }    private class AsyncGetUserInfo extends AsyncTask<Integer, Integer, Wenku8Error.ErrorCode> {        private int operation;         MaterialDialog md;        @Override        protected void onPreExecute() {            super.onPreExecute();            operation = 0;             md = new MaterialDialog.Builder(UserInfoActivity.this)                    .theme(Theme.LIGHT)                    .content(R.string.system_fetching)                    .progress(true, 0)                    .cancelable(false)                    .show();        }        @Override        protected Wenku8Error.ErrorCode doInBackground(Integer... params) {            if(params.length == 1 && params[0] == 1) {                operation = 1;                byte[] b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserSignParams());                if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                try {                    if(!LightTool.isInteger(new String(b))) return Wenku8Error.ErrorCode.STRING_CONVERSION_ERROR;                    else if(Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(new String(b))) == Wenku8Error.ErrorCode.SYSTEM_9_SIGN_FAILED)                        return Wenku8Error.ErrorCode.SYSTEM_9_SIGN_FAILED;                } catch (Exception e) {                    e.printStackTrace();                }            }            try {                byte[] b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserInfoParams());                if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                String xml = new String(b, "UTF-8");                if(LightTool.isInteger(xml)) {                    if(Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(xml)) == Wenku8Error.ErrorCode.SYSTEM_4_NOT_LOGGED_IN) {                        Wenku8Error.ErrorCode temp = LightUserSession.doLoginFromFile();                        if(temp != Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) return temp;                         b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserInfoParams());                        if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;                        xml = new String(b, "UTF-8");                    }                    else return Wenku8Error.getSystemDefinedErrorCode(Integer.valueOf(xml));                }                Log.d("MewX", xml);                ui = UserInfo.parseUserInfo(xml);                if(ui == null) return Wenku8Error.ErrorCode.XML_PARSE_FAILED;                return Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED;            } catch (Exception e) {                e.printStackTrace();                return Wenku8Error.ErrorCode.STRING_CONVERSION_ERROR;            }        }        @Override        protected void onPostExecute(Wenku8Error.ErrorCode errorCode) {            super.onPostExecute(errorCode);            md.dismiss();            if(operation == 1) {                Bundle checkInParams = new Bundle();                checkInParams.putString("effective_click", "" + (errorCode != Wenku8Error.ErrorCode.SYSTEM_9_SIGN_FAILED));                mFirebaseAnalytics.logEvent("daily_check_in", checkInParams);                if(errorCode == Wenku8Error.ErrorCode.SYSTEM_9_SIGN_FAILED)                    Toast.makeText(UserInfoActivity.this, getResources().getString(R.string.userinfo_sign_failed), Toast.LENGTH_SHORT).show();                else                    Toast.makeText(UserInfoActivity.this, getResources().getString(R.string.userinfo_sign_successful), Toast.LENGTH_SHORT).show();                return;             }            if(errorCode == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) {                String avatarPath;                if(LightCache.testFileExist(GlobalConfig.getFirstUserAvatarSaveFilePath()))                    avatarPath = GlobalConfig.getFirstUserAvatarSaveFilePath();                else                    avatarPath = GlobalConfig.getSecondUserAvatarSaveFilePath();                BitmapFactory.Options options = new BitmapFactory.Options();                options.inSampleSize = 2;                Bitmap bm = BitmapFactory.decodeFile(avatarPath, options);                if(bm != null)                    rivAvatar.setImageBitmap(bm);                tvUserName.setText(ui.username);                tvNickyName.setText(ui.nickyname);                tvScore.setText(Integer.toString(ui.score));                tvExperience.setText(Integer.toString(ui.experience));                tvRank.setText(ui.rank);                tvLogout.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        new MaterialDialog.Builder(UserInfoActivity.this)                                .callback(new MaterialDialog.ButtonCallback() {                                    @Override                                    public void onPositive(MaterialDialog dialog) {                                        super.onPositive(dialog);                                        AsyncLogout al = new AsyncLogout();                                        al.execute();                                    }                                })                                .theme(Theme.LIGHT)                                .titleColorRes(R.color.default_text_color_black)                                .backgroundColorRes(R.color.dlgBackgroundColor)                                .contentColorRes(R.color.dlgContentColor)                                .positiveColorRes(R.color.dlgPositiveButtonColor)                                .negativeColorRes(R.color.dlgNegativeButtonColor)                                .content(R.string.dialog_content_sure_to_logout)                                .contentGravity(GravityEnum.CENTER)                                .positiveText(R.string.dialog_positive_ok)                                .negativeText(R.string.dialog_negative_biao)                                .show();                    }                });            }            else {                Toast.makeText(UserInfoActivity.this, errorCode.toString(), Toast.LENGTH_SHORT).show();                UserInfoActivity.this.finish();             }        }    }    private class AsyncLogout extends AsyncTask<Integer, Integer, Wenku8Error.ErrorCode> {        MaterialDialog md;        @Override        protected void onPreExecute() {            super.onPreExecute();            md = new MaterialDialog.Builder(UserInfoActivity.this)                    .theme(Theme.LIGHT)                    .content(R.string.system_fetching)                    .progress(true, 0)                    .cancelable(false)                    .show();        }        @Override        protected Wenku8Error.ErrorCode doInBackground(Integer... params) {            byte[] b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserLogoutParams());            if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;            try {                String result = new String(b, "UTF-8");                if(!LightTool.isInteger(result)) {                    return Wenku8Error.ErrorCode.RETURNED_VALUE_EXCEPTION;                }                return Wenku8Error.getSystemDefinedErrorCode(new Integer(result));             } catch (UnsupportedEncodingException e) {                e.printStackTrace();                return Wenku8Error.ErrorCode.BYTE_TO_STRING_EXCEPTION;            }        }        @Override        protected void onPostExecute(Wenku8Error.ErrorCode errorCode) {            super.onPostExecute(errorCode);            if(errorCode == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED || errorCode == Wenku8Error.ErrorCode.SYSTEM_4_NOT_LOGGED_IN) {                LightUserSession.logOut();                Toast.makeText(UserInfoActivity.this, "Logged out!", Toast.LENGTH_SHORT).show();            }            else                Toast.makeText(UserInfoActivity.this, errorCode.toString(), Toast.LENGTH_SHORT).show();            md.dismiss();            UserInfoActivity.this.finish();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_user_info, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem menuItem) {        if (menuItem.getItemId() == android.R.id.home) {            onBackPressed();        }        else if(menuItem.getItemId() == R.id.action_sign) {            if(agui != null && agui.getStatus() == AsyncTask.Status.FINISHED) {                agui = new AsyncGetUserInfo();                agui.execute(1);            }            else                Toast.makeText(this, "Please wait...", Toast.LENGTH_SHORT).show();        }        return super.onOptionsItemSelected(menuItem);    }}package org.mewx.wenku8.activity;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.view.MenuItem;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.afollestad.materialdialogs.GravityEnum;import com.afollestad.materialdialogs.MaterialDialog;import com.afollestad.materialdialogs.Theme;import com.google.firebase.analytics.FirebaseAnalytics;import org.mewx.wenku8.MyApp;import org.mewx.wenku8.R;import org.mewx.wenku8.global.GlobalConfig;import org.mewx.wenku8.global.api.Wenku8API;import org.mewx.wenku8.global.api.Wenku8Error;import org.mewx.wenku8.util.LightCache;import org.mewx.wenku8.util.LightNetwork;import org.mewx.wenku8.util.LightUserSession;import java.io.ByteArrayOutputStream;public class UserLoginActivity extends BaseMaterialActivity {    private EditText etUserNameOrEmail = null;    private EditText etPassword = null;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        initMaterialStyle(R.layout.layout_user_login);        FirebaseAnalytics.getInstance(this);        etUserNameOrEmail = findViewById(R.id.edit_username_or_email);        etPassword = findViewById(R.id.edit_password);        TextView tvLogin = findViewById(R.id.btn_login);        TextView tvRegister = findViewById(R.id.btn_register);        tvLogin.setOnClickListener(v -> {            if(etUserNameOrEmail.getText().toString().length() == 0 || etUserNameOrEmail.getText().toString().length() > 30                    || etPassword.getText().toString().length() == 0 || etPassword.getText().toString().length() > 30) {                Toast.makeText(UserLoginActivity.this, getResources().getString(R.string.system_info_fill_not_complete), Toast.LENGTH_SHORT).show();                return;            }            AsyncLoginTask alt = new AsyncLoginTask();            alt.execute(etUserNameOrEmail.getText().toString(), etPassword.getText().toString());        });        tvRegister.setOnClickListener(v -> new MaterialDialog.Builder(UserLoginActivity.this)                .onPositive((dialog, which) -> {                    Intent intent = new Intent(Intent.ACTION_VIEW);                    intent.setData(Uri.parse(Wenku8API.REGISTER_URL));                    String title = getResources().getString(R.string.system_choose_browser);                    Intent chooser = Intent.createChooser(intent, title);                    startActivity(chooser);                })                .theme(Theme.LIGHT)                .backgroundColorRes(R.color.dlgBackgroundColor)                .contentColorRes(R.color.dlgContentColor)                .positiveColorRes(R.color.dlgPositiveButtonColor)                .negativeColorRes(R.color.dlgNegativeButtonColor)                .content(R.string.dialog_content_verify_register)                .contentGravity(GravityEnum.CENTER)                .positiveText(R.string.dialog_positive_ok)                .negativeText(R.string.dialog_negative_pass)                .show());    }    private class AsyncLoginTask extends AsyncTask<String, Integer, Wenku8Error.ErrorCode> {        private MaterialDialog md = null;        private Wenku8Error.ErrorCode we = Wenku8Error.ErrorCode.ERROR_DEFAULT;        @Override        protected void onPreExecute() {            super.onPreExecute();            md = new MaterialDialog.Builder(UserLoginActivity.this)                    .theme(Theme.LIGHT)                    .content(R.string.system_logging_in)                    .progress(true, 0)                    .show();        }        @Override        protected Wenku8Error.ErrorCode doInBackground(String[] params) {            try {                Thread.sleep(500);            } catch (InterruptedException e) {                e.printStackTrace();            }            we = LightUserSession.doLoginFromGiven(params[0], params[1]);            if(we == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED) {                byte[] b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserAvatar());                if(b == null) {                    Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.ic_noavatar);                    ByteArrayOutputStream baos = new ByteArrayOutputStream();                    bmp.compress(Bitmap.CompressFormat.JPEG, 100, baos);                    if(!LightCache.saveFile(GlobalConfig.getFirstUserAvatarSaveFilePath(), baos.toByteArray(), true))                        LightCache.saveFile(GlobalConfig.getSecondUserAvatarSaveFilePath(), baos.toByteArray(), true);                }                else {                    if(!LightCache.saveFile(GlobalConfig.getFirstUserAvatarSaveFilePath(), b, true))                        LightCache.saveFile(GlobalConfig.getSecondUserAvatarSaveFilePath(), b, true);                }            }            return we;        }        @Override        protected void onPostExecute(Wenku8Error.ErrorCode i) {            super.onPostExecute(i);            md.dismiss();            switch(i) {                case SYSTEM_1_SUCCEEDED:                    Toast.makeText(MyApp.getContext(), getResources().getString(R.string.system_logged), Toast.LENGTH_SHORT).show();                    UserLoginActivity.this.finish();                    break;                case SYSTEM_2_ERROR_USERNAME:                    Toast.makeText(MyApp.getContext(), getResources().getString(R.string.system_username_error), Toast.LENGTH_SHORT).show();                    break;                case SYSTEM_3_ERROR_PASSWORD:                    Toast.makeText(MyApp.getContext(), getResources().getString(R.string.system_password_error), Toast.LENGTH_SHORT).show();                    break;            }        }    }    @Override    public boolean onOptionsItemSelected(MenuItem menuItem) {        if (menuItem.getItemId() == android.R.id.home) {            onBackPressed();        }        return super.onOptionsItemSelected(menuItem);    }}