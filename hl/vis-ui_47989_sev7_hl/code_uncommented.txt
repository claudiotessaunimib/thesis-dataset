package com.kotcrab.vis.ui.widget;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.Input.Buttons;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.*;
import com.badlogic.gdx.scenes.scene2d.ui.Cell;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.badlogic.gdx.utils.SnapshotArray;
import com.kotcrab.vis.ui.Sizes;
import com.kotcrab.vis.ui.VisUI;
import com.kotcrab.vis.ui.util.ActorUtils;
public class PopupMenu extends Table {
	private static final Vector2 tmpVector = new Vector2();
	private Sizes sizes;
	private PopupMenuStyle style;
	private PopupMenuListener listener;
	private InputListener stageListener;
	private InputListener sharedMenuItemInputListener;
	private ChangeListener sharedMenuItemChangeListener;
	private InputListener defaultInputListener;
	private PopupMenu parentSubMenu;
	private PopupMenu activeSubMenu;
	private MenuItem activeItem;
	public PopupMenu () {
		this("default");
	}
	public PopupMenu (String styleName) {
		this(VisUI.getSkin().get(styleName, PopupMenuStyle.class));
	}
	public PopupMenu (PopupMenuStyle style) {
		this(VisUI.getSizes(), style);
	}
	public PopupMenu (Sizes sizes, PopupMenuStyle style) {
		this.sizes = sizes;
		this.style = style;
		setTouchable(Touchable.enabled);
		pad(0);
		setBackground(style.background);
		createListeners();
	}
	public static void removeEveryMenu (Stage stage) {
		for (Actor actor : stage.getActors()) {
			if (actor instanceof PopupMenu) {
				PopupMenu menu = (PopupMenu) actor;
				menu.removeHierarchy();
			}
		}
	}
	private void createListeners () {
		stageListener = new InputListener() {
			@Override
			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
				if (getRootMenu().subMenuStructureContains(x, y) == false) {
					remove();
				}
				return true;
			}
			@Override
			public boolean keyDown (InputEvent event, int keycode) {
				SnapshotArray<Actor> children = getChildren();
				if (children.size == 0 || activeSubMenu != null) return false;
				if (keycode == Input.Keys.DOWN) {
					selectNextItem();
					return true;
				}
				if (keycode == Input.Keys.UP) {
					selectPreviousItem();
					return true;
				}
				if (activeItem == null) return false;
				if (keycode == Input.Keys.LEFT && activeItem.containerMenu.parentSubMenu != null) {
					activeItem.containerMenu.parentSubMenu.setActiveSubMenu(null);
					return true;
				}
				if (keycode == Input.Keys.RIGHT && activeItem.getSubMenu() != null) {
					activeItem.showSubMenu();
					activeSubMenu.selectNextItem();
					return true;
				}
				if (keycode == Input.Keys.ENTER) {
					activeItem.fireChangeEvent();
					return true;
				}
				return false;
			}
		};
		sharedMenuItemInputListener = new InputListener() {
			@Override
			public void enter (InputEvent event, float x, float y, int pointer, Actor fromActor) {
				if (pointer == -1 && event.getListenerActor() instanceof MenuItem) {
					MenuItem item = (MenuItem) event.getListenerActor();
					if (item.isDisabled() == false) {
						setActiveItem(item, false);
					}
				}
			}
			@Override
			public void exit (InputEvent event, float x, float y, int pointer, Actor toActor) {
				if (pointer == -1 && event.getListenerActor() instanceof MenuItem) {
					if (activeSubMenu != null) return;
					MenuItem item = (MenuItem) event.getListenerActor();
					if (item == activeItem) {
						setActiveItem(null, false);
					}
				}
			}
		};
		sharedMenuItemChangeListener = new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				if (event.isStopped() == false) removeHierarchy();
			}
		};
	}
	private PopupMenu getRootMenu () {
		if (parentSubMenu != null) return parentSubMenu.getRootMenu();
		return this;
	}
	private boolean subMenuStructureContains (float x, float y) {
		if (contains(x, y)) return true;
		if (activeSubMenu != null) return activeSubMenu.subMenuStructureContains(x, y);
		return false;
	}
	private void removeHierarchy () {
		if (activeItem != null && activeItem.containerMenu != null && activeItem.containerMenu.parentSubMenu != null) {
			activeItem.containerMenu.parentSubMenu.removeHierarchy();
		}
		remove();
	}
	private void selectNextItem () {
		SnapshotArray<Actor> children = getChildren();
		if (!hasSelectableMenuItems()) return;
		int startIndex = activeItem == null ? 0 : children.indexOf(activeItem, true) + 1;
		for (int i = startIndex; ; i++) {
			if (i >= children.size) i = 0;
			Actor actor = children.get(i);
			if (actor instanceof MenuItem && ((MenuItem) actor).isDisabled() == false) {
				setActiveItem((MenuItem) actor, true);
				break;
			}
		}
	}
	private void selectPreviousItem () {
		SnapshotArray<Actor> children = getChildren();
		if (!hasSelectableMenuItems()) return;
		int startIndex = activeItem == null ? children.size - 1 : children.indexOf(activeItem, true) - 1;
		for (int i = startIndex; ; i--) {
			if (i <= -1) i = children.size - 1;
			Actor actor = children.get(i);
			if (actor instanceof MenuItem && ((MenuItem) actor).isDisabled() == false) {
				setActiveItem((MenuItem) actor, true);
				break;
			}
		}
	}
	private boolean hasSelectableMenuItems () {
		SnapshotArray<Actor> children = getChildren();
		for (Actor actor : children) {
			if (actor instanceof MenuItem && ((MenuItem) actor).isDisabled() == false) return true;
		}
		return false;
	}
	@Override
	public <T extends Actor> Cell<T> add (T actor) {
		if (actor instanceof MenuItem) {
			throw new IllegalArgumentException("MenuItems can be only added to PopupMenu by using addItem(MenuItem) method");
		}
		return super.add(actor);
	}
	public void addItem (MenuItem item) {
		super.add(item).fillX().expandX().row();
		pack();
		item.addListener(sharedMenuItemChangeListener);
		item.addListener(sharedMenuItemInputListener);
	}
	public void addSeparator () {
		add(new Separator("menu")).padTop(2).padBottom(2).fill().expand().row();
	}
	public InputListener getDefaultInputListener () {
		return getDefaultInputListener(Buttons.RIGHT);
	}
	public InputListener getDefaultInputListener (final int mouseButton) {
		if (defaultInputListener == null) {
			defaultInputListener = new InputListener() {
				@Override
				public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
					return true;
				}
				@Override
				public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
					if (event.getButton() == mouseButton)
						showMenu(event.getStage(), event.getStageX(), event.getStageY());
				}
			};
		}
		return defaultInputListener;
	}
	@Override
	public void draw (Batch batch, float parentAlpha) {
		super.draw(batch, parentAlpha);
		if (style.border != null) style.border.draw(batch, getX(), getY(), getWidth(), getHeight());
	}
	public void showMenu (Stage stage, float x, float y) {
		setPosition(x, y - getHeight());
		if (stage.getHeight() - getY() > stage.getHeight()) setY(getY() + getHeight());
		ActorUtils.keepWithinStage(stage, this);
		stage.addActor(this);
	}
	public void showMenu (Stage stage, Actor actor) {
		Vector2 pos = actor.localToStageCoordinates(tmpVector.setZero());
		float menuY;
		if (pos.y - getHeight() <= 0) {
			menuY = pos.y + actor.getHeight() + getHeight() - sizes.borderSize;
		} else {
			menuY = pos.y + sizes.borderSize;
		}
		showMenu(stage, pos.x, menuY);
	}
	public boolean contains (float x, float y) {
		return getX() < x && getX() + getWidth() > x && getY() < y && getY() + getHeight() > y;
	}
	void setActiveSubMenu (PopupMenu newSubMenu) {
		if (activeSubMenu == newSubMenu) return;
		if (activeSubMenu != null) activeSubMenu.remove();
		activeSubMenu = newSubMenu;
		if (newSubMenu != null) {
			newSubMenu.setParentMenu(this);
		}
	}
	public PopupMenu getActiveSubMenu () {
		return activeSubMenu;
	}
	@Override
	protected void setStage (Stage stage) {
		super.setStage(stage);
		if (stage != null) stage.addListener(stageListener);
	}
	@Override
	public boolean remove () {
		if (getStage() != null) getStage().removeListener(stageListener);
		if (activeSubMenu != null) activeSubMenu.remove();
		setActiveItem(null, false);
		parentSubMenu = null;
		activeSubMenu = null;
		return super.remove();
	}
	void setActiveItem (MenuItem newItem, boolean keyboardChange) {
		activeItem = newItem;
		if (listener != null) listener.activeItemChanged(newItem, keyboardChange);
	}
	public MenuItem getActiveItem () {
		return activeItem;
	}
	void setParentMenu (PopupMenu parentSubMenu) {
		this.parentSubMenu = parentSubMenu;
	}
	public PopupMenuListener getListener () {
		return listener;
	}
	public void setListener (PopupMenuListener listener) {
		this.listener = listener;
	}
	public interface PopupMenuListener {
		void activeItemChanged (MenuItem newActiveItem, boolean changedByKeyboard);
	}
	static public class PopupMenuStyle {
		public Drawable background;
		public Drawable border;
		public PopupMenuStyle () {
		}
		public PopupMenuStyle (Drawable background, Drawable border) {
			this.background = background;
			this.border = border;
		}
		public PopupMenuStyle (PopupMenuStyle style) {
			this.background = style.background;
			this.border = style.border;
		}
	}
}
package com.kotcrab.vis.ui.widget;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.InputListener;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.kotcrab.vis.ui.VisUI;
import com.kotcrab.vis.ui.widget.VisTextButton.VisTextButtonStyle;
public class Menu extends PopupMenu {
	private MenuBar menuBar;
	public VisTextButton openButton;
	public Drawable buttonDefault;
	private String title;
	public Menu (String title) {
		this(title, "default");
	}
	public Menu (String title, String styleName) {
		this(title, VisUI.getSkin().get(styleName, MenuStyle.class));
	}
	public Menu (String title, MenuStyle style) {
		super(style);
		this.title = title;
		openButton = new VisTextButton(title, new VisTextButtonStyle(style.openButtonStyle));
		buttonDefault = openButton.getStyle().up;
		openButton.addListener(new InputListener() {
			@Override
			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
				if (menuBar.getCurrentMenu() == Menu.this) {
					menuBar.closeMenu();
					return true;
				}
				switchMenu();
				event.stop();
				return true;
			}
			@Override
			public void enter (InputEvent event, float x, float y, int pointer, Actor fromActor) {
				if (menuBar.getCurrentMenu() != null && menuBar.getCurrentMenu() != Menu.this) switchMenu();
			}
		});
	}
	public String getTitle () {
		return title;
	}
	private void switchMenu () {
		menuBar.closeMenu();
		showMenu();
	}
	private void showMenu () {
		Vector2 pos = openButton.localToStageCoordinates(new Vector2(0, 0));
		setPosition(pos.x, pos.y - getHeight());
		openButton.getStage().addActor(this);
		menuBar.setCurrentMenu(this);
	}
	@Override
	public boolean remove () {
		boolean result = super.remove();
		menuBar.setCurrentMenu(null);
		return result;
	}
	void setMenuBar (MenuBar menuBar) {
		if (this.menuBar != null && menuBar != null) throw new IllegalStateException("Menu was already added to MenuBar");
		this.menuBar = menuBar;
	}
	TextButton getOpenButton () {
		return openButton;
	}
	void selectButton () {
		openButton.getStyle().up = openButton.getStyle().over;
	}
	void deselectButton () {
		openButton.getStyle().up = buttonDefault;
	}
	public static class MenuStyle extends PopupMenuStyle {
		public VisTextButtonStyle openButtonStyle;
		public MenuStyle () {
		}
		public MenuStyle (MenuStyle style) {
			super(style);
			this.openButtonStyle = style.openButtonStyle;
		}
		public MenuStyle (Drawable background, Drawable border, VisTextButtonStyle openButtonStyle) {
			super(background, border);
			this.openButtonStyle = openButtonStyle;
		}
	}
}
package com.kotcrab.vis.ui.widget.file.internal;
import com.kotcrab.vis.ui.widget.MenuItem;
import com.kotcrab.vis.ui.widget.PopupMenu;
import com.kotcrab.vis.ui.widget.file.FileChooser;
public class AbstractSuggestionPopup extends PopupMenu {
	public static final int MAX_SUGGESTIONS = 10;
	final FileChooser chooser;
	public AbstractSuggestionPopup (FileChooser chooser) {
		super(chooser.getChooserStyle().popupMenuStyle);
		this.chooser = chooser;
	}
	protected MenuItem createMenuItem (String name) {
		MenuItem item = new MenuItem(name);
		item.getImageCell().size(0);
		item.getShortcutCell().space(0).pad(0);
		item.getSubMenuIconCell().size(0).space(0).pad(0);
		return item;
	}
}
package com.kotcrab.vis.ui.widget.file;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Buttons;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.*;
import com.badlogic.gdx.scenes.scene2d.ui.*;
import com.badlogic.gdx.scenes.scene2d.utils.*;
import com.badlogic.gdx.utils.*;
import com.kotcrab.vis.ui.FocusManager;
import com.kotcrab.vis.ui.Focusable;
import com.kotcrab.vis.ui.Sizes;
import com.kotcrab.vis.ui.VisUI;
import com.kotcrab.vis.ui.layout.GridGroup;
import com.kotcrab.vis.ui.util.OsUtils;
import com.kotcrab.vis.ui.util.dialog.Dialogs;
import com.kotcrab.vis.ui.util.dialog.Dialogs.OptionDialogType;
import com.kotcrab.vis.ui.util.dialog.InputDialogAdapter;
import com.kotcrab.vis.ui.util.dialog.OptionDialogAdapter;
import com.kotcrab.vis.ui.util.value.ConstantIfVisibleValue;
import com.kotcrab.vis.ui.util.value.PrefHeightIfVisibleValue;
import com.kotcrab.vis.ui.util.value.PrefWidthIfVisibleValue;
import com.kotcrab.vis.ui.widget.*;
import com.kotcrab.vis.ui.widget.Tooltip;
import com.kotcrab.vis.ui.widget.ButtonBar.ButtonType;
import com.kotcrab.vis.ui.widget.file.internal.*;
import com.kotcrab.vis.ui.widget.file.internal.DriveCheckerService.DriveCheckerListener;
import com.kotcrab.vis.ui.widget.file.internal.DriveCheckerService.RootMode;
import com.kotcrab.vis.ui.widget.file.internal.FileChooserWinService.RootNameListener;
import com.kotcrab.vis.ui.widget.file.internal.FileHistoryManager.FileHistoryCallback;
import com.kotcrab.vis.ui.widget.file.internal.FilePopupMenu.FilePopupMenuCallback;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import static com.kotcrab.vis.ui.widget.file.internal.FileChooserText.*;
public class FileChooser extends VisWindow implements FileHistoryCallback {
	private static final long FILE_WATCHER_CHECK_DELAY_MILLIS = 2000;
	private static final ShortcutsComparator SHORTCUTS_COMPARATOR = new ShortcutsComparator();
	private static final Vector2 tmpVector = new Vector2();
	private static boolean saveLastDirectory = false;
	public static boolean focusFileScrollPaneOnShow = true;
	public static boolean focusSelectedFileTextFieldOnShow = true;
	private Mode mode;
	private ViewMode viewMode = ViewMode.DETAILS;
	private SelectionMode selectionMode = SelectionMode.FILES;
	private AtomicReference<FileSorting> sorting = new AtomicReference<FileSorting>(FileSorting.NAME);
	private AtomicBoolean sortingOrderAscending = new AtomicBoolean(true);
	private FileChooserListener listener = new FileChooserAdapter();
	private FileFilter fileFilter = new DefaultFileFilter(this);
	private FileDeleter fileDeleter = new DefaultFileDeleter();
	private FileTypeFilter fileTypeFilter = null;
	private FileTypeFilter.Rule activeFileTypeRule = null;
	private FileIconProvider iconProvider;
	private DriveCheckerService driveCheckerService = DriveCheckerService.getInstance();
	private Array<DriveCheckerListener> driveCheckerListeners = new Array<DriveCheckerListener>();
	private FileChooserWinService chooserWinService = FileChooserWinService.getInstance();
	private ExecutorService listDirExecutor = Executors.newSingleThreadExecutor(new ServiceThreadFactory("FileChooserListDirThread"));
	private Future<?> listDirFuture;
	private ShowBusyBarTask showBusyBarTask = new ShowBusyBarTask();
	private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
	private boolean showSelectionCheckboxes = false;
	public static final int DEFAULT_KEY = -1;
	private boolean multiSelectionEnabled = false;
	private int groupMultiSelectKey = DEFAULT_KEY; 
	private int multiSelectKey = DEFAULT_KEY; 
	private PreferencesIO preferencesIO;
	private Array<FileHandle> favorites;
	private Array<FileHandle> recentDirectories;
	private FileHandle currentDirectory;
	private Array<FileHandle> currentFiles = new Array<FileHandle>();
	private IdentityMap<FileHandle, FileHandleMetadata> currentFilesMetadata = new IdentityMap<FileHandle, FileHandleMetadata>();
	private FileListAdapter fileListAdapter;
	private Array<FileItem> selectedItems = new Array<FileItem>();
	private ShortcutItem selectedShortcut;
	private String defaultFileName;
	private boolean watchingFilesEnabled = true;
	private Thread fileWatcherThread;
	private boolean shortcutsListRebuildScheduled;
	private boolean filesListRebuildScheduled;
	private FileHistoryManager historyManager;
	private FileChooserStyle style;
	private Sizes sizes;
	private VisSplitPane mainSplitPane;
	private VisTable shortcutsTable;
	private VerticalGroup shortcutsMainPanel;
	private VerticalGroup shortcutsRootsPanel;
	private VerticalGroup shortcutsFavoritesPanel;
	private ListView<FileHandle> fileListView;
	private float maxDateLabelWidth;
	private BusyBar fileListBusyBar;
	private VisImageButton favoriteFolderButton;
	private VisImageButton viewModeButton;
	private Tooltip favoriteFolderButtonTooltip;
	private VisTextField currentPath;
	private VisTextField selectedFileTextField;
	private VisSelectBox<FileTypeFilter.Rule> fileTypeSelectBox;
	private VisTextButton confirmButton;
	private FilePopupMenu fileMenu;
	private FileSuggestionPopup fileNameSuggestionPopup;
	private DirsSuggestionPopup dirsSuggestionPopup;
	private VisLabel fileTypeLabel;
	private PopupMenu viewModePopupMenu;
	public FileChooser (Mode mode) {
		this((FileHandle) null, mode);
	}
	public FileChooser (FileHandle directory, Mode mode) {
		super("");
		this.mode = mode;
		getTitleLabel().setText(TITLE_CHOOSE_FILES.get());
		style = VisUI.getSkin().get(FileChooserStyle.class);
		sizes = VisUI.getSizes();
		init(directory);
	}
	public FileChooser (String title, Mode mode) {
		this("default", title, mode);
	}
	public FileChooser (String styleName, String title, Mode mode) {
		super(title);
		this.mode = mode;
		style = VisUI.getSkin().get(styleName, FileChooserStyle.class);
		sizes = VisUI.getSizes();
		init(null);
	}
	public static void setDefaultPrefsName (String prefsName) {
		PreferencesIO.setDefaultPrefsName(prefsName);
	}
	@Deprecated
	public static void setFavoritesPrefsName (String name) {
		PreferencesIO.setDefaultPrefsName(name);
	}
	private void init (FileHandle directory) {
		setModal(true);
		setResizable(true);
		setMovable(true);
		addCloseButton();
		closeOnEscape();
		iconProvider = new DefaultFileIconProvider(this);
		preferencesIO = new PreferencesIO();
		reloadPreferences(false);
		createToolbar();
		viewModePopupMenu = new PopupMenu(style.popupMenuStyle);
		createViewModePopupMenu();
		createCenterContentPanel();
		createFileTextBox();
		createBottomButtons();
		createShortcutsMainPanel();
		shortcutsRootsPanel = new VerticalGroup();
		shortcutsFavoritesPanel = new VerticalGroup();
		rebuildShortcutsFavoritesPanel();
		fileMenu = new FilePopupMenu(this, new FilePopupMenuCallback() {
			@Override
			public void showNewDirDialog () {
				showNewDirectoryDialog();
			}
			@Override
			public void showFileDelDialog (FileHandle file) {
				showFileDeleteDialog(file);
			}
		});
		fileNameSuggestionPopup = new FileSuggestionPopup(this);
		fileNameSuggestionPopup.setListener(new PopupMenu.PopupMenuListener() {
			@Override
			public void activeItemChanged (MenuItem newItem, boolean changedByKeyboard) {
				if (changedByKeyboard == false || newItem == null) return;
				highlightFiles(currentDirectory.child(newItem.getText().toString()));
				updateSelectedFileFieldText(true);
			}
		});
		rebuildShortcutsList();
		if (directory == null) {
			FileHandle startingDir = null;
			if (saveLastDirectory) startingDir = preferencesIO.loadLastDirectory();
			if (startingDir == null || startingDir.exists() == false)
				startingDir = getDefaultStartingDirectory();
			setDirectory(startingDir, HistoryPolicy.IGNORE);
		} else {
			setDirectory(directory, HistoryPolicy.IGNORE);
		}
		setSize(500, 600);
		centerWindow();
		createListeners();
		setFileTypeFilter(null);
		setFavoriteFolderButtonVisible(false);
	}
	private void createToolbar () {
		VisTable toolbarTable = new VisTable(true);
		toolbarTable.defaults().minWidth(30).right();
		add(toolbarTable).fillX().expandX().pad(3).padRight(2);
		historyManager = new FileHistoryManager(style, this);
		currentPath = new VisTextField();
		final VisImageButton showRecentDirButton = new VisImageButton(style.expandDropdown);
		showRecentDirButton.setFocusBorderEnabled(false);
		dirsSuggestionPopup = new DirsSuggestionPopup(this, currentPath);
		dirsSuggestionPopup.setListener(new PopupMenu.PopupMenuListener() {
			@Override
			public void activeItemChanged (MenuItem newItem, boolean changedByKeyboard) {
				if (changedByKeyboard == false || newItem == null) return;
				setCurrentPathFieldText(newItem.getText().toString());
			}
		});
		currentPath.addListener(new InputListener() {
			@Override
			public boolean keyTyped (InputEvent event, char character) {
				if (event.getKeyCode() == Keys.ENTER) {
					dirsSuggestionPopup.remove();
					return false;
				}
				float targetWidth = currentPath.getWidth() + showRecentDirButton.getWidth();
				dirsSuggestionPopup.pathFieldKeyTyped(getChooserStage(), targetWidth);
				return false;
			}
			@Override
			public boolean keyDown (InputEvent event, int keycode) {
				if (keycode == Keys.ENTER) {
					FileHandle file = Gdx.files.absolute(currentPath.getText());
					if (file.exists()) {
						if (file.isDirectory() == false) file = file.parent();
						setDirectory(file, HistoryPolicy.ADD);
						addRecentDirectory(file);
					} else {
						showDialog(POPUP_DIRECTORY_DOES_NOT_EXIST.get());
						setCurrentPathFieldText(currentDirectory.path());
					}
					event.stop();
				}
				return false;
			}
		});
		currentPath.addListener(new FocusListener() {
			@Override
			public void keyboardFocusChanged (FocusEvent event, Actor actor, boolean focused) {
				if (focused == false) {
					setCurrentPathFieldText(currentDirectory.path());
				}
			}
		});
		showRecentDirButton.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				float targetWidth = currentPath.getWidth() + showRecentDirButton.getWidth();
				dirsSuggestionPopup.showRecentDirectories(getChooserStage(), recentDirectories, targetWidth);
			}
		});
		VisImageButton folderParentButton = new VisImageButton(style.iconFolderParent, PARENT_DIRECTORY.get());
		favoriteFolderButton = new VisImageButton(style.iconStar);
		favoriteFolderButtonTooltip = new Tooltip.Builder(CONTEXT_MENU_ADD_TO_FAVORITES.get()).target(favoriteFolderButton).build();
		viewModeButton = new VisImageButton(style.iconListSettings);
		new Tooltip.Builder(CHANGE_VIEW_MODE.get()).target(viewModeButton).build();
		VisImageButton folderNewButton = new VisImageButton(style.iconFolderNew, NEW_DIRECTORY.get());
		toolbarTable.add(historyManager.getButtonsTable());
		toolbarTable.add(currentPath).spaceRight(0).expand().fill();
		toolbarTable.add(showRecentDirButton).width(15 * sizes.scaleFactor).growY();
		toolbarTable.add(folderParentButton);
		toolbarTable.add(favoriteFolderButton).width(PrefWidthIfVisibleValue.INSTANCE).spaceRight(new ConstantIfVisibleValue(sizes.spacingRight));
		toolbarTable.add(viewModeButton).width(PrefWidthIfVisibleValue.INSTANCE).spaceRight(new ConstantIfVisibleValue(sizes.spacingRight));
		toolbarTable.add(folderNewButton);
		folderParentButton.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				FileHandle parent = currentDirectory.parent();
				if (OsUtils.isWindows() && currentDirectory.path().endsWith(":/")) return;
				setDirectory(parent, HistoryPolicy.ADD);
			}
		});
		favoriteFolderButton.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				if (favorites.contains(currentDirectory, false)) {
					removeFavorite(currentDirectory);
				} else {
					addFavorite(currentDirectory);
				}
			}
		});
		folderNewButton.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				showNewDirectoryDialog();
			}
		});
		addListener(historyManager.getDefaultClickListener());
	}
	private void createViewModePopupMenu () {
		rebuildViewModePopupMenu();
		viewModeButton.addListener(new InputListener() {
			@Override
			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
				Gdx.app.postRunnable(new Runnable() {
					@Override
					public void run () {
						viewModePopupMenu.showMenu(getChooserStage(), viewModeButton);
					}
				});
				return true;
			}
		});
	}
	private void rebuildViewModePopupMenu () {
		viewModePopupMenu.clear();
		for (final ViewMode mode : ViewMode.values()) {
			if (mode.thumbnailMode && iconProvider.isThumbnailModesSupported() == false) continue;
			viewModePopupMenu.addItem(new MenuItem(mode.getBundleText(), new ChangeListener() {
				@Override
				public void changed (ChangeEvent event, Actor actor) {
					setViewMode(mode);
				}
			}));
		}
	}
	private void updateFavoriteFolderButton () {
		VisLabel label = (VisLabel) favoriteFolderButtonTooltip.getContent();
		if (favorites.contains(currentDirectory, false)) {
			favoriteFolderButton.getStyle().imageUp = style.iconStar;
			label.setText(CONTEXT_MENU_REMOVE_FROM_FAVORITES.get());
		} else {
			favoriteFolderButton.getStyle().imageUp = style.iconStarOutline;
			label.setText(CONTEXT_MENU_ADD_TO_FAVORITES.get());
		}
		favoriteFolderButtonTooltip.pack();
	}
	private void createCenterContentPanel () {
		fileListAdapter = new FileListAdapter(this, currentFiles);
		fileListView = new ListView<FileHandle>(fileListAdapter);
		setupDefaultScrollPane(fileListView.getScrollPane());
		VisTable fileScrollPaneTable = new VisTable();
		fileListBusyBar = new BusyBar();
		fileListBusyBar.setVisible(false);
		fileScrollPaneTable.add(fileListBusyBar).space(0).height(PrefHeightIfVisibleValue.INSTANCE).growX().row();
		fileScrollPaneTable.add(fileListView.getMainTable()).pad(2).top().expand().fillX();
		fileScrollPaneTable.setTouchable(Touchable.enabled);
		shortcutsTable = new VisTable();
		final VisScrollPane shortcutsScrollPane = setupDefaultScrollPane(new VisScrollPane(shortcutsTable));
		VisTable shortcutsScrollPaneTable = new VisTable();
		shortcutsScrollPaneTable.add(shortcutsScrollPane).pad(2).top().expand().fillX();
		mainSplitPane = new VisSplitPane(shortcutsScrollPaneTable, fileScrollPaneTable, false) {
			@Override
			public void invalidate () {
				super.invalidate();
				invalidateChildHierarchy(shortcutsScrollPane);
			}
		};
		mainSplitPane.setSplitAmount(0.3f);
		mainSplitPane.setMinSplitAmount(0.05f);
		mainSplitPane.setMaxSplitAmount(0.80f);
		row();
		add(mainSplitPane).expand().fill();
		row();
		fileScrollPaneTable.addListener(new InputListener() {
			@Override
			public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
				return true;
			}
			@Override
			public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
				if (button == Buttons.RIGHT && fileMenu.isAddedToStage() == false) {
					fileMenu.build();
					fileMenu.showMenu(getChooserStage(), event.getStageX(), event.getStageY());
				}
			}
		});
	}
	private void invalidateChildHierarchy (WidgetGroup layout) {
		if (layout != null) {
			layout.invalidate();
			for (Actor actor : layout.getChildren()) {
				if (actor instanceof WidgetGroup)
					invalidateChildHierarchy((WidgetGroup) actor);
				else if (actor instanceof Layout)
					((Layout) actor).invalidate();
			}
		}
	}
	private void setCurrentPathFieldText (String text) {
		currentPath.setText(text);
		currentPath.setCursorAtTextEnd();
	}
	private void createFileTextBox () {
		VisTable table = new VisTable(true);
		VisLabel nameLabel = new VisLabel(FILE_NAME.get());
		selectedFileTextField = new VisTextField();
		selectedFileTextField.setProgrammaticChangeEvents(false);
		fileTypeLabel = new VisLabel(FILE_TYPE.get());
		fileTypeSelectBox = new VisSelectBox<FileTypeFilter.Rule>();
		fileTypeSelectBox.getSelection().setProgrammaticChangeEvents(false);
		fileTypeSelectBox.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				activeFileTypeRule = fileTypeSelectBox.getSelected();
				rebuildFileList();
			}
		});
		table.defaults().left();
		table.add(nameLabel).spaceBottom(new ConstantIfVisibleValue(fileTypeSelectBox, 5f));
		table.add(selectedFileTextField).expandX().fillX()
				.spaceBottom(new ConstantIfVisibleValue(fileTypeSelectBox, 5f)).row();
		table.add(fileTypeLabel).height(PrefHeightIfVisibleValue.INSTANCE)
				.spaceBottom(new ConstantIfVisibleValue(sizes.spacingBottom));
		table.add(fileTypeSelectBox).height(PrefHeightIfVisibleValue.INSTANCE)
				.spaceBottom(new ConstantIfVisibleValue(sizes.spacingBottom)).expand().fill();
		selectedFileTextField.addListener(new InputListener() {
			@Override
			public boolean keyDown (InputEvent event, int keycode) {
				if (keycode == Keys.ENTER) {
					selectionFinished();
					return true;
				}
				return false;
			}
		});
		selectedFileTextField.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				deselectAll(false);
				fileNameSuggestionPopup.pathFieldKeyTyped(getChooserStage(), currentFiles, selectedFileTextField);
				FileHandle enteredFile = currentDirectory.child(selectedFileTextField.getText());
				if (currentFiles.contains(enteredFile, false)) {
					highlightFiles(enteredFile);
				}
			}
		});
		add(table).expandX().fillX().pad(3f).padRight(2f).padBottom(2f);
		row();
	}
	private void updateFileTypeSelectBox () {
		if (fileTypeFilter == null || selectionMode == SelectionMode.DIRECTORIES) {
			fileTypeLabel.setVisible(false);
			fileTypeSelectBox.setVisible(false);
			fileTypeSelectBox.invalidateHierarchy();
			return;
		} else {
			fileTypeLabel.setVisible(true);
			fileTypeSelectBox.setVisible(true);
			fileTypeSelectBox.invalidateHierarchy();
		}
		Array<FileTypeFilter.Rule> rules = new Array<FileTypeFilter.Rule>(fileTypeFilter.getRules());
		if (fileTypeFilter.isAllTypesAllowed()) {
			FileTypeFilter.Rule allTypesRule = new FileTypeFilter.Rule(ALL_FILES.get());
			rules.add(allTypesRule);
		}
		fileTypeSelectBox.setItems(rules);
		fileTypeSelectBox.setSelected(activeFileTypeRule);
	}
	private void createBottomButtons () {
		VisTextButton cancelButton = new VisTextButton(CANCEL.get());
		confirmButton = new VisTextButton(mode == Mode.OPEN ? OPEN.get() : SAVE.get());
		VisTable buttonTable = new VisTable(true);
		buttonTable.defaults().minWidth(70).right();
		add(buttonTable).padTop(3).padBottom(3).padRight(2).fillX().expandX();
		ButtonBar buttonBar = new ButtonBar();
		buttonBar.setIgnoreSpacing(true);
		buttonBar.setButton(ButtonType.CANCEL, cancelButton);
		buttonBar.setButton(ButtonType.OK, confirmButton);
		buttonTable.add(buttonBar.createTable()).expand().right();
		cancelButton.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				fadeOut();
				listener.canceled();
			}
		});
		confirmButton.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				selectionFinished();
			}
		});
	}
	private void createShortcutsMainPanel () {
		shortcutsMainPanel = new VerticalGroup();
		String userHome = System.getProperty("user.home");
		String userName = System.getProperty("user.name");
		File userDesktop = new File(userHome + "/Desktop");
		if (userDesktop.exists())
			shortcutsMainPanel.addActor(new ShortcutItem(userDesktop, DESKTOP.get(), style.iconFolder));
		shortcutsMainPanel.addActor(new ShortcutItem(new File(userHome), userName, style.iconFolder));
	}
	private void createListeners () {
		addListener(new InputListener() {
			@Override
			public boolean keyDown (InputEvent event, int keycode) {
				if (keycode == Keys.A && UIUtils.ctrl() && getChooserStage().getKeyboardFocus() instanceof VisTextField == false) {
					selectAll();
					return true;
				}
				return false;
			}
			@Override
			public boolean keyTyped (InputEvent event, char character) {
				if (getChooserStage().getKeyboardFocus() instanceof VisTextField) return false;
				if (Character.isLetterOrDigit(character) == false) return false;
				String name = String.valueOf(character);
				for (FileHandle file : currentFiles) {
					if (file.name().toLowerCase().startsWith(name)) {
						deselectAll();
						highlightFiles(file);
						return true;
					}
				}
				return false;
			}
		});
	}
	private void selectionFinished () {
		if (selectedItems.size == 1) {
			if (selectionMode == SelectionMode.FILES) {
				FileHandle selected = selectedItems.get(0).getFile();
				if (selected.isDirectory()) {
					setDirectory(selected, HistoryPolicy.ADD);
					return;
				}
			}
			if (selectionMode == SelectionMode.DIRECTORIES) {
				FileHandle selected = selectedItems.get(0).getFile();
				if (selected.isDirectory() == false) {
					showDialog(POPUP_ONLY_DIRECTORIES.get());
					return;
				}
			}
		}
		if (selectedItems.size > 0 || mode == Mode.SAVE) {
			Array<FileHandle> files = getFileListFromSelected();
			notifyListenerAndCloseDialog(files);
		} else {
			if (selectionMode == SelectionMode.FILES) {
				showDialog(POPUP_CHOOSE_FILE.get());
			} else {
				Array<FileHandle> files = new Array<FileHandle>();
				if (selectedFileTextField.getText().length() != 0) {
					files.add(currentDirectory.child(selectedFileTextField.getText()));
				} else {
					files.add(currentDirectory);
				}
				notifyListenerAndCloseDialog(files);
			}
		}
	}
	@Override
	protected void close () {
		listener.canceled();
		super.close();
	}
	private void notifyListenerAndCloseDialog (Array<FileHandle> files) {
		if (files == null) return;
		if (mode == Mode.OPEN) {
			for (FileHandle file : files) {
				if (file.exists() == false) {
					showDialog(POPUP_SELECTED_FILE_DOES_NOT_EXIST.get());
					return;
				}
			}
		}
		if (files.size != 0) {
			listener.selected(files);
			if (saveLastDirectory) {
				preferencesIO.saveLastDirectory(currentDirectory);
			}
		}
		fadeOut();
	}
	@Override
	public void fadeOut (float time) {
		super.fadeOut(time);
		fileMenu.remove();
		dirsSuggestionPopup.remove();
		fileNameSuggestionPopup.remove();
		viewModePopupMenu.remove();
	}
	protected VisScrollPane setupDefaultScrollPane (VisScrollPane scrollPane) {
		scrollPane.setOverscroll(false, false);
		scrollPane.setFlickScroll(false);
		scrollPane.setFadeScrollBars(false);
		scrollPane.setScrollingDisabled(true, false);
		return scrollPane;
	}
	private Array<FileHandle> getFileListFromSelected () {
		Array<FileHandle> list = new Array<FileHandle>();
		if (mode == Mode.OPEN) {
			for (FileItem item : selectedItems)
				list.add(item.getFile());
			return list;
		} else if (selectedItems.size > 0) {
			for (FileItem item : selectedItems)
				list.add(item.getFile());
			showOverwriteQuestion(list);
			return null;
		} else {
			String fileName = selectedFileTextField.getText();
			FileHandle file = currentDirectory.child(fileName);
			if (FileUtils.isValidFileName(fileName) == false) {
				showDialog(POPUP_FILENAME_INVALID.get());
				return null;
			}
			if (file.exists()) {
				list.add(file);
				showOverwriteQuestion(list);
				return null;
			} else {
				if (activeFileTypeRule != null) {
					Array<String> ruleExts = activeFileTypeRule.getExtensions();
					if (ruleExts.size > 0 && ruleExts.contains(file.extension(), false) == false) {
						file = file.sibling(file.nameWithoutExtension() + "." + ruleExts.first());
					}
				}
				list.add(file);
				if (file.exists()) {
					showOverwriteQuestion(list);
					return null;
				} else {
					return list;
				}
			}
		}
	}
	private void showDialog (String text) {
		Dialogs.showOKDialog(getChooserStage(), POPUP_TITLE.get(), text);
	}
	private void showOverwriteQuestion (final Array<FileHandle> filesList) {
		String text = filesList.size == 1 ? POPUP_FILE_EXIST_OVERWRITE.get() : POPUP_MULTIPLE_FILE_EXIST_OVERWRITE.get();
		Dialogs.showOptionDialog(getChooserStage(), POPUP_TITLE.get(), text, OptionDialogType.YES_NO, new OptionDialogAdapter() {
			@Override
			public void yes () {
				notifyListenerAndCloseDialog(filesList);
			}
		});
	}
	private void rebuildShortcutsList (boolean rebuildRootCache) {
		shortcutsTable.clear();
		shortcutsTable.add(shortcutsMainPanel).left().row();
		shortcutsTable.addSeparator();
		if (rebuildRootCache) rebuildFileRootsCache();
		shortcutsTable.add(shortcutsRootsPanel).left().row();
		if (shortcutsFavoritesPanel.getChildren().size > 0)
			shortcutsTable.addSeparator();
		shortcutsTable.add(shortcutsFavoritesPanel).left().row();
	}
	private void rebuildShortcutsList () {
		shortcutsListRebuildScheduled = false;
		rebuildShortcutsList(true);
	}
	private void rebuildFileRootsCache () {
		shortcutsRootsPanel.clear();
		File[] roots = File.listRoots();
		driveCheckerListeners.clear();
		for (final File root : roots) {
			DriveCheckerListener listener = new DriveCheckerListener() {
				@Override
				public void rootMode (File root, RootMode mode) {
					if (driveCheckerListeners.removeValue(this, true) == false) return;
					String initialName = root.toString();
					if (initialName.equals("/")) initialName = COMPUTER.get();
					final ShortcutItem item = new ShortcutItem(root, initialName, style.iconDrive);
					if (OsUtils.isWindows()) chooserWinService.addListener(root, item);
					shortcutsRootsPanel.addActor(item);
					shortcutsRootsPanel.getChildren().sort(SHORTCUTS_COMPARATOR);
				}
			};
			driveCheckerListeners.add(listener);
			driveCheckerService.addListener(root, mode == Mode.OPEN ? RootMode.READABLE : RootMode.WRITABLE, listener);
		}
	}
	private void rebuildShortcutsFavoritesPanel () {
		shortcutsFavoritesPanel.clear();
		if (favorites.size > 0) {
			for (FileHandle f : favorites)
				shortcutsFavoritesPanel.addActor(new ShortcutItem(f.file(), f.name(), style.iconFolder));
		}
	}
	private void rebuildFileList () {
		rebuildFileList(false);
	}
	private void rebuildFileList (final boolean stageChanged) {
		filesListRebuildScheduled = false;
		final FileHandle[] selectedFiles = new FileHandle[selectedItems.size];
		for (int i = 0; i < selectedFiles.length; i++) {
			selectedFiles[i] = selectedItems.get(i).getFile();
		}
		deselectAll();
		setCurrentPathFieldText(currentDirectory.path());
		if (showBusyBarTask.isScheduled() == false) {
			Timer.schedule(showBusyBarTask, 0.2f); 
		}
		if (listDirFuture != null) listDirFuture.cancel(true);
		listDirFuture = listDirExecutor.submit(new Runnable() {
			@Override
			public void run () {
				if (currentDirectory.exists() == false || currentDirectory.isDirectory() == false) {
					Gdx.app.postRunnable(new Runnable() {
						@Override
						public void run () {
							setDirectory(getDefaultStartingDirectory(), HistoryPolicy.ADD);
						}
					});
					return;
				}
				final Array<FileHandle> files = FileUtils.sortFiles(listFilteredCurrentDirectory(), sorting.get().comparator, !sortingOrderAscending.get());
				if (Thread.currentThread().isInterrupted()) return;
				final IdentityMap<FileHandle, FileHandleMetadata> metadata = new IdentityMap<FileHandle, FileHandleMetadata>(files.size);
				for (FileHandle file : files) {
					metadata.put(file, FileHandleMetadata.of(file));
				}
				if (Thread.currentThread().isInterrupted()) return;
				Gdx.app.postRunnable(new Runnable() {
					@Override
					public void run () {
						buildFileList(files, metadata, selectedFiles, stageChanged);
					}
				});
			}
		});
	}
	private void buildFileList (Array<FileHandle> files, IdentityMap<FileHandle, FileHandleMetadata> metadata, FileHandle[] selectedFiles, boolean stageChanged) {
		currentFiles.clear();
		currentFilesMetadata.clear();
		showBusyBarTask.cancel();
		fileListBusyBar.setVisible(false);
		if (files.size == 0) {
			fileListAdapter.itemsChanged();
			return;
		}
		maxDateLabelWidth = 0;
		currentFiles.addAll(files);
		currentFilesMetadata = metadata;
		fileListAdapter.itemsChanged();
		fileListView.getScrollPane().setScrollX(0);
		fileListView.getScrollPane().setScrollY(0);
		highlightFiles(selectedFiles);
		if (stageChanged && selectedFiles.length == 0 && defaultFileName != null) {
			selectedFileTextField.setText(defaultFileName);
			FileHandle enteredFile = currentDirectory.child(selectedFileTextField.getText());
			if (currentFiles.contains(enteredFile, false)) {
				highlightFiles(enteredFile);
			}
		}
	}
	public void setSelectedFiles (FileHandle... files) {
		deselectAll(false);
		for (FileHandle file : files) {
			FileItem item = fileListAdapter.getViews().get(file);
			if (item != null) {
				item.select(false);
			}
		}
		removeInvalidSelections();
		updateSelectedFileFieldText();
	}
	public void setDefaultFileName (String text) {
		defaultFileName = text;
	}
	public void refresh () {
		refresh(false);
	}
	private void refresh (boolean stageChanged) {
		rebuildShortcutsList();
		rebuildFileList(stageChanged);
	}
	public void addFavorite (FileHandle favourite) {
		favorites.add(favourite);
		preferencesIO.saveFavorites(favorites);
		rebuildShortcutsFavoritesPanel();
		rebuildShortcutsList(false);
		updateFavoriteFolderButton();
	}
	public boolean removeFavorite (FileHandle favorite) {
		boolean removed = favorites.removeValue(favorite, false);
		preferencesIO.saveFavorites(favorites);
		rebuildShortcutsFavoritesPanel();
		rebuildShortcutsList(false);
		updateFavoriteFolderButton();
		return removed;
	}
	private void addRecentDirectory (FileHandle file) {
		if (recentDirectories.contains(file, false)) return;
		recentDirectories.insert(0, file);
		if (recentDirectories.size > AbstractSuggestionPopup.MAX_SUGGESTIONS) recentDirectories.pop();
		preferencesIO.saveRecentDirectories(recentDirectories);
	}
	public void clearRecentDirectories () {
		recentDirectories.clear();
		preferencesIO.saveRecentDirectories(recentDirectories);
	}
	@Override
	public void setVisible (boolean visible) {
		if (isVisible() == false && visible)
			deselectAll(); 
		super.setVisible(visible);
	}
	private void deselectAll () {
		deselectAll(true);
	}
	private void deselectAll (boolean updateTextField) {
		for (FileItem item : selectedItems)
			item.deselect(false);
		selectedItems.clear();
		if (updateTextField) updateSelectedFileFieldText();
	}
	private void selectAll () {
		for (FileItem item : fileListAdapter.getOrderedViews())
			item.select(false);
		removeInvalidSelections();
		updateSelectedFileFieldText();
	}
	public void highlightFiles (FileHandle... files) {
		for (FileHandle file : files) {
			FileItem item = fileListAdapter.getViews().get(file);
			if (item != null) {
				item.select(false);
			}
		}
		if (files.length > 0) {
			FileItem item = fileListAdapter.getViews().get(files[0]);
			if (item != null) {
				if (item.getParent() instanceof Table) { 
					((Table) item.getParent()).layout();
				}
				item.localToParentCoordinates(tmpVector.setZero());
				fileListView.getScrollPane().scrollTo(tmpVector.x, tmpVector.y, item.getWidth(), item.getHeight(), false, true);
			}
		}
		updateSelectedFileFieldText();
	}
	private void updateSelectedFileFieldText () {
		updateSelectedFileFieldText(false);
	}
	private void updateSelectedFileFieldText (boolean ignoreKeyboardFocus) {
		if (ignoreKeyboardFocus == false && getChooserStage() != null) {
			if (getChooserStage().getKeyboardFocus() == selectedFileTextField) return;
		}
		if (selectedItems.size == 0) {
			selectedFileTextField.setText("");
		} else if (selectedItems.size == 1) {
			selectedFileTextField.setText(selectedItems.get(0).getFile().name());
		} else {
			StringBuilder builder = new StringBuilder();
			for (FileItem item : selectedItems) {
				builder.append('"');
				builder.append(item.file.name());
				builder.append("\" ");
			}
			selectedFileTextField.setText(builder.toString());
		}
		selectedFileTextField.setCursorAtTextEnd();
	}
	private void removeInvalidSelections () {
		if (selectionMode == SelectionMode.FILES) {
			Iterator<FileItem> it = selectedItems.iterator();
			while (it.hasNext()) {
				FileItem item = it.next();
				if (item.file.isDirectory()) {
					item.deselect(false);
					it.remove();
				}
			}
		}
		if (selectionMode == SelectionMode.DIRECTORIES) {
			Iterator<FileItem> it = selectedItems.iterator();
			while (it.hasNext()) {
				FileItem item = it.next();
				if (item.file.isDirectory() == false) {
					item.deselect(false);
					it.remove();
				}
			}
		}
	}
	public Mode getMode () {
		return mode;
	}
	public void setMode (Mode mode) {
		this.mode = mode;
		confirmButton.setText(mode == Mode.OPEN ? OPEN.get() : SAVE.get());
		refresh();
	}
	public ViewMode getViewMode () {
		return viewMode;
	}
	public void setViewMode (ViewMode viewMode) {
		if (this.viewMode == viewMode) return;
		this.viewMode = viewMode;
		iconProvider.viewModeChanged(viewMode);
		rebuildFileList();
	}
	public void setDirectory (String directory) {
		setDirectory(Gdx.files.absolute(directory), HistoryPolicy.CLEAR);
	}
	public void setDirectory (File directory) {
		setDirectory(Gdx.files.absolute(directory.getAbsolutePath()), HistoryPolicy.CLEAR);
	}
	public void setDirectory (FileHandle directory) {
		setDirectory(directory, HistoryPolicy.CLEAR);
	}
	@Override
	public void setDirectory (FileHandle directory, HistoryPolicy historyPolicy) {
		if (directory.equals(currentDirectory)) return;
		if (historyPolicy == HistoryPolicy.ADD) historyManager.historyAdd();
		currentDirectory = directory;
		iconProvider.directoryChanged(directory);
		rebuildFileList();
		if (historyPolicy == HistoryPolicy.CLEAR) historyManager.historyClear();
		updateFavoriteFolderButton();
	}
	@Override
	public FileHandle getCurrentDirectory () {
		return currentDirectory;
	}
	private FileHandle getDefaultStartingDirectory () {
		return Gdx.files.absolute(System.getProperty("user.home"));
	}
	private FileHandle[] listFilteredCurrentDirectory () {
		FileHandle[] files = currentDirectory.list(fileFilter);
		if (fileTypeFilter == null || activeFileTypeRule == null) return files;
		FileHandle[] filtered = new FileHandle[files.length];
		int count = 0;
		for (FileHandle file : files) {
			if (file.isDirectory() == false && activeFileTypeRule.accept(file) == false) continue;
			filtered[count++] = file;
		}
		if (count == 0) return new FileHandle[0];
		FileHandle[] newFiltered = new FileHandle[count];
		System.arraycopy(filtered, 0, newFiltered, 0, count);
		return newFiltered;
	}
	public FileFilter getFileFilter () {
		return fileFilter;
	}
	public void setFileFilter (FileFilter fileFilter) {
		this.fileFilter = fileFilter;
		rebuildFileList();
	}
	public void setFileTypeFilter (FileTypeFilter fileTypeFilter) {
		if (fileTypeFilter == null) {
			this.fileTypeFilter = null;
			this.activeFileTypeRule = null;
		} else {
			if (fileTypeFilter.getRules().size == 0)
				throw new IllegalArgumentException("FileTypeFilter doesn't have any rules added");
			this.fileTypeFilter = new FileTypeFilter(fileTypeFilter);
			this.activeFileTypeRule = this.fileTypeFilter.getRules().first();
		}
		updateFileTypeSelectBox();
		rebuildFileList();
	}
	public FileTypeFilter.Rule getActiveFileTypeFilterRule () {
		return activeFileTypeRule;
	}
	public SelectionMode getSelectionMode () {
		return selectionMode;
	}
	public void setSelectionMode (SelectionMode selectionMode) {
		if (selectionMode == null) selectionMode = SelectionMode.FILES;
		this.selectionMode = selectionMode;
		switch (selectionMode) {
			case FILES:
				getTitleLabel().setText(TITLE_CHOOSE_FILES.get());
				break;
			case DIRECTORIES:
				getTitleLabel().setText(TITLE_CHOOSE_DIRECTORIES.get());
				break;
			case FILES_AND_DIRECTORIES:
				getTitleLabel().setText(TITLE_CHOOSE_FILES_AND_DIRECTORIES.get());
				break;
		}
		updateFileTypeSelectBox();
		rebuildFileList();
	}
	public FileSorting getSorting () {
		return sorting.get();
	}
	public void setSorting (FileSorting sorting, boolean sortingOrderAscending) {
		this.sorting.set(sorting);
		this.sortingOrderAscending.set(sortingOrderAscending);
		rebuildFileList();
	}
	public void setSorting (FileSorting sorting) {
		this.sorting.set(sorting);
		rebuildFileList();
	}
	public boolean isSortingOrderAscending () {
		return sortingOrderAscending.get();
	}
	public void setSortingOrderAscending (boolean sortingOrderAscending) {
		this.sortingOrderAscending.set(sortingOrderAscending);
		rebuildFileList();
	}
	public void setFavoriteFolderButtonVisible (boolean favoriteFolderButtonVisible) {
		favoriteFolderButton.setVisible(favoriteFolderButtonVisible);
	}
	public boolean isFavoriteFolderButtonVisible () {
		return favoriteFolderButton.isVisible();
	}
	public void setViewModeButtonVisible (boolean viewModeButtonVisible) {
		viewModeButton.setVisible(viewModeButtonVisible);
	}
	public boolean isViewModeButtonVisible () {
		return viewModeButton.isVisible();
	}
	public boolean isMultiSelectionEnabled () {
		return multiSelectionEnabled;
	}
	public void setMultiSelectionEnabled (boolean multiSelectionEnabled) {
		this.multiSelectionEnabled = multiSelectionEnabled;
	}
	public void setListener (FileChooserListener newListener) {
		this.listener = newListener;
		if (listener == null) listener = new FileChooserAdapter();
	}
	public boolean isShowSelectionCheckboxes () {
		return showSelectionCheckboxes;
	}
	public void setShowSelectionCheckboxes (boolean showSelectionCheckboxes) {
		this.showSelectionCheckboxes = showSelectionCheckboxes;
		rebuildFileList();
	}
	public int getMultiSelectKey () {
		return multiSelectKey;
	}
	public void setMultiSelectKey (int multiSelectKey) {
		this.multiSelectKey = multiSelectKey;
	}
	public int getGroupMultiSelectKey () {
		return groupMultiSelectKey;
	}
	public void setGroupMultiSelectKey (int groupMultiSelectKey) {
		this.groupMultiSelectKey = groupMultiSelectKey;
	}
	private boolean isMultiSelectKeyPressed () {
		if (multiSelectKey == DEFAULT_KEY)
			return UIUtils.ctrl();
		else
			return Gdx.input.isKeyPressed(multiSelectKey);
	}
	private boolean isGroupMultiSelectKeyPressed () {
		if (groupMultiSelectKey == DEFAULT_KEY)
			return UIUtils.shift();
		else
			return Gdx.input.isKeyPressed(groupMultiSelectKey);
	}
	public FileChooserStyle getChooserStyle () {
		return style;
	}
	public Sizes getSizes () {
		return sizes;
	}
	private Stage getChooserStage () {
		return getStage();
	}
	public void setWatchingFilesEnabled (boolean watchingFilesEnabled) {
		if (getChooserStage() != null)
			throw new IllegalStateException("Pooling setting cannot be changed when file chooser is added to Stage!");
		this.watchingFilesEnabled = watchingFilesEnabled;
	}
	public void setPrefsName (String prefsName) {
		preferencesIO = new PreferencesIO(prefsName);
		reloadPreferences(true);
	}
	private void reloadPreferences (boolean rebuildUI) {
		favorites = preferencesIO.loadFavorites();
		recentDirectories = preferencesIO.loadRecentDirectories();
		if (rebuildUI) rebuildShortcutsFavoritesPanel();
	}
	@Override
	public void draw (Batch batch, float parentAlpha) {
		super.draw(batch, parentAlpha);
		if (shortcutsListRebuildScheduled) rebuildShortcutsList();
		if (filesListRebuildScheduled) rebuildFileList();
	}
	@Override
	protected void setStage (Stage stage) {
		super.setStage(stage);
		if (stage != null) {
			refresh(true);
			rebuildShortcutsFavoritesPanel(); 
			deselectAll();
			if (focusFileScrollPaneOnShow) {
				stage.setScrollFocus(fileListView.getScrollPane());
			}
			if (focusSelectedFileTextFieldOnShow) {
				FocusManager.switchFocus(stage, selectedFileTextField);
				stage.setKeyboardFocus(selectedFileTextField);
			}
		}
		if (watchingFilesEnabled) {
			if (stage != null) {
				startFileWatcher();
			} else {
				stopFileWatcher();
			}
		}
	}
	private void startFileWatcher () {
		if (fileWatcherThread != null) return;
		fileWatcherThread = new Thread(new Runnable() {
			File[] lastRoots;
			FileHandle lastCurrentDirectory;
			FileHandle[] lastCurrentFiles;
			@Override
			public void run () {
				lastRoots = File.listRoots();
				lastCurrentDirectory = currentDirectory;
				lastCurrentFiles = currentDirectory.list();
				while (fileWatcherThread != null) {
					File[] roots = File.listRoots();
					if (roots.length != lastRoots.length || Arrays.equals(lastRoots, roots) == false)
						shortcutsListRebuildScheduled = true;
					lastRoots = roots;
					if (lastCurrentDirectory.equals(currentDirectory) == true) {
						FileHandle[] currentFiles = currentDirectory.list();
						if (lastCurrentFiles.length != currentFiles.length || Arrays.equals(lastCurrentFiles, currentFiles) == false)
							filesListRebuildScheduled = true;
						lastCurrentFiles = currentFiles;
					} else
						lastCurrentFiles = currentDirectory.list(); 
					lastCurrentDirectory = currentDirectory;
					try {
						Thread.sleep(FILE_WATCHER_CHECK_DELAY_MILLIS);
					} catch (InterruptedException ignored) {
					}
				}
			}
		}, "FileWatcherThread");
		fileWatcherThread.setDaemon(true);
		fileWatcherThread.start();
	}
	private void stopFileWatcher () {
		if (fileWatcherThread == null) return;
		fileWatcherThread.interrupt();
		fileWatcherThread = null;
	}
	private void showNewDirectoryDialog () {
		Dialogs.showInputDialog(getChooserStage(), NEW_DIRECTORY_DIALOG_TITLE.get(), NEW_DIRECTORY_DIALOG_TEXT.get(), true, new InputDialogAdapter() {
			@Override
			public void finished (String input) {
				if (FileUtils.isValidFileName(input) == false) {
					Dialogs.showErrorDialog(getChooserStage(), NEW_DIRECTORY_DIALOG_ILLEGAL_CHARACTERS.get());
					return;
				}
				for (FileHandle file : currentDirectory.list()) {
					if (file.name().equals(input)) {
						Dialogs.showErrorDialog(getChooserStage(), NEW_DIRECTORY_DIALOG_ALREADY_EXISTS.get());
						return;
					}
				}
				FileHandle newDir = currentDirectory.child(input);
				newDir.mkdirs();
				refresh();
				highlightFiles(newDir);
			}
		});
	}
	private void showFileDeleteDialog (final FileHandle fileToDelete) {
		Dialogs.showOptionDialog(getChooserStage(), POPUP_TITLE.get(),
				fileDeleter.hasTrash() ? CONTEXT_MENU_MOVE_TO_TRASH_WARNING.get() : CONTEXT_MENU_DELETE_WARNING.get(),
				OptionDialogType.YES_NO, new OptionDialogAdapter() {
					@Override
					public void yes () {
						try {
							boolean success = fileDeleter.delete(fileToDelete);
							if (success == false) {
								Dialogs.showErrorDialog(getChooserStage(), POPUP_DELETE_FILE_FAILED.get());
							}
						} catch (IOException e) {
							Dialogs.showErrorDialog(getChooserStage(), POPUP_DELETE_FILE_FAILED.get(), e);
							e.printStackTrace();
						}
						refresh();
					}
				});
	}
	public void setFileDeleter (FileDeleter fileDeleter) {
		if (fileDeleter == null) throw new IllegalStateException("fileDeleter can't be null");
		this.fileDeleter = fileDeleter;
		fileMenu.fileDeleterChanged(fileDeleter.hasTrash());
	}
	public void setIconProvider (FileIconProvider iconProvider) {
		this.iconProvider = iconProvider;
		rebuildViewModePopupMenu();
	}
	public FileIconProvider getIconProvider () {
		return iconProvider;
	}
	public static boolean isSaveLastDirectory () {
		return saveLastDirectory;
	}
	public static void setSaveLastDirectory (boolean saveLastDirectory) {
		FileChooser.saveLastDirectory = saveLastDirectory;
	}
	public enum Mode {
		OPEN, SAVE
	}
	public enum SelectionMode {
		FILES, DIRECTORIES, FILES_AND_DIRECTORIES
	}
	public enum FileSorting {
		NAME(FileUtils.FILE_NAME_COMPARATOR),
		MODIFIED_DATE(FileUtils.FILE_MODIFIED_DATE_COMPARATOR),
		SIZE(FileUtils.FILE_SIZE_COMPARATOR);
		private final Comparator<FileHandle> comparator;
		FileSorting (Comparator<FileHandle> comparator) {
			this.comparator = comparator;
		}
	}
	public enum HistoryPolicy {
		ADD, CLEAR, IGNORE
	}
	public enum ViewMode {
		DETAILS(false, VIEW_MODE_DETAILS),
		BIG_ICONS(true, VIEW_MODE_BIG_ICONS),
		MEDIUM_ICONS(true, VIEW_MODE_MEDIUM_ICONS),
		SMALL_ICONS(true, VIEW_MODE_SMALL_ICONS),
		LIST(false, VIEW_MODE_LIST);
		private final FileChooserText bundleText;
		private final boolean thumbnailMode;
		ViewMode (boolean thumbnailMode, FileChooserText bundleText) {
			this.thumbnailMode = thumbnailMode;
			this.bundleText = bundleText;
		}
		public String getBundleText () {
			return bundleText.get();
		}
		public void setupGridGroup (Sizes sizes, GridGroup group) {
			if (isGridMode() == false) return;
			float gridSize = getGridSize(sizes);
			if (gridSize < 0) {
				throw new IllegalStateException("FileChooser's ViewMode " + this.toString() + " has invalid size defined in Sizes. " +
						"Expected value greater than 0, got: " + gridSize + ". Check your skin Sizes definition.");
			}
			if (this == LIST) {
				group.setItemSize(gridSize, 22 * sizes.scaleFactor);
				return;
			}
			group.setItemSize(gridSize);
		}
		public boolean isGridMode () {
			return isThumbnailMode() || this == LIST;
		}
		public boolean isThumbnailMode () {
			return thumbnailMode;
		}
		public float getGridSize (Sizes sizes) {
			switch (this) {
				case DETAILS:
					return -1;
				case BIG_ICONS:
					return sizes.fileChooserViewModeBigIconsSize;
				case MEDIUM_ICONS:
					return sizes.fileChooserViewModeMediumIconsSize;
				case SMALL_ICONS:
					return sizes.fileChooserViewModeSmallIconsSize;
				case LIST:
					return sizes.fileChooserViewModeListWidthSize;
				default:
					return -1;
			}
		}
	}
	public interface FileIconProvider {
		Drawable provideIcon (FileItem item);
		boolean isThumbnailModesSupported ();
		void directoryChanged (FileHandle newDirectory);
		void viewModeChanged (ViewMode newViewMode);
	}
	public static class DefaultFileIconProvider implements FileIconProvider {
		protected FileChooser chooser;
		protected FileChooserStyle style;
		public DefaultFileIconProvider (FileChooser chooser) {
			this.chooser = chooser;
			this.style = chooser.style;
		}
		@Override
		public Drawable provideIcon (FileItem item) {
			if (item.isDirectory()) return getDirIcon(item);
			String ext = item.getFile().extension().toLowerCase();
			if (ext.equals("jpg") || ext.equals("jpeg") || ext.equals("png") || ext.equals("bmp"))
				return getImageIcon(item);
			if (ext.equals("wav") || ext.equals("ogg") || ext.equals("mp3")) return getAudioIcon(item);
			if (ext.equals("pdf")) return getPdfIcon(item);
			if (ext.equals("txt")) return getTextIcon(item);
			return getDefaultIcon(item);
		}
		protected Drawable getDirIcon (FileItem item) {
			return style.iconFolder;
		}
		protected Drawable getImageIcon (FileItem item) {
			return style.iconFileImage;
		}
		protected Drawable getAudioIcon (FileItem item) {
			return style.iconFileAudio;
		}
		protected Drawable getPdfIcon (FileItem item) {
			return style.iconFilePdf;
		}
		protected Drawable getTextIcon (FileItem item) {
			return style.iconFileText;
		}
		protected Drawable getDefaultIcon (FileItem item) {
			return null;
		}
		@Override
		public boolean isThumbnailModesSupported () {
			return false;
		}
		@Override
		public void directoryChanged (FileHandle newDirectory) {
		}
		@Override
		public void viewModeChanged (ViewMode newViewMode) {
		}
	}
	public static class DefaultFileFilter implements FileFilter {
		private FileChooser chooser;
		private boolean ignoreChooserSelectionMode = false;
		public DefaultFileFilter (FileChooser chooser) {
			this.chooser = chooser;
		}
		@Override
		public boolean accept (File f) {
			if (f.isHidden()) return false;
			if (chooser.getMode() == Mode.OPEN ? f.canRead() == false : f.canWrite() == false) return false;
			if (ignoreChooserSelectionMode == false && f.isDirectory() == false &&
					chooser.getSelectionMode() == SelectionMode.DIRECTORIES) {
				return false;
			}
			return true;
		}
		public boolean isIgnoreChooserSelectionMode () {
			return ignoreChooserSelectionMode;
		}
		public void setIgnoreChooserSelectionMode (boolean ignoreChooserSelectionMode) {
			this.ignoreChooserSelectionMode = ignoreChooserSelectionMode;
		}
	}
	public interface FileDeleter {
		boolean hasTrash ();
		boolean delete (FileHandle file) throws IOException;
	}
	public static final class DefaultFileDeleter implements FileDeleter {
		@Override
		public boolean hasTrash () {
			return false;
		}
		@Override
		public boolean delete (FileHandle file) {
			return file.deleteDirectory();
		}
	}
	private class ShowBusyBarTask extends Timer.Task {
		@Override
		public void run () {
			fileListBusyBar.resetSegment();
			fileListBusyBar.setVisible(true);
			currentFiles.clear();
			currentFilesMetadata.clear();
			fileListAdapter.itemsChanged();
		}
		@Override
		public synchronized void cancel () {
			super.cancel();
			fileListBusyBar.setVisible(false);
		}
	}
	public class FileItem extends Table implements Focusable {
		private FileHandle file;
		private FileHandleMetadata metadata;
		private VisCheckBox selectCheckBox;
		private VisImage iconImage;
		public FileItem (final FileHandle file, ViewMode viewMode) {
			this.file = file;
			this.metadata = currentFilesMetadata.get(file);
			if (metadata == null) metadata = FileHandleMetadata.of(file); 
			setTouchable(Touchable.enabled);
			VisLabel name = new VisLabel(metadata.name(), viewMode == ViewMode.SMALL_ICONS ? "small" : "default");
			name.setEllipsis(true);
			Drawable icon = iconProvider.provideIcon(this);
			selectCheckBox = new VisCheckBox("");
			selectCheckBox.setFocusBorderEnabled(false);
			selectCheckBox.setProgrammaticChangeEvents(false);
			boolean shouldShowItemShowCheckBox = showSelectionCheckboxes && (
					(selectionMode == SelectionMode.FILES_AND_DIRECTORIES)
							|| (selectionMode == SelectionMode.FILES && metadata.isDirectory() == false)
							|| (selectionMode == SelectionMode.DIRECTORIES && metadata.isDirectory())
			);
			left();
			if (viewMode.isThumbnailMode()) {
				if (shouldShowItemShowCheckBox) {
					IconStack stack = new IconStack(iconImage = new VisImage(icon, Scaling.none), selectCheckBox);
					add(stack).padTop(3).grow().row();
					add(name).minWidth(1);
				} else {
					add(iconImage = new VisImage(icon, Scaling.none)).padTop(3).grow().row();
					add(name).minWidth(1);
				}
			} else {
				if (shouldShowItemShowCheckBox) add(selectCheckBox).padLeft(3);
				add(iconImage = new VisImage(icon)).padTop(3).minWidth(22 * sizes.scaleFactor);
				add(name).minWidth(1).growX().padRight(10);
				VisLabel size = new VisLabel(isDirectory() ? "" : metadata.readableFileSize(), "small");
				VisLabel dateLabel = new VisLabel(dateFormat.format(metadata.lastModified()), "small");
				size.setAlignment(Align.right);
				if (viewMode == ViewMode.DETAILS) {
					maxDateLabelWidth = Math.max(dateLabel.getWidth(), maxDateLabelWidth);
					add(size).right().padRight(isDirectory() ? 0 : 10);
					add(dateLabel).padRight(6).width(new Value() {
						@Override
						public float get (Actor context) {
							return maxDateLabelWidth;
						}
					});
				}
			}
			addListeners();
		}
		public void setIcon (Drawable icon, Scaling scaling) {
			iconImage.setDrawable(icon);
			iconImage.setScaling(scaling);
			iconImage.invalidateHierarchy();
		}
		private void addListeners () {
			addListener(new InputListener() {
				@Override
				public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
					FocusManager.switchFocus(getChooserStage(), FileItem.this);
					getChooserStage().setKeyboardFocus(FileItem.this);
					return true;
				}
				@Override
				public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
					if (event.getButton() == Buttons.RIGHT) {
						fileMenu.build(favorites, file);
						fileMenu.showMenu(getChooserStage(), event.getStageX(), event.getStageY());
					}
				}
				@Override
				public boolean keyDown (InputEvent event, int keycode) {
					if (keycode == Keys.FORWARD_DEL) {
						showFileDeleteDialog(file);
						return true;
					}
					return false;
				}
			});
			addListener(new ClickListener() {
				@Override
				public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
					if (handleSelectClick(false) == false) return false;
					return super.touchDown(event, x, y, pointer, button);
				}
				@Override
				public void clicked (InputEvent event, float x, float y) {
					super.clicked(event, x, y);
					if (getTapCount() == 2 && selectedItems.contains(FileItem.this, true)) {
						if (file.isDirectory()) {
							setDirectory(file, HistoryPolicy.ADD);
						} else
							selectionFinished();
					}
				}
			});
			selectCheckBox.addListener(new InputListener() {
				@Override
				public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
					event.stop();
					return true;
				}
			});
			selectCheckBox.addListener(new ChangeListener() {
				@Override
				public void changed (ChangeEvent event, Actor actor) {
					event.stop();
					handleSelectClick(true);
				}
			});
		}
		private boolean handleSelectClick (boolean checkboxClicked) {
			if (selectedShortcut != null) selectedShortcut.deselect();
			if (checkboxClicked) {
				if (multiSelectionEnabled == false && selectedItems.contains(FileItem.this, true) == false)
					deselectAll();
			} else {
				if (multiSelectionEnabled == false || (isMultiSelectKeyPressed() == false && isGroupMultiSelectKeyPressed() == false))
					deselectAll();
			}
			boolean itemSelected = select();
			if (selectedItems.size > 1 && multiSelectionEnabled && isGroupMultiSelectKeyPressed())
				selectGroup();
			if (selectedItems.size > 1) removeInvalidSelections();
			updateSelectedFileFieldText();
			return itemSelected;
		}
		private void selectGroup () {
			Array<FileItem> actors = fileListAdapter.getOrderedViews();
			int thisSelectionIndex = getItemId(actors, FileItem.this);
			int lastSelectionIndex = getItemId(actors, selectedItems.get(selectedItems.size - 2));
			int start;
			int end;
			if (thisSelectionIndex > lastSelectionIndex) {
				start = lastSelectionIndex;
				end = thisSelectionIndex;
			} else {
				start = thisSelectionIndex;
				end = lastSelectionIndex;
			}
			for (int i = start; i < end; i++) {
				FileItem item = actors.get(i);
				item.select(false);
			}
		}
		private int getItemId (Array<FileItem> actors, FileItem item) {
			for (int i = 0; i < actors.size; i++) {
				if (actors.get(i) == item) return i;
			}
			throw new IllegalStateException("Item not found in cells");
		}
		private boolean select () {
			return select(true);
		}
		private boolean select (boolean deselectIfAlreadySelected) {
			if (deselectIfAlreadySelected && selectedItems.contains(this, true)) {
				deselect();
				return false;
			}
			setBackground(style.highlight);
			selectCheckBox.setChecked(true);
			if (selectedItems.contains(this, true) == false) selectedItems.add(this);
			return true;
		}
		private void deselect () {
			deselect(true);
		}
		private void deselect (boolean removeFromList) {
			setBackground((Drawable) null);
			selectCheckBox.setChecked(false);
			if (removeFromList) selectedItems.removeValue(this, true);
		}
		@Override
		public void focusLost () {
		}
		@Override
		public void focusGained () {
		}
		public FileHandle getFile () {
			return file;
		}
		public boolean isDirectory () {
			return metadata.isDirectory();
		}
	}
	private class ShortcutItem extends Table implements RootNameListener, Focusable {
		public File file;
		private VisLabel name;
		public ShortcutItem (final File file, String customName, Drawable icon) {
			this.file = file;
			name = new VisLabel(customName);
			name.setEllipsis(true);
			add(new Image(icon)).padTop(3);
			Cell<VisLabel> labelCell = add(name).padRight(6);
			labelCell.width(new Value() {
				@Override
				public float get (Actor context) {
					return mainSplitPane.getFirstWidgetBounds().width - 30;
				}
			});
			addListener();
		}
		private void addListener () {
			addListener(new InputListener() {
				@Override
				public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
					FocusManager.switchFocus(getChooserStage(), ShortcutItem.this);
					getChooserStage().setKeyboardFocus(ShortcutItem.this);
					return true;
				}
				@Override
				public void touchUp (InputEvent event, float x, float y, int pointer, int button) {
					if (event.getButton() == Buttons.RIGHT) {
						fileMenu.buildForFavorite(favorites, file);
						fileMenu.showMenu(getChooserStage(), event.getStageX(), event.getStageY());
					}
				}
				@Override
				public boolean keyDown (InputEvent event, int keycode) {
					if (keycode == Keys.FORWARD_DEL) {
						FileHandle gdxFile = Gdx.files.absolute(file.getAbsolutePath());
						if (favorites.contains(gdxFile, false)) {
							removeFavorite(gdxFile);
						}
						return true;
					}
					return false;
				}
			});
			addListener(new ClickListener() {
				@Override
				public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {
					deselectAll();
					updateSelectedFileFieldText();
					select();
					return super.touchDown(event, x, y, pointer, button);
				}
				@Override
				public void clicked (InputEvent event, float x, float y) {
					super.clicked(event, x, y);
					if (getTapCount() == 1) {
						File file = ShortcutItem.this.file;
						if (file.exists() == false) {
							showDialog(POPUP_DIRECTORY_DOES_NOT_EXIST.get());
							refresh();
							return;
						}
						if (file.isDirectory()) {
							setDirectory(Gdx.files.absolute(file.getAbsolutePath()), HistoryPolicy.ADD);
							getChooserStage().setScrollFocus(fileListView.getScrollPane());
						}
					}
				}
			});
		}
		public void setLabelText (String text) {
			name.setText(text);
		}
		public String getLabelText () {
			return name.getText().toString();
		}
		private void select () {
			if (selectedShortcut != null) selectedShortcut.deselect();
			selectedShortcut = ShortcutItem.this;
			setBackground(style.highlight);
		}
		private void deselect () {
			setBackground((Drawable) null);
		}
		@Override
		public void setRootName (String newName) {
			setLabelText(newName);
		}
		@Override
		public void focusGained () {
		}
		@Override
		public void focusLost () {
		}
	}
	private static class ShortcutsComparator implements Comparator<Actor> {
		@Override
		public int compare (Actor o1, Actor o2) {
			ShortcutItem s1 = (ShortcutItem) o1;
			ShortcutItem s2 = (ShortcutItem) o2;
			return s1.getLabelText().compareTo(s2.getLabelText());
		}
	}
}
package com.kotcrab.vis.ui.widget;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.*;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Cell;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.badlogic.gdx.utils.Align;
import com.badlogic.gdx.utils.Pools;
import com.badlogic.gdx.utils.Scaling;
import com.kotcrab.vis.ui.Sizes;
import com.kotcrab.vis.ui.VisUI;
import com.kotcrab.vis.ui.util.OsUtils;
public class MenuItem extends Button {
	private static final Vector2 tmpVector = new Vector2();
	private MenuItemStyle style;
	private Image image;
	private Cell<Image> imageCell;
	private boolean generateDisabledImage = true;
	private Label label;
	private Color shortcutLabelColor;
	private VisLabel shortcutLabel;
	private Image subMenuImage;
	private Cell<Image> subMenuIconCell;
	private PopupMenu subMenu;
	PopupMenu containerMenu;
	public MenuItem (String text) {
		this(text, (Image) null, VisUI.getSkin().get(MenuItemStyle.class));
	}
	public MenuItem (String text, String styleName) {
		this(text, (Image) null, VisUI.getSkin().get(styleName, MenuItemStyle.class));
	}
	public MenuItem (String text, ChangeListener changeListener) {
		this(text, (Image) null, VisUI.getSkin().get(MenuItemStyle.class));
		addListener(changeListener);
	}
	public MenuItem (String text, Drawable drawable) {
		this(text, drawable, VisUI.getSkin().get(MenuItemStyle.class));
	}
	public MenuItem (String text, Drawable drawable, ChangeListener changeListener) {
		this(text, drawable, VisUI.getSkin().get(MenuItemStyle.class));
		addListener(changeListener);
	}
	public MenuItem (String text, Drawable drawable, String styleName) {
		this(text, drawable, VisUI.getSkin().get(styleName, MenuItemStyle.class));
	}
	public MenuItem (String text, Image image) {
		this(text, image, VisUI.getSkin().get(MenuItemStyle.class));
	}
	public MenuItem (String text, Image image, ChangeListener changeListener) {
		this(text, image, VisUI.getSkin().get(MenuItemStyle.class));
		addListener(changeListener);
	}
	public MenuItem (String text, Image image, String styleName) {
		this(text, image, VisUI.getSkin().get(styleName, MenuItemStyle.class));
	}
	public MenuItem (String text, Image image, MenuItemStyle style) {
		super(style);
		init(text, image, style);
	}
	public MenuItem (String text, Drawable drawable, MenuItemStyle style) {
		super(style);
		init(text, new Image(drawable), style);
	}
	private void init (String text, Image image, MenuItemStyle style) {
		this.style = style;
		this.image = image;
		setSkin(VisUI.getSkin());
		Sizes sizes = VisUI.getSizes();
		defaults().space(3);
		if (image != null) image.setScaling(Scaling.fit);
		imageCell = add(image).size(sizes.menuItemIconSize);
		label = new Label(text, new LabelStyle(style.font, style.fontColor));
		label.setAlignment(Align.left);
		add(label).expand().fill();
		add(shortcutLabel = new VisLabel("", "menuitem-shortcut")).padLeft(10).right();
		shortcutLabelColor = shortcutLabel.getStyle().fontColor;
		subMenuIconCell = add(subMenuImage = new Image(style.subMenu)).padLeft(3).padRight(3)
				.size(style.subMenu.getMinWidth(), style.subMenu.getMinHeight());
		subMenuIconCell.setActor(null);
		addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				if (subMenu != null) { 
					event.stop();
				}
			}
		});
		addListener(new InputListener() {
			@Override
			public void enter (InputEvent event, float x, float y, int pointer, Actor fromActor) {
				if (subMenu != null) { 
					subMenu.setActiveItem(null, false);
					subMenu.setActiveSubMenu(null);
				}
				if (subMenu == null || isDisabled()) { 
					hideSubMenu();
				} else {
					showSubMenu();
				}
			}
		});
	}
	public void setSubMenu (final PopupMenu subMenu) {
		this.subMenu = subMenu;
		if (subMenu == null) {
			subMenuIconCell.setActor(null);
		} else {
			subMenuIconCell.setActor(subMenuImage);
		}
	}
	public PopupMenu getSubMenu () {
		return subMenu;
	}
	void packContainerMenu () {
		if (containerMenu != null) containerMenu.pack();
	}
	@Override
	protected void setParent (Group parent) {
		super.setParent(parent);
		if (parent instanceof PopupMenu)
			containerMenu = (PopupMenu) parent;
		else
			containerMenu = null;
	}
	void hideSubMenu () {
		if (containerMenu != null) {
			containerMenu.setActiveSubMenu(null);
		}
	}
	void showSubMenu () {
		Stage stage = getStage();
		Vector2 pos = localToStageCoordinates(tmpVector.setZero());
		float availableSpaceLeft = pos.x;
		float availableSpaceRight = stage.getWidth() - (pos.x + getWidth());
		boolean canFitOnTheRight = pos.x + getWidth() + subMenu.getWidth() <= stage.getWidth();
		float subMenuX;
		if (canFitOnTheRight || availableSpaceRight > availableSpaceLeft) {
			subMenuX = pos.x + getWidth() - 1;
		} else {
			subMenuX = pos.x - subMenu.getWidth() + 1;
		}
		if (containerMenu.getActiveSubMenu() != subMenu) {
			boolean hasEnoughBottomSpace = stage.getHeight() - (pos.y + getHeight()) + subMenu.getHeight() <= stage.getHeight();
			float heightCorrection = hasEnoughBottomSpace ? getHeight() : 0;
			subMenu.showMenu(stage, subMenuX, pos.y + heightCorrection);
			containerMenu.setActiveSubMenu(subMenu);
		}
	}
	void fireChangeEvent () {
		ChangeListener.ChangeEvent changeEvent = Pools.obtain(ChangeListener.ChangeEvent.class);
		fire(changeEvent);
		Pools.free(changeEvent);
	}
	@Override
	public MenuItemStyle getStyle () {
		return style;
	}
	@Override
	public void setStyle (ButtonStyle style) {
		if (!(style instanceof MenuItemStyle)) throw new IllegalArgumentException("style must be a MenuItemStyle.");
		super.setStyle(style);
		this.style = (MenuItemStyle) style;
		if (label != null) {
			TextButtonStyle textButtonStyle = (TextButtonStyle) style;
			LabelStyle labelStyle = label.getStyle();
			labelStyle.font = textButtonStyle.font;
			labelStyle.fontColor = textButtonStyle.fontColor;
			label.setStyle(labelStyle);
		}
	}
	@Override
	public void draw (Batch batch, float parentAlpha) {
		Color fontColor;
		if (isDisabled() && style.disabledFontColor != null)
			fontColor = style.disabledFontColor;
		else if (isPressed() && style.downFontColor != null)
			fontColor = style.downFontColor;
		else if (isChecked() && style.checkedFontColor != null)
			fontColor = (isOver() && style.checkedOverFontColor != null) ? style.checkedOverFontColor : style.checkedFontColor;
		else if (isOver() && style.overFontColor != null)
			fontColor = style.overFontColor;
		else
			fontColor = style.fontColor;
		if (fontColor != null) label.getStyle().fontColor = fontColor;
		if (isDisabled())
			shortcutLabel.getStyle().fontColor = style.disabledFontColor;
		else
			shortcutLabel.getStyle().fontColor = shortcutLabelColor;
		if (generateDisabledImage && image != null) {
			if (isDisabled()) {
				image.setColor(Color.GRAY);
			} else {
				image.setColor(Color.WHITE);
			}
		}
		super.draw(batch, parentAlpha);
	}
	@Override
	public boolean isOver () {
		if (containerMenu == null || containerMenu.getActiveItem() == null) {
			return super.isOver();
		} else {
			return containerMenu.getActiveItem() == this;
		}
	}
	public boolean isGenerateDisabledImage () {
		return generateDisabledImage;
	}
	public void setGenerateDisabledImage (boolean generateDisabledImage) {
		this.generateDisabledImage = generateDisabledImage;
	}
	public MenuItem setShortcut (int keycode) {
		return setShortcut(Keys.toString(keycode));
	}
	public CharSequence getShortcut () {
		return shortcutLabel.getText();
	}
	public MenuItem setShortcut (String text) {
		shortcutLabel.setText(text);
		packContainerMenu();
		return this;
	}
	public MenuItem setShortcut (int... keycodes) {
		shortcutLabel.setText(OsUtils.getShortcutFor(keycodes));
		packContainerMenu();
		return this;
	}
	@Override
	protected void setStage (Stage stage) {
		super.setStage(stage);
		label.invalidate(); 
	}
	public Image getImage () {
		return image;
	}
	public Cell<?> getImageCell () {
		return imageCell;
	}
	public Label getLabel () {
		return label;
	}
	public Cell<?> getLabelCell () {
		return getCell(label);
	}
	public CharSequence getText () {
		return label.getText();
	}
	public void setText (CharSequence text) {
		label.setText(text);
	}
	public Cell<Image> getSubMenuIconCell () {
		return subMenuIconCell;
	}
	public Cell<VisLabel> getShortcutCell () {
		return getCell(shortcutLabel);
	}
	static public class MenuItemStyle extends TextButtonStyle {
		public Drawable subMenu;
		public MenuItemStyle () {
		}
		public MenuItemStyle (Drawable subMenu) {
			this.subMenu = subMenu;
		}
		public MenuItemStyle (MenuItemStyle style) {
			super(style);
			this.subMenu = style.subMenu;
		}
	}
}
package com.kotcrab.vis.ui;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Version;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.utils.Align;
import com.badlogic.gdx.utils.GdxRuntimeException;
public class VisUI {
	private static final String TARGET_GDX_VERSION = "1.13.1";
	private static boolean skipGdxVersionCheck = false;
	private static int defaultTitleAlign = Align.left;
	private static SkinScale scale;
	private static Skin skin;
	public enum SkinScale {
		X1("com/kotcrab/vis/ui/skin/x1/uiskin.json", "default"),
		X2("com/kotcrab/vis/ui/skin/x2/uiskin.json", "x2");
		private final String classpath;
		private final String sizesName;
		SkinScale (String classpath, String sizesName) {
			this.classpath = classpath;
			this.sizesName = sizesName;
		}
		public FileHandle getSkinFile () {
			return Gdx.files.classpath(classpath);
		}
		public String getSizesName () {
			return sizesName;
		}
	}
	public static void load () {
		load(SkinScale.X1);
	}
	public static void load (SkinScale scale) {
		VisUI.scale = scale;
		load(scale.getSkinFile());
	}
	public static void load (String internalVisSkinPath) {
		load(Gdx.files.internal(internalVisSkinPath));
	}
	public static void load (FileHandle visSkinFile) {
		checkBeforeLoad();
		VisUI.skin = new Skin(visSkinFile);
	}
	public static void load (Skin skin) {
		checkBeforeLoad();
		VisUI.skin = skin;
	}
	private static void checkBeforeLoad () {
		if (skin != null) throw new GdxRuntimeException("VisUI cannot be loaded twice");
		if (!skipGdxVersionCheck && !Version.VERSION.equals(TARGET_GDX_VERSION)) {
			Gdx.app.log("VisUI", "Warning, using invalid libGDX version.\n" +
					"You are using libGDX " + Version.VERSION + " but you need " + TARGET_GDX_VERSION + ". This may cause " +
					"unexpected problems and runtime exceptions.");
		}
	}
	public static void dispose () {
		dispose(true);
	}
	public static void dispose (boolean disposeSkin) {
		if (skin != null) {
			if (disposeSkin) skin.dispose();
			skin = null;
		}
	}
	public static Skin getSkin () {
		if (skin == null) throw new IllegalStateException("VisUI is not loaded!");
		return skin;
	}
	public static boolean isLoaded () {
		return skin != null;
	}
	public static Sizes getSizes () {
		if (scale == null)
			return getSkin().get(Sizes.class);
		else
			return getSkin().get(scale.getSizesName(), Sizes.class);
	}
	public static int getDefaultTitleAlign () {
		return defaultTitleAlign;
	}
	public static void setDefaultTitleAlign (int defaultTitleAlign) {
		VisUI.defaultTitleAlign = defaultTitleAlign;
	}
	public static void setSkipGdxVersionCheck (boolean setSkipGdxVersionCheck) {
		VisUI.skipGdxVersionCheck = setSkipGdxVersionCheck;
	}
}
package com.kotcrab.vis.ui.widget;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.scenes.scene2d.ui.Widget;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.kotcrab.vis.ui.VisUI;
public class Separator extends Widget {
	private SeparatorStyle style;
	public Separator () {
		style = VisUI.getSkin().get(SeparatorStyle.class);
	}
	public Separator (String styleName) {
		style = VisUI.getSkin().get(styleName, SeparatorStyle.class);
	}
	public Separator (SeparatorStyle style) {
		this.style = style;
	}
	@Override
	public float getPrefHeight () {
		return style.thickness;
	}
	@Override
	public float getPrefWidth () {
		return style.thickness;
	}
	@Override
	public void draw (Batch batch, float parentAlpha) {
		Color c = getColor();
		batch.setColor(c.r, c.g, c.b, c.a * parentAlpha);
		style.background.draw(batch, getX(), getY(), getWidth(), getHeight());
	}
	public SeparatorStyle getStyle () {
		return style;
	}
	static public class SeparatorStyle {
		public Drawable background;
		public int thickness;
		public SeparatorStyle () {
		}
		public SeparatorStyle (SeparatorStyle style) {
			this.background = style.background;
			this.thickness = style.thickness;
		}
		public SeparatorStyle (Drawable bg, int thickness) {
			this.background = bg;
			this.thickness = thickness;
		}
	}
}
package com.kotcrab.vis.ui.widget.file.internal;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.actions.Actions;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.utils.Array;
import com.kotcrab.vis.ui.widget.MenuItem;
import com.kotcrab.vis.ui.widget.VisTextField;
import com.kotcrab.vis.ui.widget.file.FileChooser;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
public class DirsSuggestionPopup extends AbstractSuggestionPopup {
	private final VisTextField pathField;
	private ExecutorService listDirExecutor = Executors.newSingleThreadExecutor(new ServiceThreadFactory("FileChooserListDirThread"));
	private Future<?> listDirFuture;
	public DirsSuggestionPopup (FileChooser chooser, VisTextField pathField) {
		super(chooser);
		this.pathField = pathField;
	}
	public void pathFieldKeyTyped (Stage stage, float width) {
		if (pathField.getText().length() == 0) {
			remove();
			return;
		}
		createDirSuggestions(stage, width);
	}
	private void createDirSuggestions (final Stage stage, final float width) {
		final String pathFieldText = pathField.getText();
		addAction(Actions.sequence(Actions.delay(0.2f, Actions.removeActor())));
		if (listDirFuture != null) listDirFuture.cancel(true);
		listDirFuture = listDirExecutor.submit(new Runnable() {
			@Override
			public void run () {
				FileHandle enteredDir = Gdx.files.absolute(pathFieldText);
				final FileHandle listDir;
				final String partialPath;
				if (enteredDir.exists()) {
					listDir = enteredDir;
					partialPath = "";
				} else {
					listDir = enteredDir.parent();
					partialPath = enteredDir.name();
				}
				final FileHandle[] files = listDir.list(chooser.getFileFilter());
				if (Thread.currentThread().isInterrupted()) return;
				Gdx.app.postRunnable(new Runnable() {
					@Override
					public void run () {
						clearChildren();
						clearActions();
						int suggestions = 0;
						for (final FileHandle file : files) {
							if (file.exists() == false || file.isDirectory() == false) continue;
							if (file.name().startsWith(partialPath) == false || file.name().equals(partialPath))
								continue;
							MenuItem item = createMenuItem(file.path());
							item.getLabel().setEllipsis(true);
							item.getLabelCell().width(width - 20);
							addItem(item);
							item.addListener(new ChangeListener() {
								@Override
								public void changed (ChangeEvent event, Actor actor) {
									chooser.setDirectory(file, FileChooser.HistoryPolicy.ADD);
								}
							});
							suggestions++;
							if (suggestions == MAX_SUGGESTIONS) {
								break;
							}
						}
						if (suggestions == 0) {
							remove();
							return;
						}
						showMenu(stage, pathField);
						setWidth(width);
						layout();
					}
				});
			}
		});
	}
	public void showRecentDirectories (Stage stage, Array<FileHandle> recentDirectories, float width) {
		int suggestions = createRecentDirSuggestions(recentDirectories, width);
		if (suggestions == 0) {
			remove();
			return;
		}
		showMenu(stage, pathField);
		setWidth(width);
		layout();
	}
	private int createRecentDirSuggestions (Array<FileHandle> files, float width) {
		clearChildren();
		int suggestions = 0;
		for (final FileHandle file : files) {
			if (file.exists() == false) continue;
			MenuItem item = createMenuItem(file.path());
			item.getLabel().setEllipsis(true);
			item.getLabelCell().width(width - 20);
			addItem(item);
			item.addListener(new ChangeListener() {
				@Override
				public void changed (ChangeEvent event, Actor actor) {
					chooser.setDirectory(file, FileChooser.HistoryPolicy.ADD);
				}
			});
			suggestions++;
			if (suggestions == MAX_SUGGESTIONS) {
				break;
			}
		}
		return suggestions;
	}
}
package com.kotcrab.vis.ui.widget.file.internal;
import com.badlogic.gdx.Files.FileType;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
import com.badlogic.gdx.utils.Array;
import com.kotcrab.vis.ui.widget.MenuItem;
import com.kotcrab.vis.ui.widget.PopupMenu;
import com.kotcrab.vis.ui.widget.file.FileChooser;
import com.kotcrab.vis.ui.widget.file.FileChooserStyle;
import com.kotcrab.vis.ui.widget.file.FileUtils;
import java.io.File;
import java.io.IOException;
import static com.kotcrab.vis.ui.widget.file.internal.FileChooserText.*;
public class FilePopupMenu extends PopupMenu {
	private final FileChooserStyle style;
	private SortingPopupMenu sortingPopupMenu;
	private FileHandle file;
	private MenuItem delete;
	private MenuItem newDirectory;
	private MenuItem showInExplorer;
	private MenuItem refresh;
	private MenuItem addToFavorites;
	private MenuItem removeFromFavorites;
	private MenuItem sortBy;
	public FilePopupMenu (final FileChooser chooser, final FilePopupMenuCallback callback) {
		super(chooser.getChooserStyle().popupMenuStyle);
		this.style = chooser.getChooserStyle();
		sortingPopupMenu = new SortingPopupMenu(chooser);
		delete = new MenuItem(CONTEXT_MENU_DELETE.get(), style.iconTrash);
		newDirectory = new MenuItem(CONTEXT_MENU_NEW_DIRECTORY.get(), style.iconFolderNew);
		showInExplorer = new MenuItem(CONTEXT_MENU_SHOW_IN_EXPLORER.get());
		refresh = new MenuItem(CONTEXT_MENU_REFRESH.get(), style.iconRefresh);
		addToFavorites = new MenuItem(CONTEXT_MENU_ADD_TO_FAVORITES.get(), style.iconFolderStar);
		removeFromFavorites = new MenuItem(CONTEXT_MENU_REMOVE_FROM_FAVORITES.get(), style.iconFolderStar);
		sortBy = new MenuItem(CONTEXT_MENU_SORT_BY.get());
		sortBy.setSubMenu(sortingPopupMenu);
		delete.addListener(new ClickListener() {
			@Override
			public void clicked (InputEvent event, float x, float y) {
				callback.showFileDelDialog(file);
			}
		});
		newDirectory.addListener(new ClickListener() {
			@Override
			public void clicked (InputEvent event, float x, float y) {
				callback.showNewDirDialog();
			}
		});
		showInExplorer.addListener(new ClickListener() {
			@Override
			public void clicked (InputEvent event, float x, float y) {
				try {
					FileUtils.showDirInExplorer(file);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		});
		refresh.addListener(new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				chooser.refresh();
			}
		});
		addToFavorites.addListener(new ClickListener() {
			@Override
			public void clicked (InputEvent event, float x, float y) {
				chooser.addFavorite(file);
			}
		});
		removeFromFavorites.addListener(new ClickListener() {
			@Override
			public void clicked (InputEvent event, float x, float y) {
				chooser.removeFavorite(file);
			}
		});
	}
	public void build () {
		sortingPopupMenu.build();
		clearChildren();
		addItem(newDirectory);
		addItem(sortBy);
		addItem(refresh);
	}
	public void build (Array<FileHandle> favorites, FileHandle file) {
		sortingPopupMenu.build();
		this.file = file;
		clearChildren();
		addItem(newDirectory);
		addItem(sortBy);
		addItem(refresh);
		addSeparator();
		if (file.type() == FileType.Absolute || file.type() == FileType.External) addItem(delete);
		if (file.type() == FileType.Absolute) {
			addItem(showInExplorer);
			if (file.isDirectory()) {
				if (favorites.contains(file, false))
					addItem(removeFromFavorites);
				else
					addItem(addToFavorites);
			}
		}
	}
	public void buildForFavorite (Array<FileHandle> favorites, File file) {
		this.file = Gdx.files.absolute(file.getAbsolutePath());
		clearChildren();
		addItem(showInExplorer);
		if (favorites.contains(this.file, false)) addItem(removeFromFavorites);
	}
	public boolean isAddedToStage () {
		return getStage() != null;
	}
	public void fileDeleterChanged (boolean trashAvailable) {
		delete.setText(trashAvailable ? CONTEXT_MENU_MOVE_TO_TRASH.get() : CONTEXT_MENU_DELETE.get());
	}
	public interface FilePopupMenuCallback {
		void showNewDirDialog ();
		void showFileDelDialog (FileHandle file);
	}
}
package com.kotcrab.vis.ui.widget.file.internal;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;
import com.badlogic.gdx.utils.Scaling;
import com.kotcrab.vis.ui.widget.MenuItem;
import com.kotcrab.vis.ui.widget.PopupMenu;
import com.kotcrab.vis.ui.widget.file.FileChooser;
import static com.kotcrab.vis.ui.widget.file.internal.FileChooserText.*;
public class SortingPopupMenu extends PopupMenu {
	private final FileChooser chooser;
	private final Drawable selectedMenuItem;
	private MenuItem sortByName;
	private MenuItem sortByDate;
	private MenuItem sortBySize;
	private MenuItem sortByAscending;
	private MenuItem sortByDescending;
	private Image sortByNameImage;
	private Image sortByDateImage;
	private Image sortBySizeImage;
	private Image sortByAscendingImage;
	private Image sortByDescendingImage;
	public SortingPopupMenu (final FileChooser chooser) {
		selectedMenuItem = chooser.getChooserStyle().contextMenuSelectedItem;
		this.chooser = chooser;
		addItem(sortByName = new MenuItem(SORT_BY_NAME.get(), selectedMenuItem, new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				chooser.setSorting(FileChooser.FileSorting.NAME, true);
			}
		}));
		addItem(sortByDate = new MenuItem(SORT_BY_DATE.get(), selectedMenuItem, new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				chooser.setSorting(FileChooser.FileSorting.MODIFIED_DATE, false);
			}
		}));
		addItem(sortBySize = new MenuItem(SORT_BY_SIZE.get(), selectedMenuItem, new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				chooser.setSorting(FileChooser.FileSorting.SIZE, true);
			}
		}));
		addSeparator();
		addItem(sortByAscending = new MenuItem(SORT_BY_ASCENDING.get(), selectedMenuItem, new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				chooser.setSortingOrderAscending(true);
			}
		}));
		addItem(sortByDescending = new MenuItem(SORT_BY_DESCENDING.get(), selectedMenuItem, new ChangeListener() {
			@Override
			public void changed (ChangeEvent event, Actor actor) {
				chooser.setSortingOrderAscending(false);
			}
		}));
		sortByNameImage = sortByName.getImage();
		sortByDateImage = sortByDate.getImage();
		sortBySizeImage = sortBySize.getImage();
		sortByAscendingImage = sortByAscending.getImage();
		sortByDescendingImage = sortByDescending.getImage();
		sortByNameImage.setScaling(Scaling.none);
		sortByDateImage.setScaling(Scaling.none);
		sortBySizeImage.setScaling(Scaling.none);
		sortByAscendingImage.setScaling(Scaling.none);
		sortByDescendingImage.setScaling(Scaling.none);
	}
	public void build () {
		sortByNameImage.setDrawable(null);
		sortByDateImage.setDrawable(null);
		sortBySizeImage.setDrawable(null);
		sortByAscendingImage.setDrawable(null);
		sortByDescendingImage.setDrawable(null);
		switch (chooser.getSorting()) {
			case NAME:
				sortByNameImage.setDrawable(selectedMenuItem);
				break;
			case MODIFIED_DATE:
				sortByDateImage.setDrawable(selectedMenuItem);
				break;
			case SIZE:
				sortBySizeImage.setDrawable(selectedMenuItem);
				break;
		}
		if (chooser.isSortingOrderAscending()) {
			sortByAscendingImage.setDrawable(selectedMenuItem);
		} else {
			sortByDescendingImage.setDrawable(selectedMenuItem);
		}
	}
}