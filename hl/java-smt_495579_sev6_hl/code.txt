// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class TermManager {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected TermManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(TermManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(TermManager obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        //BitwuzlaNativeJNI.delete_TermManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public TermManager() {
    this(BitwuzlaNativeJNI.new_TermManager(), true);
  }
  public Sort mk_array_sort(Sort index, Sort element) {
    return new Sort(BitwuzlaNativeJNI.TermManager_mk_array_sort(swigCPtr, this, Sort.getCPtr(index), index, Sort.getCPtr(element), element), true);
  }
  public Sort mk_bool_sort() {
    return new Sort(BitwuzlaNativeJNI.TermManager_mk_bool_sort(swigCPtr, this), true);
  }
  public Sort mk_fun_sort(Vector_Sort domain, Sort codomain) {
    return new Sort(BitwuzlaNativeJNI.TermManager_mk_fun_sort(swigCPtr, this, Vector_Sort.getCPtr(domain), domain, Sort.getCPtr(codomain), codomain), true);
  }
  public Term mk_true() {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_true(swigCPtr, this), true);
  }
  public Term mk_false() {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_false(swigCPtr, this), true);
  }
  public Term mk_bv_zero(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_zero(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_bv_one(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_one(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_bv_ones(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_ones(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_bv_min_signed(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_min_signed(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_bv_max_signed(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_max_signed(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_bv_value(Sort sort, String value, short base) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_value__SWIG_0(swigCPtr, this, Sort.getCPtr(sort), sort, value, base), true);
  }
  public Term mk_bv_value(Sort sort, String value) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_value__SWIG_1(swigCPtr, this, Sort.getCPtr(sort), sort, value), true);
  }
  public Term mk_bv_value_uint64(Sort sort, java.math.BigInteger value) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_value_uint64(swigCPtr, this, Sort.getCPtr(sort), sort, value), true);
  }
  public Term mk_bv_value_int64(Sort sort, long value) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_bv_value_int64(swigCPtr, this, Sort.getCPtr(sort), sort, value), true);
  }
  public Term mk_fp_pos_zero(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_pos_zero(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_fp_neg_zero(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_neg_zero(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_fp_pos_inf(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_pos_inf(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_fp_neg_inf(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_neg_inf(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_fp_nan(Sort sort) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_nan(swigCPtr, this, Sort.getCPtr(sort), sort), true);
  }
  public Term mk_fp_value(Term bv_sign, Term bv_exponent, Term bv_significand) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_value__SWIG_0(swigCPtr, this, Term.getCPtr(bv_sign), bv_sign, Term.getCPtr(bv_exponent), bv_exponent, Term.getCPtr(bv_significand), bv_significand), true);
  }
  public Term mk_fp_value(Sort sort, Term rm, String real) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_value__SWIG_1(swigCPtr, this, Sort.getCPtr(sort), sort, Term.getCPtr(rm), rm, real), true);
  }
  public Term mk_fp_value(Sort sort, Term rm, String num, String den) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_fp_value__SWIG_2(swigCPtr, this, Sort.getCPtr(sort), sort, Term.getCPtr(rm), rm, num, den), true);
  }
  public Term mk_const_array(Sort sort, Term term) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_const_array(swigCPtr, this, Sort.getCPtr(sort), sort, Term.getCPtr(term), term), true);
  }
  public Term mk_rm_value(RoundingMode rm) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_rm_value(swigCPtr, this, rm.swigValue()), true);
  }
  public Term substitute_term(Term term, Map_TermTerm map) {
    return new Term(BitwuzlaNativeJNI.TermManager_substitute_term(swigCPtr, this, Term.getCPtr(term), term, Map_TermTerm.getCPtr(map), map), true);
  }
  public void substitute_terms(Vector_Term terms, Map_TermTerm map) {
    BitwuzlaNativeJNI.TermManager_substitute_terms(swigCPtr, this, Vector_Term.getCPtr(terms), terms, Map_TermTerm.getCPtr(map), map);
  }
  public Sort mk_bv_sort(int size) {
    return new Sort(BitwuzlaNativeJNI.TermManager_mk_bv_sort(swigCPtr, this, size), true);
  }
  public Sort mk_fp_sort(int exp_size, int sig_size) {
    return new Sort(BitwuzlaNativeJNI.TermManager_mk_fp_sort(swigCPtr, this, exp_size, sig_size), true);
  }
  public Term mk_term(Kind kind, Term t1) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_0(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1), true);
  }
  public Term mk_term(Kind kind, Term t1, int i1) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_1(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1, i1), true);
  }
  public Term mk_term(Kind kind, Term t1, int i1, int i2) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_2(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1, i1, i2), true);
  }
  public Term mk_term(Kind kind, Term t1, Term t2) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_3(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1, Term.getCPtr(t2), t2), true);
  }
  public Term mk_term(Kind kind, Term t1, Term t2, int i1) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_4(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1, Term.getCPtr(t2), t2, i1), true);
  }
  public Term mk_term(Kind kind, Term t1, Term t2, int i1, int i2) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_5(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1, Term.getCPtr(t2), t2, i1, i2), true);
  }
  public Term mk_term(Kind kind, Term t1, Term t2, Term t3) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_6(swigCPtr, this, kind.swigValue(), Term.getCPtr(t1), t1, Term.getCPtr(t2), t2, Term.getCPtr(t3), t3), true);
  }
  public Term mk_term(Kind kind, Vector_Term args, Vector_Int indices) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_term__SWIG_7(swigCPtr, this, kind.swigValue(), Vector_Term.getCPtr(args), args, Vector_Int.getCPtr(indices), indices), true);
  }
  public Term mk_const(Sort sort, String symbol) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_const(swigCPtr, this, Sort.getCPtr(sort), sort, symbol), true);
  }
  public Term mk_var(Sort sort, String symbol) {
    return new Term(BitwuzlaNativeJNI.TermManager_mk_var(swigCPtr, this, Sort.getCPtr(sort), sort, symbol), true);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Vector_Term extends java.util.AbstractList<Term> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Vector_Term(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Vector_Term obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Vector_Term obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        //BitwuzlaNativeJNI.delete_Vector_Term(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Vector_Term(Term[] initialElements) {
    this();
    reserve(initialElements.length);
    for (Term element : initialElements) {
      add(element);
    }
  }
  public Vector_Term(Iterable<Term> initialElements) {
    this();
    for (Term element : initialElements) {
      add(element);
    }
  }
  public Term get(int index) {
    return doGet(index);
  }
  public Term set(int index, Term e) {
    return doSet(index, e);
  }
  public boolean add(Term e) {
    modCount++;
    doAdd(e);
    return true;
  }
  public void add(int index, Term e) {
    modCount++;
    doAdd(index, e);
  }
  public Term remove(int index) {
    modCount++;
    return doRemove(index);
  }
  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }
  public int size() {
    return doSize();
  }
  public Vector_Term() {
    this(BitwuzlaNativeJNI.new_Vector_Term__SWIG_0(), true);
  }
  public Vector_Term(Vector_Term other) {
    this(BitwuzlaNativeJNI.new_Vector_Term__SWIG_1(Vector_Term.getCPtr(other), other), true);
  }
  public long capacity() {
    return BitwuzlaNativeJNI.Vector_Term_capacity(swigCPtr, this);
  }
  public void reserve(long n) {
    BitwuzlaNativeJNI.Vector_Term_reserve(swigCPtr, this, n);
  }
  public boolean isEmpty() {
    return BitwuzlaNativeJNI.Vector_Term_isEmpty(swigCPtr, this);
  }
  public void clear() {
    BitwuzlaNativeJNI.Vector_Term_clear(swigCPtr, this);
  }
  public Vector_Term(int count, Term value) {
    this(BitwuzlaNativeJNI.new_Vector_Term__SWIG_2(count, Term.getCPtr(value), value), true);
  }
  private int doSize() {
    return BitwuzlaNativeJNI.Vector_Term_doSize(swigCPtr, this);
  }
  private void doAdd(Term x) {
    BitwuzlaNativeJNI.Vector_Term_doAdd__SWIG_0(swigCPtr, this, Term.getCPtr(x), x);
  }
  private void doAdd(int index, Term x) {
    BitwuzlaNativeJNI.Vector_Term_doAdd__SWIG_1(swigCPtr, this, index, Term.getCPtr(x), x);
  }
  private Term doRemove(int index) {
    return new Term(BitwuzlaNativeJNI.Vector_Term_doRemove(swigCPtr, this, index), true);
  }
  private Term doGet(int index) {
    return new Term(BitwuzlaNativeJNI.Vector_Term_doGet(swigCPtr, this, index), false);
  }
  private Term doSet(int index, Term val) {
    return new Term(BitwuzlaNativeJNI.Vector_Term_doSet(swigCPtr, this, index, Term.getCPtr(val), val), true);
  }
  private void doRemoveRange(int fromIndex, int toIndex) {
    BitwuzlaNativeJNI.Vector_Term_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Map_TermTerm extends java.util.AbstractMap<Term, Term> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Map_TermTerm(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Map_TermTerm obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Map_TermTerm obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Map_TermTerm(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public int size() {
    return sizeImpl();
  }
  public boolean containsKey(java.lang.Object key) {
    if (!(key instanceof Term)) {
      return false;
    }
    return containsImpl((Term)key);
  }
  public Term get(java.lang.Object key) {
    if (!(key instanceof Term)) {
      return null;
    }
    Iterator itr = find((Term) key);
    if (itr.isNot(end())) {
      return itr.getValue();
    }
    return null;
  }
  public Term put(Term key, Term value) {
    Iterator itr = find((Term) key);
    if (itr.isNot(end())) {
      Term oldValue = itr.getValue();
      itr.setValue(value);
      return oldValue;
    } else {
      putUnchecked(key, value);
      return null;
    }
  }
  public Term remove(java.lang.Object key) {
    if (!(key instanceof Term)) {
      return null;
    }
    Iterator itr = find((Term) key);
    if (itr.isNot(end())) {
      Term oldValue = itr.getValue();
      removeUnchecked(itr);
      return oldValue;
    } else {
      return null;
    }
  }
  public java.util.Set<Entry<Term, Term>> entrySet() {
    java.util.Set<Entry<Term, Term>> setToReturn =
        new java.util.HashSet<Entry<Term, Term>>();
    Iterator itr = begin();
    final Iterator end = end();
    while (itr.isNot(end)) {
      setToReturn.add(new Entry<Term, Term>() {
        private Iterator iterator;
        private Entry<Term, Term> init(Iterator iterator) {
          this.iterator = iterator;
          return this;
        }
        public Term getKey() {
          return iterator.getKey();
        }
        public Term getValue() {
          return iterator.getValue();
        }
        public Term setValue(Term newValue) {
          Term oldValue = iterator.getValue();
          iterator.setValue(newValue);
          return oldValue;
        }
      }.init(itr));
      itr = itr.getNextUnchecked();
    }
    return setToReturn;
  }
  public Map_TermTerm() {
    this(BitwuzlaNativeJNI.new_Map_TermTerm__SWIG_0(), true);
  }
  public Map_TermTerm(Map_TermTerm other) {
    this(BitwuzlaNativeJNI.new_Map_TermTerm__SWIG_1(Map_TermTerm.getCPtr(other), other), true);
  }
  static protected class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected static long swigRelease(Iterator obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BitwuzlaNativeJNI.delete_Map_TermTerm_Iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    private Map_TermTerm.Iterator getNextUnchecked() {
      return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_Iterator_getNextUnchecked(swigCPtr, this), true);
    }
  
    private boolean isNot(Map_TermTerm.Iterator other) {
      return BitwuzlaNativeJNI.Map_TermTerm_Iterator_isNot(swigCPtr, this, Map_TermTerm.Iterator.getCPtr(other), other);
    }
  
    private Term getKey() {
      return new Term(BitwuzlaNativeJNI.Map_TermTerm_Iterator_getKey(swigCPtr, this), true);
    }
  
    private Term getValue() {
      return new Term(BitwuzlaNativeJNI.Map_TermTerm_Iterator_getValue(swigCPtr, this), true);
    }
  
    private void setValue(Term newValue) {
      BitwuzlaNativeJNI.Map_TermTerm_Iterator_setValue(swigCPtr, this, Term.getCPtr(newValue), newValue);
    }
  
  }
  public boolean isEmpty() {
    return BitwuzlaNativeJNI.Map_TermTerm_isEmpty(swigCPtr, this);
  }
  public void clear() {
    BitwuzlaNativeJNI.Map_TermTerm_clear(swigCPtr, this);
  }
  private Map_TermTerm.Iterator find(Term key) {
    return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_find(swigCPtr, this, Term.getCPtr(key), key), true);
  }
  private Map_TermTerm.Iterator begin() {
    return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_begin(swigCPtr, this), true);
  }
  private Map_TermTerm.Iterator end() {
    return new Map_TermTerm.Iterator(BitwuzlaNativeJNI.Map_TermTerm_end(swigCPtr, this), true);
  }
  private int sizeImpl() {
    return BitwuzlaNativeJNI.Map_TermTerm_sizeImpl(swigCPtr, this);
  }
  private boolean containsImpl(Term key) {
    return BitwuzlaNativeJNI.Map_TermTerm_containsImpl(swigCPtr, this, Term.getCPtr(key), key);
  }
  private void putUnchecked(Term key, Term value) {
    BitwuzlaNativeJNI.Map_TermTerm_putUnchecked(swigCPtr, this, Term.getCPtr(key), key, Term.getCPtr(value), value);
  }
  private void removeUnchecked(Map_TermTerm.Iterator itr) {
    BitwuzlaNativeJNI.Map_TermTerm_removeUnchecked(swigCPtr, this, Map_TermTerm.Iterator.getCPtr(itr), itr);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Bitwuzla {
  private transient long swigCPtr;
  private transient boolean swigCMemOwn;
  protected Bitwuzla(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Bitwuzla obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwn = own;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Bitwuzla(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Bitwuzla(TermManager tm, Options options) {
    this(BitwuzlaNativeJNI.new_Bitwuzla__SWIG_0(TermManager.getCPtr(tm), tm, Options.getCPtr(options), options), true);
  }
  public Bitwuzla(TermManager tm) {
    this(BitwuzlaNativeJNI.new_Bitwuzla__SWIG_1(TermManager.getCPtr(tm), tm), true);
  }
  public void configure_terminator(Terminator terminator) {
    BitwuzlaNativeJNI.Bitwuzla_configure_terminator(swigCPtr, this, Terminator.getCPtr(terminator), terminator);
  }
  public void push(long nlevels) {
    BitwuzlaNativeJNI.Bitwuzla_push(swigCPtr, this, nlevels);
  }
  public void pop(long nlevels) {
    BitwuzlaNativeJNI.Bitwuzla_pop(swigCPtr, this, nlevels);
  }
  public void assert_formula(Term term) {
    BitwuzlaNativeJNI.Bitwuzla_assert_formula(swigCPtr, this, Term.getCPtr(term), term);
  }
  public Vector_Term get_assertions() {
    return new Vector_Term(BitwuzlaNativeJNI.Bitwuzla_get_assertions(swigCPtr, this), true);
  }
  public Vector_Term get_unsat_assumptions() {
    return new Vector_Term(BitwuzlaNativeJNI.Bitwuzla_get_unsat_assumptions(swigCPtr, this), true);
  }
  public Vector_Term get_unsat_core() {
    return new Vector_Term(BitwuzlaNativeJNI.Bitwuzla_get_unsat_core(swigCPtr, this), true);
  }
  public Term simplify(Term term) {
    return new Term(BitwuzlaNativeJNI.Bitwuzla_simplify(swigCPtr, this, Term.getCPtr(term), term), true);
  }
  public Result check_sat(Vector_Term assumptions) {
    return Result.swigToEnum(BitwuzlaNativeJNI.Bitwuzla_check_sat__SWIG_0(swigCPtr, this, Vector_Term.getCPtr(assumptions), assumptions));
  }
  public Result check_sat() {
    return Result.swigToEnum(BitwuzlaNativeJNI.Bitwuzla_check_sat__SWIG_1(swigCPtr, this));
  }
  public Term get_value(Term term) {
    return new Term(BitwuzlaNativeJNI.Bitwuzla_get_value(swigCPtr, this, Term.getCPtr(term), term), true);
  }
  public TermManager term_mgr() {
    return new TermManager(BitwuzlaNativeJNI.Bitwuzla_term_mgr(swigCPtr, this), false);
  }
  public String print_formula() {
    return BitwuzlaNativeJNI.Bitwuzla_print_formula(swigCPtr, this);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Vector_Sort extends java.util.AbstractList<Sort> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Vector_Sort(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Vector_Sort obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Vector_Sort obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Vector_Sort(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Vector_Sort(Sort[] initialElements) {
    this();
    reserve(initialElements.length);
    for (Sort element : initialElements) {
      add(element);
    }
  }
  public Vector_Sort(Iterable<Sort> initialElements) {
    this();
    for (Sort element : initialElements) {
      add(element);
    }
  }
  public Sort get(int index) {
    return doGet(index);
  }
  public Sort set(int index, Sort e) {
    return doSet(index, e);
  }
  public boolean add(Sort e) {
    modCount++;
    doAdd(e);
    return true;
  }
  public void add(int index, Sort e) {
    modCount++;
    doAdd(index, e);
  }
  public Sort remove(int index) {
    modCount++;
    return doRemove(index);
  }
  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }
  public int size() {
    return doSize();
  }
  public Vector_Sort() {
    this(BitwuzlaNativeJNI.new_Vector_Sort__SWIG_0(), true);
  }
  public Vector_Sort(Vector_Sort other) {
    this(BitwuzlaNativeJNI.new_Vector_Sort__SWIG_1(Vector_Sort.getCPtr(other), other), true);
  }
  public long capacity() {
    return BitwuzlaNativeJNI.Vector_Sort_capacity(swigCPtr, this);
  }
  public void reserve(long n) {
    BitwuzlaNativeJNI.Vector_Sort_reserve(swigCPtr, this, n);
  }
  public boolean isEmpty() {
    return BitwuzlaNativeJNI.Vector_Sort_isEmpty(swigCPtr, this);
  }
  public void clear() {
    BitwuzlaNativeJNI.Vector_Sort_clear(swigCPtr, this);
  }
  public Vector_Sort(int count, Sort value) {
    this(BitwuzlaNativeJNI.new_Vector_Sort__SWIG_2(count, Sort.getCPtr(value), value), true);
  }
  private int doSize() {
    return BitwuzlaNativeJNI.Vector_Sort_doSize(swigCPtr, this);
  }
  private void doAdd(Sort x) {
    BitwuzlaNativeJNI.Vector_Sort_doAdd__SWIG_0(swigCPtr, this, Sort.getCPtr(x), x);
  }
  private void doAdd(int index, Sort x) {
    BitwuzlaNativeJNI.Vector_Sort_doAdd__SWIG_1(swigCPtr, this, index, Sort.getCPtr(x), x);
  }
  private Sort doRemove(int index) {
    return new Sort(BitwuzlaNativeJNI.Vector_Sort_doRemove(swigCPtr, this, index), true);
  }
  private Sort doGet(int index) {
    return new Sort(BitwuzlaNativeJNI.Vector_Sort_doGet(swigCPtr, this, index), false);
  }
  private Sort doSet(int index, Sort val) {
    return new Sort(BitwuzlaNativeJNI.Vector_Sort_doSet(swigCPtr, this, index, Sort.getCPtr(val), val), true);
  }
  private void doRemoveRange(int fromIndex, int toIndex) {
    BitwuzlaNativeJNI.Vector_Sort_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public final class Kind {
  public final static Kind CONSTANT = new Kind("CONSTANT", BitwuzlaNativeJNI.Kind_CONSTANT_get());
  public final static Kind CONST_ARRAY = new Kind("CONST_ARRAY");
  public final static Kind VALUE = new Kind("VALUE");
  public final static Kind VARIABLE = new Kind("VARIABLE");
  public final static Kind AND = new Kind("AND");
  public final static Kind DISTINCT = new Kind("DISTINCT");
  public final static Kind EQUAL = new Kind("EQUAL");
  public final static Kind IFF = new Kind("IFF");
  public final static Kind IMPLIES = new Kind("IMPLIES");
  public final static Kind NOT = new Kind("NOT");
  public final static Kind OR = new Kind("OR");
  public final static Kind XOR = new Kind("XOR");
  public final static Kind ITE = new Kind("ITE");
  public final static Kind EXISTS = new Kind("EXISTS");
  public final static Kind FORALL = new Kind("FORALL");
  public final static Kind APPLY = new Kind("APPLY");
  public final static Kind LAMBDA = new Kind("LAMBDA");
  public final static Kind ARRAY_SELECT = new Kind("ARRAY_SELECT");
  public final static Kind ARRAY_STORE = new Kind("ARRAY_STORE");
  public final static Kind BV_ADD = new Kind("BV_ADD");
  public final static Kind BV_AND = new Kind("BV_AND");
  public final static Kind BV_ASHR = new Kind("BV_ASHR");
  public final static Kind BV_COMP = new Kind("BV_COMP");
  public final static Kind BV_CONCAT = new Kind("BV_CONCAT");
  public final static Kind BV_DEC = new Kind("BV_DEC");
  public final static Kind BV_INC = new Kind("BV_INC");
  public final static Kind BV_MUL = new Kind("BV_MUL");
  public final static Kind BV_NAND = new Kind("BV_NAND");
  public final static Kind BV_NEG = new Kind("BV_NEG");
  public final static Kind BV_NEG_OVERFLOW = new Kind("BV_NEG_OVERFLOW");
  public final static Kind BV_NOR = new Kind("BV_NOR");
  public final static Kind BV_NOT = new Kind("BV_NOT");
  public final static Kind BV_OR = new Kind("BV_OR");
  public final static Kind BV_REDAND = new Kind("BV_REDAND");
  public final static Kind BV_REDOR = new Kind("BV_REDOR");
  public final static Kind BV_REDXOR = new Kind("BV_REDXOR");
  public final static Kind BV_ROL = new Kind("BV_ROL");
  public final static Kind BV_ROR = new Kind("BV_ROR");
  public final static Kind BV_SADD_OVERFLOW = new Kind("BV_SADD_OVERFLOW");
  public final static Kind BV_SDIV_OVERFLOW = new Kind("BV_SDIV_OVERFLOW");
  public final static Kind BV_SDIV = new Kind("BV_SDIV");
  public final static Kind BV_SGE = new Kind("BV_SGE");
  public final static Kind BV_SGT = new Kind("BV_SGT");
  public final static Kind BV_SHL = new Kind("BV_SHL");
  public final static Kind BV_SHR = new Kind("BV_SHR");
  public final static Kind BV_SLE = new Kind("BV_SLE");
  public final static Kind BV_SLT = new Kind("BV_SLT");
  public final static Kind BV_SMOD = new Kind("BV_SMOD");
  public final static Kind BV_SMUL_OVERFLOW = new Kind("BV_SMUL_OVERFLOW");
  public final static Kind BV_SREM = new Kind("BV_SREM");
  public final static Kind BV_SSUB_OVERFLOW = new Kind("BV_SSUB_OVERFLOW");
  public final static Kind BV_SUB = new Kind("BV_SUB");
  public final static Kind BV_UADD_OVERFLOW = new Kind("BV_UADD_OVERFLOW");
  public final static Kind BV_UDIV = new Kind("BV_UDIV");
  public final static Kind BV_UGE = new Kind("BV_UGE");
  public final static Kind BV_UGT = new Kind("BV_UGT");
  public final static Kind BV_ULE = new Kind("BV_ULE");
  public final static Kind BV_ULT = new Kind("BV_ULT");
  public final static Kind BV_UMUL_OVERFLOW = new Kind("BV_UMUL_OVERFLOW");
  public final static Kind BV_UREM = new Kind("BV_UREM");
  public final static Kind BV_USUB_OVERFLOW = new Kind("BV_USUB_OVERFLOW");
  public final static Kind BV_XNOR = new Kind("BV_XNOR");
  public final static Kind BV_XOR = new Kind("BV_XOR");
  public final static Kind BV_EXTRACT = new Kind("BV_EXTRACT");
  public final static Kind BV_REPEAT = new Kind("BV_REPEAT");
  public final static Kind BV_ROLI = new Kind("BV_ROLI");
  public final static Kind BV_RORI = new Kind("BV_RORI");
  public final static Kind BV_SIGN_EXTEND = new Kind("BV_SIGN_EXTEND");
  public final static Kind BV_ZERO_EXTEND = new Kind("BV_ZERO_EXTEND");
  public final static Kind FP_ABS = new Kind("FP_ABS");
  public final static Kind FP_ADD = new Kind("FP_ADD");
  public final static Kind FP_DIV = new Kind("FP_DIV");
  public final static Kind FP_EQUAL = new Kind("FP_EQUAL");
  public final static Kind FP_FMA = new Kind("FP_FMA");
  public final static Kind FP_FP = new Kind("FP_FP");
  public final static Kind FP_GEQ = new Kind("FP_GEQ");
  public final static Kind FP_GT = new Kind("FP_GT");
  public final static Kind FP_IS_INF = new Kind("FP_IS_INF");
  public final static Kind FP_IS_NAN = new Kind("FP_IS_NAN");
  public final static Kind FP_IS_NEG = new Kind("FP_IS_NEG");
  public final static Kind FP_IS_NORMAL = new Kind("FP_IS_NORMAL");
  public final static Kind FP_IS_POS = new Kind("FP_IS_POS");
  public final static Kind FP_IS_SUBNORMAL = new Kind("FP_IS_SUBNORMAL");
  public final static Kind FP_IS_ZERO = new Kind("FP_IS_ZERO");
  public final static Kind FP_LEQ = new Kind("FP_LEQ");
  public final static Kind FP_LT = new Kind("FP_LT");
  public final static Kind FP_MAX = new Kind("FP_MAX");
  public final static Kind FP_MIN = new Kind("FP_MIN");
  public final static Kind FP_MUL = new Kind("FP_MUL");
  public final static Kind FP_NEG = new Kind("FP_NEG");
  public final static Kind FP_REM = new Kind("FP_REM");
  public final static Kind FP_RTI = new Kind("FP_RTI");
  public final static Kind FP_SQRT = new Kind("FP_SQRT");
  public final static Kind FP_SUB = new Kind("FP_SUB");
  public final static Kind FP_TO_FP_FROM_BV = new Kind("FP_TO_FP_FROM_BV");
  public final static Kind FP_TO_FP_FROM_FP = new Kind("FP_TO_FP_FROM_FP");
  public final static Kind FP_TO_FP_FROM_SBV = new Kind("FP_TO_FP_FROM_SBV");
  public final static Kind FP_TO_FP_FROM_UBV = new Kind("FP_TO_FP_FROM_UBV");
  public final static Kind FP_TO_SBV = new Kind("FP_TO_SBV");
  public final static Kind FP_TO_UBV = new Kind("FP_TO_UBV");
  public final static Kind NUM_KINDS = new Kind("NUM_KINDS");
  public final int swigValue() {
    return swigValue;
  }
  public String toString() {
    return swigName;
  }
  public static Kind swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + Kind.class + " with value " + swigValue);
  }
  private Kind(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }
  private Kind(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }
  private Kind(String swigName, Kind swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }
  private static Kind[] swigValues = { CONSTANT, CONST_ARRAY, VALUE, VARIABLE, AND, DISTINCT, EQUAL, IFF, IMPLIES, NOT, OR, XOR, ITE, EXISTS, FORALL, APPLY, LAMBDA, ARRAY_SELECT, ARRAY_STORE, BV_ADD, BV_AND, BV_ASHR, BV_COMP, BV_CONCAT, BV_DEC, BV_INC, BV_MUL, BV_NAND, BV_NEG, BV_NEG_OVERFLOW, BV_NOR, BV_NOT, BV_OR, BV_REDAND, BV_REDOR, BV_REDXOR, BV_ROL, BV_ROR, BV_SADD_OVERFLOW, BV_SDIV_OVERFLOW, BV_SDIV, BV_SGE, BV_SGT, BV_SHL, BV_SHR, BV_SLE, BV_SLT, BV_SMOD, BV_SMUL_OVERFLOW, BV_SREM, BV_SSUB_OVERFLOW, BV_SUB, BV_UADD_OVERFLOW, BV_UDIV, BV_UGE, BV_UGT, BV_ULE, BV_ULT, BV_UMUL_OVERFLOW, BV_UREM, BV_USUB_OVERFLOW, BV_XNOR, BV_XOR, BV_EXTRACT, BV_REPEAT, BV_ROLI, BV_RORI, BV_SIGN_EXTEND, BV_ZERO_EXTEND, FP_ABS, FP_ADD, FP_DIV, FP_EQUAL, FP_FMA, FP_FP, FP_GEQ, FP_GT, FP_IS_INF, FP_IS_NAN, FP_IS_NEG, FP_IS_NORMAL, FP_IS_POS, FP_IS_SUBNORMAL, FP_IS_ZERO, FP_LEQ, FP_LT, FP_MAX, FP_MIN, FP_MUL, FP_NEG, FP_REM, FP_RTI, FP_SQRT, FP_SUB, FP_TO_FP_FROM_BV, FP_TO_FP_FROM_FP, FP_TO_FP_FROM_SBV, FP_TO_FP_FROM_UBV, FP_TO_SBV, FP_TO_UBV, NUM_KINDS };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class BitwuzlaNativeJNI {
  public final static native long new_Vector_Int__SWIG_0();
  public final static native long new_Vector_Int__SWIG_1(long jarg1, Vector_Int jarg1_);
  public final static native long Vector_Int_capacity(long jarg1, Vector_Int jarg1_);
  public final static native void Vector_Int_reserve(long jarg1, Vector_Int jarg1_, long jarg2);
  public final static native boolean Vector_Int_isEmpty(long jarg1, Vector_Int jarg1_);
  public final static native void Vector_Int_clear(long jarg1, Vector_Int jarg1_);
  public final static native long new_Vector_Int__SWIG_2(int jarg1, int jarg2);
  public final static native int Vector_Int_doSize(long jarg1, Vector_Int jarg1_);
  public final static native void Vector_Int_doAdd__SWIG_0(long jarg1, Vector_Int jarg1_, int jarg2);
  public final static native void Vector_Int_doAdd__SWIG_1(long jarg1, Vector_Int jarg1_, int jarg2, int jarg3);
  public final static native int Vector_Int_doRemove(long jarg1, Vector_Int jarg1_, int jarg2);
  public final static native int Vector_Int_doGet(long jarg1, Vector_Int jarg1_, int jarg2);
  public final static native int Vector_Int_doSet(long jarg1, Vector_Int jarg1_, int jarg2, int jarg3);
  public final static native void Vector_Int_doRemoveRange(long jarg1, Vector_Int jarg1_, int jarg2, int jarg3);
  public final static native void delete_Vector_Int(long jarg1);
  public final static native long new_Vector_String__SWIG_0();
  public final static native long new_Vector_String__SWIG_1(long jarg1, Vector_String jarg1_);
  public final static native long Vector_String_capacity(long jarg1, Vector_String jarg1_);
  public final static native void Vector_String_reserve(long jarg1, Vector_String jarg1_, long jarg2);
  public final static native boolean Vector_String_isEmpty(long jarg1, Vector_String jarg1_);
  public final static native void Vector_String_clear(long jarg1, Vector_String jarg1_);
  public final static native long new_Vector_String__SWIG_2(int jarg1, String jarg2);
  public final static native int Vector_String_doSize(long jarg1, Vector_String jarg1_);
  public final static native void Vector_String_doAdd__SWIG_0(long jarg1, Vector_String jarg1_, String jarg2);
  public final static native void Vector_String_doAdd__SWIG_1(long jarg1, Vector_String jarg1_, int jarg2, String jarg3);
  public final static native String Vector_String_doRemove(long jarg1, Vector_String jarg1_, int jarg2);
  public final static native String Vector_String_doGet(long jarg1, Vector_String jarg1_, int jarg2);
  public final static native String Vector_String_doSet(long jarg1, Vector_String jarg1_, int jarg2, String jarg3);
  public final static native void Vector_String_doRemoveRange(long jarg1, Vector_String jarg1_, int jarg2, int jarg3);
  public final static native void delete_Vector_String(long jarg1);
  public final static native long new_Vector_Term__SWIG_0();
  public final static native long new_Vector_Term__SWIG_1(long jarg1, Vector_Term jarg1_);
  public final static native long Vector_Term_capacity(long jarg1, Vector_Term jarg1_);
  public final static native void Vector_Term_reserve(long jarg1, Vector_Term jarg1_, long jarg2);
  public final static native boolean Vector_Term_isEmpty(long jarg1, Vector_Term jarg1_);
  public final static native void Vector_Term_clear(long jarg1, Vector_Term jarg1_);
  public final static native long new_Vector_Term__SWIG_2(int jarg1, long jarg2, Term jarg2_);
  public final static native int Vector_Term_doSize(long jarg1, Vector_Term jarg1_);
  public final static native void Vector_Term_doAdd__SWIG_0(long jarg1, Vector_Term jarg1_, long jarg2, Term jarg2_);
  public final static native void Vector_Term_doAdd__SWIG_1(long jarg1, Vector_Term jarg1_, int jarg2, long jarg3, Term jarg3_);
  public final static native long Vector_Term_doRemove(long jarg1, Vector_Term jarg1_, int jarg2);
  public final static native long Vector_Term_doGet(long jarg1, Vector_Term jarg1_, int jarg2);
  public final static native long Vector_Term_doSet(long jarg1, Vector_Term jarg1_, int jarg2, long jarg3, Term jarg3_);
  public final static native void Vector_Term_doRemoveRange(long jarg1, Vector_Term jarg1_, int jarg2, int jarg3);
  public final static native void delete_Vector_Term(long jarg1);
  public final static native long new_Vector_Sort__SWIG_0();
  public final static native long new_Vector_Sort__SWIG_1(long jarg1, Vector_Sort jarg1_);
  public final static native long Vector_Sort_capacity(long jarg1, Vector_Sort jarg1_);
  public final static native void Vector_Sort_reserve(long jarg1, Vector_Sort jarg1_, long jarg2);
  public final static native boolean Vector_Sort_isEmpty(long jarg1, Vector_Sort jarg1_);
  public final static native void Vector_Sort_clear(long jarg1, Vector_Sort jarg1_);
  public final static native long new_Vector_Sort__SWIG_2(int jarg1, long jarg2, Sort jarg2_);
  public final static native int Vector_Sort_doSize(long jarg1, Vector_Sort jarg1_);
  public final static native void Vector_Sort_doAdd__SWIG_0(long jarg1, Vector_Sort jarg1_, long jarg2, Sort jarg2_);
  public final static native void Vector_Sort_doAdd__SWIG_1(long jarg1, Vector_Sort jarg1_, int jarg2, long jarg3, Sort jarg3_);
  public final static native long Vector_Sort_doRemove(long jarg1, Vector_Sort jarg1_, int jarg2);
  public final static native long Vector_Sort_doGet(long jarg1, Vector_Sort jarg1_, int jarg2);
  public final static native long Vector_Sort_doSet(long jarg1, Vector_Sort jarg1_, int jarg2, long jarg3, Sort jarg3_);
  public final static native void Vector_Sort_doRemoveRange(long jarg1, Vector_Sort jarg1_, int jarg2, int jarg3);
  public final static native void delete_Vector_Sort(long jarg1);
  public final static native long new_Map_TermTerm__SWIG_0();
  public final static native long new_Map_TermTerm__SWIG_1(long jarg1, Map_TermTerm jarg1_);
  public final static native long Map_TermTerm_Iterator_getNextUnchecked(long jarg1, Map_TermTerm.Iterator jarg1_);
  public final static native boolean Map_TermTerm_Iterator_isNot(long jarg1, Map_TermTerm.Iterator jarg1_, long jarg2, Map_TermTerm.Iterator jarg2_);
  public final static native long Map_TermTerm_Iterator_getKey(long jarg1, Map_TermTerm.Iterator jarg1_);
  public final static native long Map_TermTerm_Iterator_getValue(long jarg1, Map_TermTerm.Iterator jarg1_);
  public final static native void Map_TermTerm_Iterator_setValue(long jarg1, Map_TermTerm.Iterator jarg1_, long jarg2, Term jarg2_);
  public final static native void delete_Map_TermTerm_Iterator(long jarg1);
  public final static native boolean Map_TermTerm_isEmpty(long jarg1, Map_TermTerm jarg1_);
  public final static native void Map_TermTerm_clear(long jarg1, Map_TermTerm jarg1_);
  public final static native long Map_TermTerm_find(long jarg1, Map_TermTerm jarg1_, long jarg2, Term jarg2_);
  public final static native long Map_TermTerm_begin(long jarg1, Map_TermTerm jarg1_);
  public final static native long Map_TermTerm_end(long jarg1, Map_TermTerm jarg1_);
  public final static native int Map_TermTerm_sizeImpl(long jarg1, Map_TermTerm jarg1_);
  public final static native boolean Map_TermTerm_containsImpl(long jarg1, Map_TermTerm jarg1_, long jarg2, Term jarg2_);
  public final static native void Map_TermTerm_putUnchecked(long jarg1, Map_TermTerm jarg1_, long jarg2, Term jarg2_, long jarg3, Term jarg3_);
  public final static native void Map_TermTerm_removeUnchecked(long jarg1, Map_TermTerm jarg1_, long jarg2, Map_TermTerm.Iterator jarg2_);
  public final static native void delete_Map_TermTerm(long jarg1);
  public final static native int Result_SAT_get();
  public final static native int Result_UNSAT_get();
  public final static native int Result_UNKNOWN_get();
  public final static native int RoundingMode_RNE_get();
  public final static native int RoundingMode_RNA_get();
  public final static native int RoundingMode_RTN_get();
  public final static native int RoundingMode_RTP_get();
  public final static native int RoundingMode_RTZ_get();
  public final static native int Kind_CONSTANT_get();
  public final static native String copyright();
  public final static native String version();
  public final static native String git_id();
  public final static native long new_Options__SWIG_0();
  public final static native void delete_Options(long jarg1);
  public final static native long new_Options__SWIG_1(long jarg1, Options jarg1_);
  public final static native boolean Options_is_valid(long jarg1, Options jarg1_, String jarg2);
  public final static native boolean Options_is_bool(long jarg1, Options jarg1_, int jarg2);
  public final static native boolean Options_is_numeric(long jarg1, Options jarg1_, int jarg2);
  public final static native boolean Options_is_mode(long jarg1, Options jarg1_, int jarg2);
  public final static native String Options_shrt(long jarg1, Options jarg1_, int jarg2);
  public final static native String Options_lng(long jarg1, Options jarg1_, int jarg2);
  public final static native String Options_description(long jarg1, Options jarg1_, int jarg2);
  public final static native long Options_modes(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_option(long jarg1, Options jarg1_, String jarg2);
  public final static native void Options_set__SWIG_0(long jarg1, Options jarg1_, int jarg2, String jarg3);
  public final static native void Options_set__SWIG_1(long jarg1, Options jarg1_, String jarg2, String jarg3);
  public final static native void Options_set__SWIG_2(long jarg1, Options jarg1_, long jarg2, Vector_String jarg2_);
  public final static native java.math.BigInteger Options_get(long jarg1, Options jarg1_, int jarg2);
  public final static native String Options_get_mode(long jarg1, Options jarg1_, int jarg2);
  public final static native void Options_set__SWIG_3(long jarg1, Options jarg1_, int jarg2, int jarg3);
  public final static native long new_Term();
  public final static native void delete_Term(long jarg1);
  public final static native boolean Term_is_null(long jarg1, Term jarg1_);
  public final static native int Term_kind(long jarg1, Term jarg1_);
  public final static native long Term_sort(long jarg1, Term jarg1_);
  public final static native long Term_num_children(long jarg1, Term jarg1_);
  public final static native long Term_children(long jarg1, Term jarg1_);
  public final static native long Term_get(long jarg1, Term jarg1_, long jarg2);
  public final static native long Term_num_indices(long jarg1, Term jarg1_);
  public final static native boolean Term_is_const(long jarg1, Term jarg1_);
  public final static native boolean Term_is_variable(long jarg1, Term jarg1_);
  public final static native boolean Term_is_value(long jarg1, Term jarg1_);
  public final static native boolean Term_is_true(long jarg1, Term jarg1_);
  public final static native boolean Term_is_false(long jarg1, Term jarg1_);
  public final static native boolean Term_is_bv_value_zero(long jarg1, Term jarg1_);
  public final static native boolean Term_is_bv_value_one(long jarg1, Term jarg1_);
  public final static native boolean Term_is_bv_value_ones(long jarg1, Term jarg1_);
  public final static native boolean Term_is_bv_value_min_signed(long jarg1, Term jarg1_);
  public final static native boolean Term_is_bv_value_max_signed(long jarg1, Term jarg1_);
  public final static native boolean Term_is_fp_value_pos_zero(long jarg1, Term jarg1_);
  public final static native boolean Term_is_fp_value_neg_zero(long jarg1, Term jarg1_);
  public final static native boolean Term_is_fp_value_pos_inf(long jarg1, Term jarg1_);
  public final static native boolean Term_is_fp_value_neg_inf(long jarg1, Term jarg1_);
  public final static native boolean Term_is_fp_value_nan(long jarg1, Term jarg1_);
  public final static native boolean Term_is_rm_value_rna(long jarg1, Term jarg1_);
  public final static native boolean Term_is_rm_value_rne(long jarg1, Term jarg1_);
  public final static native boolean Term_is_rm_value_rtn(long jarg1, Term jarg1_);
  public final static native boolean Term_is_rm_value_rtp(long jarg1, Term jarg1_);
  public final static native boolean Term_is_rm_value_rtz(long jarg1, Term jarg1_);
  public final static native String Term_toString__SWIG_0(long jarg1, Term jarg1_, short jarg2);
  public final static native String Term_toString__SWIG_1(long jarg1, Term jarg1_);
  public final static native int Term_id(long jarg1, Term jarg1_);
  public final static native long Term_indices(long jarg1, Term jarg1_);
  public final static native String Term_symbol(long jarg1, Term jarg1_);
  public final static native boolean Term_to_bool(long jarg1, Term jarg1_);
  public final static native int Term_to_rm(long jarg1, Term jarg1_);
  public final static native String Term_to_bv(long jarg1, Term jarg1_);
  public final static native int Term_hashCode(long jarg1, Term jarg1_);
  public final static native boolean Term_isEqual(long jarg1, Term jarg1_, long jarg2, Term jarg2_);
  public final static native long new_Sort();
  public final static native void delete_Sort(long jarg1);
  public final static native boolean Sort_is_null(long jarg1, Sort jarg1_);
  public final static native long Sort_array_index(long jarg1, Sort jarg1_);
  public final static native long Sort_array_element(long jarg1, Sort jarg1_);
  public final static native long Sort_fun_domain(long jarg1, Sort jarg1_);
  public final static native long Sort_fun_codomain(long jarg1, Sort jarg1_);
  public final static native boolean Sort_is_array(long jarg1, Sort jarg1_);
  public final static native boolean Sort_is_bool(long jarg1, Sort jarg1_);
  public final static native boolean Sort_is_bv(long jarg1, Sort jarg1_);
  public final static native boolean Sort_is_fp(long jarg1, Sort jarg1_);
  public final static native boolean Sort_is_fun(long jarg1, Sort jarg1_);
  public final static native boolean Sort_is_rm(long jarg1, Sort jarg1_);
  public final static native String Sort_toString(long jarg1, Sort jarg1_);
  public final static native int Sort_id(long jarg1, Sort jarg1_);
  public final static native int Sort_bv_size(long jarg1, Sort jarg1_);
  public final static native int Sort_fp_exp_size(long jarg1, Sort jarg1_);
  public final static native int Sort_fp_sig_size(long jarg1, Sort jarg1_);
  public final static native int Sort_fun_arity(long jarg1, Sort jarg1_);
  public final static native int Sort_hashCode(long jarg1, Sort jarg1_);
  public final static native boolean Sort_isEqual(long jarg1, Sort jarg1_, long jarg2, Sort jarg2_);
  public final static native void delete_Terminator(long jarg1);
  public final static native boolean Terminator_terminate(long jarg1, Terminator jarg1_);
  public final static native long new_Terminator();
  public final static native void Terminator_director_connect(Terminator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Terminator_change_ownership(Terminator obj, long cptr, boolean take_or_release);
  public final static native long new_TermManager();
  public final static native void delete_TermManager(long jarg1);
  public final static native long TermManager_mk_array_sort(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, long jarg3, Sort jarg3_);
  public final static native long TermManager_mk_bool_sort(long jarg1, TermManager jarg1_);
  public final static native long TermManager_mk_fun_sort(long jarg1, TermManager jarg1_, long jarg2, Vector_Sort jarg2_, long jarg3, Sort jarg3_);
  public final static native long TermManager_mk_true(long jarg1, TermManager jarg1_);
  public final static native long TermManager_mk_false(long jarg1, TermManager jarg1_);
  public final static native long TermManager_mk_bv_zero(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_bv_one(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_bv_ones(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_bv_min_signed(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_bv_max_signed(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_bv_value__SWIG_0(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, String jarg3, short jarg4);
  public final static native long TermManager_mk_bv_value__SWIG_1(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, String jarg3);
  public final static native long TermManager_mk_bv_value_uint64(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, java.math.BigInteger jarg3);
  public final static native long TermManager_mk_bv_value_int64(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, long jarg3);
  public final static native long TermManager_mk_fp_pos_zero(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_fp_neg_zero(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_fp_pos_inf(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_fp_neg_inf(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_fp_nan(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_);
  public final static native long TermManager_mk_fp_value__SWIG_0(long jarg1, TermManager jarg1_, long jarg2, Term jarg2_, long jarg3, Term jarg3_, long jarg4, Term jarg4_);
  public final static native long TermManager_mk_fp_value__SWIG_1(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, long jarg3, Term jarg3_, String jarg4);
  public final static native long TermManager_mk_fp_value__SWIG_2(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, long jarg3, Term jarg3_, String jarg4, String jarg5);
  public final static native long TermManager_mk_const_array(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, long jarg3, Term jarg3_);
  public final static native long TermManager_mk_rm_value(long jarg1, TermManager jarg1_, int jarg2);
  public final static native long TermManager_substitute_term(long jarg1, TermManager jarg1_, long jarg2, Term jarg2_, long jarg3, Map_TermTerm jarg3_);
  public final static native void TermManager_substitute_terms(long jarg1, TermManager jarg1_, long jarg2, Vector_Term jarg2_, long jarg3, Map_TermTerm jarg3_);
  public final static native long TermManager_mk_bv_sort(long jarg1, TermManager jarg1_, int jarg2);
  public final static native long TermManager_mk_fp_sort(long jarg1, TermManager jarg1_, int jarg2, int jarg3);
  public final static native long TermManager_mk_term__SWIG_0(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_);
  public final static native long TermManager_mk_term__SWIG_1(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_, int jarg4);
  public final static native long TermManager_mk_term__SWIG_2(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_, int jarg4, int jarg5);
  public final static native long TermManager_mk_term__SWIG_3(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_, long jarg4, Term jarg4_);
  public final static native long TermManager_mk_term__SWIG_4(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_, long jarg4, Term jarg4_, int jarg5);
  public final static native long TermManager_mk_term__SWIG_5(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_, long jarg4, Term jarg4_, int jarg5, int jarg6);
  public final static native long TermManager_mk_term__SWIG_6(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Term jarg3_, long jarg4, Term jarg4_, long jarg5, Term jarg5_);
  public final static native long TermManager_mk_term__SWIG_7(long jarg1, TermManager jarg1_, int jarg2, long jarg3, Vector_Term jarg3_, long jarg4, Vector_Int jarg4_);
  public final static native long TermManager_mk_const(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, String jarg3);
  public final static native long TermManager_mk_var(long jarg1, TermManager jarg1_, long jarg2, Sort jarg2_, String jarg3);
  public final static native long new_Bitwuzla__SWIG_0(long jarg1, TermManager jarg1_, long jarg2, Options jarg2_);
  public final static native long new_Bitwuzla__SWIG_1(long jarg1, TermManager jarg1_);
  public final static native void delete_Bitwuzla(long jarg1);
  public final static native void Bitwuzla_configure_terminator(long jarg1, Bitwuzla jarg1_, long jarg2, Terminator jarg2_);
  public final static native void Bitwuzla_push(long jarg1, Bitwuzla jarg1_, long jarg2);
  public final static native void Bitwuzla_pop(long jarg1, Bitwuzla jarg1_, long jarg2);
  public final static native void Bitwuzla_assert_formula(long jarg1, Bitwuzla jarg1_, long jarg2, Term jarg2_);
  public final static native long Bitwuzla_get_assertions(long jarg1, Bitwuzla jarg1_);
  public final static native long Bitwuzla_get_unsat_assumptions(long jarg1, Bitwuzla jarg1_);
  public final static native long Bitwuzla_get_unsat_core(long jarg1, Bitwuzla jarg1_);
  public final static native long Bitwuzla_simplify(long jarg1, Bitwuzla jarg1_, long jarg2, Term jarg2_);
  public final static native int Bitwuzla_check_sat__SWIG_0(long jarg1, Bitwuzla jarg1_, long jarg2, Vector_Term jarg2_);
  public final static native int Bitwuzla_check_sat__SWIG_1(long jarg1, Bitwuzla jarg1_);
  public final static native long Bitwuzla_get_value(long jarg1, Bitwuzla jarg1_, long jarg2, Term jarg2_);
  public final static native long Bitwuzla_term_mgr(long jarg1, Bitwuzla jarg1_);
  public final static native String Bitwuzla_print_formula(long jarg1, Bitwuzla jarg1_);
  public final static native long new_Parser__SWIG_0(long jarg1, TermManager jarg1_, long jarg2, Options jarg2_, String jarg3);
  public final static native long new_Parser__SWIG_1(long jarg1, TermManager jarg1_, long jarg2, Options jarg2_);
  public final static native void delete_Parser(long jarg1);
  public final static native void Parser_parse__SWIG_0(long jarg1, Parser jarg1_, String jarg2, boolean jarg3, boolean jarg4);
  public final static native void Parser_parse__SWIG_1(long jarg1, Parser jarg1_, String jarg2, boolean jarg3);
  public final static native void Parser_parse__SWIG_2(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_parse_term(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_parse_sort(long jarg1, Parser jarg1_, String jarg2);
  public final static native long Parser_get_declared_sorts(long jarg1, Parser jarg1_);
  public final static native long Parser_get_declared_funs(long jarg1, Parser jarg1_);
  public final static native long Parser_bitwuzla(long jarg1, Parser jarg1_);
  public static boolean SwigDirector_Terminator_terminate(Terminator jself) {
    return jself.terminate();
  }
  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Terminator {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Terminator(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Terminator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Terminator obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Terminator(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }
  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    BitwuzlaNativeJNI.Terminator_change_ownership(this, swigCPtr, false);
  }
  public void swigTakeOwnership() {
    swigCMemOwn = true;
    BitwuzlaNativeJNI.Terminator_change_ownership(this, swigCPtr, true);
  }
  public boolean terminate() {
    return BitwuzlaNativeJNI.Terminator_terminate(swigCPtr, this);
  }
  public Terminator() {
    this(BitwuzlaNativeJNI.new_Terminator(), true);
    BitwuzlaNativeJNI.Terminator_director_connect(this, swigCPtr, true, true);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Term {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Term(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Term obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Term obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        //BitwuzlaNativeJNI.delete_Term(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public boolean equals(Object object) {
    if(object instanceof Term) {
      Term that = (Term) object;
      return this.isEqual(that);
    }
    return false;
  }
  public Term() {
    this(BitwuzlaNativeJNI.new_Term(), true);
  }
  public boolean is_null() {
    return BitwuzlaNativeJNI.Term_is_null(swigCPtr, this);
  }
  public Kind kind() {
    return Kind.swigToEnum(BitwuzlaNativeJNI.Term_kind(swigCPtr, this));
  }
  public Sort sort() {
    return new Sort(BitwuzlaNativeJNI.Term_sort(swigCPtr, this), true);
  }
  public long num_children() {
    return BitwuzlaNativeJNI.Term_num_children(swigCPtr, this);
  }
  public Vector_Term children() {
    return new Vector_Term(BitwuzlaNativeJNI.Term_children(swigCPtr, this), true);
  }
  public Term get(long index) {
    return new Term(BitwuzlaNativeJNI.Term_get(swigCPtr, this, index), true);
  }
  public long num_indices() {
    return BitwuzlaNativeJNI.Term_num_indices(swigCPtr, this);
  }
  public boolean is_const() {
    return BitwuzlaNativeJNI.Term_is_const(swigCPtr, this);
  }
  public boolean is_variable() {
    return BitwuzlaNativeJNI.Term_is_variable(swigCPtr, this);
  }
  public boolean is_value() {
    return BitwuzlaNativeJNI.Term_is_value(swigCPtr, this);
  }
  public boolean is_true() {
    return BitwuzlaNativeJNI.Term_is_true(swigCPtr, this);
  }
  public boolean is_false() {
    return BitwuzlaNativeJNI.Term_is_false(swigCPtr, this);
  }
  public boolean is_bv_value_zero() {
    return BitwuzlaNativeJNI.Term_is_bv_value_zero(swigCPtr, this);
  }
  public boolean is_bv_value_one() {
    return BitwuzlaNativeJNI.Term_is_bv_value_one(swigCPtr, this);
  }
  public boolean is_bv_value_ones() {
    return BitwuzlaNativeJNI.Term_is_bv_value_ones(swigCPtr, this);
  }
  public boolean is_bv_value_min_signed() {
    return BitwuzlaNativeJNI.Term_is_bv_value_min_signed(swigCPtr, this);
  }
  public boolean is_bv_value_max_signed() {
    return BitwuzlaNativeJNI.Term_is_bv_value_max_signed(swigCPtr, this);
  }
  public boolean is_fp_value_pos_zero() {
    return BitwuzlaNativeJNI.Term_is_fp_value_pos_zero(swigCPtr, this);
  }
  public boolean is_fp_value_neg_zero() {
    return BitwuzlaNativeJNI.Term_is_fp_value_neg_zero(swigCPtr, this);
  }
  public boolean is_fp_value_pos_inf() {
    return BitwuzlaNativeJNI.Term_is_fp_value_pos_inf(swigCPtr, this);
  }
  public boolean is_fp_value_neg_inf() {
    return BitwuzlaNativeJNI.Term_is_fp_value_neg_inf(swigCPtr, this);
  }
  public boolean is_fp_value_nan() {
    return BitwuzlaNativeJNI.Term_is_fp_value_nan(swigCPtr, this);
  }
  public boolean is_rm_value_rna() {
    return BitwuzlaNativeJNI.Term_is_rm_value_rna(swigCPtr, this);
  }
  public boolean is_rm_value_rne() {
    return BitwuzlaNativeJNI.Term_is_rm_value_rne(swigCPtr, this);
  }
  public boolean is_rm_value_rtn() {
    return BitwuzlaNativeJNI.Term_is_rm_value_rtn(swigCPtr, this);
  }
  public boolean is_rm_value_rtp() {
    return BitwuzlaNativeJNI.Term_is_rm_value_rtp(swigCPtr, this);
  }
  public boolean is_rm_value_rtz() {
    return BitwuzlaNativeJNI.Term_is_rm_value_rtz(swigCPtr, this);
  }
  public String toString(short base) {
    return BitwuzlaNativeJNI.Term_toString__SWIG_0(swigCPtr, this, base);
  }
  public String toString() {
    return BitwuzlaNativeJNI.Term_toString__SWIG_1(swigCPtr, this);
  }
  public int id() {
    return BitwuzlaNativeJNI.Term_id(swigCPtr, this);
  }
  public Vector_Int indices() {
    return new Vector_Int(BitwuzlaNativeJNI.Term_indices(swigCPtr, this), true);
  }
  public String symbol() {
    return BitwuzlaNativeJNI.Term_symbol(swigCPtr, this);
  }
  public boolean to_bool() {
    return BitwuzlaNativeJNI.Term_to_bool(swigCPtr, this);
  }
  public RoundingMode to_rm() {
    return RoundingMode.swigToEnum(BitwuzlaNativeJNI.Term_to_rm(swigCPtr, this));
  }
  public String to_bv() {
    return BitwuzlaNativeJNI.Term_to_bv(swigCPtr, this);
  }
  public int hashCode() {
    return BitwuzlaNativeJNI.Term_hashCode(swigCPtr, this);
  }
  public boolean isEqual(Term other) {
    return BitwuzlaNativeJNI.Term_isEqual(swigCPtr, this, Term.getCPtr(other), other);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Vector_String extends java.util.AbstractList<String> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Vector_String(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Vector_String obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Vector_String obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Vector_String(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Vector_String(String[] initialElements) {
    this();
    reserve(initialElements.length);
    for (String element : initialElements) {
      add(element);
    }
  }
  public Vector_String(Iterable<String> initialElements) {
    this();
    for (String element : initialElements) {
      add(element);
    }
  }
  public String get(int index) {
    return doGet(index);
  }
  public String set(int index, String e) {
    return doSet(index, e);
  }
  public boolean add(String e) {
    modCount++;
    doAdd(e);
    return true;
  }
  public void add(int index, String e) {
    modCount++;
    doAdd(index, e);
  }
  public String remove(int index) {
    modCount++;
    return doRemove(index);
  }
  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }
  public int size() {
    return doSize();
  }
  public Vector_String() {
    this(BitwuzlaNativeJNI.new_Vector_String__SWIG_0(), true);
  }
  public Vector_String(Vector_String other) {
    this(BitwuzlaNativeJNI.new_Vector_String__SWIG_1(Vector_String.getCPtr(other), other), true);
  }
  public long capacity() {
    return BitwuzlaNativeJNI.Vector_String_capacity(swigCPtr, this);
  }
  public void reserve(long n) {
    BitwuzlaNativeJNI.Vector_String_reserve(swigCPtr, this, n);
  }
  public boolean isEmpty() {
    return BitwuzlaNativeJNI.Vector_String_isEmpty(swigCPtr, this);
  }
  public void clear() {
    BitwuzlaNativeJNI.Vector_String_clear(swigCPtr, this);
  }
  public Vector_String(int count, String value) {
    this(BitwuzlaNativeJNI.new_Vector_String__SWIG_2(count, value), true);
  }
  private int doSize() {
    return BitwuzlaNativeJNI.Vector_String_doSize(swigCPtr, this);
  }
  private void doAdd(String x) {
    BitwuzlaNativeJNI.Vector_String_doAdd__SWIG_0(swigCPtr, this, x);
  }
  private void doAdd(int index, String x) {
    BitwuzlaNativeJNI.Vector_String_doAdd__SWIG_1(swigCPtr, this, index, x);
  }
  private String doRemove(int index) {
    return BitwuzlaNativeJNI.Vector_String_doRemove(swigCPtr, this, index);
  }
  private String doGet(int index) {
    return BitwuzlaNativeJNI.Vector_String_doGet(swigCPtr, this, index);
  }
  private String doSet(int index, String val) {
    return BitwuzlaNativeJNI.Vector_String_doSet(swigCPtr, this, index, val);
  }
  private void doRemoveRange(int fromIndex, int toIndex) {
    BitwuzlaNativeJNI.Vector_String_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Options {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Options(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Options obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Options obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Options(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Options() {
    this(BitwuzlaNativeJNI.new_Options__SWIG_0(), true);
  }
  public Options(Options options) {
    this(BitwuzlaNativeJNI.new_Options__SWIG_1(Options.getCPtr(options), options), true);
  }
  public boolean is_valid(String name) {
    return BitwuzlaNativeJNI.Options_is_valid(swigCPtr, this, name);
  }
  public boolean is_bool(Option option) {
    return BitwuzlaNativeJNI.Options_is_bool(swigCPtr, this, option.swigValue());
  }
  public boolean is_numeric(Option option) {
    return BitwuzlaNativeJNI.Options_is_numeric(swigCPtr, this, option.swigValue());
  }
  public boolean is_mode(Option option) {
    return BitwuzlaNativeJNI.Options_is_mode(swigCPtr, this, option.swigValue());
  }
  public String shrt(Option option) {
    return BitwuzlaNativeJNI.Options_shrt(swigCPtr, this, option.swigValue());
  }
  public String lng(Option option) {
    return BitwuzlaNativeJNI.Options_lng(swigCPtr, this, option.swigValue());
  }
  public String description(Option option) {
    return BitwuzlaNativeJNI.Options_description(swigCPtr, this, option.swigValue());
  }
  public Vector_String modes(Option option) {
    return new Vector_String(BitwuzlaNativeJNI.Options_modes(swigCPtr, this, option.swigValue()), true);
  }
  public Option option(String name) {
    return Option.swigToEnum(BitwuzlaNativeJNI.Options_option(swigCPtr, this, name));
  }
  public void set(Option option, String mode) {
    BitwuzlaNativeJNI.Options_set__SWIG_0(swigCPtr, this, option.swigValue(), mode);
  }
  public void set(String lng, String value) {
    BitwuzlaNativeJNI.Options_set__SWIG_1(swigCPtr, this, lng, value);
  }
  public void set(Vector_String args) {
    BitwuzlaNativeJNI.Options_set__SWIG_2(swigCPtr, this, Vector_String.getCPtr(args), args);
  }
  public java.math.BigInteger get(Option option) {
    return BitwuzlaNativeJNI.Options_get(swigCPtr, this, option.swigValue());
  }
  public String get_mode(Option option) {
    return BitwuzlaNativeJNI.Options_get_mode(swigCPtr, this, option.swigValue());
  }
  public void set(Option option, int value) {
    BitwuzlaNativeJNI.Options_set__SWIG_3(swigCPtr, this, option.swigValue(), value);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public final class Result {
  public final static Result SAT = new Result("SAT", BitwuzlaNativeJNI.Result_SAT_get());
  public final static Result UNSAT = new Result("UNSAT", BitwuzlaNativeJNI.Result_UNSAT_get());
  public final static Result UNKNOWN = new Result("UNKNOWN", BitwuzlaNativeJNI.Result_UNKNOWN_get());
  public final int swigValue() {
    return swigValue;
  }
  public String toString() {
    return swigName;
  }
  public static Result swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + Result.class + " with value " + swigValue);
  }
  private Result(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }
  private Result(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }
  private Result(String swigName, Result swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }
  private static Result[] swigValues = { SAT, UNSAT, UNKNOWN };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public final class RoundingMode {
  public final static RoundingMode RNE = new RoundingMode("RNE", BitwuzlaNativeJNI.RoundingMode_RNE_get());
  public final static RoundingMode RNA = new RoundingMode("RNA", BitwuzlaNativeJNI.RoundingMode_RNA_get());
  public final static RoundingMode RTN = new RoundingMode("RTN", BitwuzlaNativeJNI.RoundingMode_RTN_get());
  public final static RoundingMode RTP = new RoundingMode("RTP", BitwuzlaNativeJNI.RoundingMode_RTP_get());
  public final static RoundingMode RTZ = new RoundingMode("RTZ", BitwuzlaNativeJNI.RoundingMode_RTZ_get());
  public final int swigValue() {
    return swigValue;
  }
  public String toString() {
    return swigName;
  }
  public static RoundingMode swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + RoundingMode.class + " with value " + swigValue);
  }
  private RoundingMode(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }
  private RoundingMode(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }
  private RoundingMode(String swigName, RoundingMode swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }
  private static RoundingMode[] swigValues = { RNE, RNA, RTN, RTP, RTZ };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Sort {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Sort(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Sort obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Sort obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Sort(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public boolean equals(Object object) {
    if(object instanceof Sort) {
      Sort that = (Sort) object;
      return this.isEqual(that);
    }
    return false;
  }
  public Sort() {
    this(BitwuzlaNativeJNI.new_Sort(), true);
  }
  public boolean is_null() {
    return BitwuzlaNativeJNI.Sort_is_null(swigCPtr, this);
  }
  public Sort array_index() {
    return new Sort(BitwuzlaNativeJNI.Sort_array_index(swigCPtr, this), true);
  }
  public Sort array_element() {
    return new Sort(BitwuzlaNativeJNI.Sort_array_element(swigCPtr, this), true);
  }
  public Vector_Sort fun_domain() {
    return new Vector_Sort(BitwuzlaNativeJNI.Sort_fun_domain(swigCPtr, this), true);
  }
  public Sort fun_codomain() {
    return new Sort(BitwuzlaNativeJNI.Sort_fun_codomain(swigCPtr, this), true);
  }
  public boolean is_array() {
    return BitwuzlaNativeJNI.Sort_is_array(swigCPtr, this);
  }
  public boolean is_bool() {
    return BitwuzlaNativeJNI.Sort_is_bool(swigCPtr, this);
  }
  public boolean is_bv() {
    return BitwuzlaNativeJNI.Sort_is_bv(swigCPtr, this);
  }
  public boolean is_fp() {
    return BitwuzlaNativeJNI.Sort_is_fp(swigCPtr, this);
  }
  public boolean is_fun() {
    return BitwuzlaNativeJNI.Sort_is_fun(swigCPtr, this);
  }
  public boolean is_rm() {
    return BitwuzlaNativeJNI.Sort_is_rm(swigCPtr, this);
  }
  public String toString() {
    return BitwuzlaNativeJNI.Sort_toString(swigCPtr, this);
  }
  public int id() {
    return BitwuzlaNativeJNI.Sort_id(swigCPtr, this);
  }
  public int bv_size() {
    return BitwuzlaNativeJNI.Sort_bv_size(swigCPtr, this);
  }
  public int fp_exp_size() {
    return BitwuzlaNativeJNI.Sort_fp_exp_size(swigCPtr, this);
  }
  public int fp_sig_size() {
    return BitwuzlaNativeJNI.Sort_fp_sig_size(swigCPtr, this);
  }
  public int fun_arity() {
    return BitwuzlaNativeJNI.Sort_fun_arity(swigCPtr, this);
  }
  public int hashCode() {
    return BitwuzlaNativeJNI.Sort_hashCode(swigCPtr, this);
  }
  public boolean isEqual(Sort other) {
    return BitwuzlaNativeJNI.Sort_isEqual(swigCPtr, this, Sort.getCPtr(other), other);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Vector_Int extends java.util.AbstractList<Integer> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Vector_Int(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Vector_Int obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Vector_Int obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Vector_Int(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Vector_Int(int[] initialElements) {
    this();
    reserve(initialElements.length);
    for (int element : initialElements) {
      add(element);
    }
  }
  public Vector_Int(Iterable<Integer> initialElements) {
    this();
    for (int element : initialElements) {
      add(element);
    }
  }
  public Integer get(int index) {
    return doGet(index);
  }
  public Integer set(int index, Integer e) {
    return doSet(index, e);
  }
  public boolean add(Integer e) {
    modCount++;
    doAdd(e);
    return true;
  }
  public void add(int index, Integer e) {
    modCount++;
    doAdd(index, e);
  }
  public Integer remove(int index) {
    modCount++;
    return doRemove(index);
  }
  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }
  public int size() {
    return doSize();
  }
  public Vector_Int() {
    this(BitwuzlaNativeJNI.new_Vector_Int__SWIG_0(), true);
  }
  public Vector_Int(Vector_Int other) {
    this(BitwuzlaNativeJNI.new_Vector_Int__SWIG_1(Vector_Int.getCPtr(other), other), true);
  }
  public long capacity() {
    return BitwuzlaNativeJNI.Vector_Int_capacity(swigCPtr, this);
  }
  public void reserve(long n) {
    BitwuzlaNativeJNI.Vector_Int_reserve(swigCPtr, this, n);
  }
  public boolean isEmpty() {
    return BitwuzlaNativeJNI.Vector_Int_isEmpty(swigCPtr, this);
  }
  public void clear() {
    BitwuzlaNativeJNI.Vector_Int_clear(swigCPtr, this);
  }
  public Vector_Int(int count, int value) {
    this(BitwuzlaNativeJNI.new_Vector_Int__SWIG_2(count, value), true);
  }
  private int doSize() {
    return BitwuzlaNativeJNI.Vector_Int_doSize(swigCPtr, this);
  }
  private void doAdd(int x) {
    BitwuzlaNativeJNI.Vector_Int_doAdd__SWIG_0(swigCPtr, this, x);
  }
  private void doAdd(int index, int x) {
    BitwuzlaNativeJNI.Vector_Int_doAdd__SWIG_1(swigCPtr, this, index, x);
  }
  private int doRemove(int index) {
    return BitwuzlaNativeJNI.Vector_Int_doRemove(swigCPtr, this, index);
  }
  private int doGet(int index) {
    return BitwuzlaNativeJNI.Vector_Int_doGet(swigCPtr, this, index);
  }
  private int doSet(int index, int val) {
    return BitwuzlaNativeJNI.Vector_Int_doSet(swigCPtr, this, index, val);
  }
  private void doRemoveRange(int fromIndex, int toIndex) {
    BitwuzlaNativeJNI.Vector_Int_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class BitwuzlaNative {
  public static String copyright() {
    return BitwuzlaNativeJNI.copyright();
  }
  public static String version() {
    return BitwuzlaNativeJNI.version();
  }
  public static String git_id() {
    return BitwuzlaNativeJNI.git_id();
  }
}
// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.bitwuzla.api;
public class Parser {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;
  protected Parser(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }
  protected static long getCPtr(Parser obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }
  protected static long swigRelease(Parser obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }
  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }
  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        BitwuzlaNativeJNI.delete_Parser(swigCPtr);
      }
      swigCPtr = 0;
    }
  }
  public Parser(TermManager tm, Options options, String language) {
    this(BitwuzlaNativeJNI.new_Parser__SWIG_0(TermManager.getCPtr(tm), tm, Options.getCPtr(options), options, language), true);
  }
  public Parser(TermManager tm, Options options) {
    this(BitwuzlaNativeJNI.new_Parser__SWIG_1(TermManager.getCPtr(tm), tm, Options.getCPtr(options), options), true);
  }
  public void parse(String input, boolean parse_only, boolean parse_file) {
    BitwuzlaNativeJNI.Parser_parse__SWIG_0(swigCPtr, this, input, parse_only, parse_file);
  }
  public void parse(String input, boolean parse_only) {
    BitwuzlaNativeJNI.Parser_parse__SWIG_1(swigCPtr, this, input, parse_only);
  }
  public void parse(String input) {
    BitwuzlaNativeJNI.Parser_parse__SWIG_2(swigCPtr, this, input);
  }
  public Term parse_term(String input) {
    return new Term(BitwuzlaNativeJNI.Parser_parse_term(swigCPtr, this, input), true);
  }
  public Sort parse_sort(String input) {
    return new Sort(BitwuzlaNativeJNI.Parser_parse_sort(swigCPtr, this, input), true);
  }
  public Vector_Sort get_declared_sorts() {
    return new Vector_Sort(BitwuzlaNativeJNI.Parser_get_declared_sorts(swigCPtr, this), true);
  }
  public Vector_Term get_declared_funs() {
    return new Vector_Term(BitwuzlaNativeJNI.Parser_get_declared_funs(swigCPtr, this), true);
  }
  public Bitwuzla bitwuzla() {
    long cPtr = BitwuzlaNativeJNI.Parser_bitwuzla(swigCPtr, this);
    return (cPtr == 0) ? null : new Bitwuzla(cPtr, true);
  }
}