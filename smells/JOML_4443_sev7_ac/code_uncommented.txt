package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector3d implements Externalizable, Cloneable, Vector3dc {
    private static final long serialVersionUID = 1L;
    public double x;
    public double y;
    public double z;
    public Vector3d() {
    }
    public Vector3d(double d) {
        this.x = d;
        this.y = d;
        this.z = d;
    }
    public Vector3d(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    public Vector3d(Vector3fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3d(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3d(Vector2fc v, double z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3d(Vector2ic v, double z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3d(Vector3dc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3d(Vector2dc v, double z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3d(double[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
    }
    public Vector3d(float[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
    }
    public Vector3d(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3d(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector3d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3d(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public double x() {
        return this.x;
    }
    public double y() {
        return this.y;
    }
    public double z() {
        return this.z;
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector3d set(Vector4dc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3d set(Vector4fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3d set(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3d set(Vector3dc v) {
        if (v == this)
            return this;
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3d set(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3d set(Vector2dc v, double z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3d set(Vector2ic v, double z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3d set(Vector3fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3d set(Vector2fc v, double z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3d set(double d) {
        this.x = d;
        this.y = d;
        this.z = d;
        return this;
    }
    public Vector3d set(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    public Vector3d set(double[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
        return this;
    }
    public Vector3d set(float[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
        return this;
    }
    public Vector3d set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3d set(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Vector3d setComponent(int component, double value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer get(DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public DoubleBuffer get(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getf(ByteBuffer buffer) {
        MemUtil.INSTANCE.putf(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer getf(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putf(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get(FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector3dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector3d sub(Vector3dc v) {
        return sub(v, this);
    }
    public Vector3d sub(Vector3dc v, Vector3d dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        return dest;
    }
    public Vector3d sub(Vector3fc v) {
        return sub(v, this);
    }
    public Vector3d sub(Vector3fc v, Vector3d dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        return dest;
    }
    public Vector3d sub(double x, double y, double z) {
        return sub(x, y, z, this);
    }
    public Vector3d sub(double x, double y, double z, Vector3d dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        return dest;
    }
    public Vector3d add(Vector3dc v) {
        return add(v, this);
    }
    public Vector3d add(Vector3dc v, Vector3d dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        return dest;
    }
    public Vector3d add(Vector3fc v) {
        return add(v, this);
    }
    public Vector3d add(Vector3fc v, Vector3d dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        return dest;
    }
    public Vector3d add(double x, double y, double z) {
        return add(x, y, z, this);
    }
    public Vector3d add(double x, double y, double z, Vector3d dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        return dest;
    }
    public Vector3d fma(Vector3dc a, Vector3dc b) {
        return fma(a, b, this);
    }
    public Vector3d fma(double a, Vector3dc b) {
        return fma(a, b, this);
    }
    public Vector3d fma(Vector3fc a, Vector3fc b) {
        return fma(a, b, this);
    }
    public Vector3d fma(Vector3fc a, Vector3fc b, Vector3d dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        dest.z = Math.fma(a.z(), b.z(), z);
        return dest;
    }
    public Vector3d fma(double a, Vector3fc b) {
        return fma(a, b, this);
    }
    public Vector3d fma(Vector3dc a, Vector3dc b, Vector3d dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        dest.z = Math.fma(a.z(), b.z(), z);
        return dest;
    }
    public Vector3d fma(double a, Vector3dc b, Vector3d dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        dest.z = Math.fma(a, b.z(), z);
        return dest;
    }
    public Vector3d fma(Vector3dc a, Vector3fc b, Vector3d dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        dest.z = Math.fma(a.z(), b.z(), z);
        return dest;
    }
    public Vector3d fma(double a, Vector3fc b, Vector3d dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        dest.z = Math.fma(a, b.z(), z);
        return dest;
    }
    public Vector3d mulAdd(Vector3dc a, Vector3dc b) {
        return mulAdd(a, b, this);
    }
    public Vector3d mulAdd(double a, Vector3dc b) {
        return mulAdd(a, b, this);
    }
    public Vector3d mulAdd(Vector3dc a, Vector3dc b, Vector3d dest) {
        dest.x = Math.fma(x, a.x(), b.x());
        dest.y = Math.fma(y, a.y(), b.y());
        dest.z = Math.fma(z, a.z(), b.z());
        return dest;
    }
    public Vector3d mulAdd(double a, Vector3dc b, Vector3d dest) {
        dest.x = Math.fma(x, a, b.x());
        dest.y = Math.fma(y, a, b.y());
        dest.z = Math.fma(z, a, b.z());
        return dest;
    }
    public Vector3d mulAdd(Vector3fc a, Vector3dc b, Vector3d dest) {
        dest.x = Math.fma(x, a.x(), b.x());
        dest.y = Math.fma(y, a.y(), b.y());
        dest.z = Math.fma(z, a.z(), b.z());
        return dest;
    }
    public Vector3d mul(Vector3dc v) {
        return mul(v, this);
    }
    public Vector3d mul(Vector3fc v) {
        return mul(v, this);
    }
    public Vector3d mul(Vector3fc v, Vector3d dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        return dest;
    }
    public Vector3d mul(Vector3dc v, Vector3d dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        return dest;
    }
    public Vector3d div(Vector3dc v) {
        return div(v, this);
    }
    public Vector3d div(Vector3fc v) {
        return div(v, this);
    }
    public Vector3d div(Vector3fc v, Vector3d dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        return dest;
    }
    public Vector3d div(Vector3dc v, Vector3d dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        return dest;
    }
    public Vector3d mulProject(Matrix4dc mat, double w, Vector3d dest) {
        double invW = 1.0 / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulProject(Matrix4dc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4dc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, this);
        if ((prop & Matrix4dc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, this);
        return mulProjectGeneric(mat, this);
    }
    public Vector3d mulProject(Matrix4dc mat, Vector3d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4dc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4dc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector3d mulProject(Matrix4fc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, this);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, this);
        return mulProjectGeneric(mat, this);
    }
    public Vector3d mulProject(Matrix4fc mat, Vector3d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector3d mulProjectTranslation(Matrix4dc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3d mulProjectTranslation(Matrix4dc mat, Vector3d dest) {
        return mulPositionTranslation(mat, dest);
    }
    public Vector3d mulProjectTranslation(Matrix4fc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3d mulProjectTranslation(Matrix4fc mat, Vector3d dest) {
        return mulPositionTranslation(mat, dest);
    }
    public Vector3d mulProjectAffine(Matrix4dc mat) {
        return mulProjectAffine(mat, this);
    }
    public Vector3d mulProjectAffine(Matrix4dc mat, Vector3d dest) {
        double x1 = this.x, y1 = this.y, z1 = this.z;
        dest.x = Math.fma(mat.m00(), x1, Math.fma(mat.m10(), y1, mat.m20() * z1)) + mat.m30();
        dest.y = Math.fma(mat.m01(), x1, Math.fma(mat.m11(), y1, mat.m21() * z1)) + mat.m31();
        dest.z = Math.fma(mat.m02(), x1, Math.fma(mat.m12(), y1, mat.m22() * z1)) + mat.m32();
        return dest;
    }
    public Vector3d mulProjectAffine(Matrix4fc mat) {
        return mulProjectAffine(mat, this);
    }
    public Vector3d mulProjectAffine(Matrix4fc mat, Vector3d dest) {
        double x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z)) + mat.m30();
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z)) + mat.m31();
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z)) + mat.m32();
        return dest;
    }
    public Vector3d mulProjectGeneric(Matrix4dc mat) {
        return mulProjectGeneric(mat, this);
    }
    public Vector3d mulProjectGeneric(Matrix4dc mat, Vector3d dest) {
        double x = this.x, y = this.y, z = this.z;
        double invW = 1.0 / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30()))) * invW;
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31()))) * invW;
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32()))) * invW;
        return dest;
    }
    public Vector3d mulProjectGeneric(Matrix4fc mat) {
        return mulProjectGeneric(mat, this);
    }
    public Vector3d mulProjectGeneric(Matrix4fc mat, Vector3d dest) {
        double x = this.x, y = this.y, z = this.z;
        double invW = 1.0 / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30()))) * invW;
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31()))) * invW;
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32()))) * invW;
        return dest;
    }
    public Vector3d mul(Matrix3fc mat) {
        return mul(mat, this);
    }
    public Vector3d mul(Matrix3dc mat) {
        return mul(mat, this);
    }
    public Vector3d mul(Matrix3dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3f mul(Matrix3dc mat, Vector3f dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = (float) rx;
        dest.y = (float) ry;
        dest.z = (float) rz;
        return dest;
    }
    public Vector3d mul(Matrix3fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mul(Matrix3x2dc mat) {
        return mul(mat, this);
    }
    public Vector3d mul(Matrix3x2dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = z;
        return dest;
    }
    public Vector3d mul(Matrix3x2fc mat) {
        return mul(mat, this);
    }
    public Vector3d mul(Matrix3x2fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = z;
        return dest;
    }
    public Vector3d mulTranspose(Matrix3dc mat) {
        return mulTranspose(mat, this);
    }
    public Vector3d mulTranspose(Matrix3dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        double ry = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        double rz = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulTranspose(Matrix3fc mat) {
        return mulTranspose(mat, this);
    }
    public Vector3d mulTranspose(Matrix3fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        double ry = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        double rz = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulPosition(Matrix4dc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4dc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPosition(Matrix4dc mat, Vector3d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3d mulPosition(Matrix4fc mat, Vector3d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3d mulPosition(Matrix4fc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPositionTranslation(Matrix4dc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3d mulPositionTranslation(Matrix4dc mat, Vector3d dest) {
        dest.x = this.x + mat.m30();
        dest.y = this.y + mat.m31();
        dest.z = this.z + mat.m32();
        return dest;
    }
    public Vector3d mulPositionTranslation(Matrix4fc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3d mulPositionTranslation(Matrix4fc mat, Vector3d dest) {
        dest.x = this.x + mat.m30();
        dest.y = this.y + mat.m31();
        dest.z = this.z + mat.m32();
        return dest;
    }
    public Vector3d mulPositionGeneric(Matrix4dc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPositionGeneric(Matrix4dc mat, Vector3d dest) {
        double x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return dest;
    }
    public Vector3d mulPositionGeneric(Matrix4fc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPositionGeneric(Matrix4fc mat, Vector3d dest) {
        double x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return dest;
    }
    public Vector3d mulPosition(Matrix4x3dc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat);
    }
    public Vector3d mulPositionTranslation(Matrix4x3dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulPositionTranslation(Matrix4x3dc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3d mulPositionGeneric(Matrix4x3dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulPositionGeneric(Matrix4x3dc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPosition(Matrix4x3fc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPositionTranslation(Matrix4x3fc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3d mulPositionTranslation(Matrix4x3fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulPositionGeneric(Matrix4x3fc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3d mulPositionGeneric(Matrix4x3fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulPosition(Matrix4x3dc mat, Vector3d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3d mulPosition(Matrix4x3fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulTransposePosition(Matrix4dc mat) {
        return mulTransposePosition(mat, this);
    }
    public Vector3d mulTransposePosition(Matrix4dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, Math.fma(mat.m02(), z, mat.m03())));
        double ry = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, Math.fma(mat.m12(), z, mat.m13())));
        double rz = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, Math.fma(mat.m22(), z, mat.m23())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulTransposePosition(Matrix4fc mat) {
        return mulTransposePosition(mat, this);
    }
    public Vector3d mulTransposePosition(Matrix4fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, Math.fma(mat.m02(), z, mat.m03())));
        double ry = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, Math.fma(mat.m12(), z, mat.m13())));
        double rz = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, Math.fma(mat.m22(), z, mat.m23())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public double mulPositionW(Matrix4fc mat) {
        return mulPositionW(mat, this);
    }
    public double mulPositionW(Matrix4fc mat, Vector3d dest) {
        double w = Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return w;
    }
    public double mulPositionW(Matrix4dc mat) {
        return mulPositionW(mat, this);
    }
    public double mulPositionW(Matrix4dc mat, Vector3d dest) {
        double w = Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return w;
    }
    public Vector3d mulDirection(Matrix4fc mat) {
        return mulDirection(mat, this);
    }
    public Vector3d mulDirection(Matrix4dc mat) {
        return mulDirection(mat, this);
    }
    public Vector3d mulDirection(Matrix4x3dc mat) {
        return mulDirection(mat, this);
    }
    public Vector3d mulDirection(Matrix4x3fc mat) {
        return mulDirection(mat, this);
    }
    public Vector3d mulDirection(Matrix4dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulDirection(Matrix4fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulDirection(Matrix4x3dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulDirection(Matrix4x3fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulTransposeDirection(Matrix4dc mat) {
        return mulTransposeDirection(mat, this);
    }
    public Vector3d mulTransposeDirection(Matrix4dc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        double ry = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        double rz = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mulTransposeDirection(Matrix4fc mat) {
        return mulTransposeDirection(mat, this);
    }
    public Vector3d mulTransposeDirection(Matrix4fc mat, Vector3d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        double ry = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        double rz = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d mul(double scalar) {
        return this.mul(scalar, this);
    }
    public Vector3d mul(double scalar, Vector3d dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        return dest;
    }
    public Vector3d mul(double x, double y, double z) {
        return this.mul(x, y, z, this);
    }
    public Vector3d mul(double x, double y, double z, Vector3d dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        dest.z = this.z * z;
        return dest;
    }
    public Vector3d rotate(Quaterniondc quat) {
        return quat.transform(this, this);
    }
    public Vector3d rotate(Quaterniondc quat, Vector3d dest) {
        return quat.transform(this, dest);
    }
    public Quaterniond rotationTo(Vector3dc toDir, Quaterniond dest) {
        return dest.rotationTo(this, toDir);
    }
    public Quaterniond rotationTo(double toDirX, double toDirY, double toDirZ, Quaterniond dest) {
        return dest.rotationTo(x, y, z, toDirX, toDirY, toDirZ);
    }
    public Vector3d rotateAxis(double angle, double x, double y, double z) {
        return rotateAxis(angle, x, y, z, this);
    }
    public Vector3d rotateAxis(double angle, double aX, double aY, double aZ, Vector3d dest) {
        if (aY == 0.0 && aZ == 0.0 && Math.absEqualsOne(aX))
            return rotateX(aX * angle, dest);
        else if (aX == 0.0 && aZ == 0.0 && Math.absEqualsOne(aY))
            return rotateY(aY * angle, dest);
        else if (aX == 0.0 && aY == 0.0 && Math.absEqualsOne(aZ))
            return rotateZ(aZ * angle, dest);
        return rotateAxisInternal(angle, aX, aY, aZ, dest);
    }
    private Vector3d rotateAxisInternal(double angle, double aX, double aY, double aZ, Vector3d dest) {
        double hangle = angle * 0.5;
        double sinAngle = Math.sin(hangle);
        double qx = aX * sinAngle, qy = aY * sinAngle, qz = aZ * sinAngle;
        double qw = Math.cosFromSin(sinAngle, hangle);
        double w2 = qw * qw, x2 = qx * qx, y2 = qy * qy, z2 = qz * qz, zw = qz * qw;
        double xy = qx * qy, xz = qx * qz, yw = qy * qw, yz = qy * qz, xw = qx * qw;
        double nx = (w2 + x2 - z2 - y2) * x + (-zw + xy - zw + xy) * y + (yw + xz + xz + yw) * z;
        double ny = (xy + zw + zw + xy) * x + ( y2 - z2 + w2 - x2) * y + (yz + yz - xw - xw) * z;
        double nz = (xz - yw + xz - yw) * x + ( yz + yz + xw + xw) * y + (z2 - y2 - x2 + w2) * z;
        dest.x = nx;
        dest.y = ny;
        dest.z = nz;
        return dest;
    }
    public Vector3d rotateX(double angle) {
        return rotateX(angle, this);
    }
    public Vector3d rotateX(double angle, Vector3d dest) {
        double sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        double y = this.y * cos - this.z * sin;
        double z = this.y * sin + this.z * cos;
        dest.x = this.x;
        dest.y = y;
        dest.z = z;
        return dest;
    }
    public Vector3d rotateY(double angle) {
        return rotateY(angle, this);
    }
    public Vector3d rotateY(double angle, Vector3d dest) {
        double sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        double x =  this.x * cos + this.z * sin;
        double z = -this.x * sin + this.z * cos;
        dest.x = x;
        dest.y = this.y;
        dest.z = z;
        return dest;
    }
    public Vector3d rotateZ(double angle) {
        return rotateZ(angle, this);
    }
    public Vector3d rotateZ(double angle, Vector3d dest) {
        double sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        double x = this.x * cos - this.y * sin;
        double y = this.x * sin + this.y * cos;
        dest.x = x;
        dest.y = y;
        dest.z = this.z;
        return dest;
    }
    public Vector3d div(double scalar) {
        return div(scalar, this);
    }
    public Vector3d div(double scalar, Vector3d dest) {
        double inv = 1.0 / scalar;
        dest.x = x * inv;
        dest.y = y * inv;
        dest.z = z * inv;
        return dest;
    }
    public Vector3d div(double x, double y, double z) {
        return div(x, y, z, this);
    }
    public Vector3d div(double x, double y, double z, Vector3d dest) {
        dest.x = this.x / x;
        dest.y = this.y / y;
        dest.z = this.z / z;
        return dest;
    }
    public double lengthSquared() {
        return Math.fma(x, x, Math.fma(y, y, z * z));
    }
    public static double lengthSquared(double x, double y, double z) {
        return Math.fma(x, x, Math.fma(y, y, z * z));
    }
    public double length() {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
    }
    public static double length(double x, double y, double z) {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
    }
    public Vector3d normalize() {
        return normalize(this);
    }
    public Vector3d normalize(Vector3d dest) {
        double invLength = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        return dest;
    }
    public Vector3d normalize(double length) {
        return normalize(length, this);
    }
    public Vector3d normalize(double length, Vector3d dest) {
        double invLength = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, z * z))) * length;
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        return dest;
    }
    public Vector3d cross(Vector3dc v) {
        return cross(v, this);
    }
    public Vector3d cross(double x, double y, double z) {
        return cross(x, y, z, this);
    }
    public Vector3d cross(Vector3dc v, Vector3d dest) {
        double rx = Math.fma(y, v.z(), -z * v.y());
        double ry = Math.fma(z, v.x(), -x * v.z());
        double rz = Math.fma(x, v.y(), -y * v.x());
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3d cross(double x, double y, double z, Vector3d dest) {
        double rx = Math.fma(this.y, z, -this.z * y);
        double ry = Math.fma(this.z, x, -this.x * z);
        double rz = Math.fma(this.x, y, -this.y * x);
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public double distance(Vector3dc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        double dz = this.z - v.z();
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, dz * dz)));
    }
    public double distance(double x, double y, double z) {
        double dx = this.x - x;
        double dy = this.y - y;
        double dz = this.z - z;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, dz * dz)));
    }
    public double distanceSquared(Vector3dc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        double dz = this.z - v.z();
        return Math.fma(dx, dx, Math.fma(dy, dy, dz * dz));
    }
    public double distanceSquared(double x, double y, double z) {
        double dx = this.x - x;
        double dy = this.y - y;
        double dz = this.z - z;
        return Math.fma(dx, dx, Math.fma(dy, dy, dz * dz));
    }
    public static double distance(double x1, double y1, double z1, double x2, double y2, double z2) {
        return Math.sqrt(distanceSquared(x1, y1, z1, x2, y2, z2));
    }
    public static double distanceSquared(double x1, double y1, double z1, double x2, double y2, double z2) {
        double dx = x1 - x2;
        double dy = y1 - y2;
        double dz = z1 - z2;
        return Math.fma(dx, dx, Math.fma(dy, dy, dz * dz));
    }
    public double dot(Vector3dc v) {
        return Math.fma(this.x, v.x(), Math.fma(this.y, v.y(), this.z * v.z()));
    }
    public double dot(double x, double y, double z) {
        return Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
    }
    public double angleCos(Vector3dc v) {
        double length1Squared = Math.fma(x, x, Math.fma(y, y, z * z));
        double length2Squared = Math.fma(v.x(), v.x(), Math.fma(v.y(), v.y(), v.z() * v.z()));
        double dot = Math.fma(x, v.x(), Math.fma(y, v.y(), z * v.z()));
        return dot / Math.sqrt(length1Squared * length2Squared);
    }
    public double angle(Vector3dc v) {
        double cos = angleCos(v);
        cos = cos < 1 ? cos : 1;
        cos = cos > -1 ? cos : -1;
        return Math.acos(cos);
    }
    public double angleSigned(Vector3dc v, Vector3dc n) {
        double x = v.x();
        double y = v.y();
        double z = v.z();
        return Math.atan2(
        (this.y * z - this.z * y) * n.x() + (this.z * x - this.x * z) * n.y() + (this.x * y - this.y * x) * n.z(),
        this.x * x + this.y * y + this.z * z);
    }
    public double angleSigned(double x, double y, double z, double nx, double ny, double nz) {
        return Math.atan2(
                (this.y * z - this.z * y) * nx + (this.z * x - this.x * z) * ny + (this.x * y - this.y * x) * nz,
                this.x * x + this.y * y + this.z * z);
    }
    public Vector3d min(Vector3dc v) {
        return min(v, this);
    }
    public Vector3d min(Vector3dc v, Vector3d dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        return dest;
    }
    public Vector3d max(Vector3dc v) {
        return max(v, this);
    }
    public Vector3d max(Vector3dc v, Vector3d dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        return dest;
    }
    public Vector3d zero() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        return this;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + " " + Runtime.format(z, formatter) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(x);
        out.writeDouble(y);
        out.writeDouble(z);
    }
    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        x = in.readDouble();
        y = in.readDouble();
        z = in.readDouble();
    }
    public Vector3d negate() {
        return negate(this);
    }
    public Vector3d negate(Vector3d dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        return dest;
    }
    public Vector3d absolute() {
        return absolute(this);
    }
    public Vector3d absolute(Vector3d dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        dest.z = Math.abs(this.z);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(x);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(y);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(z);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector3d other = (Vector3d) obj;
        if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
            return false;
        if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
            return false;
        if (Double.doubleToLongBits(z) != Double.doubleToLongBits(other.z))
            return false;
        return true;
    }
    public boolean equals(Vector3dc v, double delta) {
        if (this == v)
            return true;
        if (v == null)
            return false;
        if (getClass() != v.getClass())
            return false;
        if (!Runtime.equals(x, v.x(), delta))
            return false;
        if (!Runtime.equals(y, v.y(), delta))
            return false;
        if (!Runtime.equals(z, v.z(), delta))
            return false;
        return true;
    }
    public boolean equals(double x, double y, double z) {
        if (Double.doubleToLongBits(this.x) != Double.doubleToLongBits(x))
            return false;
        if (Double.doubleToLongBits(this.y) != Double.doubleToLongBits(y))
            return false;
        if (Double.doubleToLongBits(this.z) != Double.doubleToLongBits(z))
            return false;
        return true;
    }
    public Vector3d reflect(Vector3dc normal) {
        double x = normal.x();
        double y = normal.y();
        double z = normal.z();
        double dot = Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
        this.x = this.x - (dot + dot) * x;
        this.y = this.y - (dot + dot) * y;
        this.z = this.z - (dot + dot) * z;
        return this;
    }
    public Vector3d reflect(double x, double y, double z) {
        double dot = Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
        this.x = this.x - (dot + dot) * x;
        this.y = this.y - (dot + dot) * y;
        this.z = this.z - (dot + dot) * z;
        return this;
    }
    public Vector3d reflect(Vector3dc normal, Vector3d dest) {
        double x = normal.x();
        double y = normal.y();
        double z = normal.z();
        double dot = Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
        dest.x = this.x - (dot + dot) * x;
        dest.y = this.y - (dot + dot) * y;
        dest.z = this.z - (dot + dot) * z;
        return dest;
    }
    public Vector3d reflect(double x, double y, double z, Vector3d dest) {
        double dot = Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
        dest.x = this.x - (dot + dot) * x;
        dest.y = this.y - (dot + dot) * y;
        dest.z = this.z - (dot + dot) * z;
        return dest;
    }
    public Vector3d half(Vector3dc other) {
        return this.set(this).add(other.x(), other.y(), other.z()).normalize();
    }
    public Vector3d half(double x, double y, double z) {
        return this.set(this).add(x, y, z).normalize();
    }
    public Vector3d half(Vector3dc other, Vector3d dest) {
        return dest.set(this).add(other.x(), other.y(), other.z()).normalize();
    }
    public Vector3d half(double x, double y, double z, Vector3d dest) {
        return dest.set(this).add(x, y, z).normalize();
    }
    public Vector3d smoothStep(Vector3dc v, double t, Vector3d dest) {
        double t2 = t * t;
        double t3 = t2 * t;
        dest.x = (x + x - v.x() - v.x()) * t3 + (3.0 * v.x() - 3.0 * x) * t2 + x * t + x;
        dest.y = (y + y - v.y() - v.y()) * t3 + (3.0 * v.y() - 3.0 * y) * t2 + y * t + y;
        dest.z = (z + z - v.z() - v.z()) * t3 + (3.0 * v.z() - 3.0 * z) * t2 + z * t + z;
        return dest;
    }
    public Vector3d hermite(Vector3dc t0, Vector3dc v1, Vector3dc t1, double t, Vector3d dest) {
        double t2 = t * t;
        double t3 = t2 * t;
        dest.x = (x + x - v1.x() - v1.x() + t1.x() + t0.x()) * t3 + (3.0 * v1.x() - 3.0 * x - t0.x() - t0.x() - t1.x()) * t2 + x * t + x;
        dest.y = (y + y - v1.y() - v1.y() + t1.y() + t0.y()) * t3 + (3.0 * v1.y() - 3.0 * y - t0.y() - t0.y() - t1.y()) * t2 + y * t + y;
        dest.z = (z + z - v1.z() - v1.z() + t1.z() + t0.z()) * t3 + (3.0 * v1.z() - 3.0 * z - t0.z() - t0.z() - t1.z()) * t2 + z * t + z;
        return dest;
    }
    public Vector3d lerp(Vector3dc other, double t) {
        this.x = Math.fma(other.x() - x, t, x);
        this.y = Math.fma(other.y() - y, t, y);
        this.z = Math.fma(other.z() - z, t, z);
        return this;
    }
    public Vector3d lerp(Vector3dc other, double t, Vector3d dest) {
        dest.x = Math.fma(other.x() - x, t, x);
        dest.y = Math.fma(other.y() - y, t, y);
        dest.z = Math.fma(other.z() - z, t, z);
        return dest;
    }
    public double get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector3i get(int mode, Vector3i dest) {
        dest.x = Math.roundUsing(this.x(), mode);
        dest.y = Math.roundUsing(this.y(), mode);
        dest.z = Math.roundUsing(this.z(), mode);
        return dest;
    }
    public Vector3f get(Vector3f dest) {
        dest.x = (float) this.x();
        dest.y = (float) this.y();
        dest.z = (float) this.z();
        return dest;
    }
    public Vector3d get(Vector3d dest) {
        dest.x = this.x();
        dest.y = this.y();
        dest.z = this.z();
        return dest;
    }
    public int maxComponent() {
        double absX = Math.abs(x);
        double absY = Math.abs(y);
        double absZ = Math.abs(z);
        if (absX >= absY && absX >= absZ) {
            return 0;
        } else if (absY >= absZ) {
            return 1;
        }
        return 2;
    }
    public int minComponent() {
        double absX = Math.abs(x);
        double absY = Math.abs(y);
        double absZ = Math.abs(z);
        if (absX < absY && absX < absZ) {
            return 0;
        } else if (absY < absZ) {
            return 1;
        }
        return 2;
    }
    public Vector3d orthogonalize(Vector3dc v, Vector3d dest) {
        double rx, ry, rz;
        if (Math.abs(v.x()) > Math.abs(v.z())) {
            rx = -v.y();
            ry = v.x();
            rz = 0.0;
        } else {
            rx = 0.0;
            ry = -v.z();
            rz = v.y();
        }
        double invLen = Math.invsqrt(rx * rx + ry * ry + rz * rz);
        dest.x = rx * invLen;
        dest.y = ry * invLen;
        dest.z = rz * invLen;
        return dest;
    }
    public Vector3d orthogonalize(Vector3dc v) {
        return orthogonalize(v, this);
    }
    public Vector3d orthogonalizeUnit(Vector3dc v, Vector3d dest) {
        return orthogonalize(v, dest);
    }
    public Vector3d orthogonalizeUnit(Vector3dc v) {
        return orthogonalizeUnit(v, this);
    }
    public Vector3d floor() {
        this.x = Math.floor(x);
        this.y = Math.floor(y);
        this.z = Math.floor(z);
        return this;
    }
    public Vector3d floor(Vector3d dest) {
        dest.x = Math.floor(x);
        dest.y = Math.floor(y);
        dest.z = Math.floor(z);
        return dest;
    }
    public Vector3d ceil() {
        this.x = Math.ceil(x);
        this.y = Math.ceil(y);
        this.z = Math.ceil(z);
        return this;
    }
    public Vector3d ceil(Vector3d dest) {
        dest.x = Math.ceil(x);
        dest.y = Math.ceil(y);
        dest.z = Math.ceil(z);
        return dest;
    }
    public Vector3d round() {
        this.x = Math.round(x);
        this.y = Math.round(y);
        this.z = Math.round(z);
        return this;
    }
    public Vector3d round(Vector3d dest) {
        dest.x = Math.round(x);
        dest.y = Math.round(y);
        dest.z = Math.round(z);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y) && Math.isFinite(z);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector3i implements Externalizable, Cloneable, Vector3ic {
    private static final long serialVersionUID = 1L;
    public int x;
    public int y;
    public int z;
    public Vector3i() {
    }
    public Vector3i(int d) {
        this.x = d;
        this.y = d;
        this.z = d;
    }
    public Vector3i(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    public Vector3i(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3i(Vector2ic v, int z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3i(float x, float y, float z, int mode) {
        this.x = Math.roundUsing(x, mode);
        this.y = Math.roundUsing(y, mode);
        this.z = Math.roundUsing(z, mode);
    }
    public Vector3i(double x, double y, double z, int mode) {
        this.x = Math.roundUsing(x, mode);
        this.y = Math.roundUsing(y, mode);
        this.z = Math.roundUsing(z, mode);
    }
    public Vector3i(Vector2fc v, float z, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(z, mode);
    }
    public Vector3i(Vector3fc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
    }
    public Vector3i(Vector2dc v, float z, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(z, mode);
    }
    public Vector3i(Vector3dc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
    }
    public Vector3i(int[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
    }
    public Vector3i(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3i(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector3i(IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3i(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public int x() {
        return this.x;
    }
    public int y() {
        return this.y;
    }
    public int z() {
        return this.z;
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector2i xy(Vector2i dest) {
        return dest.set(x, y);
    }
    public Vector2L xy(Vector2L dest) {
        return dest.set(x, y);
    }
    public Vector3i set(Vector3ic v) {
        x = v.x();
        y = v.y();
        z = v.z();
        return this;
    }
    public Vector3i set(Vector3dc v) {
        this.x = (int) v.x();
        this.y = (int) v.y();
        this.z = (int) v.z();
        return this;
    }
    public Vector3i set(Vector3dc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
        return this;
    }
    public Vector3i set(Vector3fc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
        return this;
    }
    public Vector3i set(Vector2ic v, int z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3i set(int d) {
        this.x = d;
        this.y = d;
        this.z = d;
        return this;
    }
    public Vector3i set(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    public Vector3i set(int[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
        return this;
    }
    public Vector3i set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3i set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3i set(IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3i set(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3i setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public int get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector3i setComponent(int component, int value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public IntBuffer get(IntBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public IntBuffer get(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector3ic getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector3i sub(Vector3ic v) {
        return sub(v, this);
    }
    public Vector3i sub(Vector3ic v, Vector3i dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        return dest;
    }
    public Vector3i sub(int x, int y, int z) {
        return sub(x, y, z, this);
    }
    public Vector3i sub(int x, int y, int z, Vector3i dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        return dest;
    }
    public Vector3i add(Vector3ic v) {
        return add(v, this);
    }
    public Vector3i add(Vector3ic v, Vector3i dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        return dest;
    }
    public Vector3i add(int x, int y, int z) {
        return add(x, y, z, this);
    }
    public Vector3i add(int x, int y, int z, Vector3i dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        return dest;
    }
    public Vector3i mul(int scalar) {
        return mul(scalar, this);
    }
    public Vector3i mul(int scalar, Vector3i dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        return dest;
    }
    public Vector3i mul(Vector3ic v) {
        return mul(v, this);
    }
    public Vector3i mul(Vector3ic v, Vector3i dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        return dest;
    }
    public Vector3i mul(int x, int y, int z) {
        return mul(x, y, z, this);
    }
    public Vector3i mul(int x, int y, int z, Vector3i dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        dest.z = this.z * z;
        return dest;
    }
    public Vector3i div(float scalar) {
        return div(scalar, this);
    }
    public Vector3i div(float scalar, Vector3i dest) {
        float invscalar = 1.0f / scalar;
        dest.x = (int) (x * invscalar);
        dest.y = (int) (y * invscalar);
        dest.z = (int) (z * invscalar);
        return dest;
    }
    public Vector3i div(int scalar) {
        return div(scalar, this);
    }
    public Vector3i div(int scalar, Vector3i dest) {
        dest.x = x / scalar;
        dest.y = y / scalar;
        dest.z = z / scalar;
        return dest;
    }
    public long lengthSquared() {
        return (long) x * x + (long) y * y + (long) z * z;
    }
    public static long lengthSquared(int x, int y, int z) {
        return (long) x * x + (long) y * y + (long) z * z;
    }
    public double length() {
        return Math.sqrt((long) x * x + (long) y * y + (long) z * z);
    }
    public static double length(int x, int y, int z) {
        return Math.sqrt((long) x * x + (long) y * y + (long) z * z);
    }
    public double distance(Vector3ic v) {
        int dx = this.x - v.x();
        int dy = this.y - v.y();
        int dz = this.z - v.z();
        return Math.sqrt((long) dx * dx + (long) dy * dy + (long) dz * dz);
    }
    public double distance(int x, int y, int z) {
        int dx = this.x - x;
        int dy = this.y - y;
        int dz = this.z - z;
        return Math.sqrt((long) dx * dx + (long) dy * dy + (long) dz * dz);
    }
    public long gridDistance(Vector3ic v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y())  + Math.abs(v.z() - z());
    }
    public long gridDistance(int x, int y, int z) {
        return Math.abs(x - x()) + Math.abs(y - y()) + Math.abs(z - z());
    }
    public long distanceSquared(Vector3ic v) {
        int dx = this.x - v.x();
        int dy = this.y - v.y();
        int dz = this.z - v.z();
        return (long) dx * dx + (long) dy * dy + (long) dz * dz;
    }
    public long distanceSquared(int x, int y, int z) {
        int dx = this.x - x;
        int dy = this.y - y;
        int dz = this.z - z;
        return (long) dx * dx + (long) dy * dy + (long) dz * dz;
    }
    public static double distance(int x1, int y1, int z1, int x2, int y2, int z2) {
        return Math.sqrt(distanceSquared(x1, y1, z1, x2, y2, z2));
    }
    public static long distanceSquared(int x1, int y1, int z1, int x2, int y2, int z2) {
        long dx = x1 - x2;
        long dy = y1 - y2;
        long dz = z1 - z2;
        return dx * dx + dy * dy + dz * dz;
    }
    public Vector3i zero() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        return this;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + formatter.format(x) + " " + formatter.format(y) + " " + formatter.format(z) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeInt(x);
        out.writeInt(y);
        out.writeInt(z);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        x = in.readInt();
        y = in.readInt();
        z = in.readInt();
    }
    public Vector3i negate() {
        return negate(this);
    }
    public Vector3i negate(Vector3i dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        return dest;
    }
    public Vector3i min(Vector3ic v) {
        return min(v, this);
    }
    public Vector3i min(Vector3ic v, Vector3i dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        return dest;
    }
    public Vector3i max(Vector3ic v) {
        return max(v, this);
    }
    public Vector3i max(Vector3ic v, Vector3i dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        return dest;
    }
    public int maxComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        if (absX >= absY && absX >= absZ) {
            return 0;
        } else if (absY >= absZ) {
            return 1;
        }
        return 2;
    }
    public int minComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        if (absX < absY && absX < absZ) {
            return 0;
        } else if (absY < absZ) {
            return 1;
        }
        return 2;
    }
    public Vector3i absolute() {
        return absolute(this);
    }
    public Vector3i absolute(Vector3i dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        dest.z = Math.abs(this.z);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + x;
        result = prime * result + y;
        result = prime * result + z;
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Vector3i other = (Vector3i) obj;
        if (x != other.x) {
            return false;
        }
        if (y != other.y) {
            return false;
        }
        if (z != other.z) {
            return false;
        }
        return true;
    }
    public boolean equals(int x, int y, int z) {
        if (this.x != x)
            return false;
        if (this.y != y)
            return false;
        if (this.z != z)
            return false;
        return true;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix3x2dc {
    double m00();
    double m01();
    double m10();
    double m11();
    double m20();
    double m21();
    Matrix3x2d mul(Matrix3x2dc right, Matrix3x2d dest);
    Matrix3x2d mulLocal(Matrix3x2dc left, Matrix3x2d dest);
    double determinant();
    Matrix3x2d invert(Matrix3x2d dest);
    Matrix3x2d translate(double x, double y, Matrix3x2d dest);
    Matrix3x2d translate(Vector2dc offset, Matrix3x2d dest);
    Matrix3x2d translateLocal(Vector2dc offset, Matrix3x2d dest);
    Matrix3x2d translateLocal(double x, double y, Matrix3x2d dest);
    Matrix3x2d get(Matrix3x2d dest);
    DoubleBuffer get(DoubleBuffer buffer);
    DoubleBuffer get(int index, DoubleBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    DoubleBuffer getTransposed(DoubleBuffer buffer);
    DoubleBuffer getTransposed(int index, DoubleBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposedFloats(ByteBuffer buffer);
    ByteBuffer getTransposedFloats(int index, ByteBuffer buffer);
    DoubleBuffer get3x3(DoubleBuffer buffer);
    DoubleBuffer get3x3(int index, DoubleBuffer buffer);
    ByteBuffer get3x3(ByteBuffer buffer);
    ByteBuffer get3x3(int index, ByteBuffer buffer);
    DoubleBuffer get4x4(DoubleBuffer buffer);
    DoubleBuffer get4x4(int index, DoubleBuffer buffer);
    ByteBuffer get4x4(ByteBuffer buffer);
    ByteBuffer get4x4(int index, ByteBuffer buffer);
    Matrix3x2dc getToAddress(long address);
    Matrix3x2dc getTransposedToAddress(long address);
    double[] get(double[] arr, int offset);
    double[] get(double[] arr);
    double[] get3x3(double[] arr, int offset);
    double[] get3x3(double[] arr);
    double[] get4x4(double[] arr, int offset);
    double[] get4x4(double[] arr);
    Matrix3x2d scale(double x, double y, Matrix3x2d dest);
    Matrix3x2d scale(Vector2dc xy, Matrix3x2d dest);
    Matrix3x2d scale(Vector2fc xy, Matrix3x2d dest);
    Matrix3x2d scaleLocal(double xy, Matrix3x2d dest);
    Matrix3x2d scaleLocal(double x, double y, Matrix3x2d dest);
    Matrix3x2d scaleAroundLocal(double sx, double sy, double ox, double oy, Matrix3x2d dest);
    Matrix3x2d scaleAroundLocal(double factor, double ox, double oy, Matrix3x2d dest);
    Matrix3x2d scale(double xy, Matrix3x2d dest);
    Matrix3x2d scaleAround(double sx, double sy, double ox, double oy, Matrix3x2d dest);
    Matrix3x2d scaleAround(double factor, double ox, double oy, Matrix3x2d dest);
    Vector3d transform(Vector3d v);
    Vector3d transform(Vector3dc v, Vector3d dest);
    Vector3d transform(double x, double y, double z, Vector3d dest);
    Vector2d transformPosition(Vector2d v);
    Vector2d transformPosition(Vector2dc v, Vector2d dest);
    Vector2d transformPosition(double x, double y, Vector2d dest);
    Vector2d transformDirection(Vector2d v);
    Vector2d transformDirection(Vector2dc v, Vector2d dest);
    Vector2d transformDirection(double x, double y, Vector2d dest);
    Matrix3x2d rotate(double ang, Matrix3x2d dest);
    Matrix3x2d rotateLocal(double ang, Matrix3x2d dest);
    Matrix3x2d rotateAbout(double ang, double x, double y, Matrix3x2d dest);
    Matrix3x2d rotateTo(Vector2dc fromDir, Vector2dc toDir, Matrix3x2d dest);
    Matrix3x2d view(double left, double right, double bottom, double top, Matrix3x2d dest);
    Vector2d origin(Vector2d origin);
    double[] viewArea(double[] area);
    Vector2d positiveX(Vector2d dir);
    Vector2d normalizedPositiveX(Vector2d dir);
    Vector2d positiveY(Vector2d dir);
    Vector2d normalizedPositiveY(Vector2d dir);
    Vector2d unproject(double winX, double winY, int[] viewport, Vector2d dest);
    Vector2d unprojectInv(double winX, double winY, int[] viewport, Vector2d dest);
    boolean testPoint(double x, double y);
    boolean testCircle(double x, double y, double r);
    boolean testAar(double minX, double minY, double maxX, double maxY);
    boolean equals(Matrix3x2dc m, double delta);
    boolean isFinite();
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix4fc {
    int PLANE_NX = 0;
    int PLANE_PX = 1;
    int PLANE_NY = 2;
    int PLANE_PY = 3;
    int PLANE_NZ = 4;
    int PLANE_PZ = 5;
    int CORNER_NXNYNZ = 0;
    int CORNER_PXNYNZ = 1;
    int CORNER_PXPYNZ = 2;
    int CORNER_NXPYNZ = 3;
    int CORNER_PXNYPZ = 4;
    int CORNER_NXNYPZ = 5;
    int CORNER_NXPYPZ = 6;
    int CORNER_PXPYPZ = 7;
    byte PROPERTY_UNKNOWN = 0;
    byte PROPERTY_PERSPECTIVE = 1<<0;
    byte PROPERTY_AFFINE = 1<<1;
    byte PROPERTY_IDENTITY = 1<<2;
    byte PROPERTY_TRANSLATION = 1<<3;
    byte PROPERTY_ORTHONORMAL = 1<<4;
    int properties();
    float m00();
    float m01();
    float m02();
    float m03();
    float m10();
    float m11();
    float m12();
    float m13();
    float m20();
    float m21();
    float m22();
    float m23();
    float m30();
    float m31();
    float m32();
    float m33();
    Matrix4f mul(Matrix4fc right, Matrix4f dest);
    Matrix4f mul0(Matrix4fc right, Matrix4f dest);
    Matrix4f mul(
            float r00, float r01, float r02, float r03,
            float r10, float r11, float r12, float r13,
            float r20, float r21, float r22, float r23,
            float r30, float r31, float r32, float r33, Matrix4f dest);
    Matrix4f mul3x3(
            float r00, float r01, float r02,
            float r10, float r11, float r12,
            float r20, float r21, float r22, Matrix4f dest);
    Matrix4f mulLocal(Matrix4fc left, Matrix4f dest);
    Matrix4f mulLocalAffine(Matrix4fc left, Matrix4f dest);
    Matrix4f mul(Matrix3x2fc right, Matrix4f dest);
    Matrix4f mul(Matrix4x3fc right, Matrix4f dest);
    Matrix4f mulPerspectiveAffine(Matrix4fc view, Matrix4f dest);
    Matrix4f mulPerspectiveAffine(Matrix4x3fc view, Matrix4f dest);
    Matrix4f mulAffineR(Matrix4fc right, Matrix4f dest);
    Matrix4f mulAffine(Matrix4fc right, Matrix4f dest);
    Matrix4f mulTranslationAffine(Matrix4fc right, Matrix4f dest);
    Matrix4f mulOrthoAffine(Matrix4fc view, Matrix4f dest);
    Matrix4f fma4x3(Matrix4fc other, float otherFactor, Matrix4f dest);
    Matrix4f add(Matrix4fc other, Matrix4f dest);
    Matrix4f sub(Matrix4fc subtrahend, Matrix4f dest);
    Matrix4f mulComponentWise(Matrix4fc other, Matrix4f dest);
    Matrix4f add4x3(Matrix4fc other, Matrix4f dest);
    Matrix4f sub4x3(Matrix4fc subtrahend, Matrix4f dest);
    Matrix4f mul4x3ComponentWise(Matrix4fc other, Matrix4f dest);
    float determinant();
    float determinant3x3();
    float determinantAffine();
    Matrix4f invert(Matrix4f dest);
    Matrix4f invertPerspective(Matrix4f dest);
    Matrix4f invertFrustum(Matrix4f dest);
    Matrix4f invertOrtho(Matrix4f dest);
    Matrix4f invertPerspectiveView(Matrix4fc view, Matrix4f dest);
    Matrix4f invertPerspectiveView(Matrix4x3fc view, Matrix4f dest);
    Matrix4f invertAffine(Matrix4f dest);
    Matrix4f transpose(Matrix4f dest);
    Matrix4f transpose3x3(Matrix4f dest);
    Matrix3f transpose3x3(Matrix3f dest);
    Vector3f getTranslation(Vector3f dest);
    Vector3f getScale(Vector3f dest);
    Matrix4f get(Matrix4f dest);
    Matrix4x3f get4x3(Matrix4x3f dest);
    Matrix4d get(Matrix4d dest);
    Matrix3f get3x3(Matrix3f dest);
    Matrix3d get3x3(Matrix3d dest);
    AxisAngle4f getRotation(AxisAngle4f dest);
    AxisAngle4d getRotation(AxisAngle4d dest);
    Quaternionf getUnnormalizedRotation(Quaternionf dest);
    Quaternionf getNormalizedRotation(Quaternionf dest);
    Quaterniond getUnnormalizedRotation(Quaterniond dest);
    Quaterniond getNormalizedRotation(Quaterniond dest);
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    FloatBuffer get4x3(FloatBuffer buffer);
    FloatBuffer get4x3(int index, FloatBuffer buffer);
    ByteBuffer get4x3(ByteBuffer buffer);
    ByteBuffer get4x3(int index, ByteBuffer buffer);
    FloatBuffer get3x4(FloatBuffer buffer);
    FloatBuffer get3x4(int index, FloatBuffer buffer);
    ByteBuffer get3x4(ByteBuffer buffer);
    ByteBuffer get3x4(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    FloatBuffer get4x3Transposed(FloatBuffer buffer);
    FloatBuffer get4x3Transposed(int index, FloatBuffer buffer);
    ByteBuffer get4x3Transposed(ByteBuffer buffer);
    ByteBuffer get4x3Transposed(int index, ByteBuffer buffer);
    Matrix4fc getToAddress(long address);
    Matrix4fc getTransposedToAddress(long address);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    Vector4f transform(Vector4f v);
    Vector4f transform(Vector4fc v, Vector4f dest);
    Vector4f transform(float x, float y, float z, float w, Vector4f dest);
    Vector4f transformTranspose(Vector4f v);
    Vector4f transformTranspose(Vector4fc v, Vector4f dest);
    Vector4f transformTranspose(float x, float y, float z, float w, Vector4f dest);
    Vector4f transformProject(Vector4f v);
    Vector4f transformProject(Vector4fc v, Vector4f dest);
    Vector4f transformProject(float x, float y, float z, float w, Vector4f dest);
    Vector3f transformProject(Vector3f v);
    Vector3f transformProject(Vector3fc v, Vector3f dest);
    Vector3f transformProject(Vector4fc v, Vector3f dest);
    Vector3f transformProject(float x, float y, float z, Vector3f dest);
    Vector3f transformProject(float x, float y, float z, float w, Vector3f dest);
    Vector3f transformPosition(Vector3f v);
    Vector3f transformPosition(Vector3fc v, Vector3f dest);
    Vector3f transformPosition(float x, float y, float z, Vector3f dest);
    Vector3f transformDirection(Vector3f v);
    Vector3f transformDirection(Vector3fc v, Vector3f dest);
    Vector3f transformDirection(float x, float y, float z, Vector3f dest);
    Vector4f transformAffine(Vector4f v);
    Vector4f transformAffine(Vector4fc v, Vector4f dest);
    Vector4f transformAffine(float x, float y, float z, float w, Vector4f dest);
    Matrix4f scale(Vector3fc xyz, Matrix4f dest);
    Matrix4f scale(float xyz, Matrix4f dest);
    Matrix4f scaleXY(float x, float y, Matrix4f dest);
    Matrix4f scale(float x, float y, float z, Matrix4f dest);
    Matrix4f scaleAround(float sx, float sy, float sz, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f scaleAround(float factor, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f scaleLocal(float xyz, Matrix4f dest);
    Matrix4f scaleLocal(float x, float y, float z, Matrix4f dest);
    Matrix4f scaleAroundLocal(float sx, float sy, float sz, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f scaleAroundLocal(float factor, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f rotateX(float ang, Matrix4f dest);
    Matrix4f rotateY(float ang, Matrix4f dest);
    Matrix4f rotateZ(float ang, Matrix4f dest);
    Matrix4f rotateTowardsXY(float dirX, float dirY, Matrix4f dest);
    Matrix4f rotateXYZ(float angleX, float angleY, float angleZ, Matrix4f dest);
    Matrix4f rotateAffineXYZ(float angleX, float angleY, float angleZ, Matrix4f dest);
    Matrix4f rotateZYX(float angleZ, float angleY, float angleX, Matrix4f dest);
    Matrix4f rotateAffineZYX(float angleZ, float angleY, float angleX, Matrix4f dest);
    Matrix4f rotateYXZ(float angleY, float angleX, float angleZ, Matrix4f dest);
    Matrix4f rotateAffineYXZ(float angleY, float angleX, float angleZ, Matrix4f dest);
    Matrix4f rotate(float ang, float x, float y, float z, Matrix4f dest);
    Matrix4f rotateTranslation(float ang, float x, float y, float z, Matrix4f dest);
    Matrix4f rotateAffine(float ang, float x, float y, float z, Matrix4f dest);
    Matrix4f rotateLocal(float ang, float x, float y, float z, Matrix4f dest);
    Matrix4f rotateLocalX(float ang, Matrix4f dest);
    Matrix4f rotateLocalY(float ang, Matrix4f dest);
    Matrix4f rotateLocalZ(float ang, Matrix4f dest);
    Matrix4f translate(Vector3fc offset, Matrix4f dest);
    Matrix4f translate(float x, float y, float z, Matrix4f dest);
    Matrix4f translateLocal(Vector3fc offset, Matrix4f dest);
    Matrix4f translateLocal(float x, float y, float z, Matrix4f dest);
    Matrix4f ortho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f ortho(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest);
    Matrix4f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest);
    Matrix4f orthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f orthoSymmetric(float width, float height, float zNear, float zFar, Matrix4f dest);
    Matrix4f orthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f orthoSymmetricLH(float width, float height, float zNear, float zFar, Matrix4f dest);
    Matrix4f ortho2D(float left, float right, float bottom, float top, Matrix4f dest);
    Matrix4f ortho2DLH(float left, float right, float bottom, float top, Matrix4f dest);
    Matrix4f lookAlong(Vector3fc dir, Vector3fc up, Matrix4f dest);
    Matrix4f lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4f dest);
    Matrix4f lookAt(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4f dest);
    Matrix4f lookAt(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ, Matrix4f dest);
    Matrix4f lookAtPerspective(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ, Matrix4f dest);
    Matrix4f lookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4f dest);
    Matrix4f lookAtLH(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ, Matrix4f dest);
    Matrix4f lookAtPerspectiveLH(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ, Matrix4f dest);
    Matrix4f tile(int x, int y, int w, int h, Matrix4f dest);
    Matrix4f perspective(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f perspective(float fovy, float aspect, float zNear, float zFar, Matrix4f dest);
    Matrix4f perspectiveRect(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f perspectiveRect(float width, float height, float zNear, float zFar, Matrix4f dest);
    Matrix4f perspectiveOffCenter(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f perspectiveOffCenter(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar, Matrix4f dest);
    Matrix4f perspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f perspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, Matrix4f dest);
    Matrix4f perspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f perspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, Matrix4f dest);
    Matrix4f perspectiveLH(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f perspectiveLH(float fovy, float aspect, float zNear, float zFar, Matrix4f dest);
    Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest);
    Matrix4f frustumLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest);
    Matrix4f frustumLH(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest);
    Matrix4f rotate(Quaternionfc quat, Matrix4f dest);
    Matrix4f rotateAffine(Quaternionfc quat, Matrix4f dest);
    Matrix4f rotateTranslation(Quaternionfc quat, Matrix4f dest);
    Matrix4f rotateAroundAffine(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f rotateAround(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f rotateLocal(Quaternionfc quat, Matrix4f dest);
    Matrix4f rotateAroundLocal(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest);
    Matrix4f rotate(AxisAngle4f axisAngle, Matrix4f dest);
    Matrix4f rotate(float angle, Vector3fc axis, Matrix4f dest);
    Vector4f unproject(float winX, float winY, float winZ, int[] viewport, Vector4f dest);
    Vector3f unproject(float winX, float winY, float winZ, int[] viewport, Vector3f dest);
    Vector4f unproject(Vector3fc winCoords, int[] viewport, Vector4f dest);
    Vector3f unproject(Vector3fc winCoords, int[] viewport, Vector3f dest);
    Matrix4f unprojectRay(float winX, float winY, int[] viewport, Vector3f originDest, Vector3f dirDest);
    Matrix4f unprojectRay(Vector2fc winCoords, int[] viewport, Vector3f originDest, Vector3f dirDest);
    Vector4f unprojectInv(Vector3fc winCoords, int[] viewport, Vector4f dest);
    Vector4f unprojectInv(float winX, float winY, float winZ, int[] viewport, Vector4f dest);
    Matrix4f unprojectInvRay(Vector2fc winCoords, int[] viewport, Vector3f originDest, Vector3f dirDest);
    Matrix4f unprojectInvRay(float winX, float winY, int[] viewport, Vector3f originDest, Vector3f dirDest);
    Vector3f unprojectInv(Vector3fc winCoords, int[] viewport, Vector3f dest);
    Vector3f unprojectInv(float winX, float winY, float winZ, int[] viewport, Vector3f dest);
    Vector4f project(float x, float y, float z, int[] viewport, Vector4f winCoordsDest);
    Vector3f project(float x, float y, float z, int[] viewport, Vector3f winCoordsDest);
    Vector4f project(Vector3fc position, int[] viewport, Vector4f winCoordsDest);
    Vector3f project(Vector3fc position, int[] viewport, Vector3f winCoordsDest);
    Matrix4f reflect(float a, float b, float c, float d, Matrix4f dest);
    Matrix4f reflect(float nx, float ny, float nz, float px, float py, float pz, Matrix4f dest);
    Matrix4f reflect(Quaternionfc orientation, Vector3fc point, Matrix4f dest);
    Matrix4f reflect(Vector3fc normal, Vector3fc point, Matrix4f dest);
    Vector4f getRow(int row, Vector4f dest) throws IndexOutOfBoundsException;
    Vector3f getRow(int row, Vector3f dest) throws IndexOutOfBoundsException;
    Vector4f getColumn(int column, Vector4f dest) throws IndexOutOfBoundsException;
    Vector3f getColumn(int column, Vector3f dest) throws IndexOutOfBoundsException;
    float get(int column, int row);
    float getRowColumn(int row, int column);
    Matrix4f normal(Matrix4f dest);
    Matrix3f normal(Matrix3f dest);
    Matrix3f cofactor3x3(Matrix3f dest);
    Matrix4f cofactor3x3(Matrix4f dest);
    Matrix4f normalize3x3(Matrix4f dest);
    Matrix3f normalize3x3(Matrix3f dest);
    Vector4f frustumPlane(int plane, Vector4f planeEquation);
    Vector3f frustumCorner(int corner, Vector3f point);
    Vector3f perspectiveOrigin(Vector3f origin);
    Vector3f perspectiveInvOrigin(Vector3f dest);
    float perspectiveFov();
    float perspectiveNear();
    float perspectiveFar();
    Vector3f frustumRayDir(float x, float y, Vector3f dir);
    Vector3f positiveZ(Vector3f dir);
    Vector3f normalizedPositiveZ(Vector3f dir);
    Vector3f positiveX(Vector3f dir);
    Vector3f normalizedPositiveX(Vector3f dir);
    Vector3f positiveY(Vector3f dir);
    Vector3f normalizedPositiveY(Vector3f dir);
    Vector3f originAffine(Vector3f origin);
    Vector3f origin(Vector3f origin);
    Matrix4f shadow(Vector4f light, float a, float b, float c, float d, Matrix4f dest);
    Matrix4f shadow(float lightX, float lightY, float lightZ, float lightW, float a, float b, float c, float d, Matrix4f dest);
    Matrix4f shadow(Vector4f light, Matrix4fc planeTransform, Matrix4f dest);
    Matrix4f shadow(float lightX, float lightY, float lightZ, float lightW, Matrix4fc planeTransform, Matrix4f dest);
    Matrix4f pick(float x, float y, float width, float height, int[] viewport, Matrix4f dest);
    boolean isAffine();
    Matrix4f arcball(float radius, float centerX, float centerY, float centerZ, float angleX, float angleY, Matrix4f dest);
    Matrix4f arcball(float radius, Vector3fc center, float angleX, float angleY, Matrix4f dest);
    Matrix4f frustumAabb(Vector3f min, Vector3f max);
    Matrix4f projectedGridRange(Matrix4fc projector, float sLower, float sUpper, Matrix4f dest);
    Matrix4f perspectiveFrustumSlice(float near, float far, Matrix4f dest);
    Matrix4f orthoCrop(Matrix4fc view, Matrix4f dest);
    Matrix4f transformAab(float minX, float minY, float minZ, float maxX, float maxY, float maxZ, Vector3f outMin, Vector3f outMax);
    Matrix4f transformAab(Vector3fc min, Vector3fc max, Vector3f outMin, Vector3f outMax);
    Matrix4f lerp(Matrix4fc other, float t, Matrix4f dest);
    Matrix4f rotateTowards(Vector3fc dir, Vector3fc up, Matrix4f dest);
    Matrix4f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4f dest);
    Vector3f getEulerAnglesXYZ(Vector3f dest);
    Vector3f getEulerAnglesZYX(Vector3f dest);
    Vector3f getEulerAnglesYXZ(Vector3f dest);
    boolean testPoint(float x, float y, float z);
    boolean testSphere(float x, float y, float z, float r);
    boolean testAab(float minX, float minY, float minZ, float maxX, float maxY, float maxZ);
    Matrix4f obliqueZ(float a, float b, Matrix4f dest);
    Matrix4f withLookAtUp(Vector3fc up, Matrix4f dest);
    Matrix4f withLookAtUp(float upX, float upY, float upZ, Matrix4f dest);
    Matrix4f mapXZY(Matrix4f dest);
    Matrix4f mapXZnY(Matrix4f dest);
    Matrix4f mapXnYnZ(Matrix4f dest);
    Matrix4f mapXnZY(Matrix4f dest);
    Matrix4f mapXnZnY(Matrix4f dest);
    Matrix4f mapYXZ(Matrix4f dest);
    Matrix4f mapYXnZ(Matrix4f dest);
    Matrix4f mapYZX(Matrix4f dest);
    Matrix4f mapYZnX(Matrix4f dest);
    Matrix4f mapYnXZ(Matrix4f dest);
    Matrix4f mapYnXnZ(Matrix4f dest);
    Matrix4f mapYnZX(Matrix4f dest);
    Matrix4f mapYnZnX(Matrix4f dest);
    Matrix4f mapZXY(Matrix4f dest);
    Matrix4f mapZXnY(Matrix4f dest);
    Matrix4f mapZYX(Matrix4f dest);
    Matrix4f mapZYnX(Matrix4f dest);
    Matrix4f mapZnXY(Matrix4f dest);
    Matrix4f mapZnXnY(Matrix4f dest);
    Matrix4f mapZnYX(Matrix4f dest);
    Matrix4f mapZnYnX(Matrix4f dest);
    Matrix4f mapnXYnZ(Matrix4f dest);
    Matrix4f mapnXZY(Matrix4f dest);
    Matrix4f mapnXZnY(Matrix4f dest);
    Matrix4f mapnXnYZ(Matrix4f dest);
    Matrix4f mapnXnYnZ(Matrix4f dest);
    Matrix4f mapnXnZY(Matrix4f dest);
    Matrix4f mapnXnZnY(Matrix4f dest);
    Matrix4f mapnYXZ(Matrix4f dest);
    Matrix4f mapnYXnZ(Matrix4f dest);
    Matrix4f mapnYZX(Matrix4f dest);
    Matrix4f mapnYZnX(Matrix4f dest);
    Matrix4f mapnYnXZ(Matrix4f dest);
    Matrix4f mapnYnXnZ(Matrix4f dest);
    Matrix4f mapnYnZX(Matrix4f dest);
    Matrix4f mapnYnZnX(Matrix4f dest);
    Matrix4f mapnZXY(Matrix4f dest);
    Matrix4f mapnZXnY(Matrix4f dest);
    Matrix4f mapnZYX(Matrix4f dest);
    Matrix4f mapnZYnX(Matrix4f dest);
    Matrix4f mapnZnXY(Matrix4f dest);
    Matrix4f mapnZnXnY(Matrix4f dest);
    Matrix4f mapnZnYX(Matrix4f dest);
    Matrix4f mapnZnYnX(Matrix4f dest);
    Matrix4f negateX(Matrix4f dest);
    Matrix4f negateY(Matrix4f dest);
    Matrix4f negateZ(Matrix4f dest);
    boolean equals(Matrix4fc m, float delta);
    boolean isFinite();
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector2f implements Externalizable, Cloneable, Vector2fc {
    private static final long serialVersionUID = 1L;
    public float x;
    public float y;
    public Vector2f() {
    }
    public Vector2f(float d) {
        this.x = d;
        this.y = d;
    }
    public Vector2f(float x, float y) {
        this.x = x;
        this.y = y;
    }
    public Vector2f(Vector2fc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2f(Vector2dc v) {
        x = (float) v.x();
        y = (float) v.y();
    }
    public Vector2f(Vector2ic v) {
        x = v.x();
        y = v.y();
    }
    public Vector2f(Vector3fc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2f(Vector3dc v) {
        x = (float) v.x();
        y = (float) v.y();
    }
    public Vector2f(Vector3ic v) {
        x = v.x();
        y = v.y();
    }
    public Vector2f(float[] xy) {
        this.x = xy[0];
        this.y = xy[1];
    }
    public Vector2f(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2f(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector2f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2f(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public float x() {
        return this.x;
    }
    public float y() {
        return this.y;
    }
    public Vector2f set(float d) {
        this.x = d;
        this.y = d;
        return this;
    }
    public Vector2f set(float x, float y) {
        this.x = x;
        this.y = y;
        return this;
    }
    public Vector2f set(double d) {
        this.x = (float) d;
        this.y = (float) d;
        return this;
    }
    public Vector2f set(double x, double y) {
        this.x = (float) x;
        this.y = (float) y;
        return this;
    }
    public Vector2f set(Vector2fc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2f set(Vector2ic v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2f set(Vector2dc v) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        return this;
    }
    public Vector2f set(Vector3dc v) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        return this;
    }
    public Vector2f set(Vector3fc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2f set(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2f set(float[] xy) {
        this.x = xy[0];
        this.y = xy[1];
        return this;
    }
    public Vector2f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public float get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector2i get(int mode, Vector2i dest) {
        dest.x = Math.roundUsing(this.x(), mode);
        dest.y = Math.roundUsing(this.y(), mode);
        return dest;
    }
    public Vector2f get(Vector2f dest) {
        dest.x = this.x();
        dest.y = this.y();
        return dest;
    }
    public Vector2d get(Vector2d dest) {
        dest.x = this.x();
        dest.y = this.y();
        return dest;
    }
    public Vector2f setComponent(int component, float value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get(FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector2fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector2f perpendicular() {
        float xTemp = y;
        this.y = this.x * -1;
        this.x = xTemp;
        return this;
    }
    public Vector2f sub(Vector2fc v) {
        return sub(v, this);
    }
    public Vector2f sub(Vector2fc v, Vector2f dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        return dest;
    }
    public Vector2f sub(float x, float y) {
        return sub(x, y, this);
    }
    public Vector2f sub(float x, float y, Vector2f dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        return dest;
    }
    public float dot(Vector2fc v) {
        return x * v.x() + y * v.y();
    }
    public float angle(Vector2fc v) {
        float dot = x*v.x() + y*v.y();
        float det = x*v.y() - y*v.x();
        return Math.atan2(det, dot);
    }
    public float lengthSquared() {
        return x * x + y * y;
    }
    public static float lengthSquared(float x, float y) {
        return x * x + y * y;
    }
    public float length() {
        return Math.sqrt(x * x + y * y);
    }
    public static float length(float x, float y) {
        return Math.sqrt(x * x + y * y);
    }
    public float distance(Vector2fc v) {
        float dx = this.x - v.x();
        float dy = this.y - v.y();
        return Math.sqrt(dx * dx + dy * dy);
    }
    public float distanceSquared(Vector2fc v) {
        float dx = this.x - v.x();
        float dy = this.y - v.y();
        return dx * dx + dy * dy;
    }
    public float distance(float x, float y) {
        float dx = this.x - x;
        float dy = this.y - y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    public float distanceSquared(float x, float y) {
        float dx = this.x - x;
        float dy = this.y - y;
        return dx * dx + dy * dy;
    }
    public static float distance(float x1, float y1, float x2, float y2) {
        float dx = x1 - x2;
        float dy = y1 - y2;
        return Math.sqrt(dx * dx + dy * dy);
    }
    public static float distanceSquared(float x1, float y1, float x2, float y2) {
        float dx = x1 - x2;
        float dy = y1 - y2;
        return dx * dx + dy * dy;
    }
    public Vector2f normalize() {
        return normalize(this);
    }
    public Vector2f normalize(Vector2f dest) {
        float invLength = Math.invsqrt(x * x + y * y);
        dest.x = x * invLength;
        dest.y = y * invLength;
        return dest;
    }
    public Vector2f normalize(float length) {
        return normalize(length, this);
    }
    public Vector2f normalize(float length, Vector2f dest) {
        float invLength = Math.invsqrt(x * x + y * y) * length;
        dest.x = x * invLength;
        dest.y = y * invLength;
        return dest;
    }
    public Vector2f add(Vector2fc v) {
        return add(v, this);
    }
    public Vector2f add(Vector2fc v, Vector2f dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        return dest;
    }
    public Vector2f add(float x, float y) {
        return add(x, y, this);
    }
    public Vector2f add(float x, float y, Vector2f dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        return dest;
    }
    public Vector2f zero() {
        this.x = 0;
        this.y = 0;
        return this;
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(x);
        out.writeFloat(y);
    }
    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        x = in.readFloat();
        y = in.readFloat();
    }
    public Vector2f negate() {
        return negate(this);
    }
    public Vector2f negate(Vector2f dest) {
        dest.x = -x;
        dest.y = -y;
        return dest;
    }
    public Vector2f mul(float scalar) {
        return mul(scalar, this);
    }
    public Vector2f mul(float scalar, Vector2f dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        return dest;
    }
    public Vector2f mul(float x, float y) {
        return mul(x, y, this);
    }
    public Vector2f mul(float x, float y, Vector2f dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        return dest;
    }
    public Vector2f mul(Vector2fc v) {
        return mul(v, this);
    }
    public Vector2f mul(Vector2fc v, Vector2f dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        return dest;
    }
    public Vector2f div(Vector2fc v) {
        return div(v, this);
    }
    public Vector2f div(Vector2fc v, Vector2f dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        return dest;
    }
    public Vector2f div(float scalar) {
        return div(scalar, this);
    }
    public Vector2f div(float scalar, Vector2f dest) {
        float inv = 1.0f / scalar;
        dest.x = this.x * inv;
        dest.y = this.y * inv;
        return dest;
    }
    public Vector2f div(float x, float y) {
        return div(x, y, this);
    }
    public Vector2f div(float x, float y, Vector2f dest) {
        dest.x = this.x / x;
        dest.y = this.y / y;
        return dest;
    }
    public Vector2f mul(Matrix2fc mat) {
        return mul(mat, this);
    }
    public Vector2f mul(Matrix2fc mat, Vector2f dest) {
        float rx = mat.m00() * x + mat.m10() * y;
        float ry = mat.m01() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2f mul(Matrix2dc mat) {
        return mul(mat, this);
    }
    public Vector2f mul(Matrix2dc mat, Vector2f dest) {
        double rx = mat.m00() * x + mat.m10() * y;
        double ry = mat.m01() * x + mat.m11() * y;
        dest.x = (float) rx;
        dest.y = (float) ry;
        return dest;
    }
    public Vector2f mulTranspose(Matrix2fc mat) {
        return mulTranspose(mat, this);
    }
    public Vector2f mulTranspose(Matrix2fc mat, Vector2f dest) {
        float rx = mat.m00() * x + mat.m01() * y;
        float ry = mat.m10() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2f mulPosition(Matrix3x2fc mat) {
        return mulPosition(mat, this);
    }
    public Vector2f mulPosition(Matrix3x2fc mat, Vector2f dest) {
        dest.x = mat.m00() * x + mat.m10() * y + mat.m20();
        dest.y = mat.m01() * x + mat.m11() * y + mat.m21();
        return dest;
    }
    public Vector2f mulDirection(Matrix3x2fc mat) {
        return mulDirection(mat, this);
    }
    public Vector2f mulDirection(Matrix3x2fc mat, Vector2f dest) {
        dest.x = mat.m00() * x + mat.m10() * y;
        dest.y = mat.m01() * x + mat.m11() * y;
        return dest;
    }
    public Vector2f lerp(Vector2fc other, float t) {
        return lerp(other, t, this);
    }
    public Vector2f lerp(Vector2fc other, float t, Vector2f dest) {
        dest.x = x + (other.x() - x) * t;
        dest.y = y + (other.y() - y) * t;
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(x);
        result = prime * result + Float.floatToIntBits(y);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector2f other = (Vector2f) obj;
        if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))
            return false;
        if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))
            return false;
        return true;
    }
    public boolean equals(Vector2fc v, float delta) {
        if (this == v)
            return true;
        if (v == null)
            return false;
        if (getClass() != v.getClass())
            return false;
        if (!Runtime.equals(x, v.x(), delta))
            return false;
        if (!Runtime.equals(y, v.y(), delta))
            return false;
        return true;
    }
    public boolean equals(float x, float y) {
        if (Float.floatToIntBits(this.x) != Float.floatToIntBits(x))
            return false;
        if (Float.floatToIntBits(this.y) != Float.floatToIntBits(y))
            return false;
        return true;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + ")";
    }
    public Vector2f fma(Vector2fc a, Vector2fc b) {
        return fma(a, b, this);
    }
    public Vector2f fma(float a, Vector2fc b) {
        return fma(a, b, this);
    }
    public Vector2f fma(Vector2fc a, Vector2fc b, Vector2f dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        return dest;
    }
    public Vector2f fma(float a, Vector2fc b, Vector2f dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        return dest;
    }
    public Vector2f min(Vector2fc v) {
        return min(v, this);
    }
    public Vector2f min(Vector2fc v, Vector2f dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        return dest;
    }
    public Vector2f max(Vector2fc v) {
        return max(v, this);
    }
    public Vector2f max(Vector2fc v, Vector2f dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        return dest;
    }
    public int maxComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        if (absX >= absY)
            return 0;
        return 1;
    }
    public int minComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        if (absX < absY)
            return 0;
        return 1;
    }
    public Vector2f floor() {
        return floor(this);
    }
    public Vector2f floor(Vector2f dest) {
        dest.x = Math.floor(x);
        dest.y = Math.floor(y);
        return dest;
    }
    public Vector2f ceil() {
        return ceil(this);
    }
    public Vector2f ceil(Vector2f dest) {
        dest.x = Math.ceil(x);
        dest.y = Math.ceil(y);
        return dest;
    }
    public Vector2f round() {
        return round(this);
    }
    public Vector2f round(Vector2f dest) {
        dest.x = Math.round(x);
        dest.y = Math.round(y);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y);
    }
    public Vector2f absolute() {
        return absolute(this);
    }
    public Vector2f absolute(Vector2f dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        return dest;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.lang.reflect.Field;
import java.nio.*;
abstract class MemUtil {
    public static final MemUtil INSTANCE = createInstance();
    private static MemUtil createInstance() {
        MemUtil accessor;
        try {
            if (Options.NO_UNSAFE && Options.FORCE_UNSAFE)
                throw new ConfigurationException("Cannot enable both -Djoml.nounsafe and -Djoml.forceUnsafe", null);
            else if (Options.NO_UNSAFE)
                accessor = new MemUtilNIO();
            else
                accessor = new MemUtilUnsafe();
        } catch (Throwable e) {
            if (Options.FORCE_UNSAFE)
                throw new ConfigurationException("Unsafe is not supported but its use was forced via -Djoml.forceUnsafe", e);
            accessor = new MemUtilNIO();
        }
        accessor = new MemUtilNIO();
        return accessor;
    }
    public abstract void put(Matrix4f m, int offset, FloatBuffer dest);
    public abstract void put(Matrix4f m, int offset, ByteBuffer dest);
    public abstract void put(Matrix4x3f m, int offset, FloatBuffer dest);
    public abstract void put(Matrix4x3f m, int offset, ByteBuffer dest);
    public abstract void put4x4(Matrix4x3f m, int offset, FloatBuffer dest);
    public abstract void put4x4(Matrix4x3f m, int offset, ByteBuffer dest);
    public abstract void put4x4(Matrix4x3d m, int offset, DoubleBuffer dest);
    public abstract void put4x4(Matrix4x3d m, int offset, ByteBuffer dest);
    public abstract void put4x4(Matrix3x2f m, int offset, FloatBuffer dest);
    public abstract void put4x4(Matrix3x2f m, int offset, ByteBuffer dest);
    public abstract void put4x4(Matrix3x2d m, int offset, DoubleBuffer dest);
    public abstract void put4x4(Matrix3x2d m, int offset, ByteBuffer dest);
    public abstract void put3x3(Matrix3x2f m, int offset, FloatBuffer dest);
    public abstract void put3x3(Matrix3x2f m, int offset, ByteBuffer dest);
    public abstract void put3x3(Matrix3x2d m, int offset, DoubleBuffer dest);
    public abstract void put3x3(Matrix3x2d m, int offset, ByteBuffer dest);
    public abstract void put4x3(Matrix4f m, int offset, FloatBuffer dest);
    public abstract void put4x3(Matrix4f m, int offset, ByteBuffer dest);
    public abstract void put3x4(Matrix4f m, int offset, FloatBuffer dest);
    public abstract void put3x4(Matrix4f m, int offset, ByteBuffer dest);
    public abstract void put3x4(Matrix4x3f m, int offset, FloatBuffer dest);
    public abstract void put3x4(Matrix4x3f m, int offset, ByteBuffer dest);
    public abstract void put3x4(Matrix3f m, int offset, FloatBuffer dest);
    public abstract void put3x4(Matrix3f m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix4f m, int offset, FloatBuffer dest);
    public abstract void putTransposed(Matrix4f m, int offset, ByteBuffer dest);
    public abstract void put4x3Transposed(Matrix4f m, int offset, FloatBuffer dest);
    public abstract void put4x3Transposed(Matrix4f m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix4x3f m, int offset, FloatBuffer dest);
    public abstract void putTransposed(Matrix4x3f m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix3x2f m, int offset, FloatBuffer dest);
    public abstract void putTransposed(Matrix3f m, int offset, FloatBuffer dest);
    public abstract void putTransposed(Matrix3f m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix2f m, int offset, FloatBuffer dest);
    public abstract void putTransposed(Matrix2f m, int offset, ByteBuffer dest);
    public abstract void put(Matrix4d m, int offset, DoubleBuffer dest);
    public abstract void put(Matrix4d m, int offset, ByteBuffer dest);
    public abstract void put(Matrix4x3d m, int offset, DoubleBuffer dest);
    public abstract void put(Matrix4x3d m, int offset, ByteBuffer dest);
    public abstract void putf(Matrix4d m, int offset, FloatBuffer dest);
    public abstract void putf(Matrix4d m, int offset, ByteBuffer dest);
    public abstract void putf(Matrix4x3d m, int offset, FloatBuffer dest);
    public abstract void putf(Matrix4x3d m, int offset, ByteBuffer dest);
    public abstract void put4x3Transposed(Matrix4d m, int offset, DoubleBuffer dest);
    public abstract void put4x3Transposed(Matrix4d m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix4d m, int offset, DoubleBuffer dest);
    public abstract void putTransposed(Matrix4d m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix4x3d m, int offset, DoubleBuffer dest);
    public abstract void putTransposed(Matrix4x3d m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix3d m, int offset, DoubleBuffer dest);
    public abstract void putTransposed(Matrix3d m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix3x2d m, int offset, DoubleBuffer dest);
    public abstract void putTransposed(Matrix3x2d m, int offset, ByteBuffer dest);
    public abstract void putTransposed(Matrix2d m, int offset, DoubleBuffer dest);
    public abstract void putTransposed(Matrix2d m, int offset, ByteBuffer dest);
    public abstract void putfTransposed(Matrix4d m, int offset, FloatBuffer dest);
    public abstract void putfTransposed(Matrix4d m, int offset, ByteBuffer dest);
    public abstract void putfTransposed(Matrix4x3d m, int offset, FloatBuffer dest);
    public abstract void putfTransposed(Matrix4x3d m, int offset, ByteBuffer dest);
    public abstract void putfTransposed(Matrix3d m, int offset, FloatBuffer dest);
    public abstract void putfTransposed(Matrix3d m, int offset, ByteBuffer dest);
    public abstract void putfTransposed(Matrix3x2d m, int offset, FloatBuffer dest);
    public abstract void putfTransposed(Matrix3x2d m, int offset, ByteBuffer dest);
    public abstract void putfTransposed(Matrix2d m, int offset, FloatBuffer dest);
    public abstract void putfTransposed(Matrix2d m, int offset, ByteBuffer dest);
    public abstract void put(Matrix3f m, int offset, FloatBuffer dest);
    public abstract void put(Matrix3f m, int offset, ByteBuffer dest);
    public abstract void put(Matrix3d m, int offset, DoubleBuffer dest);
    public abstract void put(Matrix3d m, int offset, ByteBuffer dest);
    public abstract void putf(Matrix3d m, int offset, FloatBuffer dest);
    public abstract void putf(Matrix3d m, int offset, ByteBuffer dest);
    public abstract void put(Matrix3x2f m, int offset, FloatBuffer dest);
    public abstract void put(Matrix3x2f m, int offset, ByteBuffer dest);
    public abstract void put(Matrix3x2d m, int offset, DoubleBuffer dest);
    public abstract void put(Matrix3x2d m, int offset, ByteBuffer dest);
    public abstract void put(Matrix2f m, int offset, FloatBuffer dest);
    public abstract void put(Matrix2f m, int offset, ByteBuffer dest);
    public abstract void put(Matrix2d m, int offset, DoubleBuffer dest);
    public abstract void put(Matrix2d m, int offset, ByteBuffer dest);
    public abstract void putf(Matrix2d m, int offset, FloatBuffer dest);
    public abstract void putf(Matrix2d m, int offset, ByteBuffer dest);
    public abstract void put(Vector4d src, int offset, DoubleBuffer dest);
    public abstract void put(Vector4d src, int offset, FloatBuffer dest);
    public abstract void put(Vector4d src, int offset, ByteBuffer dest);
    public abstract void putf(Vector4d src, int offset, ByteBuffer dest);
    public abstract void put(Vector4f src, int offset, FloatBuffer dest);
    public abstract void put(Vector4f src, int offset, ByteBuffer dest);
    public abstract void put(Vector4i src, int offset, IntBuffer dest);
    public abstract void put(Vector4i src, int offset, ByteBuffer dest);
    public abstract void put(Vector4L src, int offset, LongBuffer dest);
    public abstract void put(Vector4L src, int offset, ByteBuffer dest);
    public abstract void put(Vector3f src, int offset, FloatBuffer dest);
    public abstract void put(Vector3f src, int offset, ByteBuffer dest);
    public abstract void put(Vector3d src, int offset, DoubleBuffer dest);
    public abstract void put(Vector3d src, int offset, FloatBuffer dest);
    public abstract void put(Vector3d src, int offset, ByteBuffer dest);
    public abstract void putf(Vector3d src, int offset, ByteBuffer dest);
    public abstract void put(Vector3i src, int offset, IntBuffer dest);
    public abstract void put(Vector3i src, int offset, ByteBuffer dest);
    public abstract void put(Vector3L src, int offset, LongBuffer dest);
    public abstract void put(Vector3L src, int offset, ByteBuffer dest);
    public abstract void put(Vector2f src, int offset, FloatBuffer dest);
    public abstract void put(Vector2f src, int offset, ByteBuffer dest);
    public abstract void put(Vector2d src, int offset, DoubleBuffer dest);
    public abstract void put(Vector2d src, int offset, ByteBuffer dest);
    public abstract void put(Vector2i src, int offset, IntBuffer dest);
    public abstract void put(Vector2i src, int offset, ByteBuffer dest);
    public abstract void put(Vector2L src, int offset, LongBuffer dest);
    public abstract void put(Vector2L src, int offset, ByteBuffer dest);
    public abstract void get(Matrix4f m, int offset, FloatBuffer src);
    public abstract void get(Matrix4f m, int offset, ByteBuffer src);
    public abstract void getTransposed(Matrix4f m, int offset, FloatBuffer src);
    public abstract void getTransposed(Matrix4f m, int offset, ByteBuffer src);
    public abstract void get(Matrix4x3f m, int offset, FloatBuffer src);
    public abstract void get(Matrix4x3f m, int offset, ByteBuffer src);
    public abstract void get(Matrix4d m, int offset, DoubleBuffer src);
    public abstract void get(Matrix4d m, int offset, ByteBuffer src);
    public abstract void get(Matrix4x3d m, int offset, DoubleBuffer src);
    public abstract void get(Matrix4x3d m, int offset, ByteBuffer src);
    public abstract void getf(Matrix4d m, int offset, FloatBuffer src);
    public abstract void getf(Matrix4d m, int offset, ByteBuffer src);
    public abstract void getf(Matrix4x3d m, int offset, FloatBuffer src);
    public abstract void getf(Matrix4x3d m, int offset, ByteBuffer src);
    public abstract void get(Matrix3f m, int offset, FloatBuffer src);
    public abstract void get(Matrix3f m, int offset, ByteBuffer src);
    public abstract void get(Matrix3d m, int offset, DoubleBuffer src);
    public abstract void get(Matrix3d m, int offset, ByteBuffer src);
    public abstract void get(Matrix3x2f m, int offset, FloatBuffer src);
    public abstract void get(Matrix3x2f m, int offset, ByteBuffer src);
    public abstract void get(Matrix3x2d m, int offset, DoubleBuffer src);
    public abstract void get(Matrix3x2d m, int offset, ByteBuffer src);
    public abstract void getf(Matrix3d m, int offset, FloatBuffer src);
    public abstract void getf(Matrix3d m, int offset, ByteBuffer src);
    public abstract void get(Matrix2f m, int offset, FloatBuffer src);
    public abstract void get(Matrix2f m, int offset, ByteBuffer src);
    public abstract void get(Matrix2d m, int offset, DoubleBuffer src);
    public abstract void get(Matrix2d m, int offset, ByteBuffer src);
    public abstract void getf(Matrix2d m, int offset, FloatBuffer src);
    public abstract void getf(Matrix2d m, int offset, ByteBuffer src);
    public abstract void get(Vector4d dst, int offset, DoubleBuffer src);
    public abstract void get(Vector4d dst, int offset, ByteBuffer src);
    public abstract void get(Vector4f dst, int offset, FloatBuffer src);
    public abstract void get(Vector4f dst, int offset, ByteBuffer src);
    public abstract void get(Vector4i dst, int offset, IntBuffer src);
    public abstract void get(Vector4i dst, int offset, ByteBuffer src);
    public abstract void get(Vector4L dst, int offset, LongBuffer src);
    public abstract void get(Vector4L dst, int offset, ByteBuffer src);
    public abstract void get(Vector3f dst, int offset, FloatBuffer src);
    public abstract void get(Vector3f dst, int offset, ByteBuffer src);
    public abstract void get(Vector3d dst, int offset, DoubleBuffer src);
    public abstract void get(Vector3d dst, int offset, ByteBuffer src);
    public abstract void get(Vector3i dst, int offset, IntBuffer src);
    public abstract void get(Vector3i dst, int offset, ByteBuffer src);
    public abstract void get(Vector3L dst, int offset, LongBuffer src);
    public abstract void get(Vector3L dst, int offset, ByteBuffer src);
    public abstract void get(Vector2f dst, int offset, FloatBuffer src);
    public abstract void get(Vector2f dst, int offset, ByteBuffer src);
    public abstract void get(Vector2d dst, int offset, DoubleBuffer src);
    public abstract void get(Vector2d dst, int offset, ByteBuffer src);
    public abstract void get(Vector2i dst, int offset, IntBuffer src);
    public abstract void get(Vector2i dst, int offset, ByteBuffer src);
    public abstract void get(Vector2L dst, int offset, LongBuffer src);
    public abstract void get(Vector2L dst, int offset, ByteBuffer src);
    public abstract void putMatrix3f(Quaternionf q, int position, ByteBuffer dest);
    public abstract void putMatrix3f(Quaternionf q, int position, FloatBuffer dest);
    public abstract void putMatrix4f(Quaternionf q, int position, ByteBuffer dest);
    public abstract void putMatrix4f(Quaternionf q, int position, FloatBuffer dest);
    public abstract void putMatrix4x3f(Quaternionf q, int position, ByteBuffer dest);
    public abstract void putMatrix4x3f(Quaternionf q, int position, FloatBuffer dest);
    public abstract float get(Matrix4f m, int column, int row);
    public abstract Matrix4f set(Matrix4f m, int column, int row, float v);
    public abstract double get(Matrix4d m, int column, int row);
    public abstract Matrix4d set(Matrix4d m, int column, int row, double v);
    public abstract float get(Matrix3f m, int column, int row);
    public abstract Matrix3f set(Matrix3f m, int column, int row, float v);
    public abstract double get(Matrix3d m, int column, int row);
    public abstract Matrix3d set(Matrix3d m, int column, int row, double v);
    public abstract Vector4f getColumn(Matrix4f m, int column, Vector4f dest);
    public abstract Matrix4f setColumn(Vector4f v, int column, Matrix4f dest);
    public abstract Matrix4f setColumn(Vector4fc v, int column, Matrix4f dest);
    public abstract void copy(Matrix4fc src, Matrix4f dest);
    public abstract void copy(Matrix4x3fc src, Matrix4x3f dest);
    public abstract void copy(Matrix4fc src, Matrix4x3f dest);
    public abstract void copy(Matrix4x3fc src, Matrix4f dest);
    public abstract void copy(Matrix3fc src, Matrix3f dest);
    public abstract void copy(Matrix3fc src, Matrix4f dest);
    public abstract void copy(Matrix4fc src, Matrix3f dest);
    public abstract void copy(Matrix3fc src, Matrix4x3f dest);
    public abstract void copy(Matrix3x2fc src, Matrix3x2f dest);
    public abstract void copy(Matrix3x2dc src, Matrix3x2d dest);
    public abstract void copy(Matrix2fc src, Matrix2f dest);
    public abstract void copy(Matrix2dc src, Matrix2d dest);
    public abstract void copy(Matrix2fc src, Matrix3f dest);
    public abstract void copy(Matrix3fc src, Matrix2f dest);
    public abstract void copy(Matrix2fc src, Matrix3x2f dest);
    public abstract void copy(Matrix3x2fc src, Matrix2f dest);
    public abstract void copy(Matrix2dc src, Matrix3d dest);
    public abstract void copy(Matrix3dc src, Matrix2d dest);
    public abstract void copy(Matrix2dc src, Matrix3x2d dest);
    public abstract void copy(Matrix3x2dc src, Matrix2d dest);
    public abstract void copy3x3(Matrix4fc src, Matrix4f dest);
    public abstract void copy3x3(Matrix4x3fc src, Matrix4x3f dest);
    public abstract void copy3x3(Matrix3fc src, Matrix4x3f dest);
    public abstract void copy3x3(Matrix3fc src, Matrix4f dest);
    public abstract void copy4x3(Matrix4fc src, Matrix4f dest);
    public abstract void copy4x3(Matrix4x3fc src, Matrix4f dest);
    public abstract void copy(float[] arr, int off, Matrix4f dest);
    public abstract void copyTransposed(float[] arr, int off, Matrix4f dest);
    public abstract void copy(float[] arr, int off, Matrix3f dest);
    public abstract void copy(float[] arr, int off, Matrix4x3f dest);
    public abstract void copy(float[] arr, int off, Matrix3x2f dest);
    public abstract void copy(double[] arr, int off, Matrix3x2d dest);
    public abstract void copy(float[] arr, int off, Matrix3x2d dest);
    public abstract void copy(float[] arr, int off, Matrix2f dest);
    public abstract void copy(double[] arr, int off, Matrix2d dest);
    public abstract void copy(Matrix4fc src, float[] dest, int off);
    public abstract void copy(Matrix3fc src, float[] dest, int off);
    public abstract void copy(Matrix4x3fc src, float[] dest, int off);
    public abstract void copy(Matrix3x2fc src, float[] dest, int off);
    public abstract void copy(Matrix3x2dc src, double[] dest, int off);
    public abstract void copy(Matrix2fc src, float[] dest, int off);
    public abstract void copy(Matrix2dc src, double[] dest, int off);
    public abstract void copy4x4(Matrix4x3fc src, float[] dest, int off);
    public abstract void copy4x4(Matrix4x3dc src, float[] dest, int off);
    public abstract void copy4x4(Matrix4x3dc src, double[] dest, int off);
    public abstract void copy4x4(Matrix3x2fc src, float[] dest, int off);
    public abstract void copy4x4(Matrix3x2dc src, double[] dest, int off);
    public abstract void copy3x3(Matrix3x2fc src, float[] dest, int off);
    public abstract void copy3x3(Matrix3x2dc src, double[] dest, int off);
    public abstract void identity(Matrix4f dest);
    public abstract void identity(Matrix4x3f dest);
    public abstract void identity(Matrix3f dest);
    public abstract void identity(Matrix3x2f dest);
    public abstract void identity(Matrix3x2d dest);
    public abstract void identity(Matrix2f dest);
    public abstract void swap(Matrix4f m1, Matrix4f m2);
    public abstract void swap(Matrix4x3f m1, Matrix4x3f m2);
    public abstract void swap(Matrix3f m1, Matrix3f m2);
    public abstract void swap(Matrix2f m1, Matrix2f m2);
    public abstract void swap(Matrix2d m1, Matrix2d m2);
    public abstract void zero(Matrix4f dest);
    public abstract void zero(Matrix4x3f dest);
    public abstract void zero(Matrix3f dest);
    public abstract void zero(Matrix3x2f dest);
    public abstract void zero(Matrix3x2d dest);
    public abstract void zero(Matrix2f dest);
    public abstract void zero(Matrix2d dest);
    public static class MemUtilNIO extends MemUtil {
        public void put0(Matrix4f m, FloatBuffer dest) {
            dest.put(0,  m.m00())
            .put(1,  m.m01())
            .put(2,  m.m02())
            .put(3,  m.m03())
            .put(4,  m.m10())
            .put(5,  m.m11())
            .put(6,  m.m12())
            .put(7,  m.m13())
            .put(8,  m.m20())
            .put(9,  m.m21())
            .put(10, m.m22())
            .put(11, m.m23())
            .put(12, m.m30())
            .put(13, m.m31())
            .put(14, m.m32())
            .put(15, m.m33());
        }
        public void putN(Matrix4f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  m.m03())
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  m.m13())
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, m.m23())
            .put(offset+12, m.m30())
            .put(offset+13, m.m31())
            .put(offset+14, m.m32())
            .put(offset+15, m.m33());
        }
        public void put(Matrix4f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put0(m, dest);
            else
                putN(m, offset, dest);
        }
        public void put0(Matrix4f m, ByteBuffer dest) {
            dest.putFloat(0,  m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, m.m03())
            .putFloat(16, m.m10())
            .putFloat(20, m.m11())
            .putFloat(24, m.m12())
            .putFloat(28, m.m13())
            .putFloat(32, m.m20())
            .putFloat(36, m.m21())
            .putFloat(40, m.m22())
            .putFloat(44, m.m23())
            .putFloat(48, m.m30())
            .putFloat(52, m.m31())
            .putFloat(56, m.m32())
            .putFloat(60, m.m33());
        }
        private void putN(Matrix4f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, m.m03())
            .putFloat(offset+16, m.m10())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m12())
            .putFloat(offset+28, m.m13())
            .putFloat(offset+32, m.m20())
            .putFloat(offset+36, m.m21())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, m.m23())
            .putFloat(offset+48, m.m30())
            .putFloat(offset+52, m.m31())
            .putFloat(offset+56, m.m32())
            .putFloat(offset+60, m.m33());
        }
        public void put(Matrix4f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put0(m, dest);
            else
                putN(m, offset, dest);
        }
        public void put4x3_0(Matrix4f m, FloatBuffer dest) {
            dest.put(0,  m.m00())
            .put(1,  m.m01())
            .put(2,  m.m02())
            .put(3,  m.m10())
            .put(4,  m.m11())
            .put(5,  m.m12())
            .put(6,  m.m20())
            .put(7,  m.m21())
            .put(8,  m.m22())
            .put(9,  m.m30())
            .put(10, m.m31())
            .put(11, m.m32());
        }
        public void put4x3_N(Matrix4f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  m.m10())
            .put(offset+4,  m.m11())
            .put(offset+5,  m.m12())
            .put(offset+6,  m.m20())
            .put(offset+7,  m.m21())
            .put(offset+8,  m.m22())
            .put(offset+9,  m.m30())
            .put(offset+10, m.m31())
            .put(offset+11, m.m32());
        }
        public void put4x3(Matrix4f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put4x3_0(m, dest);
            else
                put4x3_N(m, offset, dest);
        }
        public void put4x3_0(Matrix4f m, ByteBuffer dest) {
            dest.putFloat(0,  m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, m.m10())
            .putFloat(16, m.m11())
            .putFloat(20, m.m12())
            .putFloat(24, m.m20())
            .putFloat(28, m.m21())
            .putFloat(32, m.m22())
            .putFloat(36, m.m30())
            .putFloat(40, m.m31())
            .putFloat(44, m.m32());
        }
        private void put4x3_N(Matrix4f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, m.m10())
            .putFloat(offset+16, m.m11())
            .putFloat(offset+20, m.m12())
            .putFloat(offset+24, m.m20())
            .putFloat(offset+28, m.m21())
            .putFloat(offset+32, m.m22())
            .putFloat(offset+36, m.m30())
            .putFloat(offset+40, m.m31())
            .putFloat(offset+44, m.m32());
        }
        public void put4x3(Matrix4f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put4x3_0(m, dest);
            else
                put4x3_N(m, offset, dest);
        }
        public void put3x4_0(Matrix4f m, ByteBuffer dest) {
            dest.putFloat(0,  m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, m.m03())
            .putFloat(16, m.m10())
            .putFloat(20, m.m11())
            .putFloat(24, m.m12())
            .putFloat(28, m.m13())
            .putFloat(32, m.m20())
            .putFloat(36, m.m21())
            .putFloat(40, m.m22())
            .putFloat(44, m.m23());
        }
        private void put3x4_N(Matrix4f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, m.m03())
            .putFloat(offset+16, m.m10())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m12())
            .putFloat(offset+28, m.m13())
            .putFloat(offset+32, m.m20())
            .putFloat(offset+36, m.m21())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, m.m23());
        }
        public void put3x4(Matrix4f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put3x4_0(m, dest);
            else
                put3x4_N(m, offset, dest);
        }
        public void put3x4_0(Matrix4f m, FloatBuffer dest) {
            dest.put(0,  m.m00())
            .put(1,  m.m01())
            .put(2,  m.m02())
            .put(3,  m.m03())
            .put(4,  m.m10())
            .put(5,  m.m11())
            .put(6,  m.m12())
            .put(7,  m.m13())
            .put(8,  m.m20())
            .put(9,  m.m21())
            .put(10, m.m22())
            .put(11, m.m23());
        }
        public void put3x4_N(Matrix4f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  m.m03())
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  m.m13())
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, m.m23());
        }
        public void put3x4(Matrix4f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put3x4_0(m, dest);
            else
                put3x4_N(m, offset, dest);
        }
        public void put3x4_0(Matrix4x3f m, ByteBuffer dest) {
            dest.putFloat(0,  m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, 0.0f)
            .putFloat(16, m.m10())
            .putFloat(20, m.m11())
            .putFloat(24, m.m12())
            .putFloat(28, 0.0f)
            .putFloat(32, m.m20())
            .putFloat(36, m.m21())
            .putFloat(40, m.m22())
            .putFloat(44, 0.0f);
        }
        private void put3x4_N(Matrix4x3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, 0.0f)
            .putFloat(offset+16, m.m10())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m12())
            .putFloat(offset+28, 0.0f)
            .putFloat(offset+32, m.m20())
            .putFloat(offset+36, m.m21())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, 0.0f);
        }
        public void put3x4(Matrix4x3f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put3x4_0(m, dest);
            else
                put3x4_N(m, offset, dest);
        }
        public void put3x4_0(Matrix4x3f m, FloatBuffer dest) {
            dest.put(0,  m.m00())
            .put(1,  m.m01())
            .put(2,  m.m02())
            .put(3,  0.0f)
            .put(4,  m.m10())
            .put(5,  m.m11())
            .put(6,  m.m12())
            .put(7,  0.0f)
            .put(8,  m.m20())
            .put(9,  m.m21())
            .put(10, m.m22())
            .put(11, 0.0f);
        }
        public void put3x4_N(Matrix4x3f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  0.0f)
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  0.0f)
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, 0.0f);
        }
        public void put3x4(Matrix4x3f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put3x4_0(m, dest);
            else
                put3x4_N(m, offset, dest);
        }
        public void put0(Matrix4x3f m, FloatBuffer dest) {
            dest.put(0,  m.m00())
            .put(1,  m.m01())
            .put(2,  m.m02())
            .put(3,  m.m10())
            .put(4,  m.m11())
            .put(5,  m.m12())
            .put(6,  m.m20())
            .put(7,  m.m21())
            .put(8,  m.m22())
            .put(9,  m.m30())
            .put(10, m.m31())
            .put(11, m.m32());
        }
        public void putN(Matrix4x3f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  m.m10())
            .put(offset+4,  m.m11())
            .put(offset+5,  m.m12())
            .put(offset+6,  m.m20())
            .put(offset+7,  m.m21())
            .put(offset+8,  m.m22())
            .put(offset+9,  m.m30())
            .put(offset+10, m.m31())
            .put(offset+11, m.m32());
        }
        public void put(Matrix4x3f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put0(m, dest);
            else
                putN(m, offset, dest);
        }
        public void put0(Matrix4x3f m, ByteBuffer dest) {
            dest.putFloat(0,  m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, m.m10())
            .putFloat(16, m.m11())
            .putFloat(20, m.m12())
            .putFloat(24, m.m20())
            .putFloat(28, m.m21())
            .putFloat(32, m.m22())
            .putFloat(36, m.m30())
            .putFloat(40, m.m31())
            .putFloat(44, m.m32());
        }
        public void putN(Matrix4x3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, m.m10())
            .putFloat(offset+16, m.m11())
            .putFloat(offset+20, m.m12())
            .putFloat(offset+24, m.m20())
            .putFloat(offset+28, m.m21())
            .putFloat(offset+32, m.m22())
            .putFloat(offset+36, m.m30())
            .putFloat(offset+40, m.m31())
            .putFloat(offset+44, m.m32());
        }
        public void put(Matrix4x3f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put0(m, dest);
            else
                putN(m, offset, dest);
        }
        public void put4x4(Matrix4x3f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  0.0f)
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  0.0f)
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, 0.0f)
            .put(offset+12, m.m30())
            .put(offset+13, m.m31())
            .put(offset+14, m.m32())
            .put(offset+15, 1.0f);
        }
        public void put4x4(Matrix4x3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, 0.0f)
            .putFloat(offset+16, m.m10())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m12())
            .putFloat(offset+28, 0.0f)
            .putFloat(offset+32, m.m20())
            .putFloat(offset+36, m.m21())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, 0.0f)
            .putFloat(offset+48, m.m30())
            .putFloat(offset+52, m.m31())
            .putFloat(offset+56, m.m32())
            .putFloat(offset+60, 1.0f);
        }
        public void put4x4(Matrix4x3d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  0.0)
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  0.0)
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, 0.0)
            .put(offset+12, m.m30())
            .put(offset+13, m.m31())
            .put(offset+14, m.m32())
            .put(offset+15, 1.0);
        }
        public void put4x4(Matrix4x3d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,     m.m00())
            .putDouble(offset+8,   m.m01())
            .putDouble(offset+16,   m.m02())
            .putDouble(offset+24,  0.0)
            .putDouble(offset+32,  m.m10())
            .putDouble(offset+40,  m.m11())
            .putDouble(offset+48,  m.m12())
            .putDouble(offset+56,  0.0)
            .putDouble(offset+64,  m.m20())
            .putDouble(offset+72,  m.m21())
            .putDouble(offset+80,  m.m22())
            .putDouble(offset+88,  0.0)
            .putDouble(offset+96,  m.m30())
            .putDouble(offset+104, m.m31())
            .putDouble(offset+112, m.m32())
            .putDouble(offset+120, 1.0);
        }
        public void put4x4(Matrix3x2f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  0.0f)
            .put(offset+3,  0.0f)
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  0.0f)
            .put(offset+7,  0.0f)
            .put(offset+8,  0.0f)
            .put(offset+9,  0.0f)
            .put(offset+10, 1.0f)
            .put(offset+11, 0.0f)
            .put(offset+12, m.m20())
            .put(offset+13, m.m21())
            .put(offset+14, 0.0f)
            .put(offset+15, 1.0f);
        }
        public void put4x4(Matrix3x2f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  0.0f)
            .putFloat(offset+12, 0.0f)
            .putFloat(offset+16, m.m10())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, 0.0f)
            .putFloat(offset+28, 0.0f)
            .putFloat(offset+32, 0.0f)
            .putFloat(offset+36, 0.0f)
            .putFloat(offset+40, 1.0f)
            .putFloat(offset+44, 0.0f)
            .putFloat(offset+48, m.m20())
            .putFloat(offset+52, m.m21())
            .putFloat(offset+56, 0.0f)
            .putFloat(offset+60, 1.0f);
        }
        public void put4x4(Matrix3x2d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  0.0)
            .put(offset+3,  0.0)
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  0.0)
            .put(offset+7,  0.0)
            .put(offset+8,  0.0)
            .put(offset+9,  0.0)
            .put(offset+10, 1.0)
            .put(offset+11, 0.0)
            .put(offset+12, m.m20())
            .put(offset+13, m.m21())
            .put(offset+14, 0.0)
            .put(offset+15, 1.0);
        }
        public void put4x4(Matrix3x2d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,     m.m00())
            .putDouble(offset+8,   m.m01())
            .putDouble(offset+16,  0.0)
            .putDouble(offset+24,  0.0)
            .putDouble(offset+32,  m.m10())
            .putDouble(offset+40,  m.m11())
            .putDouble(offset+48,  0.0)
            .putDouble(offset+56,  0.0)
            .putDouble(offset+64,  0.0)
            .putDouble(offset+72,  0.0)
            .putDouble(offset+80,  1.0)
            .putDouble(offset+88,  0.0)
            .putDouble(offset+96,  m.m20())
            .putDouble(offset+104, m.m21())
            .putDouble(offset+112, 0.0)
            .putDouble(offset+120, 1.0);
        }
        public void put3x3(Matrix3x2f m, int offset, FloatBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, 0.0f)
            .put(offset+3, m.m10())
            .put(offset+4, m.m11())
            .put(offset+5, 0.0f)
            .put(offset+6, m.m20())
            .put(offset+7, m.m21())
            .put(offset+8, 1.0f);
        }
        public void put3x3(Matrix3x2f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  0.0f)
            .putFloat(offset+12, m.m10())
            .putFloat(offset+16, m.m11())
            .putFloat(offset+20, 0.0f)
            .putFloat(offset+24, m.m20())
            .putFloat(offset+28, m.m21())
            .putFloat(offset+32, 1.0f);
        }
        public void put3x3(Matrix3x2d m, int offset, DoubleBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, 0.0)
            .put(offset+3, m.m10())
            .put(offset+4, m.m11())
            .put(offset+5, 0.0)
            .put(offset+6, m.m20())
            .put(offset+7, m.m21())
            .put(offset+8, 1.0);
        }
        public void put3x3(Matrix3x2d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m01())
            .putDouble(offset+16, 0.0)
            .putDouble(offset+24, m.m10())
            .putDouble(offset+32, m.m11())
            .putDouble(offset+40, 0.0)
            .putDouble(offset+48, m.m20())
            .putDouble(offset+56, m.m21())
            .putDouble(offset+64, 1.0);
        }
        private void putTransposedN(Matrix4f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m10())
            .put(offset+2,  m.m20())
            .put(offset+3,  m.m30())
            .put(offset+4,  m.m01())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m21())
            .put(offset+7,  m.m31())
            .put(offset+8,  m.m02())
            .put(offset+9,  m.m12())
            .put(offset+10, m.m22())
            .put(offset+11, m.m32())
            .put(offset+12, m.m03())
            .put(offset+13, m.m13())
            .put(offset+14, m.m23())
            .put(offset+15, m.m33());
        }
        private void putTransposed0(Matrix4f m, FloatBuffer dest) {
            dest.put(0,    m.m00())
            .put(1,  m.m10())
            .put(2,  m.m20())
            .put(3,  m.m30())
            .put(4,  m.m01())
            .put(5,  m.m11())
            .put(6,  m.m21())
            .put(7,  m.m31())
            .put(8,  m.m02())
            .put(9,  m.m12())
            .put(10, m.m22())
            .put(11, m.m32())
            .put(12, m.m03())
            .put(13, m.m13())
            .put(14, m.m23())
            .put(15, m.m33());
        }
        public void putTransposed(Matrix4f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                putTransposed0(m, dest);
            else
                putTransposedN(m, offset, dest);
        }
        private void putTransposedN(Matrix4f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m10())
            .putFloat(offset+8,  m.m20())
            .putFloat(offset+12, m.m30())
            .putFloat(offset+16, m.m01())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m21())
            .putFloat(offset+28, m.m31())
            .putFloat(offset+32, m.m02())
            .putFloat(offset+36, m.m12())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, m.m32())
            .putFloat(offset+48, m.m03())
            .putFloat(offset+52, m.m13())
            .putFloat(offset+56, m.m23())
            .putFloat(offset+60, m.m33());
        }
        private void putTransposed0(Matrix4f m, ByteBuffer dest) {
            dest.putFloat(0,    m.m00())
            .putFloat(4,  m.m10())
            .putFloat(8,  m.m20())
            .putFloat(12, m.m30())
            .putFloat(16, m.m01())
            .putFloat(20, m.m11())
            .putFloat(24, m.m21())
            .putFloat(28, m.m31())
            .putFloat(32, m.m02())
            .putFloat(36, m.m12())
            .putFloat(40, m.m22())
            .putFloat(44, m.m32())
            .putFloat(48, m.m03())
            .putFloat(52, m.m13())
            .putFloat(56, m.m23())
            .putFloat(60, m.m33());
        }
        public void putTransposed(Matrix4f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                putTransposed0(m, dest);
            else
                putTransposedN(m, offset, dest);
        }
        public void put4x3Transposed(Matrix4f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m10())
            .put(offset+2,  m.m20())
            .put(offset+3,  m.m30())
            .put(offset+4,  m.m01())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m21())
            .put(offset+7,  m.m31())
            .put(offset+8,  m.m02())
            .put(offset+9,  m.m12())
            .put(offset+10, m.m22())
            .put(offset+11, m.m32());
        }
        public void put4x3Transposed(Matrix4f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m10())
            .putFloat(offset+8,  m.m20())
            .putFloat(offset+12, m.m30())
            .putFloat(offset+16, m.m01())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m21())
            .putFloat(offset+28, m.m31())
            .putFloat(offset+32, m.m02())
            .putFloat(offset+36, m.m12())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, m.m32());
        }
        public void putTransposed(Matrix4x3f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m10())
            .put(offset+2,  m.m20())
            .put(offset+3,  m.m30())
            .put(offset+4,  m.m01())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m21())
            .put(offset+7,  m.m31())
            .put(offset+8,  m.m02())
            .put(offset+9,  m.m12())
            .put(offset+10, m.m22())
            .put(offset+11, m.m32());
        }
        public void putTransposed(Matrix4x3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m10())
            .putFloat(offset+8,  m.m20())
            .putFloat(offset+12, m.m30())
            .putFloat(offset+16, m.m01())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m21())
            .putFloat(offset+28, m.m31())
            .putFloat(offset+32, m.m02())
            .putFloat(offset+36, m.m12())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, m.m32());
        }
        public void putTransposed(Matrix3f m, int offset, FloatBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m10())
            .put(offset+2, m.m20())
            .put(offset+3, m.m01())
            .put(offset+4, m.m11())
            .put(offset+5, m.m21())
            .put(offset+6, m.m02())
            .put(offset+7, m.m12())
            .put(offset+8, m.m22());
        }
        public void putTransposed(Matrix3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m10())
            .putFloat(offset+8,  m.m20())
            .putFloat(offset+12, m.m01())
            .putFloat(offset+16, m.m11())
            .putFloat(offset+20, m.m21())
            .putFloat(offset+24, m.m02())
            .putFloat(offset+28, m.m12())
            .putFloat(offset+32, m.m22());
        }
        public void putTransposed(Matrix2f m, int offset, FloatBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m10())
            .put(offset+2, m.m01())
            .put(offset+3, m.m11());
        }
        public void putTransposed(Matrix3x2f m, int offset, FloatBuffer dest) {
            dest
            .put(offset,   m.m00())
            .put(offset+1, m.m10())
            .put(offset+2, m.m20())
            .put(offset+3, m.m01())
            .put(offset+4, m.m11())
            .put(offset+5, m.m21());
        }
        public void putTransposed(Matrix2f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m10())
            .putFloat(offset+8,  m.m01())
            .putFloat(offset+12, m.m11());
        }
        public void put(Matrix4d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  m.m03())
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  m.m13())
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, m.m23())
            .put(offset+12, m.m30())
            .put(offset+13, m.m31())
            .put(offset+14, m.m32())
            .put(offset+15, m.m33());
        }
        public void put(Matrix4d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,     m.m00())
            .putDouble(offset+8,   m.m01())
            .putDouble(offset+16,   m.m02())
            .putDouble(offset+24,  m.m03())
            .putDouble(offset+32,  m.m10())
            .putDouble(offset+40,  m.m11())
            .putDouble(offset+48,  m.m12())
            .putDouble(offset+56,  m.m13())
            .putDouble(offset+64,  m.m20())
            .putDouble(offset+72,  m.m21())
            .putDouble(offset+80,  m.m22())
            .putDouble(offset+88,  m.m23())
            .putDouble(offset+96,  m.m30())
            .putDouble(offset+104, m.m31())
            .putDouble(offset+112, m.m32())
            .putDouble(offset+120, m.m33());
        }
        public void put(Matrix4x3d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  m.m10())
            .put(offset+4,  m.m11())
            .put(offset+5,  m.m12())
            .put(offset+6,  m.m20())
            .put(offset+7,  m.m21())
            .put(offset+8,  m.m22())
            .put(offset+9,  m.m30())
            .put(offset+10, m.m31())
            .put(offset+11, m.m32());
        }
        public void put(Matrix4x3d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m01())
            .putDouble(offset+16,  m.m02())
            .putDouble(offset+24, m.m10())
            .putDouble(offset+32, m.m11())
            .putDouble(offset+40, m.m12())
            .putDouble(offset+48, m.m20())
            .putDouble(offset+56, m.m21())
            .putDouble(offset+64, m.m22())
            .putDouble(offset+72, m.m30())
            .putDouble(offset+80, m.m31())
            .putDouble(offset+88, m.m32());
        }
        public void putf(Matrix4d m, int offset, FloatBuffer dest) {
            dest.put(offset,    (float)m.m00())
            .put(offset+1,  (float)m.m01())
            .put(offset+2,  (float)m.m02())
            .put(offset+3,  (float)m.m03())
            .put(offset+4,  (float)m.m10())
            .put(offset+5,  (float)m.m11())
            .put(offset+6,  (float)m.m12())
            .put(offset+7,  (float)m.m13())
            .put(offset+8,  (float)m.m20())
            .put(offset+9,  (float)m.m21())
            .put(offset+10, (float)m.m22())
            .put(offset+11, (float)m.m23())
            .put(offset+12, (float)m.m30())
            .put(offset+13, (float)m.m31())
            .put(offset+14, (float)m.m32())
            .put(offset+15, (float)m.m33());
        }
        public void putf(Matrix4d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m01())
            .putFloat(offset+8,  (float)m.m02())
            .putFloat(offset+12, (float)m.m03())
            .putFloat(offset+16, (float)m.m10())
            .putFloat(offset+20, (float)m.m11())
            .putFloat(offset+24, (float)m.m12())
            .putFloat(offset+28, (float)m.m13())
            .putFloat(offset+32, (float)m.m20())
            .putFloat(offset+36, (float)m.m21())
            .putFloat(offset+40, (float)m.m22())
            .putFloat(offset+44, (float)m.m23())
            .putFloat(offset+48, (float)m.m30())
            .putFloat(offset+52, (float)m.m31())
            .putFloat(offset+56, (float)m.m32())
            .putFloat(offset+60, (float)m.m33());
        }
        public void putf(Matrix4x3d m, int offset, FloatBuffer dest) {
            dest.put(offset,    (float)m.m00())
            .put(offset+1,  (float)m.m01())
            .put(offset+2,  (float)m.m02())
            .put(offset+3,  (float)m.m10())
            .put(offset+4,  (float)m.m11())
            .put(offset+5,  (float)m.m12())
            .put(offset+6,  (float)m.m20())
            .put(offset+7,  (float)m.m21())
            .put(offset+8,  (float)m.m22())
            .put(offset+9,  (float)m.m30())
            .put(offset+10, (float)m.m31())
            .put(offset+11, (float)m.m32());
        }
        public void putf(Matrix4x3d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m01())
            .putFloat(offset+8,  (float)m.m02())
            .putFloat(offset+12, (float)m.m10())
            .putFloat(offset+16, (float)m.m11())
            .putFloat(offset+20, (float)m.m12())
            .putFloat(offset+24, (float)m.m20())
            .putFloat(offset+28, (float)m.m21())
            .putFloat(offset+32, (float)m.m22())
            .putFloat(offset+36, (float)m.m30())
            .putFloat(offset+40, (float)m.m31())
            .putFloat(offset+44, (float)m.m32());
        }
        public void putTransposed(Matrix4d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m10())
            .put(offset+2,  m.m20())
            .put(offset+3,  m.m30())
            .put(offset+4,  m.m01())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m21())
            .put(offset+7,  m.m31())
            .put(offset+8,  m.m02())
            .put(offset+9,  m.m12())
            .put(offset+10, m.m22())
            .put(offset+11, m.m32())
            .put(offset+12, m.m03())
            .put(offset+13, m.m13())
            .put(offset+14, m.m23())
            .put(offset+15, m.m33());
        }
        public void putTransposed(Matrix4d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,     m.m00())
            .putDouble(offset+8,   m.m10())
            .putDouble(offset+16,  m.m20())
            .putDouble(offset+24,  m.m30())
            .putDouble(offset+32,  m.m01())
            .putDouble(offset+40,  m.m11())
            .putDouble(offset+48,  m.m21())
            .putDouble(offset+56,  m.m31())
            .putDouble(offset+64,  m.m02())
            .putDouble(offset+72,  m.m12())
            .putDouble(offset+80,  m.m22())
            .putDouble(offset+88,  m.m32())
            .putDouble(offset+96,  m.m03())
            .putDouble(offset+104, m.m13())
            .putDouble(offset+112, m.m23())
            .putDouble(offset+120, m.m33());
        }
        public void put4x3Transposed(Matrix4d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m10())
            .put(offset+2,  m.m20())
            .put(offset+3,  m.m30())
            .put(offset+4,  m.m01())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m21())
            .put(offset+7,  m.m31())
            .put(offset+8,  m.m02())
            .put(offset+9,  m.m12())
            .put(offset+10, m.m22())
            .put(offset+11, m.m32());
        }
        public void put4x3Transposed(Matrix4d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,     m.m00())
            .putDouble(offset+8,   m.m10())
            .putDouble(offset+16,  m.m20())
            .putDouble(offset+24,  m.m30())
            .putDouble(offset+32,  m.m01())
            .putDouble(offset+40,  m.m11())
            .putDouble(offset+48,  m.m21())
            .putDouble(offset+56,  m.m31())
            .putDouble(offset+64,  m.m02())
            .putDouble(offset+72,  m.m12())
            .putDouble(offset+80,  m.m22())
            .putDouble(offset+88,  m.m32());
        }
        public void putTransposed(Matrix4x3d m, int offset, DoubleBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m10())
            .put(offset+2,  m.m20())
            .put(offset+3,  m.m30())
            .put(offset+4,  m.m01())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m21())
            .put(offset+7,  m.m31())
            .put(offset+8,  m.m02())
            .put(offset+9,  m.m12())
            .put(offset+10, m.m22())
            .put(offset+11, m.m32());
        }
        public void putTransposed(Matrix4x3d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m10())
            .putDouble(offset+16,  m.m20())
            .putDouble(offset+24, m.m30())
            .putDouble(offset+32, m.m01())
            .putDouble(offset+40, m.m11())
            .putDouble(offset+48, m.m21())
            .putDouble(offset+56, m.m31())
            .putDouble(offset+64, m.m02())
            .putDouble(offset+72, m.m12())
            .putDouble(offset+80, m.m22())
            .putDouble(offset+88, m.m32());
        }
        public void putTransposed(Matrix3d m, int offset, DoubleBuffer dest) {
            dest
            .put(offset,   m.m00())
            .put(offset+1, m.m10())
            .put(offset+2, m.m20())
            .put(offset+3, m.m01())
            .put(offset+4, m.m11())
            .put(offset+5, m.m21())
            .put(offset+6, m.m02())
            .put(offset+7, m.m12())
            .put(offset+8, m.m22());
        }
        public void putTransposed(Matrix3d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m10())
            .putDouble(offset+16,  m.m20())
            .putDouble(offset+24, m.m01())
            .putDouble(offset+32, m.m11())
            .putDouble(offset+40, m.m21())
            .putDouble(offset+48, m.m02())
            .putDouble(offset+56, m.m12())
            .putDouble(offset+64, m.m22());
        }
        public void putTransposed(Matrix3x2d m, int offset, ByteBuffer dest) {
            dest
            .putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m10())
            .putDouble(offset+16, m.m20())
            .putDouble(offset+24, m.m01())
            .putDouble(offset+32, m.m11())
            .putDouble(offset+40, m.m21());
        }
        public void putTransposed(Matrix3x2d m, int offset, DoubleBuffer dest) {
            dest
            .put(offset,   m.m00())
            .put(offset+1, m.m10())
            .put(offset+2, m.m20())
            .put(offset+3, m.m01())
            .put(offset+4, m.m11())
            .put(offset+5, m.m21());
        }
        public void putTransposed(Matrix2d m, int offset, DoubleBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m10())
            .put(offset+2, m.m01())
            .put(offset+3, m.m11());
        }
        public void putTransposed(Matrix2d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m10())
            .putDouble(offset+16, m.m01())
            .putDouble(offset+24, m.m11());
        }
        public void putfTransposed(Matrix4x3d m, int offset, FloatBuffer dest) {
            dest.put(offset,    (float)m.m00())
            .put(offset+1,  (float)m.m10())
            .put(offset+2,  (float)m.m20())
            .put(offset+3,  (float)m.m30())
            .put(offset+4,  (float)m.m01())
            .put(offset+5,  (float)m.m11())
            .put(offset+6,  (float)m.m21())
            .put(offset+7,  (float)m.m31())
            .put(offset+8,  (float)m.m02())
            .put(offset+9,  (float)m.m12())
            .put(offset+10, (float)m.m22())
            .put(offset+11, (float)m.m32());
        }
        public void putfTransposed(Matrix4x3d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m10())
            .putFloat(offset+8,  (float)m.m20())
            .putFloat(offset+12, (float)m.m30())
            .putFloat(offset+16, (float)m.m01())
            .putFloat(offset+20, (float)m.m11())
            .putFloat(offset+24, (float)m.m21())
            .putFloat(offset+28, (float)m.m31())
            .putFloat(offset+32, (float)m.m02())
            .putFloat(offset+36, (float)m.m12())
            .putFloat(offset+40, (float)m.m22())
            .putFloat(offset+44, (float)m.m32());
        }
        public void putfTransposed(Matrix3d m, int offset, FloatBuffer dest) {
            dest
            .put(offset,   (float)m.m00())
            .put(offset+1, (float)m.m10())
            .put(offset+2, (float)m.m20())
            .put(offset+3, (float)m.m01())
            .put(offset+4, (float)m.m11())
            .put(offset+5, (float)m.m21())
            .put(offset+6, (float)m.m02())
            .put(offset+7, (float)m.m12())
            .put(offset+8, (float)m.m22());
        }
        public void putfTransposed(Matrix3d m, int offset, ByteBuffer dest) {
            dest
            .putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m10())
            .putFloat(offset+8,  (float)m.m20())
            .putFloat(offset+12, (float)m.m01())
            .putFloat(offset+16, (float)m.m11())
            .putFloat(offset+20, (float)m.m21())
            .putFloat(offset+24, (float)m.m02())
            .putFloat(offset+28, (float)m.m12())
            .putFloat(offset+32, (float)m.m22());
        }
        public void putfTransposed(Matrix3x2d m, int offset, FloatBuffer dest) {
            dest
            .put(offset,   (float)m.m00())
            .put(offset+1, (float)m.m10())
            .put(offset+2, (float)m.m20())
            .put(offset+3, (float)m.m01())
            .put(offset+4, (float)m.m11())
            .put(offset+5, (float)m.m21());
        }
        public void putfTransposed(Matrix3x2d m, int offset, ByteBuffer dest) {
            dest
            .putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m10())
            .putFloat(offset+8,  (float)m.m20())
            .putFloat(offset+12, (float)m.m01())
            .putFloat(offset+16, (float)m.m11())
            .putFloat(offset+20, (float)m.m21());
        }
        public void putfTransposed(Matrix2d m, int offset, FloatBuffer dest) {
            dest.put(offset,   (float)m.m00())
            .put(offset+1, (float)m.m10())
            .put(offset+2, (float)m.m01())
            .put(offset+3, (float)m.m11());
        }
        public void putfTransposed(Matrix2d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m10())
            .putFloat(offset+8,  (float)m.m01())
            .putFloat(offset+12, (float)m.m11());
        }
        public void putfTransposed(Matrix4d m, int offset, FloatBuffer dest) {
            dest.put(offset,    (float)m.m00())
            .put(offset+1,  (float)m.m10())
            .put(offset+2,  (float)m.m20())
            .put(offset+3,  (float)m.m30())
            .put(offset+4,  (float)m.m01())
            .put(offset+5,  (float)m.m11())
            .put(offset+6,  (float)m.m21())
            .put(offset+7,  (float)m.m31())
            .put(offset+8,  (float)m.m02())
            .put(offset+9,  (float)m.m12())
            .put(offset+10, (float)m.m22())
            .put(offset+11, (float)m.m32())
            .put(offset+12, (float)m.m03())
            .put(offset+13, (float)m.m13())
            .put(offset+14, (float)m.m23())
            .put(offset+15, (float)m.m33());
        }
        public void putfTransposed(Matrix4d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m10())
            .putFloat(offset+8,  (float)m.m20())
            .putFloat(offset+12, (float)m.m30())
            .putFloat(offset+16, (float)m.m01())
            .putFloat(offset+20, (float)m.m11())
            .putFloat(offset+24, (float)m.m21())
            .putFloat(offset+28, (float)m.m31())
            .putFloat(offset+32, (float)m.m02())
            .putFloat(offset+36, (float)m.m12())
            .putFloat(offset+40, (float)m.m22())
            .putFloat(offset+44, (float)m.m32())
            .putFloat(offset+48, (float)m.m03())
            .putFloat(offset+52, (float)m.m13())
            .putFloat(offset+56, (float)m.m23())
            .putFloat(offset+60, (float)m.m33());
        }
        public void put0(Matrix3f m, FloatBuffer dest) {
            dest.put(0,   m.m00())
            .put(1, m.m01())
            .put(2, m.m02())
            .put(3, m.m10())
            .put(4, m.m11())
            .put(5, m.m12())
            .put(6, m.m20())
            .put(7, m.m21())
            .put(8, m.m22());
        }
        public void putN(Matrix3f m, int offset, FloatBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, m.m02())
            .put(offset+3, m.m10())
            .put(offset+4, m.m11())
            .put(offset+5, m.m12())
            .put(offset+6, m.m20())
            .put(offset+7, m.m21())
            .put(offset+8, m.m22());
        }
        public void put(Matrix3f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put0(m, dest);
            else
                putN(m, offset, dest);
        }
        public void put0(Matrix3f m, ByteBuffer dest) {
            dest.putFloat(0,    m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, m.m10())
            .putFloat(16, m.m11())
            .putFloat(20, m.m12())
            .putFloat(24, m.m20())
            .putFloat(28, m.m21())
            .putFloat(32, m.m22());
        }
        public void putN(Matrix3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, m.m10())
            .putFloat(offset+16, m.m11())
            .putFloat(offset+20, m.m12())
            .putFloat(offset+24, m.m20())
            .putFloat(offset+28, m.m21())
            .putFloat(offset+32, m.m22());
        }
        public void put(Matrix3f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put0(m, dest);
            else
                putN(m, offset, dest);
        }
        public void put3x4_0(Matrix3f m, ByteBuffer dest) {
            dest.putFloat(0,  m.m00())
            .putFloat(4,  m.m01())
            .putFloat(8,  m.m02())
            .putFloat(12, 0.0f)
            .putFloat(16, m.m10())
            .putFloat(20, m.m11())
            .putFloat(24, m.m12())
            .putFloat(28, 0.0f)
            .putFloat(32, m.m20())
            .putFloat(36, m.m21())
            .putFloat(40, m.m22())
            .putFloat(44, 0.0f);
        }
        private void put3x4_N(Matrix3f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m02())
            .putFloat(offset+12, 0.0f)
            .putFloat(offset+16, m.m10())
            .putFloat(offset+20, m.m11())
            .putFloat(offset+24, m.m12())
            .putFloat(offset+28, 0.0f)
            .putFloat(offset+32, m.m20())
            .putFloat(offset+36, m.m21())
            .putFloat(offset+40, m.m22())
            .putFloat(offset+44, 0.0f);
        }
        public void put3x4(Matrix3f m, int offset, ByteBuffer dest) {
            if (offset == 0)
                put3x4_0(m, dest);
            else
                put3x4_N(m, offset, dest);
        }
        public void put3x4_0(Matrix3f m, FloatBuffer dest) {
            dest.put(0,  m.m00())
            .put(1,  m.m01())
            .put(2,  m.m02())
            .put(3,  0.0f)
            .put(4,  m.m10())
            .put(5,  m.m11())
            .put(6,  m.m12())
            .put(7,  0.0f)
            .put(8,  m.m20())
            .put(9,  m.m21())
            .put(10, m.m22())
            .put(11, 0.0f);
        }
        public void put3x4_N(Matrix3f m, int offset, FloatBuffer dest) {
            dest.put(offset,    m.m00())
            .put(offset+1,  m.m01())
            .put(offset+2,  m.m02())
            .put(offset+3,  0.0f)
            .put(offset+4,  m.m10())
            .put(offset+5,  m.m11())
            .put(offset+6,  m.m12())
            .put(offset+7,  0.0f)
            .put(offset+8,  m.m20())
            .put(offset+9,  m.m21())
            .put(offset+10, m.m22())
            .put(offset+11, 0.0f);
        }
        public void put3x4(Matrix3f m, int offset, FloatBuffer dest) {
            if (offset == 0)
                put3x4_0(m, dest);
            else
                put3x4_N(m, offset, dest);
        }
        public void put(Matrix3d m, int offset, DoubleBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, m.m02())
            .put(offset+3, m.m10())
            .put(offset+4, m.m11())
            .put(offset+5, m.m12())
            .put(offset+6, m.m20())
            .put(offset+7, m.m21())
            .put(offset+8, m.m22());
        }
        public void put(Matrix3d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m01())
            .putDouble(offset+16, m.m02())
            .putDouble(offset+24, m.m10())
            .putDouble(offset+32, m.m11())
            .putDouble(offset+40, m.m12())
            .putDouble(offset+48, m.m20())
            .putDouble(offset+56, m.m21())
            .putDouble(offset+64, m.m22());
        }
        public void put(Matrix3x2f m, int offset, FloatBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, m.m10())
            .put(offset+3, m.m11())
            .put(offset+4, m.m20())
            .put(offset+5, m.m21());
        }
        public void put(Matrix3x2f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m10())
            .putFloat(offset+12, m.m11())
            .putFloat(offset+16, m.m20())
            .putFloat(offset+20, m.m21());
        }
        public void put(Matrix3x2d m, int offset, DoubleBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, m.m10())
            .put(offset+3, m.m11())
            .put(offset+4, m.m20())
            .put(offset+5, m.m21());
        }
        public void put(Matrix3x2d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m01())
            .putDouble(offset+16, m.m10())
            .putDouble(offset+24, m.m11())
            .putDouble(offset+32, m.m20())
            .putDouble(offset+40, m.m21());
        }
        public void putf(Matrix3d m, int offset, FloatBuffer dest) {
            dest.put(offset,   (float)m.m00())
            .put(offset+1, (float)m.m01())
            .put(offset+2, (float)m.m02())
            .put(offset+3, (float)m.m10())
            .put(offset+4, (float)m.m11())
            .put(offset+5, (float)m.m12())
            .put(offset+6, (float)m.m20())
            .put(offset+7, (float)m.m21())
            .put(offset+8, (float)m.m22());
        }
        public void put(Matrix2f m, int offset, FloatBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, m.m10())
            .put(offset+3, m.m11());
        }
        public void put(Matrix2f m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    m.m00())
            .putFloat(offset+4,  m.m01())
            .putFloat(offset+8,  m.m10())
            .putFloat(offset+12, m.m11());
        }
        public void put(Matrix2d m, int offset, DoubleBuffer dest) {
            dest.put(offset,   m.m00())
            .put(offset+1, m.m01())
            .put(offset+2, m.m10())
            .put(offset+3, m.m11());
        }
        public void put(Matrix2d m, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    m.m00())
            .putDouble(offset+8,  m.m01())
            .putDouble(offset+16, m.m10())
            .putDouble(offset+24, m.m11());
        }
        public void putf(Matrix2d m, int offset, FloatBuffer dest) {
            dest.put(offset,   (float)m.m00())
            .put(offset+1, (float)m.m01())
            .put(offset+2, (float)m.m10())
            .put(offset+3, (float)m.m11());
        }
        public void putf(Matrix2d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m01())
            .putFloat(offset+8,  (float)m.m10())
            .putFloat(offset+12, (float)m.m11());
        }
        public void putf(Matrix3d m, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float)m.m00())
            .putFloat(offset+4,  (float)m.m01())
            .putFloat(offset+8,  (float)m.m02())
            .putFloat(offset+12, (float)m.m10())
            .putFloat(offset+16, (float)m.m11())
            .putFloat(offset+20, (float)m.m12())
            .putFloat(offset+24, (float)m.m20())
            .putFloat(offset+28, (float)m.m21())
            .putFloat(offset+32, (float)m.m22());
        }
        public void put(Vector4d src, int offset, DoubleBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z)
            .put(offset+3, src.w);
        }
        public void put(Vector4d src, int offset, FloatBuffer dest) {
            dest.put(offset,   (float)src.x)
            .put(offset+1, (float)src.y)
            .put(offset+2, (float)src.z)
            .put(offset+3, (float)src.w);
        }
        public void put(Vector4d src, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    src.x)
            .putDouble(offset+8,  src.y)
            .putDouble(offset+16, src.z)
            .putDouble(offset+24, src.w);
        }
        public void putf(Vector4d src, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    (float) src.x)
            .putFloat(offset+4,  (float) src.y)
            .putFloat(offset+8,  (float) src.z)
            .putFloat(offset+12, (float) src.w);
        }
        public void put(Vector4f src, int offset, FloatBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z)
            .put(offset+3, src.w);
        }
        public void put(Vector4f src, int offset, ByteBuffer dest) {
            dest.putFloat(offset,    src.x)
            .putFloat(offset+4,  src.y)
            .putFloat(offset+8,  src.z)
            .putFloat(offset+12, src.w);
        }
        public void put(Vector4L src, int offset, LongBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z)
            .put(offset+3, src.w);
        }
        public void put(Vector4L src, int offset, ByteBuffer dest) {
            dest.putLong(offset,    src.x)
            .putLong(offset+8,  src.y)
            .putLong(offset+16, src.z)
            .putLong(offset+24, src.w);
        }
        public void put(Vector4i src, int offset, IntBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z)
            .put(offset+3, src.w);
        }
        public void put(Vector4i src, int offset, ByteBuffer dest) {
            dest.putInt(offset,    src.x)
            .putInt(offset+4,  src.y)
            .putInt(offset+8,  src.z)
            .putInt(offset+12, src.w);
        }
        public void put(Vector3f src, int offset, FloatBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z);
        }
        public void put(Vector3f src, int offset, ByteBuffer dest) {
            dest.putFloat(offset,   src.x)
            .putFloat(offset+4, src.y)
            .putFloat(offset+8, src.z);
        }
        public void put(Vector3d src, int offset, DoubleBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z);
        }
        public void put(Vector3d src, int offset, FloatBuffer dest) {
            dest.put(offset,   (float)src.x)
            .put(offset+1, (float)src.y)
            .put(offset+2, (float)src.z);
        }
        public void put(Vector3d src, int offset, ByteBuffer dest) {
            dest.putDouble(offset,    src.x)
            .putDouble(offset+8,  src.y)
            .putDouble(offset+16, src.z);
        }
        public void putf(Vector3d src, int offset, ByteBuffer dest) {
            dest.putFloat(offset,   (float) src.x)
            .putFloat(offset+4, (float) src.y)
            .putFloat(offset+8, (float) src.z);
        }
        public void put(Vector3i src, int offset, IntBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y)
            .put(offset+2, src.z);
        }
        public void put(Vector3i src, int offset, ByteBuffer dest) {
            dest.putInt(offset,   src.x)
            .putInt(offset+4, src.y)
            .putInt(offset+8, src.z);
        }
        public void put(Vector3L src, int offset, LongBuffer dest) {
            dest.put(offset,   src.x)
                .put(offset+1, src.y)
                .put(offset+2, src.z);
        }
        public void put(Vector3L src, int offset, ByteBuffer dest) {
            dest.putLong(offset,   src.x)
                .putLong(offset+8, src.y)
                .putLong(offset+16, src.z);
        }
        public void put(Vector2f src, int offset, FloatBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y);
        }
        public void put(Vector2f src, int offset, ByteBuffer dest) {
            dest.putFloat(offset,   src.x)
            .putFloat(offset+4, src.y);
        }
        public void put(Vector2d src, int offset, DoubleBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y);
        }
        public void put(Vector2d src, int offset, ByteBuffer dest) {
            dest.putDouble(offset,   src.x)
            .putDouble(offset+8, src.y);
        }
        public void put(Vector2i src, int offset, IntBuffer dest) {
            dest.put(offset,   src.x)
            .put(offset+1, src.y);
        }
        public void put(Vector2i src, int offset, ByteBuffer dest) {
            dest.putInt(offset,   src.x)
            .putInt(offset+4, src.y);
        }
        public void put(Vector2i src, int offset, LongBuffer dest) {
            dest.put(offset,   src.x)
                .put(offset+1, src.y);
        }
        public void put(Vector2L src, int offset, ByteBuffer dest) {
            dest.putLong(offset,   src.x)
                .putLong(offset+8, src.y);
        }
        public void put(Vector2L src, int offset, LongBuffer dest) {
            dest.put(offset,   src.x)
                .put(offset+1, src.y);
        }
        public void get(Matrix4f m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m03(src.get(offset+3))
            ._m10(src.get(offset+4))
            ._m11(src.get(offset+5))
            ._m12(src.get(offset+6))
            ._m13(src.get(offset+7))
            ._m20(src.get(offset+8))
            ._m21(src.get(offset+9))
            ._m22(src.get(offset+10))
            ._m23(src.get(offset+11))
            ._m30(src.get(offset+12))
            ._m31(src.get(offset+13))
            ._m32(src.get(offset+14))
            ._m33(src.get(offset+15));
        }
        public void get(Matrix4f m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m02(src.getFloat(offset+8))
            ._m03(src.getFloat(offset+12))
            ._m10(src.getFloat(offset+16))
            ._m11(src.getFloat(offset+20))
            ._m12(src.getFloat(offset+24))
            ._m13(src.getFloat(offset+28))
            ._m20(src.getFloat(offset+32))
            ._m21(src.getFloat(offset+36))
            ._m22(src.getFloat(offset+40))
            ._m23(src.getFloat(offset+44))
            ._m30(src.getFloat(offset+48))
            ._m31(src.getFloat(offset+52))
            ._m32(src.getFloat(offset+56))
            ._m33(src.getFloat(offset+60));
        }
        public void getTransposed(Matrix4f m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m10(src.get(offset+1))
            ._m20(src.get(offset+2))
            ._m30(src.get(offset+3))
            ._m01(src.get(offset+4))
            ._m11(src.get(offset+5))
            ._m21(src.get(offset+6))
            ._m31(src.get(offset+7))
            ._m02(src.get(offset+8))
            ._m12(src.get(offset+9))
            ._m22(src.get(offset+10))
            ._m32(src.get(offset+11))
            ._m03(src.get(offset+12))
            ._m13(src.get(offset+13))
            ._m23(src.get(offset+14))
            ._m33(src.get(offset+15));
        }
        public void getTransposed(Matrix4f m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m10(src.getFloat(offset+4))
            ._m20(src.getFloat(offset+8))
            ._m30(src.getFloat(offset+12))
            ._m01(src.getFloat(offset+16))
            ._m11(src.getFloat(offset+20))
            ._m21(src.getFloat(offset+24))
            ._m31(src.getFloat(offset+28))
            ._m02(src.getFloat(offset+32))
            ._m12(src.getFloat(offset+36))
            ._m22(src.getFloat(offset+40))
            ._m32(src.getFloat(offset+44))
            ._m03(src.getFloat(offset+48))
            ._m13(src.getFloat(offset+52))
            ._m23(src.getFloat(offset+56))
            ._m33(src.getFloat(offset+60));
        }
        public void get(Matrix4x3f m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m10(src.get(offset+3))
            ._m11(src.get(offset+4))
            ._m12(src.get(offset+5))
            ._m20(src.get(offset+6))
            ._m21(src.get(offset+7))
            ._m22(src.get(offset+8))
            ._m30(src.get(offset+9))
            ._m31(src.get(offset+10))
            ._m32(src.get(offset+11));
        }
        public void get(Matrix4x3f m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m02(src.getFloat(offset+8))
            ._m10(src.getFloat(offset+12))
            ._m11(src.getFloat(offset+16))
            ._m12(src.getFloat(offset+20))
            ._m20(src.getFloat(offset+24))
            ._m21(src.getFloat(offset+28))
            ._m22(src.getFloat(offset+32))
            ._m30(src.getFloat(offset+36))
            ._m31(src.getFloat(offset+40))
            ._m32(src.getFloat(offset+44));
        }
        public void get(Matrix4d m, int offset, DoubleBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m03(src.get(offset+3))
            ._m10(src.get(offset+4))
            ._m11(src.get(offset+5))
            ._m12(src.get(offset+6))
            ._m13(src.get(offset+7))
            ._m20(src.get(offset+8))
            ._m21(src.get(offset+9))
            ._m22(src.get(offset+10))
            ._m23(src.get(offset+11))
            ._m30(src.get(offset+12))
            ._m31(src.get(offset+13))
            ._m32(src.get(offset+14))
            ._m33(src.get(offset+15));
        }
        public void get(Matrix4d m, int offset, ByteBuffer src) {
            m._m00(src.getDouble(offset))
            ._m01(src.getDouble(offset+8))
            ._m02(src.getDouble(offset+16))
            ._m03(src.getDouble(offset+24))
            ._m10(src.getDouble(offset+32))
            ._m11(src.getDouble(offset+40))
            ._m12(src.getDouble(offset+48))
            ._m13(src.getDouble(offset+56))
            ._m20(src.getDouble(offset+64))
            ._m21(src.getDouble(offset+72))
            ._m22(src.getDouble(offset+80))
            ._m23(src.getDouble(offset+88))
            ._m30(src.getDouble(offset+96))
            ._m31(src.getDouble(offset+104))
            ._m32(src.getDouble(offset+112))
            ._m33(src.getDouble(offset+120));
        }
        public void get(Matrix4x3d m, int offset, DoubleBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m10(src.get(offset+3))
            ._m11(src.get(offset+4))
            ._m12(src.get(offset+5))
            ._m20(src.get(offset+6))
            ._m21(src.get(offset+7))
            ._m22(src.get(offset+8))
            ._m30(src.get(offset+9))
            ._m31(src.get(offset+10))
            ._m32(src.get(offset+11));
        }
        public void get(Matrix4x3d m, int offset, ByteBuffer src) {
            m._m00(src.getDouble(offset))
            ._m01(src.getDouble(offset+8))
            ._m02(src.getDouble(offset+16))
            ._m10(src.getDouble(offset+24))
            ._m11(src.getDouble(offset+32))
            ._m12(src.getDouble(offset+40))
            ._m20(src.getDouble(offset+48))
            ._m21(src.getDouble(offset+56))
            ._m22(src.getDouble(offset+64))
            ._m30(src.getDouble(offset+72))
            ._m31(src.getDouble(offset+80))
            ._m32(src.getDouble(offset+88));
        }
        public void getf(Matrix4d m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m03(src.get(offset+3))
            ._m10(src.get(offset+4))
            ._m11(src.get(offset+5))
            ._m12(src.get(offset+6))
            ._m13(src.get(offset+7))
            ._m20(src.get(offset+8))
            ._m21(src.get(offset+9))
            ._m22(src.get(offset+10))
            ._m23(src.get(offset+11))
            ._m30(src.get(offset+12))
            ._m31(src.get(offset+13))
            ._m32(src.get(offset+14))
            ._m33(src.get(offset+15));
        }
        public void getf(Matrix4d m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m02(src.getFloat(offset+8))
            ._m03(src.getFloat(offset+12))
            ._m10(src.getFloat(offset+16))
            ._m11(src.getFloat(offset+20))
            ._m12(src.getFloat(offset+24))
            ._m13(src.getFloat(offset+28))
            ._m20(src.getFloat(offset+32))
            ._m21(src.getFloat(offset+36))
            ._m22(src.getFloat(offset+40))
            ._m23(src.getFloat(offset+44))
            ._m30(src.getFloat(offset+48))
            ._m31(src.getFloat(offset+52))
            ._m32(src.getFloat(offset+56))
            ._m33(src.getFloat(offset+60));
        }
        public void getf(Matrix4x3d m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m10(src.get(offset+3))
            ._m11(src.get(offset+4))
            ._m12(src.get(offset+5))
            ._m20(src.get(offset+6))
            ._m21(src.get(offset+7))
            ._m22(src.get(offset+8))
            ._m30(src.get(offset+9))
            ._m31(src.get(offset+10))
            ._m32(src.get(offset+11));
        }
        public void getf(Matrix4x3d m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m02(src.getFloat(offset+8))
            ._m10(src.getFloat(offset+12))
            ._m11(src.getFloat(offset+16))
            ._m12(src.getFloat(offset+20))
            ._m20(src.getFloat(offset+24))
            ._m21(src.getFloat(offset+28))
            ._m22(src.getFloat(offset+32))
            ._m30(src.getFloat(offset+36))
            ._m31(src.getFloat(offset+40))
            ._m32(src.getFloat(offset+44));
        }
        public void get(Matrix3f m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m10(src.get(offset+3))
            ._m11(src.get(offset+4))
            ._m12(src.get(offset+5))
            ._m20(src.get(offset+6))
            ._m21(src.get(offset+7))
            ._m22(src.get(offset+8));
        }
        public void get(Matrix3f m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m02(src.getFloat(offset+8))
            ._m10(src.getFloat(offset+12))
            ._m11(src.getFloat(offset+16))
            ._m12(src.getFloat(offset+20))
            ._m20(src.getFloat(offset+24))
            ._m21(src.getFloat(offset+28))
            ._m22(src.getFloat(offset+32));
        }
        public void get(Matrix3d m, int offset, DoubleBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m10(src.get(offset+3))
            ._m11(src.get(offset+4))
            ._m12(src.get(offset+5))
            ._m20(src.get(offset+6))
            ._m21(src.get(offset+7))
            ._m22(src.get(offset+8));
        }
        public void get(Matrix3d m, int offset, ByteBuffer src) {
            m._m00(src.getDouble(offset))
            ._m01(src.getDouble(offset+8))
            ._m02(src.getDouble(offset+16))
            ._m10(src.getDouble(offset+24))
            ._m11(src.getDouble(offset+32))
            ._m12(src.getDouble(offset+40))
            ._m20(src.getDouble(offset+48))
            ._m21(src.getDouble(offset+56))
            ._m22(src.getDouble(offset+64));
        }
        public void get(Matrix3x2f m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m10(src.get(offset+2))
            ._m11(src.get(offset+3))
            ._m20(src.get(offset+4))
            ._m21(src.get(offset+5));
        }
        public void get(Matrix3x2f m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m10(src.getFloat(offset+8))
            ._m11(src.getFloat(offset+12))
            ._m20(src.getFloat(offset+16))
            ._m21(src.getFloat(offset+20));
        }
        public void get(Matrix3x2d m, int offset, DoubleBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m10(src.get(offset+2))
            ._m11(src.get(offset+3))
            ._m20(src.get(offset+4))
            ._m21(src.get(offset+5));
        }
        public void get(Matrix3x2d m, int offset, ByteBuffer src) {
            m._m00(src.getDouble(offset))
            ._m01(src.getDouble(offset+8))
            ._m10(src.getDouble(offset+16))
            ._m11(src.getDouble(offset+24))
            ._m20(src.getDouble(offset+32))
            ._m21(src.getDouble(offset+40));
        }
        public void getf(Matrix3d m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m02(src.get(offset+2))
            ._m10(src.get(offset+3))
            ._m11(src.get(offset+4))
            ._m12(src.get(offset+5))
            ._m20(src.get(offset+6))
            ._m21(src.get(offset+7))
            ._m22(src.get(offset+8));
        }
        public void getf(Matrix3d m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m02(src.getFloat(offset+8))
            ._m10(src.getFloat(offset+12))
            ._m11(src.getFloat(offset+16))
            ._m12(src.getFloat(offset+20))
            ._m20(src.getFloat(offset+24))
            ._m21(src.getFloat(offset+28))
            ._m22(src.getFloat(offset+32));
        }
        public void get(Matrix2f m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m10(src.get(offset+2))
            ._m11(src.get(offset+3));
        }
        public void get(Matrix2f m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m10(src.getFloat(offset+8))
            ._m11(src.getFloat(offset+12));
        }
        public void get(Matrix2d m, int offset, DoubleBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m10(src.get(offset+2))
            ._m11(src.get(offset+3));
        }
        public void get(Matrix2d m, int offset, ByteBuffer src) {
            m._m00(src.getDouble(offset))
            ._m01(src.getDouble(offset+8))
            ._m10(src.getDouble(offset+16))
            ._m11(src.getDouble(offset+24));
        }
        public void getf(Matrix2d m, int offset, FloatBuffer src) {
            m._m00(src.get(offset))
            ._m01(src.get(offset+1))
            ._m10(src.get(offset+2))
            ._m11(src.get(offset+3));
        }
        public void getf(Matrix2d m, int offset, ByteBuffer src) {
            m._m00(src.getFloat(offset))
            ._m01(src.getFloat(offset+4))
            ._m10(src.getFloat(offset+8))
            ._m11(src.getFloat(offset+12));
        }
        public void get(Vector4d dst, int offset, DoubleBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
            dst.w = src.get(offset+3);
        }
        public void get(Vector4d dst, int offset, ByteBuffer src) {
            dst.x = src.getDouble(offset);
            dst.y = src.getDouble(offset+8);
            dst.z = src.getDouble(offset+16);
            dst.w = src.getDouble(offset+24);
        }
        public void get(Vector4f dst, int offset, FloatBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
            dst.w = src.get(offset+3);
        }
        public void get(Vector4f dst, int offset, ByteBuffer src) {
            dst.x = src.getFloat(offset);
            dst.y = src.getFloat(offset+4);
            dst.z = src.getFloat(offset+8);
            dst.w = src.getFloat(offset+12);
        }
        public void get(Vector4L dst, int offset, LongBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
            dst.w = src.get(offset+3);
        }
        public void get(Vector4L dst, int offset, ByteBuffer src) {
            dst.x = src.getLong(offset);
            dst.y = src.getLong(offset+8);
            dst.z = src.getLong(offset+16);
            dst.w = src.getLong(offset+24);
        }
        public void get(Vector4i dst, int offset, IntBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
            dst.w = src.get(offset+3);
        }
        public void get(Vector4i dst, int offset, ByteBuffer src) {
            dst.x = src.getInt(offset);
            dst.y = src.getInt(offset+4);
            dst.z = src.getInt(offset+8);
            dst.w = src.getInt(offset+12);
        }
        public void get(Vector3f dst, int offset, FloatBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
        }
        public void get(Vector3f dst, int offset, ByteBuffer src) {
            dst.x = src.getFloat(offset);
            dst.y = src.getFloat(offset+4);
            dst.z = src.getFloat(offset+8);
        }
        public void get(Vector3d dst, int offset, DoubleBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
        }
        public void get(Vector3d dst, int offset, ByteBuffer src) {
            dst.x = src.getDouble(offset);
            dst.y = src.getDouble(offset+8);
            dst.z = src.getDouble(offset+16);
        }
        public void get(Vector3i dst, int offset, IntBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
        }
        public void get(Vector3i dst, int offset, ByteBuffer src) {
            dst.x = src.getInt(offset);
            dst.y = src.getInt(offset+4);
            dst.z = src.getInt(offset+8);
        }
        public void get(Vector3L dst, int offset, LongBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
            dst.z = src.get(offset+2);
        }
        public void get(Vector3L dst, int offset, ByteBuffer src) {
            dst.x = src.getLong(offset);
            dst.y = src.getLong(offset+8);
            dst.z = src.getLong(offset+16);
        }
        public void get(Vector2f dst, int offset, FloatBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
        }
        public void get(Vector2f dst, int offset, ByteBuffer src) {
            dst.x = src.getFloat(offset);
            dst.y = src.getFloat(offset+4);
        }
        public void get(Vector2d dst, int offset, DoubleBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
        }
        public void get(Vector2d dst, int offset, ByteBuffer src) {
            dst.x = src.getDouble(offset);
            dst.y = src.getDouble(offset+8);
        }
        public void get(Vector2i dst, int offset, IntBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
        }
        public void get(Vector2L dst, int offset, LongBuffer src) {
            dst.x = src.get(offset);
            dst.y = src.get(offset+1);
        }
        public void get(Vector2i dst, int offset, ByteBuffer src) {
            dst.x = src.getInt(offset);
            dst.y = src.getInt(offset+4);
        }
        public void get(Vector2L dst, int offset, ByteBuffer src) {
            dst.x = src.getLong(offset);
            dst.y = src.getLong(offset+8);
        }
        public float get(Matrix4f m, int column, int row) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00();
                case 1:
                    return m.m01();
                case 2:
                    return m.m02();
                case 3:
                    return m.m03();
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10();
                case 1:
                    return m.m11();
                case 2:
                    return m.m12();
                case 3:
                    return m.m13();
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20();
                case 1:
                    return m.m21();
                case 2:
                    return m.m22();
                case 3:
                    return m.m23();
                default:
                    break;
                }
                break;
            case 3:
                switch (row) {
                case 0:
                    return m.m30();
                case 1:
                    return m.m31();
                case 2:
                    return m.m32();
                case 3:
                    return m.m33();
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public Matrix4f set(Matrix4f m, int column, int row, float value) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00(value);
                case 1:
                    return m.m01(value);
                case 2:
                    return m.m02(value);
                case 3:
                    return m.m03(value);
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10(value);
                case 1:
                    return m.m11(value);
                case 2:
                    return m.m12(value);
                case 3:
                    return m.m13(value);
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20(value);
                case 1:
                    return m.m21(value);
                case 2:
                    return m.m22(value);
                case 3:
                    return m.m23(value);
                default:
                    break;
                }
                break;
            case 3:
                switch (row) {
                case 0:
                    return m.m30(value);
                case 1:
                    return m.m31(value);
                case 2:
                    return m.m32(value);
                case 3:
                    return m.m33(value);
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public double get(Matrix4d m, int column, int row) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00;
                case 1:
                    return m.m01;
                case 2:
                    return m.m02;
                case 3:
                    return m.m03;
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10;
                case 1:
                    return m.m11;
                case 2:
                    return m.m12;
                case 3:
                    return m.m13;
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20;
                case 1:
                    return m.m21;
                case 2:
                    return m.m22;
                case 3:
                    return m.m23;
                default:
                    break;
                }
                break;
            case 3:
                switch (row) {
                case 0:
                    return m.m30;
                case 1:
                    return m.m31;
                case 2:
                    return m.m32;
                case 3:
                    return m.m33;
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public Matrix4d set(Matrix4d m, int column, int row, double value) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00(value);
                case 1:
                    return m.m01(value);
                case 2:
                    return m.m02(value);
                case 3:
                    return m.m03(value);
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10(value);
                case 1:
                    return m.m11(value);
                case 2:
                    return m.m12(value);
                case 3:
                    return m.m13(value);
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20(value);
                case 1:
                    return m.m21(value);
                case 2:
                    return m.m22(value);
                case 3:
                    return m.m23(value);
                default:
                    break;
                }
                break;
            case 3:
                switch (row) {
                case 0:
                    return m.m30(value);
                case 1:
                    return m.m31(value);
                case 2:
                    return m.m32(value);
                case 3:
                    return m.m33(value);
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public float get(Matrix3f m, int column, int row) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00;
                case 1:
                    return m.m01;
                case 2:
                    return m.m02;
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10;
                case 1:
                    return m.m11;
                case 2:
                    return m.m12;
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20;
                case 1:
                    return m.m21;
                case 2:
                    return m.m22;
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public Matrix3f set(Matrix3f m, int column, int row, float value) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00(value);
                case 1:
                    return m.m01(value);
                case 2:
                    return m.m02(value);
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10(value);
                case 1:
                    return m.m11(value);
                case 2:
                    return m.m12(value);
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20(value);
                case 1:
                    return m.m21(value);
                case 2:
                    return m.m22(value);
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public double get(Matrix3d m, int column, int row) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00;
                case 1:
                    return m.m01;
                case 2:
                    return m.m02;
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10;
                case 1:
                    return m.m11;
                case 2:
                    return m.m12;
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20;
                case 1:
                    return m.m21;
                case 2:
                    return m.m22;
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public Matrix3d set(Matrix3d m, int column, int row, double value) {
            switch (column) {
            case 0:
                switch (row) {
                case 0:
                    return m.m00(value);
                case 1:
                    return m.m01(value);
                case 2:
                    return m.m02(value);
                default:
                    break;
                }
                break;
            case 1:
                switch (row) {
                case 0:
                    return m.m10(value);
                case 1:
                    return m.m11(value);
                case 2:
                    return m.m12(value);
                default:
                    break;
                }
                break;
            case 2:
                switch (row) {
                case 0:
                    return m.m20(value);
                case 1:
                    return m.m21(value);
                case 2:
                    return m.m22(value);
                default:
                    break;
                }
                break;
            default:
                break;
            }
            throw new IllegalArgumentException();
        }
        public Vector4f getColumn(Matrix4f m, int column, Vector4f dest) {
            switch (column) {
            case 0:
                return dest.set(m.m00(), m.m01(), m.m02(), m.m03());
            case 1:
                return dest.set(m.m10(), m.m11(), m.m12(), m.m13());
            case 2:
                return dest.set(m.m20(), m.m21(), m.m22(), m.m23());
            case 3:
                return dest.set(m.m30(), m.m31(), m.m32(), m.m33());
            default:
                throw new IndexOutOfBoundsException();
            }
        }
        public Matrix4f setColumn(Vector4f v, int column, Matrix4f dest) {
            switch (column) {
            case 0:
                return dest._m00(v.x)._m01(v.y)._m02(v.z)._m03(v.w);
            case 1:
                return dest._m10(v.x)._m11(v.y)._m12(v.z)._m13(v.w);
            case 2:
                return dest._m20(v.x)._m21(v.y)._m22(v.z)._m23(v.w);
            case 3:
                return dest._m30(v.x)._m31(v.y)._m32(v.z)._m33(v.w);
            default:
                throw new IndexOutOfBoundsException();
            }
        }
        public Matrix4f setColumn(Vector4fc v, int column, Matrix4f dest) {
            switch (column) {
            case 0:
                return dest._m00(v.x())._m01(v.y())._m02(v.z())._m03(v.w());
            case 1:
                return dest._m10(v.x())._m11(v.y())._m12(v.z())._m13(v.w());
            case 2:
                return dest._m20(v.x())._m21(v.y())._m22(v.z())._m23(v.w());
            case 3:
                return dest._m30(v.x())._m31(v.y())._m32(v.z())._m33(v.w());
            default:
                throw new IndexOutOfBoundsException();
            }
        }
        public void copy(Matrix4fc src, Matrix4f dest) {
            dest._m00(src.m00()).
            _m01(src.m01()).
            _m02(src.m02()).
            _m03(src.m03()).
            _m10(src.m10()).
            _m11(src.m11()).
            _m12(src.m12()).
            _m13(src.m13()).
            _m20(src.m20()).
            _m21(src.m21()).
            _m22(src.m22()).
            _m23(src.m23()).
            _m30(src.m30()).
            _m31(src.m31()).
            _m32(src.m32()).
            _m33(src.m33());
        }
        public void copy(Matrix3fc src, Matrix4f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m03(0.0f)
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m13(0.0f)
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m23(0.0f)
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f)
            ._m33(1.0f);
        }
        public void copy(Matrix4fc src, Matrix3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22());
        }
        public void copy(Matrix3fc src, Matrix4x3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f);
        }
        public void copy(Matrix3x2fc src, Matrix3x2f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m20(src.m20())
            ._m21(src.m21());
        }
        public void copy(Matrix3x2dc src, Matrix3x2d dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m20(src.m20())
            ._m21(src.m21());
        }
        public void copy(Matrix2fc src, Matrix2f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11());
        }
        public void copy(Matrix2dc src, Matrix2d dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11());
        }
        public void copy(Matrix2fc src, Matrix3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(0.0f)
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(1.0f);
        }
        public void copy(Matrix3fc src, Matrix2f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11());
        }
        public void copy(Matrix2fc src, Matrix3x2f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m20(0.0f)
            ._m21(0.0f);
        }
        public void copy(Matrix3x2fc src, Matrix2f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11());
        }
        public void copy(Matrix2dc src, Matrix3d dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(0.0)
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(0.0)
            ._m20(0.0)
            ._m21(0.0)
            ._m22(1.0);
        }
        public void copy(Matrix3dc src, Matrix2d dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11());
        }
        public void copy(Matrix2dc src, Matrix3x2d dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m20(0.0)
            ._m21(0.0);
        }
        public void copy(Matrix3x2dc src, Matrix2d dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m10(src.m10())
            ._m11(src.m11());
        }
        public void copy3x3(Matrix4fc src, Matrix4f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22());
        }
        public void copy3x3(Matrix4x3fc src, Matrix4x3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22());
        }
        public void copy3x3(Matrix3fc src, Matrix4x3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22());
        }
        public void copy3x3(Matrix3fc src, Matrix4f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22());
        }
        public void copy4x3(Matrix4x3fc src, Matrix4f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m30(src.m30())
            ._m31(src.m31())
            ._m32(src.m32());
        }
        public void copy4x3(Matrix4fc src, Matrix4f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m30(src.m30())
            ._m31(src.m31())
            ._m32(src.m32());
        }
        public void copy(Matrix4fc src, Matrix4x3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m30(src.m30())
            ._m31(src.m31())
            ._m32(src.m32());
        }
        public void copy(Matrix4x3fc src, Matrix4f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m03(0.0f)
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m13(0.0f)
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m23(0.0f)
            ._m30(src.m30())
            ._m31(src.m31())
            ._m32(src.m32())
            ._m33(1.0f);
        }
        public void copy(Matrix4x3fc src, Matrix4x3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22())
            ._m30(src.m30())
            ._m31(src.m31())
            ._m32(src.m32());
        }
        public void copy(Matrix3fc src, Matrix3f dest) {
            dest._m00(src.m00())
            ._m01(src.m01())
            ._m02(src.m02())
            ._m10(src.m10())
            ._m11(src.m11())
            ._m12(src.m12())
            ._m20(src.m20())
            ._m21(src.m21())
            ._m22(src.m22());
        }
        public void copy(float[] arr, int off, Matrix4f dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m02(arr[off+2])
            ._m03(arr[off+3])
            ._m10(arr[off+4])
            ._m11(arr[off+5])
            ._m12(arr[off+6])
            ._m13(arr[off+7])
            ._m20(arr[off+8])
            ._m21(arr[off+9])
            ._m22(arr[off+10])
            ._m23(arr[off+11])
            ._m30(arr[off+12])
            ._m31(arr[off+13])
            ._m32(arr[off+14])
            ._m33(arr[off+15]);
        }
        public void copyTransposed(float[] arr, int off, Matrix4f dest) {
            dest._m00(arr[off+0])
            ._m10(arr[off+1])
            ._m20(arr[off+2])
            ._m30(arr[off+3])
            ._m01(arr[off+4])
            ._m11(arr[off+5])
            ._m21(arr[off+6])
            ._m31(arr[off+7])
            ._m02(arr[off+8])
            ._m12(arr[off+9])
            ._m22(arr[off+10])
            ._m32(arr[off+11])
            ._m03(arr[off+12])
            ._m13(arr[off+13])
            ._m23(arr[off+14])
            ._m33(arr[off+15]);
        }
        public void copy(float[] arr, int off, Matrix3f dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m02(arr[off+2])
            ._m10(arr[off+3])
            ._m11(arr[off+4])
            ._m12(arr[off+5])
            ._m20(arr[off+6])
            ._m21(arr[off+7])
            ._m22(arr[off+8]);
        }
        public void copy(float[] arr, int off, Matrix4x3f dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m02(arr[off+2])
            ._m10(arr[off+3])
            ._m11(arr[off+4])
            ._m12(arr[off+5])
            ._m20(arr[off+6])
            ._m21(arr[off+7])
            ._m22(arr[off+8])
            ._m30(arr[off+9])
            ._m31(arr[off+10])
            ._m32(arr[off+11]);
        }
        public void copy(float[] arr, int off, Matrix3x2f dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m10(arr[off+2])
            ._m11(arr[off+3])
            ._m20(arr[off+4])
            ._m21(arr[off+5]);
        }
        public void copy(double[] arr, int off, Matrix3x2d dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m10(arr[off+2])
            ._m11(arr[off+3])
            ._m20(arr[off+4])
            ._m21(arr[off+5]);
        }
        public void copy(float[] arr, int off, Matrix3x2d dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m10(arr[off+2])
            ._m11(arr[off+3])
            ._m20(arr[off+4])
            ._m21(arr[off+5]);
        }
        public void copy(float[] arr, int off, Matrix2f dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m10(arr[off+2])
            ._m11(arr[off+3]);
        }
        public void copy(double[] arr, int off, Matrix2d dest) {
            dest._m00(arr[off+0])
            ._m01(arr[off+1])
            ._m10(arr[off+2])
            ._m11(arr[off+3]);
        }
        public void copy(Matrix4fc src, float[] dest, int off) {
            dest[off+0]  = src.m00();
            dest[off+1]  = src.m01();
            dest[off+2]  = src.m02();
            dest[off+3]  = src.m03();
            dest[off+4]  = src.m10();
            dest[off+5]  = src.m11();
            dest[off+6]  = src.m12();
            dest[off+7]  = src.m13();
            dest[off+8]  = src.m20();
            dest[off+9]  = src.m21();
            dest[off+10] = src.m22();
            dest[off+11] = src.m23();
            dest[off+12] = src.m30();
            dest[off+13] = src.m31();
            dest[off+14] = src.m32();
            dest[off+15] = src.m33();
        }
        public void copy(Matrix3fc src, float[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = src.m02();
            dest[off+3] = src.m10();
            dest[off+4] = src.m11();
            dest[off+5] = src.m12();
            dest[off+6] = src.m20();
            dest[off+7] = src.m21();
            dest[off+8] = src.m22();
        }
        public void copy(Matrix4x3fc src, float[] dest, int off) {
            dest[off+0]  = src.m00();
            dest[off+1]  = src.m01();
            dest[off+2]  = src.m02();
            dest[off+3]  = src.m10();
            dest[off+4]  = src.m11();
            dest[off+5]  = src.m12();
            dest[off+6]  = src.m20();
            dest[off+7]  = src.m21();
            dest[off+8]  = src.m22();
            dest[off+9]  = src.m30();
            dest[off+10] = src.m31();
            dest[off+11] = src.m32();
        }
        public void copy(Matrix3x2fc src, float[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = src.m10();
            dest[off+3] = src.m11();
            dest[off+4] = src.m20();
            dest[off+5] = src.m21();
        }
        public void copy(Matrix3x2dc src, double[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = src.m10();
            dest[off+3] = src.m11();
            dest[off+4] = src.m20();
            dest[off+5] = src.m21();
        }
        public void copy(Matrix2fc src, float[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = src.m10();
            dest[off+3] = src.m11();
        }
        public void copy(Matrix2dc src, double[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = src.m10();
            dest[off+3] = src.m11();
        }
        public void copy4x4(Matrix4x3fc src, float[] dest, int off) {
            dest[off+0]  = src.m00();
            dest[off+1]  = src.m01();
            dest[off+2]  = src.m02();
            dest[off+3]  = 0.0f;
            dest[off+4]  = src.m10();
            dest[off+5]  = src.m11();
            dest[off+6]  = src.m12();
            dest[off+7]  = 0.0f;
            dest[off+8]  = src.m20();
            dest[off+9]  = src.m21();
            dest[off+10] = src.m22();
            dest[off+11] = 0.0f;
            dest[off+12] = src.m30();
            dest[off+13] = src.m31();
            dest[off+14] = src.m32();
            dest[off+15] = 1.0f;
        }
        public void copy4x4(Matrix4x3dc src, float[] dest, int off) {
            dest[off+0]  = (float) src.m00();
            dest[off+1]  = (float) src.m01();
            dest[off+2]  = (float) src.m02();
            dest[off+3]  = 0.0f;
            dest[off+4]  = (float) src.m10();
            dest[off+5]  = (float) src.m11();
            dest[off+6]  = (float) src.m12();
            dest[off+7]  = 0.0f;
            dest[off+8]  = (float) src.m20();
            dest[off+9]  = (float) src.m21();
            dest[off+10] = (float) src.m22();
            dest[off+11] = 0.0f;
            dest[off+12] = (float) src.m30();
            dest[off+13] = (float) src.m31();
            dest[off+14] = (float) src.m32();
            dest[off+15] = 1.0f;
        }
        public void copy4x4(Matrix4x3dc src, double[] dest, int off) {
            dest[off+0]  = src.m00();
            dest[off+1]  = src.m01();
            dest[off+2]  = src.m02();
            dest[off+3]  = 0.0;
            dest[off+4]  = src.m10();
            dest[off+5]  = src.m11();
            dest[off+6]  = src.m12();
            dest[off+7]  = 0.0;
            dest[off+8]  = src.m20();
            dest[off+9]  = src.m21();
            dest[off+10] = src.m22();
            dest[off+11] = 0.0;
            dest[off+12] = src.m30();
            dest[off+13] = src.m31();
            dest[off+14] = src.m32();
            dest[off+15] = 1.0;
        }
        public void copy3x3(Matrix3x2fc src, float[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = 0.0f;
            dest[off+3] = src.m10();
            dest[off+4] = src.m11();
            dest[off+5] = 0.0f;
            dest[off+6] = src.m20();
            dest[off+7] = src.m21();
            dest[off+8] = 1.0f;
        }
        public void copy3x3(Matrix3x2dc src, double[] dest, int off) {
            dest[off+0] = src.m00();
            dest[off+1] = src.m01();
            dest[off+2] = 0.0;
            dest[off+3] = src.m10();
            dest[off+4] = src.m11();
            dest[off+5] = 0.0;
            dest[off+6] = src.m20();
            dest[off+7] = src.m21();
            dest[off+8] = 1.0;
        }
        public void copy4x4(Matrix3x2fc src, float[] dest, int off) {
            dest[off+0]  = src.m00();
            dest[off+1]  = src.m01();
            dest[off+2]  = 0.0f;
            dest[off+3]  = 0.0f;
            dest[off+4]  = src.m10();
            dest[off+5]  = src.m11();
            dest[off+6]  = 0.0f;
            dest[off+7]  = 0.0f;
            dest[off+8]  = 0.0f;
            dest[off+9]  = 0.0f;
            dest[off+10] = 1.0f;
            dest[off+11] = 0.0f;
            dest[off+12] = src.m20();
            dest[off+13] = src.m21();
            dest[off+14] = 0.0f;
            dest[off+15] = 1.0f;
        }
        public void copy4x4(Matrix3x2dc src, double[] dest, int off) {
            dest[off+0]  = src.m00();
            dest[off+1]  = src.m01();
            dest[off+2]  = 0.0;
            dest[off+3]  = 0.0;
            dest[off+4]  = src.m10();
            dest[off+5]  = src.m11();
            dest[off+6]  = 0.0;
            dest[off+7]  = 0.0;
            dest[off+8]  = 0.0;
            dest[off+9]  = 0.0;
            dest[off+10] = 1.0;
            dest[off+11] = 0.0;
            dest[off+12] = src.m20();
            dest[off+13] = src.m21();
            dest[off+14] = 0.0;
            dest[off+15] = 1.0;
        }
        public void identity(Matrix4f dest) {
            dest._m00(1.0f)
            ._m01(0.0f)
            ._m02(0.0f)
            ._m03(0.0f)
            ._m10(0.0f)
            ._m11(1.0f)
            ._m12(0.0f)
            ._m13(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(1.0f)
            ._m23(0.0f)
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f)
            ._m33(1.0f);
        }
        public void identity(Matrix4x3f dest) {
            dest._m00(1.0f)
            ._m01(0.0f)
            ._m02(0.0f)
            ._m10(0.0f)
            ._m11(1.0f)
            ._m12(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(1.0f)
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f);
        }
        public void identity(Matrix3f dest) {
            dest._m00(1.0f)
            ._m01(0.0f)
            ._m02(0.0f)
            ._m10(0.0f)
            ._m11(1.0f)
            ._m12(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(1.0f);
        }
        public void identity(Matrix3x2f dest) {
            dest._m00(1.0f)
            ._m01(0.0f)
            ._m10(0.0f)
            ._m11(1.0f)
            ._m20(0.0f)
            ._m21(0.0f);
        }
        public void identity(Matrix3x2d dest) {
            dest._m00(1.0)
            ._m01(0.0)
            ._m10(0.0)
            ._m11(1.0)
            ._m20(0.0)
            ._m21(0.0);
        }
        public void identity(Matrix2f dest) {
            dest._m00(1.0f)
            ._m01(0.0f)
            ._m10(0.0f)
            ._m11(1.0f);
        }
        public void swap(Matrix4f m1, Matrix4f m2) {
            float tmp;
            tmp = m1.m00(); m1._m00(m2.m00()); m2._m00(tmp);
            tmp = m1.m01(); m1._m01(m2.m01()); m2._m01(tmp);
            tmp = m1.m02(); m1._m02(m2.m02()); m2._m02(tmp);
            tmp = m1.m03(); m1._m03(m2.m03()); m2._m03(tmp);
            tmp = m1.m10(); m1._m10(m2.m10()); m2._m10(tmp);
            tmp = m1.m11(); m1._m11(m2.m11()); m2._m11(tmp);
            tmp = m1.m12(); m1._m12(m2.m12()); m2._m12(tmp);
            tmp = m1.m13(); m1._m13(m2.m13()); m2._m13(tmp);
            tmp = m1.m20(); m1._m20(m2.m20()); m2._m20(tmp);
            tmp = m1.m21(); m1._m21(m2.m21()); m2._m21(tmp);
            tmp = m1.m22(); m1._m22(m2.m22()); m2._m22(tmp);
            tmp = m1.m23(); m1._m23(m2.m23()); m2._m23(tmp);
            tmp = m1.m30(); m1._m30(m2.m30()); m2._m30(tmp);
            tmp = m1.m31(); m1._m31(m2.m31()); m2._m31(tmp);
            tmp = m1.m32(); m1._m32(m2.m32()); m2._m32(tmp);
            tmp = m1.m33(); m1._m33(m2.m33()); m2._m33(tmp);
        }
        public void swap(Matrix4x3f m1, Matrix4x3f m2) {
            float tmp;
            tmp = m1.m00(); m1._m00(m2.m00()); m2._m00(tmp);
            tmp = m1.m01(); m1._m01(m2.m01()); m2._m01(tmp);
            tmp = m1.m02(); m1._m02(m2.m02()); m2._m02(tmp);
            tmp = m1.m10(); m1._m10(m2.m10()); m2._m10(tmp);
            tmp = m1.m11(); m1._m11(m2.m11()); m2._m11(tmp);
            tmp = m1.m12(); m1._m12(m2.m12()); m2._m12(tmp);
            tmp = m1.m20(); m1._m20(m2.m20()); m2._m20(tmp);
            tmp = m1.m21(); m1._m21(m2.m21()); m2._m21(tmp);
            tmp = m1.m22(); m1._m22(m2.m22()); m2._m22(tmp);
            tmp = m1.m30(); m1._m30(m2.m30()); m2._m30(tmp);
            tmp = m1.m31(); m1._m31(m2.m31()); m2._m31(tmp);
            tmp = m1.m32(); m1._m32(m2.m32()); m2._m32(tmp);
        }
        public void swap(Matrix3f m1, Matrix3f m2) {
            float tmp;
            tmp = m1.m00(); m1._m00(m2.m00()); m2._m00(tmp);
            tmp = m1.m01(); m1._m01(m2.m01()); m2._m01(tmp);
            tmp = m1.m02(); m1._m02(m2.m02()); m2._m02(tmp);
            tmp = m1.m10(); m1._m10(m2.m10()); m2._m10(tmp);
            tmp = m1.m11(); m1._m11(m2.m11()); m2._m11(tmp);
            tmp = m1.m12(); m1._m12(m2.m12()); m2._m12(tmp);
            tmp = m1.m20(); m1._m20(m2.m20()); m2._m20(tmp);
            tmp = m1.m21(); m1._m21(m2.m21()); m2._m21(tmp);
            tmp = m1.m22(); m1._m22(m2.m22()); m2._m22(tmp);
        }
        public void swap(Matrix2f m1, Matrix2f m2) {
            float tmp;
            tmp = m1.m00(); m1._m00(m2.m00()); m2._m00(tmp);
            tmp = m1.m01(); m1._m00(m2.m01()); m2._m01(tmp);
            tmp = m1.m10(); m1._m00(m2.m10()); m2._m10(tmp);
            tmp = m1.m11(); m1._m00(m2.m11()); m2._m11(tmp);
        }
        public void swap(Matrix2d m1, Matrix2d m2) {
            double tmp;
            tmp = m1.m00(); m1._m00(m2.m00()); m2._m00(tmp);
            tmp = m1.m01(); m1._m00(m2.m01()); m2._m01(tmp);
            tmp = m1.m10(); m1._m00(m2.m10()); m2._m10(tmp);
            tmp = m1.m11(); m1._m00(m2.m11()); m2._m11(tmp);
        }
        public void zero(Matrix4f dest) {
            dest._m00(0.0f)
            ._m01(0.0f)
            ._m02(0.0f)
            ._m03(0.0f)
            ._m10(0.0f)
            ._m11(0.0f)
            ._m12(0.0f)
            ._m13(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(0.0f)
            ._m23(0.0f)
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f)
            ._m33(0.0f);
        }
        public void zero(Matrix4x3f dest) {
            dest._m00(0.0f)
            ._m01(0.0f)
            ._m02(0.0f)
            ._m10(0.0f)
            ._m11(0.0f)
            ._m12(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(0.0f)
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f);
        }
        public void zero(Matrix3f dest) {
            dest._m00(0.0f)
            ._m01(0.0f)
            ._m02(0.0f)
            ._m10(0.0f)
            ._m11(0.0f)
            ._m12(0.0f)
            ._m20(0.0f)
            ._m21(0.0f)
            ._m22(0.0f);
        }
        public void zero(Matrix3x2f dest) {
            dest._m00(0.0f)
            ._m01(0.0f)
            ._m10(0.0f)
            ._m11(0.0f)
            ._m20(0.0f)
            ._m21(0.0f);
        }
        public void zero(Matrix3x2d dest) {
            dest._m00(0.0)
            ._m01(0.0)
            ._m10(0.0)
            ._m11(0.0)
            ._m20(0.0)
            ._m21(0.0);
        }
        public void zero(Matrix2f dest) {
            dest._m00(0.0f)
            ._m01(0.0f)
            ._m10(0.0f)
            ._m11(0.0f);
        }
        public void zero(Matrix2d dest) {
            dest._m00(0.0)
            ._m01(0.0)
            ._m10(0.0)
            ._m11(0.0);
        }
        public void putMatrix3f(Quaternionf q, int position, ByteBuffer dest) {
            float w2 = q.w * q.w;
            float x2 = q.x * q.x;
            float y2 = q.y * q.y;
            float z2 = q.z * q.z;
            float zw = q.z * q.w;
            float xy = q.x * q.y;
            float xz = q.x * q.z;
            float yw = q.y * q.w;
            float yz = q.y * q.z;
            float xw = q.x * q.w;
            dest.putFloat(position, w2 + x2 - z2 - y2)
            .putFloat(position + 4, xy + zw + zw + xy)
            .putFloat(position + 8, xz - yw + xz - yw)
            .putFloat(position + 12, -zw + xy - zw + xy)
            .putFloat(position + 16, y2 - z2 + w2 - x2)
            .putFloat(position + 20, yz + yz + xw + xw)
            .putFloat(position + 24, yw + xz + xz + yw)
            .putFloat(position + 28, yz + yz - xw - xw)
            .putFloat(position + 32, z2 - y2 - x2 + w2);
        }
        public void putMatrix3f(Quaternionf q, int position, FloatBuffer dest) {
            float w2 = q.w * q.w;
            float x2 = q.x * q.x;
            float y2 = q.y * q.y;
            float z2 = q.z * q.z;
            float zw = q.z * q.w;
            float xy = q.x * q.y;
            float xz = q.x * q.z;
            float yw = q.y * q.w;
            float yz = q.y * q.z;
            float xw = q.x * q.w;
            dest.put(position, w2 + x2 - z2 - y2)
            .put(position + 1, xy + zw + zw + xy)
            .put(position + 2, xz - yw + xz - yw)
            .put(position + 3, -zw + xy - zw + xy)
            .put(position + 4, y2 - z2 + w2 - x2)
            .put(position + 5, yz + yz + xw + xw)
            .put(position + 6, yw + xz + xz + yw)
            .put(position + 7, yz + yz - xw - xw)
            .put(position + 8, z2 - y2 - x2 + w2);
        }
        public void putMatrix4f(Quaternionf q, int position, ByteBuffer dest) {
            float w2 = q.w * q.w;
            float x2 = q.x * q.x;
            float y2 = q.y * q.y;
            float z2 = q.z * q.z;
            float zw = q.z * q.w;
            float xy = q.x * q.y;
            float xz = q.x * q.z;
            float yw = q.y * q.w;
            float yz = q.y * q.z;
            float xw = q.x * q.w;
            dest.putFloat(position, w2 + x2 - z2 - y2)
            .putFloat(position + 4, xy + zw + zw + xy)
            .putFloat(position + 8, xz - yw + xz - yw)
            .putFloat(position + 12, 0.0f)
            .putFloat(position + 16, -zw + xy - zw + xy)
            .putFloat(position + 20, y2 - z2 + w2 - x2)
            .putFloat(position + 24, yz + yz + xw + xw)
            .putFloat(position + 28, 0.0f)
            .putFloat(position + 32, yw + xz + xz + yw)
            .putFloat(position + 36, yz + yz - xw - xw)
            .putFloat(position + 40, z2 - y2 - x2 + w2)
            .putFloat(position + 44, 0.0f)
            .putLong(position + 48, 0L)
            .putLong(position + 56, 0x3F80000000000000L);
        }
        public void putMatrix4f(Quaternionf q, int position, FloatBuffer dest) {
            float w2 = q.w * q.w;
            float x2 = q.x * q.x;
            float y2 = q.y * q.y;
            float z2 = q.z * q.z;
            float zw = q.z * q.w;
            float xy = q.x * q.y;
            float xz = q.x * q.z;
            float yw = q.y * q.w;
            float yz = q.y * q.z;
            float xw = q.x * q.w;
            dest.put(position, w2 + x2 - z2 - y2)
            .put(position + 1, xy + zw + zw + xy)
            .put(position + 2, xz - yw + xz - yw)
            .put(position + 3, 0.0f)
            .put(position + 4, -zw + xy - zw + xy)
            .put(position + 5, y2 - z2 + w2 - x2)
            .put(position + 6, yz + yz + xw + xw)
            .put(position + 7, 0.0f)
            .put(position + 8, yw + xz + xz + yw)
            .put(position + 9, yz + yz - xw - xw)
            .put(position + 10, z2 - y2 - x2 + w2)
            .put(position + 11, 0.0f)
            .put(position + 12, 0.0f)
            .put(position + 13, 0.0f)
            .put(position + 14, 0.0f)
            .put(position + 15, 1.0f);
        }
        public void putMatrix4x3f(Quaternionf q, int position, ByteBuffer dest) {
            float w2 = q.w * q.w;
            float x2 = q.x * q.x;
            float y2 = q.y * q.y;
            float z2 = q.z * q.z;
            float zw = q.z * q.w;
            float xy = q.x * q.y;
            float xz = q.x * q.z;
            float yw = q.y * q.w;
            float yz = q.y * q.z;
            float xw = q.x * q.w;
            dest.putFloat(position, w2 + x2 - z2 - y2)
            .putFloat(position + 4, xy + zw + zw + xy)
            .putFloat(position + 8, xz - yw + xz - yw)
            .putFloat(position + 12, -zw + xy - zw + xy)
            .putFloat(position + 16, y2 - z2 + w2 - x2)
            .putFloat(position + 20, yz + yz + xw + xw)
            .putFloat(position + 24, yw + xz + xz + yw)
            .putFloat(position + 28, yz + yz - xw - xw)
            .putFloat(position + 32, z2 - y2 - x2 + w2)
            .putLong(position + 36, 0L)
            .putFloat(position + 44, 0.0f);
        }
        public void putMatrix4x3f(Quaternionf q, int position, FloatBuffer dest) {
            float w2 = q.w * q.w;
            float x2 = q.x * q.x;
            float y2 = q.y * q.y;
            float z2 = q.z * q.z;
            float zw = q.z * q.w;
            float xy = q.x * q.y;
            float xz = q.x * q.z;
            float yw = q.y * q.w;
            float yz = q.y * q.z;
            float xw = q.x * q.w;
            dest.put(position, w2 + x2 - z2 - y2)
            .put(position + 1, xy + zw + zw + xy)
            .put(position + 2, xz - yw + xz - yw)
            .put(position + 3, -zw + xy - zw + xy)
            .put(position + 4, y2 - z2 + w2 - x2)
            .put(position + 5, yz + yz + xw + xw)
            .put(position + 6, yw + xz + xz + yw)
            .put(position + 7, yz + yz - xw - xw)
            .put(position + 8, z2 - y2 - x2 + w2)
            .put(position + 9, 0.0f)
            .put(position + 10, 0.0f)
            .put(position + 11, 0.0f);
        }
    }
    public static class MemUtilUnsafe extends MemUtilNIO {
        public static final sun.misc.Unsafe UNSAFE;
        public static final long ADDRESS;
        public static final long Matrix2f_m00;
        public static final long Matrix3f_m00;
        public static final long Matrix3d_m00;
        public static final long Matrix4f_m00;
        public static final long Matrix4d_m00;
        public static final long Matrix4x3f_m00;
        public static final long Matrix3x2f_m00;
        public static final long Vector4f_x;
        public static final long Vector4i_x;
        public static final long Vector3f_x;
        public static final long Vector3i_x;
        public static final long Vector2f_x;
        public static final long Vector2i_x;
        public static final long floatArrayOffset;
        static {
            UNSAFE = getUnsafeInstance();
            try {
                ADDRESS = findBufferAddress();
                Matrix4f_m00 = checkMatrix4f();
                Matrix4d_m00 = checkMatrix4d();
                Matrix4x3f_m00 = checkMatrix4x3f();
                Matrix3f_m00 = checkMatrix3f();
                Matrix3d_m00 = checkMatrix3d();
                Matrix3x2f_m00 = checkMatrix3x2f();
                Matrix2f_m00 = checkMatrix2f();
                Vector4f_x = checkVector4f();
                Vector4i_x = checkVector4i();
                Vector3f_x = checkVector3f();
                Vector3i_x = checkVector3i();
                Vector2f_x = checkVector2f();
                Vector2i_x = checkVector2i();
                floatArrayOffset = UNSAFE.arrayBaseOffset(float[].class);
                sun.misc.Unsafe.class.getDeclaredMethod("getLong", new Class[] {Object.class, long.class});
                sun.misc.Unsafe.class.getDeclaredMethod("putLong", new Class[] {Object.class, long.class, long.class});
            } catch (NoSuchFieldException e) {
                throw new UnsupportedOperationException(e);
            } catch (NoSuchMethodException e) {
                throw new UnsupportedOperationException(e);
            }
        }
        private static long findBufferAddress() {
            try {
                return UNSAFE.objectFieldOffset(getDeclaredField(Buffer.class, "address")); 
            } catch (Exception e) {
                throw new UnsupportedOperationException(e);
            }
        }
        private static long checkMatrix4f() throws NoSuchFieldException, SecurityException {
            Field f = Matrix4f.class.getDeclaredField("m00");
            long Matrix4f_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 16; i++) {
                int c = i >>> 2;
                int r = i & 3;
                f = Matrix4f.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix4f_m00 + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Matrix4f element offset");
            }
            return Matrix4f_m00;
        }
        private static long checkMatrix4d() throws NoSuchFieldException, SecurityException {
            Field f = Matrix4d.class.getDeclaredField("m00");
            long Matrix4d_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 16; i++) {
                int c = i >>> 2;
                int r = i & 3;
                f = Matrix4d.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix4d_m00 + (i << 3))
                    throw new UnsupportedOperationException("Unexpected Matrix4d element offset");
            }
            return Matrix4d_m00;
        }
        private static long checkMatrix4x3f() throws NoSuchFieldException, SecurityException {
            Field f = Matrix4x3f.class.getDeclaredField("m00");
            long Matrix4x3f_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 12; i++) {
                int c = i / 3;
                int r = i % 3;
                f = Matrix4x3f.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix4x3f_m00 + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Matrix4x3f element offset");
            }
            return Matrix4x3f_m00;
        }
        private static long checkMatrix3f() throws NoSuchFieldException, SecurityException {
            Field f = Matrix3f.class.getDeclaredField("m00");
            long Matrix3f_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 9; i++) {
                int c = i / 3;
                int r = i % 3;
                f = Matrix3f.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix3f_m00 + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Matrix3f element offset");
            }
            return Matrix3f_m00;
        }
        private static long checkMatrix3d() throws NoSuchFieldException, SecurityException {
            Field f = Matrix3d.class.getDeclaredField("m00");
            long Matrix3d_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 9; i++) {
                int c = i / 3;
                int r = i % 3;
                f = Matrix3d.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix3d_m00 + (i << 3))
                    throw new UnsupportedOperationException("Unexpected Matrix3d element offset");
            }
            return Matrix3d_m00;
        }
        private static long checkMatrix3x2f() throws NoSuchFieldException, SecurityException {
            Field f = Matrix3x2f.class.getDeclaredField("m00");
            long Matrix3x2f_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 6; i++) {
                int c = i / 2;
                int r = i % 2;
                f = Matrix3x2f.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix3x2f_m00 + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Matrix3x2f element offset");
            }
            return Matrix3x2f_m00;
        }
        private static long checkMatrix2f() throws NoSuchFieldException, SecurityException {
            Field f = Matrix2f.class.getDeclaredField("m00");
            long Matrix2f_m00 = UNSAFE.objectFieldOffset(f);
            for (int i = 1; i < 4; i++) {
                int c = i / 2;
                int r = i % 2;
                f = Matrix2f.class.getDeclaredField("m" + c + r);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Matrix2f_m00 + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Matrix2f element offset");
            }
            return Matrix2f_m00;
        }
        private static long checkVector4f() throws NoSuchFieldException, SecurityException {
            Field f = Vector4f.class.getDeclaredField("x");
            long Vector4f_x = UNSAFE.objectFieldOffset(f);
            String[] names = {"y", "z", "w"};
            for (int i = 1; i < 4; i++) {
                f = Vector4f.class.getDeclaredField(names[i-1]);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Vector4f_x + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Vector4f element offset");
            }
            return Vector4f_x;
        }
        private static long checkVector4i() throws NoSuchFieldException, SecurityException {
            Field f = Vector4i.class.getDeclaredField("x");
            long Vector4i_x = UNSAFE.objectFieldOffset(f);
            String[] names = {"y", "z", "w"};
            for (int i = 1; i < 4; i++) {
                f = Vector4i.class.getDeclaredField(names[i-1]);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Vector4i_x + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Vector4i element offset");
            }
            return Vector4i_x;
        }
        private static long checkVector3f() throws NoSuchFieldException, SecurityException {
            Field f = Vector3f.class.getDeclaredField("x");
            long Vector3f_x = UNSAFE.objectFieldOffset(f);
            String[] names = {"y", "z"};
            for (int i = 1; i < 3; i++) {
                f = Vector3f.class.getDeclaredField(names[i-1]);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Vector3f_x + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Vector3f element offset");
            }
            return Vector3f_x;
        }
        private static long checkVector3i() throws NoSuchFieldException, SecurityException {
            Field f = Vector3i.class.getDeclaredField("x");
            long Vector3i_x = UNSAFE.objectFieldOffset(f);
            String[] names = {"y", "z"};
            for (int i = 1; i < 3; i++) {
                f = Vector3i.class.getDeclaredField(names[i-1]);
                long offset = UNSAFE.objectFieldOffset(f);
                if (offset != Vector3i_x + (i << 2))
                    throw new UnsupportedOperationException("Unexpected Vector3i element offset");
            }
            return Vector3i_x;
        }
        private static long checkVector2f() throws NoSuchFieldException, SecurityException {
            Field f = Vector2f.class.getDeclaredField("x");
            long Vector2f_x = UNSAFE.objectFieldOffset(f);
            f = Vector2f.class.getDeclaredField("y");
            long offset = UNSAFE.objectFieldOffset(f);
            if (offset != Vector2f_x + (1 << 2))
                throw new UnsupportedOperationException("Unexpected Vector2f element offset");
            return Vector2f_x;
        }
        private static long checkVector2i() throws NoSuchFieldException, SecurityException {
            Field f = Vector2i.class.getDeclaredField("x");
            long Vector2i_x = UNSAFE.objectFieldOffset(f);
            f = Vector2i.class.getDeclaredField("y");
            long offset = UNSAFE.objectFieldOffset(f);
            if (offset != Vector2i_x + (1 << 2))
                throw new UnsupportedOperationException("Unexpected Vector2i element offset");
            return Vector2i_x;
        }
        private static java.lang.reflect.Field getDeclaredField(Class root, String fieldName) throws NoSuchFieldException {
            Class type = root;
            do {
                try {
                    java.lang.reflect.Field field = type.getDeclaredField(fieldName);
                    return field;
                } catch (NoSuchFieldException e) {
                    type = type.getSuperclass();
                } catch (SecurityException e) {
                    type = type.getSuperclass();
                }
            } while (type != null);
            throw new NoSuchFieldException(fieldName + " does not exist in " + root.getName() + " or any of its superclasses."); 
        }
        public static sun.misc.Unsafe getUnsafeInstance() throws SecurityException {
            java.lang.reflect.Field[] fields = sun.misc.Unsafe.class.getDeclaredFields();
            for (int i = 0; i < fields.length; i++) {
                java.lang.reflect.Field field = fields[i];
                if (!field.getType().equals(sun.misc.Unsafe.class))
                    continue;
                int modifiers = field.getModifiers();
                if (!(java.lang.reflect.Modifier.isStatic(modifiers) && java.lang.reflect.Modifier.isFinal(modifiers)))
                    continue;
                field.setAccessible(true);
                try {
                    return (sun.misc.Unsafe) field.get(null);
                } catch (IllegalAccessException e) {
                }
                break;
            }
            throw new UnsupportedOperationException();
        }
        public static void put(Matrix4f m, long destAddr) {
            for (int i = 0; i < 8; i++) {
                UNSAFE.putLong(null, destAddr + (i << 3), UNSAFE.getLong(m, Matrix4f_m00 + (i << 3)));
            }
        }
        public static void put4x3(Matrix4f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            for (int i = 0; i < 4; i++) {
                u.putLong(null, destAddr + 12 * i, u.getLong(m, Matrix4f_m00 + (i << 4)));
            }
            u.putFloat(null, destAddr +  8, m.m02());
            u.putFloat(null, destAddr + 20, m.m12());
            u.putFloat(null, destAddr + 32, m.m22());
            u.putFloat(null, destAddr + 44, m.m32());
        }
        public static void put3x4(Matrix4f m, long destAddr) {
            for (int i = 0; i < 6; i++) {
                UNSAFE.putLong(null, destAddr + (i << 3), UNSAFE.getLong(m, Matrix4f_m00 + (i << 3)));
            }
        }
        public static void put(Matrix4x3f m, long destAddr) {
            for (int i = 0; i < 6; i++) {
                UNSAFE.putLong(null, destAddr + (i << 3), UNSAFE.getLong(m, Matrix4x3f_m00 + (i << 3)));
            }
        }
        public static void put4x4(Matrix4x3f m, long destAddr) {
            for (int i = 0; i < 4; i++) {
                UNSAFE.putLong(null, destAddr + (i << 4), UNSAFE.getLong(m, Matrix4x3f_m00 + 12 * i));
                long lng = UNSAFE.getInt(m, Matrix4x3f_m00 + 8 + 12 * i) & 0xFFFFFFFFL;
                UNSAFE.putLong(null, destAddr + 8 + (i << 4), lng);
            }
            UNSAFE.putFloat(null, destAddr + 60, 1.0f);
        }
        public static void put3x4(Matrix4x3f m, long destAddr) {
            for (int i = 0; i < 3; i++) {
                UNSAFE.putLong(null, destAddr + (i << 4), UNSAFE.getLong(m, Matrix4x3f_m00 + 12 * i));
                UNSAFE.putFloat(null, destAddr + (i << 4) + 8, UNSAFE.getFloat(m, Matrix4x3f_m00 + 8 + 12 * i));
                UNSAFE.putFloat(null, destAddr + (i << 4) + 12, 0.0f);
            }
        }
        public static void put4x4(Matrix4x3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,       m.m00());
            u.putDouble(null, destAddr + 8,   m.m01());
            u.putDouble(null, destAddr + 16,  m.m02());
            u.putDouble(null, destAddr + 24,  0.0);
            u.putDouble(null, destAddr + 32,  m.m10());
            u.putDouble(null, destAddr + 40,  m.m11());
            u.putDouble(null, destAddr + 48,  m.m12());
            u.putDouble(null, destAddr + 56,  0.0);
            u.putDouble(null, destAddr + 64,  m.m20());
            u.putDouble(null, destAddr + 72,  m.m21());
            u.putDouble(null, destAddr + 80,  m.m22());
            u.putDouble(null, destAddr + 88,  0.0);
            u.putDouble(null, destAddr + 96,  m.m30());
            u.putDouble(null, destAddr + 104, m.m31());
            u.putDouble(null, destAddr + 112, m.m32());
            u.putDouble(null, destAddr + 120, 1.0);
        }
        public static void put4x4(Matrix3x2f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putLong(null, destAddr,    u.getLong(m, Matrix3x2f_m00));
            u.putLong(null, destAddr+8,  0L);
            u.putLong(null, destAddr+16, u.getLong(m, Matrix3x2f_m00+8));
            u.putLong(null, destAddr+24, 0L);
            u.putLong(null, destAddr+32, 0L);
            u.putLong(null, destAddr+40, 0x3F800000L);
            u.putLong(null, destAddr+48, u.getLong(m, Matrix3x2f_m00+16));
            u.putLong(null, destAddr+56, 0x3F80000000000000L);
        }
        public static void put4x4(Matrix3x2d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,       m.m00());
            u.putDouble(null, destAddr + 8,   m.m01());
            u.putDouble(null, destAddr + 16,  0.0);
            u.putDouble(null, destAddr + 24,  0.0);
            u.putDouble(null, destAddr + 32,  m.m10());
            u.putDouble(null, destAddr + 40,  m.m11());
            u.putDouble(null, destAddr + 48,  0.0);
            u.putDouble(null, destAddr + 56,  0.0);
            u.putDouble(null, destAddr + 64,  0.0);
            u.putDouble(null, destAddr + 72,  0.0);
            u.putDouble(null, destAddr + 80,  1.0);
            u.putDouble(null, destAddr + 88,  0.0);
            u.putDouble(null, destAddr + 96,  m.m20());
            u.putDouble(null, destAddr + 104, m.m21());
            u.putDouble(null, destAddr + 112, 0.0);
            u.putDouble(null, destAddr + 120, 1.0);
        }
        public static void put3x3(Matrix3x2f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putLong( null, destAddr,    u.getLong(m, Matrix3x2f_m00));
            u.putInt(  null, destAddr+8,  0);
            u.putLong( null, destAddr+12, u.getLong(m, Matrix3x2f_m00+8));
            u.putInt(  null, destAddr+20, 0);
            u.putLong( null, destAddr+24, u.getLong(m, Matrix3x2f_m00+16));
            u.putFloat(null, destAddr+32, 1.0f);
        }
        public static void put3x3(Matrix3x2d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m01());
            u.putDouble(null, destAddr + 16, 0.0);
            u.putDouble(null, destAddr + 24, m.m10());
            u.putDouble(null, destAddr + 32, m.m11());
            u.putDouble(null, destAddr + 40, 0.0);
            u.putDouble(null, destAddr + 48, m.m20());
            u.putDouble(null, destAddr + 56, m.m21());
            u.putDouble(null, destAddr + 64, 1.0);
        }
        public static void putTransposed(Matrix4f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      m.m00());
            u.putFloat(null, destAddr + 4,  m.m10());
            u.putFloat(null, destAddr + 8,  m.m20());
            u.putFloat(null, destAddr + 12, m.m30());
            u.putFloat(null, destAddr + 16, m.m01());
            u.putFloat(null, destAddr + 20, m.m11());
            u.putFloat(null, destAddr + 24, m.m21());
            u.putFloat(null, destAddr + 28, m.m31());
            u.putFloat(null, destAddr + 32, m.m02());
            u.putFloat(null, destAddr + 36, m.m12());
            u.putFloat(null, destAddr + 40, m.m22());
            u.putFloat(null, destAddr + 44, m.m32());
            u.putFloat(null, destAddr + 48, m.m03());
            u.putFloat(null, destAddr + 52, m.m13());
            u.putFloat(null, destAddr + 56, m.m23());
            u.putFloat(null, destAddr + 60, m.m33());
        }
        public static void put4x3Transposed(Matrix4f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      m.m00());
            u.putFloat(null, destAddr + 4,  m.m10());
            u.putFloat(null, destAddr + 8,  m.m20());
            u.putFloat(null, destAddr + 12, m.m30());
            u.putFloat(null, destAddr + 16, m.m01());
            u.putFloat(null, destAddr + 20, m.m11());
            u.putFloat(null, destAddr + 24, m.m21());
            u.putFloat(null, destAddr + 28, m.m31());
            u.putFloat(null, destAddr + 32, m.m02());
            u.putFloat(null, destAddr + 36, m.m12());
            u.putFloat(null, destAddr + 40, m.m22());
            u.putFloat(null, destAddr + 44, m.m32());
        }
        public static void putTransposed(Matrix4x3f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      m.m00());
            u.putFloat(null, destAddr + 4,  m.m10());
            u.putFloat(null, destAddr + 8,  m.m20());
            u.putFloat(null, destAddr + 12, m.m30());
            u.putFloat(null, destAddr + 16, m.m01());
            u.putFloat(null, destAddr + 20, m.m11());
            u.putFloat(null, destAddr + 24, m.m21());
            u.putFloat(null, destAddr + 28, m.m31());
            u.putFloat(null, destAddr + 32, m.m02());
            u.putFloat(null, destAddr + 36, m.m12());
            u.putFloat(null, destAddr + 40, m.m22());
            u.putFloat(null, destAddr + 44, m.m32());
        }
        public static void putTransposed(Matrix3f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      m.m00());
            u.putFloat(null, destAddr + 4,  m.m10());
            u.putFloat(null, destAddr + 8,  m.m20());
            u.putFloat(null, destAddr + 12, m.m01());
            u.putFloat(null, destAddr + 16, m.m11());
            u.putFloat(null, destAddr + 20, m.m21());
            u.putFloat(null, destAddr + 24, m.m02());
            u.putFloat(null, destAddr + 28, m.m12());
            u.putFloat(null, destAddr + 32, m.m22());
        }
        public static void putTransposed(Matrix3x2f m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      m.m00());
            u.putFloat(null, destAddr + 4,  m.m10());
            u.putFloat(null, destAddr + 8,  m.m20());
            u.putFloat(null, destAddr + 12, m.m01());
            u.putFloat(null, destAddr + 16, m.m11());
            u.putFloat(null, destAddr + 20, m.m21());
        }
        public static void putTransposed(Matrix2f m, long destAddr) {
            UNSAFE.putFloat(null, destAddr,      m.m00());
            UNSAFE.putFloat(null, destAddr + 4,  m.m10());
            UNSAFE.putFloat(null, destAddr + 8,  m.m01());
            UNSAFE.putFloat(null, destAddr + 12, m.m11());
        }
        public static void put(Matrix4d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,       m.m00());
            u.putDouble(null, destAddr + 8,   m.m01());
            u.putDouble(null, destAddr + 16,  m.m02());
            u.putDouble(null, destAddr + 24,  m.m03());
            u.putDouble(null, destAddr + 32,  m.m10());
            u.putDouble(null, destAddr + 40,  m.m11());
            u.putDouble(null, destAddr + 48,  m.m12());
            u.putDouble(null, destAddr + 56,  m.m13());
            u.putDouble(null, destAddr + 64,  m.m20());
            u.putDouble(null, destAddr + 72,  m.m21());
            u.putDouble(null, destAddr + 80,  m.m22());
            u.putDouble(null, destAddr + 88,  m.m23());
            u.putDouble(null, destAddr + 96,  m.m30());
            u.putDouble(null, destAddr + 104, m.m31());
            u.putDouble(null, destAddr + 112, m.m32());
            u.putDouble(null, destAddr + 120, m.m33());
        }
        public static void put(Matrix4x3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m01());
            u.putDouble(null, destAddr + 16, m.m02());
            u.putDouble(null, destAddr + 24, m.m10());
            u.putDouble(null, destAddr + 32, m.m11());
            u.putDouble(null, destAddr + 40, m.m12());
            u.putDouble(null, destAddr + 48, m.m20());
            u.putDouble(null, destAddr + 56, m.m21());
            u.putDouble(null, destAddr + 64, m.m22());
            u.putDouble(null, destAddr + 72, m.m30());
            u.putDouble(null, destAddr + 80, m.m31());
            u.putDouble(null, destAddr + 88, m.m32());
        }
        public static void putTransposed(Matrix4d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,       m.m00());
            u.putDouble(null, destAddr + 8,   m.m10());
            u.putDouble(null, destAddr + 16,  m.m20());
            u.putDouble(null, destAddr + 24,  m.m30());
            u.putDouble(null, destAddr + 32,  m.m01());
            u.putDouble(null, destAddr + 40,  m.m11());
            u.putDouble(null, destAddr + 48,  m.m21());
            u.putDouble(null, destAddr + 56,  m.m31());
            u.putDouble(null, destAddr + 64,  m.m02());
            u.putDouble(null, destAddr + 72,  m.m12());
            u.putDouble(null, destAddr + 80,  m.m22());
            u.putDouble(null, destAddr + 88,  m.m32());
            u.putDouble(null, destAddr + 96,  m.m03());
            u.putDouble(null, destAddr + 104, m.m13());
            u.putDouble(null, destAddr + 112, m.m23());
            u.putDouble(null, destAddr + 120, m.m33());
        }
        public static void putfTransposed(Matrix4d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m10());
            u.putFloat(null, destAddr + 8,  (float)m.m20());
            u.putFloat(null, destAddr + 12, (float)m.m30());
            u.putFloat(null, destAddr + 16, (float)m.m01());
            u.putFloat(null, destAddr + 20, (float)m.m11());
            u.putFloat(null, destAddr + 24, (float)m.m21());
            u.putFloat(null, destAddr + 28, (float)m.m31());
            u.putFloat(null, destAddr + 32, (float)m.m02());
            u.putFloat(null, destAddr + 36, (float)m.m12());
            u.putFloat(null, destAddr + 40, (float)m.m22());
            u.putFloat(null, destAddr + 44, (float)m.m32());
            u.putFloat(null, destAddr + 48, (float)m.m03());
            u.putFloat(null, destAddr + 52, (float)m.m13());
            u.putFloat(null, destAddr + 56, (float)m.m23());
            u.putFloat(null, destAddr + 60, (float)m.m33());
        }
        public static void put4x3Transposed(Matrix4d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m10());
            u.putDouble(null, destAddr + 16, m.m20());
            u.putDouble(null, destAddr + 24, m.m30());
            u.putDouble(null, destAddr + 32, m.m01());
            u.putDouble(null, destAddr + 40, m.m11());
            u.putDouble(null, destAddr + 48, m.m21());
            u.putDouble(null, destAddr + 56, m.m31());
            u.putDouble(null, destAddr + 64, m.m02());
            u.putDouble(null, destAddr + 72, m.m12());
            u.putDouble(null, destAddr + 80, m.m22());
            u.putDouble(null, destAddr + 88, m.m32());
        }
        public static void putTransposed(Matrix4x3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m10());
            u.putDouble(null, destAddr + 16, m.m20());
            u.putDouble(null, destAddr + 24, m.m30());
            u.putDouble(null, destAddr + 32, m.m01());
            u.putDouble(null, destAddr + 40, m.m11());
            u.putDouble(null, destAddr + 48, m.m21());
            u.putDouble(null, destAddr + 56, m.m31());
            u.putDouble(null, destAddr + 64, m.m02());
            u.putDouble(null, destAddr + 72, m.m12());
            u.putDouble(null, destAddr + 80, m.m22());
            u.putDouble(null, destAddr + 88, m.m32());
        }
        public static void putTransposed(Matrix3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m10());
            u.putDouble(null, destAddr + 16, m.m20());
            u.putDouble(null, destAddr + 24, m.m01());
            u.putDouble(null, destAddr + 32, m.m11());
            u.putDouble(null, destAddr + 40, m.m21());
            u.putDouble(null, destAddr + 48, m.m02());
            u.putDouble(null, destAddr + 56, m.m12());
            u.putDouble(null, destAddr + 64, m.m22());
        }
        public static void putTransposed(Matrix3x2d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m10());
            u.putDouble(null, destAddr + 16, m.m20());
            u.putDouble(null, destAddr + 24, m.m01());
            u.putDouble(null, destAddr + 32, m.m11());
            u.putDouble(null, destAddr + 40, m.m21());
        }
        public static void putTransposed(Matrix2d m, long destAddr) {
            UNSAFE.putDouble(null, destAddr,      m.m00());
            UNSAFE.putDouble(null, destAddr + 8,  m.m10());
            UNSAFE.putDouble(null, destAddr + 16, m.m10());
            UNSAFE.putDouble(null, destAddr + 24, m.m10());
        }
        public static void putfTransposed(Matrix4x3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m10());
            u.putFloat(null, destAddr + 8,  (float)m.m20());
            u.putFloat(null, destAddr + 12, (float)m.m30());
            u.putFloat(null, destAddr + 16, (float)m.m01());
            u.putFloat(null, destAddr + 20, (float)m.m11());
            u.putFloat(null, destAddr + 24, (float)m.m21());
            u.putFloat(null, destAddr + 28, (float)m.m31());
            u.putFloat(null, destAddr + 32, (float)m.m02());
            u.putFloat(null, destAddr + 36, (float)m.m12());
            u.putFloat(null, destAddr + 40, (float)m.m22());
            u.putFloat(null, destAddr + 44, (float)m.m32());
        }
        public static void putfTransposed(Matrix3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m10());
            u.putFloat(null, destAddr + 8,  (float)m.m20());
            u.putFloat(null, destAddr + 12, (float)m.m01());
            u.putFloat(null, destAddr + 16, (float)m.m11());
            u.putFloat(null, destAddr + 20, (float)m.m21());
            u.putFloat(null, destAddr + 24, (float)m.m02());
            u.putFloat(null, destAddr + 28, (float)m.m12());
            u.putFloat(null, destAddr + 32, (float)m.m22());
        }
        public static void putfTransposed(Matrix3x2d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m10());
            u.putFloat(null, destAddr + 8,  (float)m.m20());
            u.putFloat(null, destAddr + 12, (float)m.m01());
            u.putFloat(null, destAddr + 16, (float)m.m11());
            u.putFloat(null, destAddr + 20, (float)m.m21());
        }
        public static void putfTransposed(Matrix2d m, long destAddr) {
            UNSAFE.putFloat(null, destAddr,      (float)m.m00());
            UNSAFE.putFloat(null, destAddr + 4,  (float)m.m00());
            UNSAFE.putFloat(null, destAddr + 8,  (float)m.m00());
            UNSAFE.putFloat(null, destAddr + 12, (float)m.m00());
        }
        public static void putf(Matrix4d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m01());
            u.putFloat(null, destAddr + 8,  (float)m.m02());
            u.putFloat(null, destAddr + 12, (float)m.m03());
            u.putFloat(null, destAddr + 16, (float)m.m10());
            u.putFloat(null, destAddr + 20, (float)m.m11());
            u.putFloat(null, destAddr + 24, (float)m.m12());
            u.putFloat(null, destAddr + 28, (float)m.m13());
            u.putFloat(null, destAddr + 32, (float)m.m20());
            u.putFloat(null, destAddr + 36, (float)m.m21());
            u.putFloat(null, destAddr + 40, (float)m.m22());
            u.putFloat(null, destAddr + 44, (float)m.m23());
            u.putFloat(null, destAddr + 48, (float)m.m30());
            u.putFloat(null, destAddr + 52, (float)m.m31());
            u.putFloat(null, destAddr + 56, (float)m.m32());
            u.putFloat(null, destAddr + 60, (float)m.m33());
        }
        public static void putf(Matrix4x3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m01());
            u.putFloat(null, destAddr + 8,  (float)m.m02());
            u.putFloat(null, destAddr + 12, (float)m.m10());
            u.putFloat(null, destAddr + 16, (float)m.m11());
            u.putFloat(null, destAddr + 20, (float)m.m12());
            u.putFloat(null, destAddr + 24, (float)m.m20());
            u.putFloat(null, destAddr + 28, (float)m.m21());
            u.putFloat(null, destAddr + 32, (float)m.m22());
            u.putFloat(null, destAddr + 36, (float)m.m30());
            u.putFloat(null, destAddr + 40, (float)m.m31());
            u.putFloat(null, destAddr + 44, (float)m.m32());
        }
        public static void put(Matrix3f m, long destAddr) {
            for (int i = 0; i < 4; i++) {
                UNSAFE.putLong(null, destAddr + (i << 3), UNSAFE.getLong(m, Matrix3f_m00 + (i << 3)));
            }
            UNSAFE.putFloat(null, destAddr + 32, m.m22());
        }
        public static void put3x4(Matrix3f m, long destAddr) {
            for (int i = 0; i < 3; i++) {
                UNSAFE.putLong(null, destAddr + (i << 4), UNSAFE.getLong(m, Matrix3f_m00 + 12 * i));
                UNSAFE.putFloat(null, destAddr + (i << 4) + 8, UNSAFE.getFloat(m, Matrix3f_m00 + 8 + 12 * i));
                UNSAFE.putFloat(null, destAddr + (i << 4) + 12, 0.0f);
            }
        }
        public static void put(Matrix3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m01());
            u.putDouble(null, destAddr + 16, m.m02());
            u.putDouble(null, destAddr + 24, m.m10());
            u.putDouble(null, destAddr + 32, m.m11());
            u.putDouble(null, destAddr + 40, m.m12());
            u.putDouble(null, destAddr + 48, m.m20());
            u.putDouble(null, destAddr + 56, m.m21());
            u.putDouble(null, destAddr + 64, m.m22());
        }
        public static void put(Matrix3x2f m, long destAddr) {
            for (int i = 0; i < 3; i++) {
                UNSAFE.putLong(null, destAddr + (i << 3), UNSAFE.getLong(m, Matrix3x2f_m00 + (i << 3)));
            }
        }
        public static void put(Matrix3x2d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putDouble(null, destAddr,      m.m00());
            u.putDouble(null, destAddr + 8,  m.m01());
            u.putDouble(null, destAddr + 16, m.m10());
            u.putDouble(null, destAddr + 24, m.m11());
            u.putDouble(null, destAddr + 32, m.m20());
            u.putDouble(null, destAddr + 40, m.m21());
        }
        public static void putf(Matrix3d m, long destAddr) {
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, destAddr,      (float)m.m00());
            u.putFloat(null, destAddr + 4,  (float)m.m01());
            u.putFloat(null, destAddr + 8,  (float)m.m02());
            u.putFloat(null, destAddr + 12, (float)m.m10());
            u.putFloat(null, destAddr + 16, (float)m.m11());
            u.putFloat(null, destAddr + 20, (float)m.m12());
            u.putFloat(null, destAddr + 24, (float)m.m20());
            u.putFloat(null, destAddr + 28, (float)m.m21());
            u.putFloat(null, destAddr + 32, (float)m.m22());
        }
        public static void put(Matrix2f m, long destAddr) {
            UNSAFE.putLong(null, destAddr,     UNSAFE.getLong(m, Matrix2f_m00));
            UNSAFE.putLong(null, destAddr + 8, UNSAFE.getLong(m, Matrix2f_m00 + 8));
        }
        public static void put(Matrix2d m, long destAddr) {
            UNSAFE.putDouble(null, destAddr,      m.m00());
            UNSAFE.putDouble(null, destAddr + 8,  m.m01());
            UNSAFE.putDouble(null, destAddr + 16, m.m10());
            UNSAFE.putDouble(null, destAddr + 24, m.m11());
        }
        public static void putf(Matrix2d m, long destAddr) {
            UNSAFE.putFloat(null, destAddr,      (float)m.m00());
            UNSAFE.putFloat(null, destAddr + 4,  (float)m.m01());
            UNSAFE.putFloat(null, destAddr + 8,  (float)m.m10());
            UNSAFE.putFloat(null, destAddr + 12, (float)m.m11());
        }
        public static void put(Vector4d src, long destAddr) {
            UNSAFE.putDouble(null, destAddr,    src.x);
            UNSAFE.putDouble(null, destAddr+8,  src.y);
            UNSAFE.putDouble(null, destAddr+16, src.z);
            UNSAFE.putDouble(null, destAddr+24, src.w);
        }
        public static void putf(Vector4d src, long destAddr) {
            UNSAFE.putFloat(null, destAddr,    (float) src.x);
            UNSAFE.putFloat(null, destAddr+4,  (float) src.y);
            UNSAFE.putFloat(null, destAddr+8,  (float) src.z);
            UNSAFE.putFloat(null, destAddr+12, (float) src.w);
        }
        public static void put(Vector4f src, long destAddr) {
            UNSAFE.putLong(null, destAddr, UNSAFE.getLong(src, Vector4f_x));
            UNSAFE.putLong(null, destAddr+8, UNSAFE.getLong(src, Vector4f_x+8));
        }
        public static void put(Vector4i src, long destAddr) {
            UNSAFE.putLong(null, destAddr, UNSAFE.getLong(src, Vector4i_x));
            UNSAFE.putLong(null, destAddr+8, UNSAFE.getLong(src, Vector4i_x+8));
        }
        public static void put(Vector4L src, long destAddr) {
            UNSAFE.putLong(null, destAddr, src.x);
            UNSAFE.putLong(null, destAddr+8, src.y);
            UNSAFE.putLong(null, destAddr+16, src.z);
            UNSAFE.putLong(null, destAddr+24, src.w);
        }
        public static void put(Vector3f src, long destAddr) {
            UNSAFE.putLong(null, destAddr, UNSAFE.getLong(src, Vector3f_x));
            UNSAFE.putFloat(null, destAddr+8, src.z);
        }
        public static void put(Vector3d src, long destAddr) {
            UNSAFE.putDouble(null, destAddr,    src.x);
            UNSAFE.putDouble(null, destAddr+8,  src.y);
            UNSAFE.putDouble(null, destAddr+16, src.z);
        }
        public static void putf(Vector3d src, long destAddr) {
            UNSAFE.putFloat(null, destAddr,   (float) src.x);
            UNSAFE.putFloat(null, destAddr+4, (float) src.y);
            UNSAFE.putFloat(null, destAddr+8, (float) src.z);
        }
        public static void put(Vector3i src, long destAddr) {
            UNSAFE.putLong(null, destAddr, UNSAFE.getLong(src, Vector3i_x));
            UNSAFE.putInt(null, destAddr+8, src.z);
        }
        public static void put(Vector3L src, long destAddr) {
            UNSAFE.putLong(null, destAddr, src.x);
            UNSAFE.putLong(null, destAddr+8, src.y);
            UNSAFE.putLong(null, destAddr+16, src.z);
        }
        public static void put(Vector2f src, long destAddr) {
            UNSAFE.putLong(null, destAddr, UNSAFE.getLong(src, Vector2f_x));
        }
        public static void put(Vector2d src, long destAddr) {
            UNSAFE.putDouble(null, destAddr,   src.x);
            UNSAFE.putDouble(null, destAddr+8, src.y);
        }
        public static void put(Vector2i src, long destAddr) {
            UNSAFE.putLong(null, destAddr, UNSAFE.getLong(src, Vector2i_x));
        }
        public static void put(Vector2L src, long destAddr) {
            UNSAFE.putLong(null, destAddr,   src.x);
            UNSAFE.putLong(null, destAddr+8, src.y);
        }
        public static void get(Matrix4f m, long srcAddr) {
            for (int i = 0; i < 8; i++) {
                UNSAFE.putLong(m, Matrix4f_m00 + (i << 3), UNSAFE.getLong(srcAddr + (i << 3)));
            }
        }
        public static void getTransposed(Matrix4f m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(srcAddr))
             ._m10(u.getFloat(srcAddr + 4))
             ._m20(u.getFloat(srcAddr + 8))
             ._m30(u.getFloat(srcAddr + 12))
             ._m01(u.getFloat(srcAddr + 16))
             ._m11(u.getFloat(srcAddr + 20))
             ._m21(u.getFloat(srcAddr + 24))
             ._m31(u.getFloat(srcAddr + 28))
             ._m02(u.getFloat(srcAddr + 32))
             ._m12(u.getFloat(srcAddr + 36))
             ._m22(u.getFloat(srcAddr + 40))
             ._m32(u.getFloat(srcAddr + 44))
             ._m03(u.getFloat(srcAddr + 48))
             ._m13(u.getFloat(srcAddr + 52))
             ._m23(u.getFloat(srcAddr + 56))
             ._m33(u.getFloat(srcAddr + 60));
        }
        public static void getTransposed(Matrix3f m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(srcAddr))
             ._m10(u.getFloat(srcAddr + 4))
             ._m20(u.getFloat(srcAddr + 8))
             ._m01(u.getFloat(srcAddr + 12))
             ._m11(u.getFloat(srcAddr + 16))
             ._m21(u.getFloat(srcAddr + 20))
             ._m02(u.getFloat(srcAddr + 24))
             ._m12(u.getFloat(srcAddr + 28))
             ._m22(u.getFloat(srcAddr + 32));
        }
        public static void getTransposed(Matrix4x3f m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(srcAddr))
             ._m10(u.getFloat(srcAddr + 4))
             ._m20(u.getFloat(srcAddr + 8))
             ._m30(u.getFloat(srcAddr + 12))
             ._m01(u.getFloat(srcAddr + 16))
             ._m11(u.getFloat(srcAddr + 20))
             ._m21(u.getFloat(srcAddr + 24))
             ._m31(u.getFloat(srcAddr + 28))
             ._m02(u.getFloat(srcAddr + 32))
             ._m12(u.getFloat(srcAddr + 36))
             ._m22(u.getFloat(srcAddr + 40))
             ._m32(u.getFloat(srcAddr + 44));
        }
        public static void getTransposed(Matrix3x2f m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(srcAddr))
             ._m10(u.getFloat(srcAddr + 4))
             ._m20(u.getFloat(srcAddr + 8))
             ._m01(u.getFloat(srcAddr + 12))
             ._m11(u.getFloat(srcAddr + 16))
             ._m21(u.getFloat(srcAddr + 20));
        }
        public static void getTransposed(Matrix2f m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(srcAddr))
             ._m10(u.getFloat(srcAddr + 4))
             ._m01(u.getFloat(srcAddr + 8))
             ._m11(u.getFloat(srcAddr + 12));
        }
        public static void getTransposed(Matrix2d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(srcAddr))
             ._m10(u.getDouble(srcAddr + 8))
             ._m01(u.getDouble(srcAddr + 16))
             ._m11(u.getDouble(srcAddr + 24));
        }
        public static void getTransposed(Matrix4x3d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(srcAddr))
             ._m10(u.getDouble(srcAddr + 8))
             ._m20(u.getDouble(srcAddr + 16))
             ._m30(u.getDouble(srcAddr + 24))
             ._m01(u.getDouble(srcAddr + 32))
             ._m11(u.getDouble(srcAddr + 40))
             ._m21(u.getDouble(srcAddr + 48))
             ._m31(u.getDouble(srcAddr + 56))
             ._m02(u.getDouble(srcAddr + 64))
             ._m12(u.getDouble(srcAddr + 72))
             ._m22(u.getDouble(srcAddr + 80))
             ._m32(u.getDouble(srcAddr + 88));
        }
        public static void getTransposed(Matrix3x2d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(srcAddr))
             ._m10(u.getDouble(srcAddr + 8))
             ._m20(u.getDouble(srcAddr + 16))
             ._m01(u.getDouble(srcAddr + 24))
             ._m11(u.getDouble(srcAddr + 32))
             ._m21(u.getDouble(srcAddr + 40));
        }
        public static void getTransposed(Matrix3d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(srcAddr))
             ._m10(u.getDouble(srcAddr + 8))
             ._m20(u.getDouble(srcAddr + 16))
             ._m01(u.getDouble(srcAddr + 24))
             ._m11(u.getDouble(srcAddr + 32))
             ._m21(u.getDouble(srcAddr + 40))
             ._m02(u.getDouble(srcAddr + 48))
             ._m12(u.getDouble(srcAddr + 56))
             ._m22(u.getDouble(srcAddr + 64));
        }
        public static void getTransposed(Matrix4d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(srcAddr))
             ._m10(u.getDouble(srcAddr + 8))
             ._m20(u.getDouble(srcAddr + 16))
             ._m30(u.getDouble(srcAddr + 24))
             ._m01(u.getDouble(srcAddr + 32))
             ._m11(u.getDouble(srcAddr + 40))
             ._m21(u.getDouble(srcAddr + 48))
             ._m31(u.getDouble(srcAddr + 56))
             ._m02(u.getDouble(srcAddr + 64))
             ._m12(u.getDouble(srcAddr + 72))
             ._m22(u.getDouble(srcAddr + 80))
             ._m32(u.getDouble(srcAddr + 88))
             ._m03(u.getDouble(srcAddr + 96))
             ._m13(u.getDouble(srcAddr + 104))
             ._m23(u.getDouble(srcAddr + 112))
             ._m33(u.getDouble(srcAddr + 120));
        }
        public static void get(Matrix4x3f m, long srcAddr) {
            for (int i = 0; i < 6; i++) {
                UNSAFE.putLong(m, Matrix4x3f_m00 + (i << 3), UNSAFE.getLong(srcAddr + (i << 3)));
            }
        }
        public static void get(Matrix4d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(null, srcAddr))
            ._m01(u.getDouble(null, srcAddr+8))
            ._m02(u.getDouble(null, srcAddr+16))
            ._m03(u.getDouble(null, srcAddr+24))
            ._m10(u.getDouble(null, srcAddr+32))
            ._m11(u.getDouble(null, srcAddr+40))
            ._m12(u.getDouble(null, srcAddr+48))
            ._m13(u.getDouble(null, srcAddr+56))
            ._m20(u.getDouble(null, srcAddr+64))
            ._m21(u.getDouble(null, srcAddr+72))
            ._m22(u.getDouble(null, srcAddr+80))
            ._m23(u.getDouble(null, srcAddr+88))
            ._m30(u.getDouble(null, srcAddr+96))
            ._m31(u.getDouble(null, srcAddr+104))
            ._m32(u.getDouble(null, srcAddr+112))
            ._m33(u.getDouble(null, srcAddr+120));
        }
        public static void get(Matrix4x3d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(null, srcAddr))
            ._m01(u.getDouble(null, srcAddr+8))
            ._m02(u.getDouble(null, srcAddr+16))
            ._m10(u.getDouble(null, srcAddr+24))
            ._m11(u.getDouble(null, srcAddr+32))
            ._m12(u.getDouble(null, srcAddr+40))
            ._m20(u.getDouble(null, srcAddr+48))
            ._m21(u.getDouble(null, srcAddr+56))
            ._m22(u.getDouble(null, srcAddr+64))
            ._m30(u.getDouble(null, srcAddr+72))
            ._m31(u.getDouble(null, srcAddr+80))
            ._m32(u.getDouble(null, srcAddr+88));
        }
        public static void getf(Matrix4d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(null, srcAddr))
            ._m01(u.getFloat(null, srcAddr+4))
            ._m02(u.getFloat(null, srcAddr+8))
            ._m03(u.getFloat(null, srcAddr+12))
            ._m10(u.getFloat(null, srcAddr+16))
            ._m11(u.getFloat(null, srcAddr+20))
            ._m12(u.getFloat(null, srcAddr+24))
            ._m13(u.getFloat(null, srcAddr+28))
            ._m20(u.getFloat(null, srcAddr+32))
            ._m21(u.getFloat(null, srcAddr+36))
            ._m22(u.getFloat(null, srcAddr+40))
            ._m23(u.getFloat(null, srcAddr+44))
            ._m30(u.getFloat(null, srcAddr+48))
            ._m31(u.getFloat(null, srcAddr+52))
            ._m32(u.getFloat(null, srcAddr+56))
            ._m33(u.getFloat(null, srcAddr+60));
        }
        public static void getf(Matrix4x3d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(null, srcAddr))
            ._m01(u.getFloat(null, srcAddr+4))
            ._m02(u.getFloat(null, srcAddr+8))
            ._m10(u.getFloat(null, srcAddr+12))
            ._m11(u.getFloat(null, srcAddr+16))
            ._m12(u.getFloat(null, srcAddr+20))
            ._m20(u.getFloat(null, srcAddr+24))
            ._m21(u.getFloat(null, srcAddr+28))
            ._m22(u.getFloat(null, srcAddr+32))
            ._m30(u.getFloat(null, srcAddr+36))
            ._m31(u.getFloat(null, srcAddr+40))
            ._m32(u.getFloat(null, srcAddr+44));
        }
        public static void get(Matrix3f m, long srcAddr) {
            for (int i = 0; i < 4; i++) {
                UNSAFE.putLong(m, Matrix3f_m00 + (i << 3), UNSAFE.getLong(null, srcAddr + (i << 3)));
            }
            m._m22(UNSAFE.getFloat(null, srcAddr+32));
        }
        public static void get(Matrix3d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(null, srcAddr))
            ._m01(u.getDouble(null, srcAddr+8))
            ._m02(u.getDouble(null, srcAddr+16))
            ._m10(u.getDouble(null, srcAddr+24))
            ._m11(u.getDouble(null, srcAddr+32))
            ._m12(u.getDouble(null, srcAddr+40))
            ._m20(u.getDouble(null, srcAddr+48))
            ._m21(u.getDouble(null, srcAddr+56))
            ._m22(u.getDouble(null, srcAddr+64));
        }
        public static void get(Matrix3x2f m, long srcAddr) {
            for (int i = 0; i < 3; i++) {
                UNSAFE.putLong(m, Matrix3x2f_m00 + (i << 3), UNSAFE.getLong(null, srcAddr + (i << 3)));
            }
        }
        public static void get(Matrix3x2d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getDouble(null, srcAddr))
            ._m01(u.getDouble(null, srcAddr+8))
            ._m10(u.getDouble(null, srcAddr+16))
            ._m11(u.getDouble(null, srcAddr+24))
            ._m20(u.getDouble(null, srcAddr+32))
            ._m21(u.getDouble(null, srcAddr+40));
        }
        public static void getf(Matrix3d m, long srcAddr) {
            sun.misc.Unsafe u = UNSAFE;
            m._m00(u.getFloat(null, srcAddr))
            ._m01(u.getFloat(null, srcAddr+4))
            ._m02(u.getFloat(null, srcAddr+8))
            ._m10(u.getFloat(null, srcAddr+12))
            ._m11(u.getFloat(null, srcAddr+16))
            ._m12(u.getFloat(null, srcAddr+20))
            ._m20(u.getFloat(null, srcAddr+24))
            ._m21(u.getFloat(null, srcAddr+28))
            ._m22(u.getFloat(null, srcAddr+32));
        }
        public static void get(Matrix2f m, long srcAddr) {
            UNSAFE.putLong(m, Matrix2f_m00,     UNSAFE.getLong(null, srcAddr));
            UNSAFE.putLong(m, Matrix2f_m00 + 8, UNSAFE.getLong(null, srcAddr + 8));
        }
        public static void get(Matrix2d m, long srcAddr) {
            m._m00(UNSAFE.getDouble(null, srcAddr))
            ._m01(UNSAFE.getDouble(null, srcAddr+8))
            ._m10(UNSAFE.getDouble(null, srcAddr+16))
            ._m11(UNSAFE.getDouble(null, srcAddr+24));
        }
        public static void getf(Matrix2d m, long srcAddr) {
            m._m00(UNSAFE.getFloat(null, srcAddr))
            ._m01(UNSAFE.getFloat(null, srcAddr+4))
            ._m10(UNSAFE.getFloat(null, srcAddr+8))
            ._m11(UNSAFE.getFloat(null, srcAddr+12));
        }
        public static void get(Vector4d dst, long srcAddr) {
            dst.x = UNSAFE.getDouble(null, srcAddr);
            dst.y = UNSAFE.getDouble(null, srcAddr+8);
            dst.z = UNSAFE.getDouble(null, srcAddr+16);
            dst.w = UNSAFE.getDouble(null, srcAddr+24);
        }
        public static void get(Vector4f dst, long srcAddr) {
            dst.x = UNSAFE.getFloat(null, srcAddr);
            dst.y = UNSAFE.getFloat(null, srcAddr+4);
            dst.z = UNSAFE.getFloat(null, srcAddr+8);
            dst.w = UNSAFE.getFloat(null, srcAddr+12);
        }
        public static void get(Vector4i dst, long srcAddr) {
            dst.x = UNSAFE.getInt(null, srcAddr);
            dst.y = UNSAFE.getInt(null, srcAddr+4);
            dst.z = UNSAFE.getInt(null, srcAddr+8);
            dst.w = UNSAFE.getInt(null, srcAddr+12);
        }
        public static void get(Vector4L dst, long srcAddr) {
            dst.x = UNSAFE.getLong(null, srcAddr);
            dst.y = UNSAFE.getLong(null, srcAddr+8);
            dst.z = UNSAFE.getLong(null, srcAddr+16);
            dst.w = UNSAFE.getLong(null, srcAddr+24);
        }
        public static void get(Vector3f dst, long srcAddr) {
            dst.x = UNSAFE.getFloat(null, srcAddr);
            dst.y = UNSAFE.getFloat(null, srcAddr+4);
            dst.z = UNSAFE.getFloat(null, srcAddr+8);
        }
        public static void get(Vector3d dst, long srcAddr) {
            dst.x = UNSAFE.getDouble(null, srcAddr);
            dst.y = UNSAFE.getDouble(null, srcAddr+8);
            dst.z = UNSAFE.getDouble(null, srcAddr+16);
        }
        public static void get(Vector3i dst, long srcAddr) {
            dst.x = UNSAFE.getInt(null, srcAddr);
            dst.y = UNSAFE.getInt(null, srcAddr+4);
            dst.z = UNSAFE.getInt(null, srcAddr+8);
        }
        public static void get(Vector3L dst, long srcAddr) {
            dst.x = UNSAFE.getLong(null, srcAddr);
            dst.y = UNSAFE.getLong(null, srcAddr+8);
            dst.z = UNSAFE.getLong(null, srcAddr+16);
        }
        public static void get(Vector2f dst, long srcAddr) {
            dst.x = UNSAFE.getFloat(null, srcAddr);
            dst.y = UNSAFE.getFloat(null, srcAddr+4);
        }
        public static void get(Vector2d dst, long srcAddr) {
            dst.x = UNSAFE.getDouble(null, srcAddr);
            dst.y = UNSAFE.getDouble(null, srcAddr+8);
        }
        public static void get(Vector2i dst, long srcAddr) {
            dst.x = UNSAFE.getInt(null, srcAddr);
            dst.y = UNSAFE.getInt(null, srcAddr+4);
        }
        public static void get(Vector2L dst, long srcAddr) {
            dst.x = UNSAFE.getLong(null, srcAddr);
            dst.y = UNSAFE.getLong(null, srcAddr+8);
        }
        public static void putMatrix3f(Quaternionf q, long addr) {
            float dx = q.x + q.x;
            float dy = q.y + q.y;
            float dz = q.z + q.z;
            float q00 = dx * q.x;
            float q11 = dy * q.y;
            float q22 = dz * q.z;
            float q01 = dx * q.y;
            float q02 = dx * q.z;
            float q03 = dx * q.w;
            float q12 = dy * q.z;
            float q13 = dy * q.w;
            float q23 = dz * q.w;
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, addr, 1.0f - q11 - q22);
            u.putFloat(null, addr + 4, q01 + q23);
            u.putFloat(null, addr + 8, q02 - q13);
            u.putFloat(null, addr + 12, q01 - q23);
            u.putFloat(null, addr + 16, 1.0f - q22 - q00);
            u.putFloat(null, addr + 20, q12 + q03);
            u.putFloat(null, addr + 24, q02 + q13);
            u.putFloat(null, addr + 28, q12 - q03);
            u.putFloat(null, addr + 32, 1.0f - q11 - q00); 
        }
        public static void putMatrix4f(Quaternionf q, long addr) {
            float dx = q.x + q.x;
            float dy = q.y + q.y;
            float dz = q.z + q.z;
            float q00 = dx * q.x;
            float q11 = dy * q.y;
            float q22 = dz * q.z;
            float q01 = dx * q.y;
            float q02 = dx * q.z;
            float q03 = dx * q.w;
            float q12 = dy * q.z;
            float q13 = dy * q.w;
            float q23 = dz * q.w;
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, addr, 1.0f - q11 - q22);
            u.putFloat(null, addr + 4, q01 + q23);
            u.putLong(null, addr + 8, Float.floatToRawIntBits(q02 - q13) & 0xFFFFFFFFL);
            u.putFloat(null, addr + 16, q01 - q23);
            u.putFloat(null, addr + 20, 1.0f - q22 - q00);
            u.putLong(null, addr + 24, Float.floatToRawIntBits(q12 + q03) & 0xFFFFFFFFL);
            u.putFloat(null, addr + 32, q02 + q13);
            u.putFloat(null, addr + 36, q12 - q03);
            u.putLong(null, addr + 40, Float.floatToRawIntBits(1.0f - q11 - q00) & 0xFFFFFFFFL);
            u.putLong(null, addr + 48, 0L);
            u.putLong(null, addr + 56, 0x3F80000000000000L);
        }
        public static void putMatrix4x3f(Quaternionf q, long addr) {
            float dx = q.x + q.x;
            float dy = q.y + q.y;
            float dz = q.z + q.z;
            float q00 = dx * q.x;
            float q11 = dy * q.y;
            float q22 = dz * q.z;
            float q01 = dx * q.y;
            float q02 = dx * q.z;
            float q03 = dx * q.w;
            float q12 = dy * q.z;
            float q13 = dy * q.w;
            float q23 = dz * q.w;
            sun.misc.Unsafe u = UNSAFE;
            u.putFloat(null, addr, 1.0f - q11 - q22);
            u.putFloat(null, addr + 4, q01 + q23);
            u.putFloat(null, addr + 8, q02 - q13);
            u.putFloat(null, addr + 12, q01 - q23);
            u.putFloat(null, addr + 16, 1.0f - q22 - q00);
            u.putFloat(null, addr + 20, q12 + q03);
            u.putFloat(null, addr + 24, q02 + q13);
            u.putFloat(null, addr + 28, q12 - q03);
            u.putFloat(null, addr + 32, 1.0f - q11 - q00);
            u.putLong(null, addr + 36, 0L);
            u.putFloat(null, addr + 44, 0.0f);
        }
        private static void throwNoDirectBufferException() {
            throw new IllegalArgumentException("Must use a direct buffer");
        }
        public void putMatrix3f(Quaternionf q, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putMatrix3f(q, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putMatrix3f(q, offset, dest);
        }
        public void putMatrix3f(Quaternionf q, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                putMatrix3f(q, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putMatrix3f(q, offset, dest);
        }
        private static void checkPut(int offset, boolean direct, int capacity, int i) {
            if (!direct)
                throwNoDirectBufferException();
            if (capacity - offset < i)
                throw new BufferOverflowException();
        }
        public void putMatrix4f(Quaternionf q, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putMatrix4f(q, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putMatrix4f(q, offset, dest);
        }
        public void putMatrix4f(Quaternionf q, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                putMatrix4f(q, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putMatrix4f(q, offset, dest);
        }
        public void putMatrix4x3f(Quaternionf q, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putMatrix4x3f(q, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putMatrix4x3f(q, offset, dest);
        }
        public void putMatrix4x3f(Quaternionf q, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                putMatrix4x3f(q, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putMatrix4x3f(q, offset, dest);
        }
        public void put(Matrix4f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix4f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put4x3(Matrix4f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x3(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put4x3(m, offset, dest);
        }
        public void put4x3(Matrix4f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x3(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x3(m, offset, dest);
        }
        public void put3x4(Matrix4f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put3x4(m, offset, dest);
        }
        public void put3x4(Matrix4f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put3x4(m, offset, dest);
        }
        public void put(Matrix4x3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix4x3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put4x4(Matrix4x3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put4x4(m, offset, dest);
        }
        public void put4x4(Matrix4x3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x4(m, offset, dest);
        }
        public void put3x4(Matrix4x3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put3x4(m, offset, dest);
        }
        public void put3x4(Matrix4x3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put3x4(m, offset, dest);
        }
        public void put4x4(Matrix4x3d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put4x4(m, offset, dest);
        }
        public void put4x4(Matrix4x3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x4(m, offset, dest);
        }
        public void put4x4(Matrix3x2f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put4x4(m, offset, dest);
        }
        public void put4x4(Matrix3x2f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x4(m, offset, dest);
        }
        public void put4x4(Matrix3x2d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put4x4(m, offset, dest);
        }
        public void put4x4(Matrix3x2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x4(m, offset, dest);
        }
        public void put3x3(Matrix3x2f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x3(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put3x3(m, offset, dest);
        }
        public void put3x3(Matrix3x2f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x3(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put3x3(m, offset, dest);
        }
        public void put3x3(Matrix3x2d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x3(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put3x3(m, offset, dest);
        }
        public void put3x3(Matrix3x2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x3(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put3x3(m, offset, dest);
        }
        public void putTransposed(Matrix4f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix4f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void put4x3Transposed(Matrix4f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x3Transposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put4x3Transposed(m, offset, dest);
        }
        public void put4x3Transposed(Matrix4f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x3Transposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x3Transposed(m, offset, dest);
        }
        public void putTransposed(Matrix4x3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix4x3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3x2f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix2f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix2f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void put(Matrix4d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix4d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix4x3d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix4x3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void putf(Matrix4d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putf(m, offset, dest);
        }
        public void putf(Matrix4d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putf(m, offset, dest);
        }
        public void putf(Matrix4x3d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putf(m, offset, dest);
        }
        public void putf(Matrix4x3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putf(m, offset, dest);
        }
        public void putTransposed(Matrix4d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix4d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void put4x3Transposed(Matrix4d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x3Transposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put4x3Transposed(m, offset, dest);
        }
        public void put4x3Transposed(Matrix4d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put4x3Transposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put4x3Transposed(m, offset, dest);
        }
        public void putTransposed(Matrix4x3d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix4x3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3x2d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix3x2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix2d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.putTransposed(m, offset, dest);
        }
        public void putTransposed(Matrix2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                putTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix4d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix4d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 16 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix4x3d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix4x3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix3d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix3x2d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix3x2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix2d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putfTransposed(m, offset, dest);
        }
        public void putfTransposed(Matrix2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putfTransposed(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putfTransposed(m, offset, dest);
        }
        public void put(Matrix3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put3x4(Matrix3f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x4(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put3x4(m, offset, dest);
        }
        public void put3x4(Matrix3f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 12 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put3x4(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put3x4(m, offset, dest);
        }
        public void put(Matrix3d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix3x2f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix3x2f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix3x2d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix3x2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 6 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void putf(Matrix3d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putf(m, offset, dest);
        }
        public void putf(Matrix3d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 9 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putf(m, offset, dest);
        }
        public void put(Matrix2f m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix2f m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix2d m, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(m, offset, dest);
        }
        public void put(Matrix2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(m, offset, dest);
        }
        public void putf(Matrix2d m, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.putf(m, offset, dest);
        }
        public void putf(Matrix2d m, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(m, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putf(m, offset, dest);
        }
        public void put(Vector4d src, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector4d src, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector4d src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void putf(Vector4d src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putf(src, offset, dest);
        }
        public void put(Vector4f src, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector4f src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector4i src, int offset, IntBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector4i src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 4 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector3f src, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector3f src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector3d src, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector3d src, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector3d src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void putf(Vector3d src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                putf(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.putf(src, offset, dest);
        }
        public void put(Vector3i src, int offset, IntBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector3i src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 3 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2f src, int offset, FloatBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2f src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2d src, int offset, DoubleBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2d src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2i src, int offset, IntBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 2));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2i src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2 << 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2L src, int offset, LongBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + ((long) offset << 3));
            else
                super.put(src, offset, dest);
        }
        public void put(Vector2L src, int offset, ByteBuffer dest) {
            if (Options.DEBUG) checkPut(offset, dest.isDirect(), dest.capacity(), 2 << 3);
            if (dest.order() == ByteOrder.nativeOrder())
                put(src, UNSAFE.getLong(dest, ADDRESS) + offset);
            else
                super.put(src, offset, dest);
        }
        public void get(Matrix4f m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 16);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix4f m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 16 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public float get(Matrix4f m, int column, int row) {
            return UNSAFE.getFloat(m, Matrix4f_m00 + ((long) column << 4) + ((long) row << 2));
        }
        public Matrix4f set(Matrix4f m, int column, int row, float value) {
            UNSAFE.putFloat(m, Matrix4f_m00 + ((long) column << 4) + ((long) row << 2), value);
            return m;
        }
        public double get(Matrix4d m, int column, int row) {
            return UNSAFE.getDouble(m, Matrix4d_m00 + ((long) column << 5) + ((long) row << 3));
        }
        public Matrix4d set(Matrix4d m, int column, int row, double value) {
            UNSAFE.putDouble(m, Matrix4d_m00 + ((long) column << 5) + ((long) row << 3), value);
            return m;
        }
        public float get(Matrix3f m, int column, int row) {
            return UNSAFE.getFloat(m, Matrix3f_m00 + ((long) column * (3<<2)) + ((long) row << 2));
        }
        public Matrix3f set(Matrix3f m, int column, int row, float value) {
            UNSAFE.putFloat(m, Matrix3f_m00 + ((long) column * (3<<2)) + ((long) row << 2), value);
            return m;
        }
        public double get(Matrix3d m, int column, int row) {
            return UNSAFE.getDouble(m, Matrix3d_m00 + ((long) column * (3<<3)) + ((long) row << 3));
        }
        public Matrix3d set(Matrix3d m, int column, int row, double value) {
            UNSAFE.putDouble(m, Matrix3d_m00 + ((long) column * (3<<3)) + ((long) row << 3), value);
            return m;
        }
        public void get(Matrix4x3f m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 12);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix4x3f m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 12 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void get(Matrix4d m, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 16);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix4d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 16 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void get(Matrix4x3d m, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 12);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix4x3d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 12 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void getf(Matrix4d m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 16);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.getf(m, offset, src);
        }
        public void getf(Matrix4d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 16 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.getf(m, offset, src);
        }
        public void getf(Matrix4x3d m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 12);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.getf(m, offset, src);
        }
        private static void checkGet(int offset, boolean direct, int capacity, int i) {
            if (!direct)
                throwNoDirectBufferException();
            if (capacity - offset < i)
                throw new BufferUnderflowException();
        }
        public void getf(Matrix4x3d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 12 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.getf(m, offset, src);
        }
        public void get(Matrix3f m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 9);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3f m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 9 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3d m, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 9);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 9 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3x2f m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 6);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3x2f m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 6 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3x2d m, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 6);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix3x2d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 6 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void getf(Matrix3d m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 9);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.getf(m, offset, src);
        }
        public void getf(Matrix3d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 9 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.getf(m, offset, src);
        }
        public void get(Matrix2f m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix2f m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void get(Matrix2d m, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(m, offset, src);
        }
        public void get(Matrix2d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(m, offset, src);
        }
        public void getf(Matrix2d m, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.getf(m, offset, src);
        }
        public void getf(Matrix2d m, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                getf(m, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.getf(m, offset, src);
        }
        public void get(Vector4d dst, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector4d dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector4f dst, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector4f dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector4i dst, int offset, IntBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector4i dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 4 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector3f dst, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector3f dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 3 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector3d dst, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector3d dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 3 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector3i dst, int offset, IntBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector3i dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 3 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector2f dst, int offset, FloatBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector2f dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 2 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector2d dst, int offset, DoubleBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 3));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector2d dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 2 << 3);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
        public void get(Vector2i dst, int offset, IntBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + ((long) offset << 2));
            else
                super.get(dst, offset, src);
        }
        public void get(Vector2i dst, int offset, ByteBuffer src) {
            if (Options.DEBUG) checkGet(offset, src.isDirect(), src.capacity(), 2 << 2);
            if (src.order() == ByteOrder.nativeOrder())
                get(dst, UNSAFE.getLong(src, ADDRESS) + offset);
            else
                super.get(dst, offset, src);
        }
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix3x2fc {
    float m00();
    float m01();
    float m10();
    float m11();
    float m20();
    float m21();
    Matrix3x2f mul(Matrix3x2fc right, Matrix3x2f dest);
    Matrix3x2f mulLocal(Matrix3x2fc left, Matrix3x2f dest);
    float determinant();
    Matrix3x2f invert(Matrix3x2f dest);
    Matrix3x2f translate(float x, float y, Matrix3x2f dest);
    Matrix3x2f translate(Vector2fc offset, Matrix3x2f dest);
    Matrix3x2f translateLocal(Vector2fc offset, Matrix3x2f dest);
    Matrix3x2f translateLocal(float x, float y, Matrix3x2f dest);
    Matrix3x2f get(Matrix3x2f dest);
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    FloatBuffer get3x3(FloatBuffer buffer);
    FloatBuffer get3x3(int index, FloatBuffer buffer);
    ByteBuffer get3x3(ByteBuffer buffer);
    ByteBuffer get3x3(int index, ByteBuffer buffer);
    FloatBuffer get4x4(FloatBuffer buffer);
    FloatBuffer get4x4(int index, FloatBuffer buffer);
    ByteBuffer get4x4(ByteBuffer buffer);
    ByteBuffer get4x4(int index, ByteBuffer buffer);
    Matrix3x2fc getToAddress(long address);
    Matrix3x2fc getTransposedToAddress(long address);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    float[] get3x3(float[] arr, int offset);
    float[] get3x3(float[] arr);
    float[] get4x4(float[] arr, int offset);
    float[] get4x4(float[] arr);
    Matrix3x2f scale(float x, float y, Matrix3x2f dest);
    Matrix3x2f scale(Vector2fc xy, Matrix3x2f dest);
    Matrix3x2f scaleAroundLocal(float sx, float sy, float ox, float oy, Matrix3x2f dest);
    Matrix3x2f scaleAroundLocal(float factor, float ox, float oy, Matrix3x2f dest);
    Matrix3x2f scale(float xy, Matrix3x2f dest);
    Matrix3x2f scaleLocal(float xy, Matrix3x2f dest);
    Matrix3x2f scaleLocal(float x, float y, Matrix3x2f dest);
    Matrix3x2f scaleAround(float sx, float sy, float ox, float oy, Matrix3x2f dest);
    Matrix3x2f scaleAround(float factor, float ox, float oy, Matrix3x2f dest);
    Vector3f transform(Vector3f v);
    Vector3f transform(Vector3fc v, Vector3f dest);
    Vector3f transform(float x, float y, float z, Vector3f dest);
    Vector2f transformPosition(Vector2f v);
    Vector2f transformPosition(Vector2fc v, Vector2f dest);
    Vector2f transformPosition(float x, float y, Vector2f dest);
    Vector2f transformDirection(Vector2f v);
    Vector2f transformDirection(Vector2fc v, Vector2f dest);
    Vector2f transformDirection(float x, float y, Vector2f dest);
    Matrix3x2f rotate(float ang, Matrix3x2f dest);
    Matrix3x2f rotateLocal(float ang, Matrix3x2f dest);
    Matrix3x2f rotateAbout(float ang, float x, float y, Matrix3x2f dest);
    Matrix3x2f rotateTo(Vector2fc fromDir, Vector2fc toDir, Matrix3x2f dest);
    Matrix3x2f view(float left, float right, float bottom, float top, Matrix3x2f dest);
    Vector2f origin(Vector2f origin);
    float[] viewArea(float[] area);
    Vector2f positiveX(Vector2f dir);
    Vector2f normalizedPositiveX(Vector2f dir);
    Vector2f positiveY(Vector2f dir);
    Vector2f normalizedPositiveY(Vector2f dir);
    Vector2f unproject(float winX, float winY, int[] viewport, Vector2f dest);
    Vector2f unprojectInv(float winX, float winY, int[] viewport, Vector2f dest);
    boolean testPoint(float x, float y);
    boolean testCircle(float x, float y, float r);
    boolean testAar(float minX, float minY, float maxX, float maxY);
    boolean equals(Matrix3x2fc m, float delta);
    boolean isFinite();
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix4x3dc {
    int PLANE_NX = 0;
    int PLANE_PX = 1;
    int PLANE_NY = 2;
    int PLANE_PY = 3;
    int PLANE_NZ = 4;
    int PLANE_PZ = 5;
    byte PROPERTY_UNKNOWN = 0;
    byte PROPERTY_IDENTITY = 1<<2;
    byte PROPERTY_TRANSLATION = 1<<3;
    byte PROPERTY_ORTHONORMAL = 1<<4;
    int properties();
    double m00();
    double m01();
    double m02();
    double m10();
    double m11();
    double m12();
    double m20();
    double m21();
    double m22();
    double m30();
    double m31();
    double m32();
    Matrix4d get(Matrix4d dest);
    Matrix4x3d mul(Matrix4x3dc right, Matrix4x3d dest);
    Matrix4x3d mul(Matrix4x3fc right, Matrix4x3d dest);
    Matrix4x3d mulTranslation(Matrix4x3dc right, Matrix4x3d dest);
    Matrix4x3d mulTranslation(Matrix4x3fc right, Matrix4x3d dest);
    Matrix4x3d mulOrtho(Matrix4x3dc view, Matrix4x3d dest);
    Matrix4x3d mul3x3(double rm00, double rm01, double rm02, double rm10, double rm11, double rm12, double rm20, double rm21, double rm22, Matrix4x3d dest);
    Matrix4x3d fma(Matrix4x3dc other, double otherFactor, Matrix4x3d dest);
    Matrix4x3d fma(Matrix4x3fc other, double otherFactor, Matrix4x3d dest);
    Matrix4x3d add(Matrix4x3dc other, Matrix4x3d dest);
    Matrix4x3d add(Matrix4x3fc other, Matrix4x3d dest);
    Matrix4x3d sub(Matrix4x3dc subtrahend, Matrix4x3d dest);
    Matrix4x3d sub(Matrix4x3fc subtrahend, Matrix4x3d dest);
    Matrix4x3d mulComponentWise(Matrix4x3dc other, Matrix4x3d dest);
    double determinant();
    Matrix4x3d invert(Matrix4x3d dest);
    Matrix4x3d invertOrtho(Matrix4x3d dest);
    Matrix4x3d transpose3x3(Matrix4x3d dest);
    Matrix3d transpose3x3(Matrix3d dest);
    Vector3d getTranslation(Vector3d dest);
    Vector3d getScale(Vector3d dest);
    Matrix4x3d get(Matrix4x3d dest);
    Quaternionf getUnnormalizedRotation(Quaternionf dest);
    Quaternionf getNormalizedRotation(Quaternionf dest);
    Quaterniond getUnnormalizedRotation(Quaterniond dest);
    Quaterniond getNormalizedRotation(Quaterniond dest);
    DoubleBuffer get(DoubleBuffer buffer);
    DoubleBuffer get(int index, DoubleBuffer buffer);
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    ByteBuffer getFloats(ByteBuffer buffer);
    ByteBuffer getFloats(int index, ByteBuffer buffer);
    Matrix4x3dc getToAddress(long address);
    Matrix4x3dc getTransposedToAddress(long address);
    double[] get(double[] arr, int offset);
    double[] get(double[] arr);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    double[] get4x4(double[] arr, int offset);
    double[] get4x4(double[] arr);
    float[] get4x4(float[] arr, int offset);
    float[] get4x4(float[] arr);
    DoubleBuffer get4x4(DoubleBuffer buffer);
    DoubleBuffer get4x4(int index, DoubleBuffer buffer);
    ByteBuffer get4x4(ByteBuffer buffer);
    ByteBuffer get4x4(int index, ByteBuffer buffer);
    DoubleBuffer getTransposed(DoubleBuffer buffer);
    DoubleBuffer getTransposed(int index, DoubleBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposedFloats(ByteBuffer buffer);
    ByteBuffer getTransposedFloats(int index, ByteBuffer buffer);
    double[] getTransposed(double[] arr, int offset);
    double[] getTransposed(double[] arr);
    Vector4d transform(Vector4d v);
    Vector4d transform(Vector4dc v, Vector4d dest);
    Vector3d transformPosition(Vector3d v);
    Vector3d transformPosition(Vector3dc v, Vector3d dest);
    Vector3d transformDirection(Vector3d v);
    Vector3d transformDirection(Vector3dc v, Vector3d dest);
    Matrix4x3d scale(Vector3dc xyz, Matrix4x3d dest);
    Matrix4x3d scale(double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d scale(double xyz, Matrix4x3d dest);
    Matrix4x3d scaleXY(double x, double y, Matrix4x3d dest);
    Matrix4x3d scaleAround(double sx, double sy, double sz, double ox, double oy, double oz, Matrix4x3d dest);
    Matrix4x3d scaleAround(double factor, double ox, double oy, double oz, Matrix4x3d dest);
    Matrix4x3d scaleLocal(double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d rotate(double ang, double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d rotateTranslation(double ang, double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d rotateAround(Quaterniondc quat, double ox, double oy, double oz, Matrix4x3d dest);
    Matrix4x3d rotateLocal(double ang, double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d translate(Vector3dc offset, Matrix4x3d dest);
    Matrix4x3d translate(Vector3fc offset, Matrix4x3d dest);
    Matrix4x3d translate(double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d translateLocal(Vector3fc offset, Matrix4x3d dest);
    Matrix4x3d translateLocal(Vector3dc offset, Matrix4x3d dest);
    Matrix4x3d translateLocal(double x, double y, double z, Matrix4x3d dest);
    Matrix4x3d rotateX(double ang, Matrix4x3d dest);
    Matrix4x3d rotateY(double ang, Matrix4x3d dest);
    Matrix4x3d rotateZ(double ang, Matrix4x3d dest);
    Matrix4x3d rotateXYZ(double angleX, double angleY, double angleZ, Matrix4x3d dest);
    Matrix4x3d rotateZYX(double angleZ, double angleY, double angleX, Matrix4x3d dest);
    Matrix4x3d rotateYXZ(double angleY, double angleX, double angleZ, Matrix4x3d dest);
    Matrix4x3d rotate(Quaterniondc quat, Matrix4x3d dest);
    Matrix4x3d rotate(Quaternionfc quat, Matrix4x3d dest);
    Matrix4x3d rotateTranslation(Quaterniondc quat, Matrix4x3d dest);
    Matrix4x3d rotateTranslation(Quaternionfc quat, Matrix4x3d dest);
    Matrix4x3d rotateLocal(Quaterniondc quat, Matrix4x3d dest);
    Matrix4x3d rotateLocal(Quaternionfc quat, Matrix4x3d dest);
    Matrix4x3d rotate(AxisAngle4f axisAngle, Matrix4x3d dest);
    Matrix4x3d rotate(AxisAngle4d axisAngle, Matrix4x3d dest);
    Matrix4x3d rotate(double angle, Vector3dc axis, Matrix4x3d dest);
    Matrix4x3d rotate(double angle, Vector3fc axis, Matrix4x3d dest);
    Vector4d getRow(int row, Vector4d dest) throws IndexOutOfBoundsException;
    Vector3d getColumn(int column, Vector3d dest) throws IndexOutOfBoundsException;
    Matrix4x3d normal(Matrix4x3d dest);
    Matrix3d normal(Matrix3d dest);
    Matrix3d cofactor3x3(Matrix3d dest);
    Matrix4x3d cofactor3x3(Matrix4x3d dest);
    Matrix4x3d normalize3x3(Matrix4x3d dest);
    Matrix3d normalize3x3(Matrix3d dest);
    Matrix4x3d reflect(double a, double b, double c, double d, Matrix4x3d dest);
    Matrix4x3d reflect(double nx, double ny, double nz, double px, double py, double pz, Matrix4x3d dest);
    Matrix4x3d reflect(Quaterniondc orientation, Vector3dc point, Matrix4x3d dest);
    Matrix4x3d reflect(Vector3dc normal, Vector3dc point, Matrix4x3d dest);
    Matrix4x3d ortho(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4x3d dest);
    Matrix4x3d ortho(double left, double right, double bottom, double top, double zNear, double zFar, Matrix4x3d dest);
    Matrix4x3d orthoLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4x3d dest);
    Matrix4x3d orthoLH(double left, double right, double bottom, double top, double zNear, double zFar, Matrix4x3d dest);
    Matrix4x3d orthoSymmetric(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4x3d dest);
    Matrix4x3d orthoSymmetric(double width, double height, double zNear, double zFar, Matrix4x3d dest);
    Matrix4x3d orthoSymmetricLH(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4x3d dest);
    Matrix4x3d orthoSymmetricLH(double width, double height, double zNear, double zFar, Matrix4x3d dest);
    Matrix4x3d ortho2D(double left, double right, double bottom, double top, Matrix4x3d dest);
    Matrix4x3d ortho2DLH(double left, double right, double bottom, double top, Matrix4x3d dest);
    Matrix4x3d lookAlong(Vector3dc dir, Vector3dc up, Matrix4x3d dest);
    Matrix4x3d lookAlong(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix4x3d dest);
    Matrix4x3d lookAt(Vector3dc eye, Vector3dc center, Vector3dc up, Matrix4x3d dest);
    Matrix4x3d lookAt(double eyeX, double eyeY, double eyeZ, double centerX, double centerY, double centerZ, double upX, double upY, double upZ, Matrix4x3d dest);
    Matrix4x3d lookAtLH(Vector3dc eye, Vector3dc center, Vector3dc up, Matrix4x3d dest);
    Matrix4x3d lookAtLH(double eyeX, double eyeY, double eyeZ, double centerX, double centerY, double centerZ, double upX, double upY, double upZ, Matrix4x3d dest);
    Vector4d frustumPlane(int which, Vector4d dest);
    Vector3d positiveZ(Vector3d dir);
    Vector3d normalizedPositiveZ(Vector3d dir);
    Vector3d positiveX(Vector3d dir);
    Vector3d normalizedPositiveX(Vector3d dir);
    Vector3d positiveY(Vector3d dir);
    Vector3d normalizedPositiveY(Vector3d dir);
    Vector3d origin(Vector3d origin);
    Matrix4x3d shadow(Vector4dc light, double a, double b, double c, double d, Matrix4x3d dest);
    Matrix4x3d shadow(double lightX, double lightY, double lightZ, double lightW, double a, double b, double c, double d, Matrix4x3d dest);
    Matrix4x3d shadow(Vector4dc light, Matrix4x3dc planeTransform, Matrix4x3d dest);
    Matrix4x3d shadow(double lightX, double lightY, double lightZ, double lightW, Matrix4x3dc planeTransform, Matrix4x3d dest);
    Matrix4x3d pick(double x, double y, double width, double height, int[] viewport, Matrix4x3d dest);
    Matrix4x3d arcball(double radius, double centerX, double centerY, double centerZ, double angleX, double angleY, Matrix4x3d dest);
    Matrix4x3d arcball(double radius, Vector3dc center, double angleX, double angleY, Matrix4x3d dest);
    Matrix4x3d transformAab(double minX, double minY, double minZ, double maxX, double maxY, double maxZ, Vector3d outMin, Vector3d outMax);
    Matrix4x3d transformAab(Vector3dc min, Vector3dc max, Vector3d outMin, Vector3d outMax);
    Matrix4x3d lerp(Matrix4x3dc other, double t, Matrix4x3d dest);
    Matrix4x3d rotateTowards(Vector3dc dir, Vector3dc up, Matrix4x3d dest);
    Matrix4x3d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix4x3d dest);
    Vector3d getEulerAnglesXYZ(Vector3d dest);
    Vector3d getEulerAnglesZYX(Vector3d dest);
    Vector3d getEulerAnglesYXZ(Vector3d dest);
    Matrix4x3d obliqueZ(double a, double b, Matrix4x3d dest);
    Matrix4x3d mapXZY(Matrix4x3d dest);
    Matrix4x3d mapXZnY(Matrix4x3d dest);
    Matrix4x3d mapXnYnZ(Matrix4x3d dest);
    Matrix4x3d mapXnZY(Matrix4x3d dest);
    Matrix4x3d mapXnZnY(Matrix4x3d dest);
    Matrix4x3d mapYXZ(Matrix4x3d dest);
    Matrix4x3d mapYXnZ(Matrix4x3d dest);
    Matrix4x3d mapYZX(Matrix4x3d dest);
    Matrix4x3d mapYZnX(Matrix4x3d dest);
    Matrix4x3d mapYnXZ(Matrix4x3d dest);
    Matrix4x3d mapYnXnZ(Matrix4x3d dest);
    Matrix4x3d mapYnZX(Matrix4x3d dest);
    Matrix4x3d mapYnZnX(Matrix4x3d dest);
    Matrix4x3d mapZXY(Matrix4x3d dest);
    Matrix4x3d mapZXnY(Matrix4x3d dest);
    Matrix4x3d mapZYX(Matrix4x3d dest);
    Matrix4x3d mapZYnX(Matrix4x3d dest);
    Matrix4x3d mapZnXY(Matrix4x3d dest);
    Matrix4x3d mapZnXnY(Matrix4x3d dest);
    Matrix4x3d mapZnYX(Matrix4x3d dest);
    Matrix4x3d mapZnYnX(Matrix4x3d dest);
    Matrix4x3d mapnXYnZ(Matrix4x3d dest);
    Matrix4x3d mapnXZY(Matrix4x3d dest);
    Matrix4x3d mapnXZnY(Matrix4x3d dest);
    Matrix4x3d mapnXnYZ(Matrix4x3d dest);
    Matrix4x3d mapnXnYnZ(Matrix4x3d dest);
    Matrix4x3d mapnXnZY(Matrix4x3d dest);
    Matrix4x3d mapnXnZnY(Matrix4x3d dest);
    Matrix4x3d mapnYXZ(Matrix4x3d dest);
    Matrix4x3d mapnYXnZ(Matrix4x3d dest);
    Matrix4x3d mapnYZX(Matrix4x3d dest);
    Matrix4x3d mapnYZnX(Matrix4x3d dest);
    Matrix4x3d mapnYnXZ(Matrix4x3d dest);
    Matrix4x3d mapnYnXnZ(Matrix4x3d dest);
    Matrix4x3d mapnYnZX(Matrix4x3d dest);
    Matrix4x3d mapnYnZnX(Matrix4x3d dest);
    Matrix4x3d mapnZXY(Matrix4x3d dest);
    Matrix4x3d mapnZXnY(Matrix4x3d dest);
    Matrix4x3d mapnZYX(Matrix4x3d dest);
    Matrix4x3d mapnZYnX(Matrix4x3d dest);
    Matrix4x3d mapnZnXY(Matrix4x3d dest);
    Matrix4x3d mapnZnXnY(Matrix4x3d dest);
    Matrix4x3d mapnZnYX(Matrix4x3d dest);
    Matrix4x3d mapnZnYnX(Matrix4x3d dest);
    Matrix4x3d negateX(Matrix4x3d dest);
    Matrix4x3d negateY(Matrix4x3d dest);
    Matrix4x3d negateZ(Matrix4x3d dest);
    boolean equals(Matrix4x3dc m, double delta);
    boolean isFinite();
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Vector4fc {
    float x();
    float y();
    float z();
    float w();
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    Vector4fc getToAddress(long address);
    Vector4f sub(Vector4fc v, Vector4f dest);
    Vector4f sub(float x, float y, float z, float w, Vector4f dest);
    Vector4f add(Vector4fc v, Vector4f dest);
    Vector4f add(float x, float y, float z, float w, Vector4f dest);
    Vector4f fma(Vector4fc a, Vector4fc b, Vector4f dest);
    Vector4f fma(float a, Vector4fc b, Vector4f dest);
    Vector4f mulAdd(Vector4fc a, Vector4fc b, Vector4f dest);
    Vector4f mulAdd(float a, Vector4fc b, Vector4f dest);
    Vector4f mul(Vector4fc v, Vector4f dest);
    Vector4f div(Vector4fc v, Vector4f dest);
    Vector4f mul(Matrix4fc mat, Vector4f dest);
    Vector4f mulGeneric(Matrix4fc mat, Vector4f dest);
    Vector4f mulTranspose(Matrix4fc mat, Vector4f dest);
    Vector4f mulTranslation(Matrix4fc mat, Vector4f dest);
    Vector4f mulAffine(Matrix4fc mat, Vector4f dest);
    Vector4f mulAffineTranspose(Matrix4fc mat, Vector4f dest);
    Vector4f mulGenericTranspose(Matrix4fc mat, Vector4f dest);
    Vector4f mul(Matrix4x3fc mat, Vector4f dest);
    Vector4f mulTranslation(Matrix4x3fc mat, Vector4f dest);
    Vector4f mulGeneric(Matrix4x3fc mat, Vector4f dest);
    Vector4f mulProject(Matrix4fc mat, Vector4f dest);
    Vector3f mulProject(Matrix4fc mat, Vector3f dest);
    Vector3f mulProjectGeneric(Matrix4fc mat, Vector3f dest);
    Vector4f mulProjectGeneric(Matrix4fc mat, Vector4f dest);
    Vector3f mulProjectTranslation(Matrix4fc mat, Vector3f dest);
    Vector4f mulProjectTranslation(Matrix4fc mat, Vector4f dest);
    Vector3f mulProjectAffine(Matrix4fc mat, Vector3f dest);
    Vector4f mulProjectAffine(Matrix4fc mat, Vector4f dest);
    Vector4f mul(float scalar, Vector4f dest);
    Vector4f mul(float x, float y, float z, float w, Vector4f dest);
    Vector4f div(float scalar, Vector4f dest);
    Vector4f div(float x, float y, float z, float w, Vector4f dest);
    Vector4f rotate(Quaternionfc quat, Vector4f dest);
    Vector4f rotateAxis(float angle, float aX, float aY, float aZ, Vector4f dest);
    Vector4f rotateX(float angle, Vector4f dest);
    Vector4f rotateY(float angle, Vector4f dest);
    Vector4f rotateZ(float angle, Vector4f dest);
    float lengthSquared();
    float length();
    Vector4f normalize(Vector4f dest);
    Vector4f normalize(float length, Vector4f dest);
    Vector4f normalize3(Vector4f dest);
    float distance(Vector4fc v);
    float distance(float x, float y, float z, float w);
    float distanceSquared(Vector4fc v);
    float distanceSquared(float x, float y, float z, float w);
    float dot(Vector4fc v);
    float dot(float x, float y, float z, float w);
    float angleCos(Vector4fc v);
    float angle(Vector4fc v);
    Vector4f negate(Vector4f dest);
    Vector4f min(Vector4fc v, Vector4f dest);
    Vector4f max(Vector4fc v, Vector4f dest);
    Vector4f lerp(Vector4fc other, float t, Vector4f dest);
    Vector4f smoothStep(Vector4fc v, float t, Vector4f dest);
    Vector4f hermite(Vector4fc t0, Vector4fc v1, Vector4fc t1, float t, Vector4f dest);
    float get(int component) throws IllegalArgumentException;
    Vector4i get(int mode, Vector4i dest);
    Vector4f get(Vector4f dest);
    Vector4d get(Vector4d dest);
    int maxComponent();
    int minComponent();
    Vector4f floor(Vector4f dest);
    Vector4f ceil(Vector4f dest);
    Vector4f round(Vector4f dest);
    boolean isFinite();
    Vector4f absolute(Vector4f dest);
    boolean equals(Vector4fc v, float delta);
    boolean equals(float x, float y, float z, float w);
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector3f implements Externalizable, Cloneable, Vector3fc {
    private static final long serialVersionUID = 1L;
    public float x;
    public float y;
    public float z;
    public Vector3f() {
    }
    public Vector3f(float d) {
        this.x = d;
        this.y = d;
        this.z = d;
    }
    public Vector3f(float x, float y, float z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    public Vector3f(Vector3fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3f(Vector3dc v) {
        x = (float) v.x();
        y = (float) v.y();
        z = (float) v.z();
    }
    public Vector3f(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3f(Vector2fc v, float z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3f(Vector2ic v, float z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3f(float[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
    }
    public Vector3f(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3f(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector3f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3f(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public float x() {
        return this.x;
    }
    public float y() {
        return this.y;
    }
    public float z() {
        return this.z;
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector3f set(Vector4dc v) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        this.z = (float) v.z();
        return this;
    }
    public Vector3f set(Vector4fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3f set(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3f set(Vector3fc v) {
        if (v == this)
            return this;
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3f set(Vector3dc v) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        this.z = (float) v.z();
        return this;
    }
    public Vector3f set(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        return this;
    }
    public Vector3f set(Vector2fc v, float z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3f set(Vector2dc v, float z) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        this.z = z;
        return this;
    }
    public Vector3f set(Vector2ic v, float z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3f set(float d) {
        this.x = d;
        this.y = d;
        this.z = d;
        return this;
    }
    public Vector3f set(float x, float y, float z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    public Vector3f set(double d) {
        this.x = (float) d;
        this.y = (float) d;
        this.z = (float) d;
        return this;
    }
    public Vector3f set(double x, double y, double z) {
        this.x = (float) x;
        this.y = (float) y;
        this.z = (float) z;
        return this;
    }
    public Vector3f set(float[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
        return this;
    }
    public Vector3f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Vector3f setComponent(int component, float value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public FloatBuffer get(FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector3fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector3f sub(Vector3fc v) {
        return sub(v, this);
    }
    public Vector3f sub(Vector3fc v, Vector3f dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        return dest;
    }
    public Vector3f sub(float x, float y, float z) {
        return sub(x, y, z, this);
    }
    public Vector3f sub(float x, float y, float z, Vector3f dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        return dest;
    }
    public Vector3f add(Vector3fc v) {
        return add(v, this);
    }
    public Vector3f add(Vector3fc v, Vector3f dest) {
        dest.x = this.x + v.x();
        dest.y = this.y + v.y();
        dest.z = this.z + v.z();
        return dest;
    }
    public Vector3f add(float x, float y, float z) {
        return add(x, y, z, this);
    }
    public Vector3f add(float x, float y, float z, Vector3f dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        return dest;
    }
    public Vector3f fma(Vector3fc a, Vector3fc b) {
        return fma(a, b, this);
    }
    public Vector3f fma(float a, Vector3fc b) {
        return fma(a, b, this);
    }
    public Vector3f fma(Vector3fc a, Vector3fc b, Vector3f dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        dest.z = Math.fma(a.z(), b.z(), z);
        return dest;
    }
    public Vector3f fma(float a, Vector3fc b, Vector3f dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        dest.z = Math.fma(a, b.z(), z);
        return dest;
    }
    public Vector3f mulAdd(Vector3fc a, Vector3fc b) {
        return mulAdd(a, b, this);
    }
    public Vector3f mulAdd(float a, Vector3fc b) {
        return mulAdd(a, b, this);
    }
    public Vector3f mulAdd(Vector3fc a, Vector3fc b, Vector3f dest) {
        dest.x = Math.fma(x, a.x(), b.x());
        dest.y = Math.fma(y, a.y(), b.y());
        dest.z = Math.fma(z, a.z(), b.z());
        return dest;
    }
    public Vector3f mulAdd(float a, Vector3fc b, Vector3f dest) {
        dest.x = Math.fma(x, a, b.x());
        dest.y = Math.fma(y, a, b.y());
        dest.z = Math.fma(z, a, b.z());
        return dest;
    }
    public Vector3f mul(Vector3fc v) {
        return mul(v, this);
    }
    public Vector3f mul(Vector3fc v, Vector3f dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        return dest;
    }
    public Vector3f div(Vector3fc v) {
        return div(v, this);
    }
    public Vector3f div(Vector3fc v, Vector3f dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        return dest;
    }
    public Vector3f mulProject(Matrix4fc mat, float w, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        float invW = 1.0f / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        return dest;
    }
    public Vector3f mulProject(Matrix4fc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, this);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, this);
        return mulProjectGeneric(mat, this);
    }
    public Vector3f mulProject(Matrix4fc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector3f mulProjectTranslation(Matrix4fc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3f mulProjectTranslation(Matrix4fc mat, Vector3f dest) {
        return mulPositionTranslation(mat, dest);
    }
    public Vector3f mulProjectTranslation(Matrix4dc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3f mulProjectTranslation(Matrix4dc mat, Vector3f dest) {
        return mulPositionTranslation(mat, dest);
    }
    public Vector3f mulProjectAffine(Matrix4fc mat) {
        return mulProjectAffine(mat, this);
    }
    public Vector3f mulProjectAffine(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z)) + mat.m30();
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z)) + mat.m31();
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z)) + mat.m32();
        return dest;
    }
    public Vector3f mulProjectAffine(Matrix4dc mat) {
        return mulProjectAffine(mat, this);
    }
    public Vector3f mulProjectAffine(Matrix4dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) (Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z)) + mat.m30());
        dest.y = (float) (Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z)) + mat.m31());
        dest.z = (float) (Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z)) + mat.m32());
        return dest;
    }
    public Vector3f mulProjectGeneric(Matrix4fc mat) {
        return mulProjectGeneric(mat, this);
    }
    public Vector3f mulProjectGeneric(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        float invW = 1.0f / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30()))) * invW;
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31()))) * invW;
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32()))) * invW;
        return dest;
    }
    public Vector3f mulProjectGeneric(Matrix4dc mat) {
        return mulProjectGeneric(mat, this);
    }
    public Vector3f mulProjectGeneric(Matrix4dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        double invW = 1.0f / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        dest.x = (float) (Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30()))) * invW);
        dest.y = (float) (Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31()))) * invW);
        dest.z = (float) (Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32()))) * invW);
        return dest;
    }
    public Vector3f mul(Matrix3fc mat) {
        return mul(mat, this);
    }
    public Vector3f mul(Matrix3fc mat, Vector3f dest) {
        float lx = x, ly = y, lz = z;
        dest.x = Math.fma(mat.m00(), lx, Math.fma(mat.m10(), ly, mat.m20() * lz));
        dest.y = Math.fma(mat.m01(), lx, Math.fma(mat.m11(), ly, mat.m21() * lz));
        dest.z = Math.fma(mat.m02(), lx, Math.fma(mat.m12(), ly, mat.m22() * lz));
        return dest;
    }
    public Vector3f mul(Matrix3dc mat) {
        return mul(mat, this);
    }
    public Vector3f mul(Matrix3dc mat, Vector3f dest) {
        float lx = x, ly = y, lz = z;
        dest.x = (float) Math.fma(mat.m00(), lx, Math.fma(mat.m10(), ly, mat.m20() * lz));
        dest.y = (float) Math.fma(mat.m01(), lx, Math.fma(mat.m11(), ly, mat.m21() * lz));
        dest.z = (float) Math.fma(mat.m02(), lx, Math.fma(mat.m12(), ly, mat.m22() * lz));
        return dest;
    }
    public Vector3f mul(Matrix3x2fc mat) {
        return mul(mat, this);
    }
    public Vector3f mul(Matrix3x2fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.z = z;
        return dest;
    }
    public Vector3f mul(Matrix3x2dc mat) {
        return mul(mat, this);
    }
    public Vector3f mul(Matrix3x2dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        dest.y = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.z = z;
        return dest;
    }
    public Vector3f mulTranspose(Matrix3fc mat) {
        return mulTranspose(mat, this);
    }
    public Vector3f mulTranspose(Matrix3fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        return dest;
    }
    public Vector3f mulPosition(Matrix4fc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat, this);
    }
    public Vector3f mulPosition(Matrix4dc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat, this);
    }
    public Vector3f mulPosition(Matrix4fc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3f mulPosition(Matrix4dc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3f mulPositionTranslation(Matrix4x3fc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3f mulPositionTranslation(Matrix4x3fc mat, Vector3f dest) {
        float rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        float ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        float rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3f mulPositionTranslation(Matrix4x3dc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3f mulPositionTranslation(Matrix4x3dc mat, Vector3f dest) {
        float rx = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        float ry = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        float rz = (float) Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3f mulPositionTranslation(Matrix4fc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3f mulPositionTranslation(Matrix4fc mat, Vector3f dest) {
        dest.x = this.x + mat.m30();
        dest.y = this.y + mat.m31();
        dest.z = this.z + mat.m32();
        return dest;
    }
    public Vector3f mulPositionTranslation(Matrix4dc mat) {
        return mulPositionTranslation(mat, this);
    }
    public Vector3f mulPositionTranslation(Matrix4dc mat, Vector3f dest) {
        dest.x = (float) (this.x + mat.m30());
        dest.y = (float) (this.y + mat.m31());
        dest.z = (float) (this.z + mat.m32());
        return dest;
    }
    public Vector3f mulPositionGeneric(Matrix4fc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3f mulPositionGeneric(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return dest;
    }
    public Vector3f mulPositionGeneric(Matrix4dc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3f mulPositionGeneric(Matrix4dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = (float) Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return dest;
    }
    public Vector3f mulPosition(Matrix4x3fc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat);
    }
    public Vector3f mulPosition(Matrix4x3dc mat) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return this;
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, this);
        return mulPositionGeneric(mat);
    }
    public Vector3f mulPosition(Matrix4x3fc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3f mulPosition(Matrix4x3dc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulPositionTranslation(mat, dest);
        return mulPositionGeneric(mat, dest);
    }
    public Vector3f mulPositionGeneric(Matrix4x3fc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3f mulPositionGeneric(Matrix4x3dc mat) {
        return mulPositionGeneric(mat, this);
    }
    public Vector3f mulPositionGeneric(Matrix4x3fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return dest;
    }
    public Vector3f mulPositionGeneric(Matrix4x3dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = (float) Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return dest;
    }
    public Vector3f mulTransposePosition(Matrix4fc mat) {
        return mulTransposePosition(mat, this);
    }
    public Vector3f mulTransposePosition(Matrix4fc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        return mulTransposePositionGeneric(mat, dest);
    }
    public Vector3f mulTransposePositionGeneric(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, Math.fma(mat.m02(), z, mat.m03())));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, Math.fma(mat.m12(), z, mat.m13())));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, Math.fma(mat.m22(), z, mat.m23())));
        return dest;
    }
    public Vector3f mulTransposePosition(Matrix4dc mat) {
        return mulTransposePosition(mat, this);
    }
    public Vector3f mulTransposePosition(Matrix4dc mat, Vector3f dest) {
        int properties = mat.properties();
        if ((properties & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        return mulTransposePositionGeneric(mat, dest);
    }
    public Vector3f mulTransposePositionGeneric(Matrix4dc mat) {
        return mulTransposePositionGeneric(mat, this);
    }
    public Vector3f mulTransposePositionGeneric(Matrix4dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, Math.fma(mat.m02(), z, mat.m03())));
        dest.y = (float) Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, Math.fma(mat.m12(), z, mat.m13())));
        dest.z = (float) Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, Math.fma(mat.m22(), z, mat.m23())));
        return dest;
    }
    public float mulPositionW(Matrix4fc mat) {
        return mulPositionW(mat, this);
    }
    public float mulPositionW(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        float w = Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return w;
    }
    public float mulPositionW(Matrix4dc mat) {
        return mulPositionW(mat, this);
    }
    public float mulPositionW(Matrix4dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        float w = (float) Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33())));
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30())));
        dest.y = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31())));
        dest.z = (float) Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32())));
        return w;
    }
    public Vector3f mulDirection(Matrix4dc mat) {
        return mulDirection(mat, this);
    }
    public Vector3f mulDirection(Matrix4fc mat) {
        return mulDirection(mat, this);
    }
    public Vector3f mulDirection(Matrix4x3fc mat) {
        return mulDirection(mat, this);
    }
    public Vector3f mulDirection(Matrix4x3dc mat) {
        return mulDirection(mat, this);
    }
    public Vector3f mulDirection(Matrix4dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        dest.y = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.z = (float) Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        return dest;
    }
    public Vector3f mulDirection(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        return dest;
    }
    public Vector3f mulDirection(Matrix4x3fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        return dest;
    }
    public Vector3f mulDirection(Matrix4x3dc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = (float) Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, mat.m20() * z));
        dest.y = (float) Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, mat.m21() * z));
        dest.z = (float) Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, mat.m22() * z));
        return dest;
    }
    public Vector3f mulTransposeDirection(Matrix4fc mat) {
        return mulTransposeDirection(mat, this);
    }
    public Vector3f mulTransposeDirection(Matrix4fc mat, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        return dest;
    }
    public Vector3f mul(float scalar) {
        return mul(scalar, this);
    }
    public Vector3f mul(float scalar, Vector3f dest) {
        dest.x = this.x * scalar;
        dest.y = this.y * scalar;
        dest.z = this.z * scalar;
        return dest;
    }
    public Vector3f mul(float x, float y, float z) {
        return mul(x, y, z, this);
    }
    public Vector3f mul(float x, float y, float z, Vector3f dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        dest.z = this.z * z;
        return dest;
    }
    public Vector3f div(float scalar) {
        return div(scalar, this);
    }
    public Vector3f div(float scalar, Vector3f dest) {
        float inv = 1.0f / scalar;
        dest.x = this.x * inv;
        dest.y = this.y * inv;
        dest.z = this.z * inv;
        return dest;
    }
    public Vector3f div(float x, float y, float z) {
        return div(x, y, z, this);
    }
    public Vector3f div(float x, float y, float z, Vector3f dest) {
        dest.x = this.x / x;
        dest.y = this.y / y;
        dest.z = this.z / z;
        return dest;
    }
    public Vector3f rotate(Quaternionfc quat) {
        return quat.transform(this, this);
    }
    public Vector3f rotate(Quaternionfc quat, Vector3f dest) {
        return quat.transform(this, dest);
    }
    public Quaternionf rotationTo(Vector3fc toDir, Quaternionf dest) {
        return dest.rotationTo(this, toDir);
    }
    public Quaternionf rotationTo(float toDirX, float toDirY, float toDirZ, Quaternionf dest) {
        return dest.rotationTo(x, y, z, toDirX, toDirY, toDirZ);
    }
    public Vector3f rotateAxis(float angle, float x, float y, float z) {
        return rotateAxis(angle, x, y, z, this);
    }
    public Vector3f rotateAxis(float angle, float aX, float aY, float aZ, Vector3f dest) {
        if (aY == 0.0f && aZ == 0.0f && Math.absEqualsOne(aX))
            return rotateX(aX * angle, dest);
        else if (aX == 0.0f && aZ == 0.0f && Math.absEqualsOne(aY))
            return rotateY(aY * angle, dest);
        else if (aX == 0.0f && aY == 0.0f && Math.absEqualsOne(aZ))
            return rotateZ(aZ * angle, dest);
        return rotateAxisInternal(angle, aX, aY, aZ, dest);
    }
    private Vector3f rotateAxisInternal(float angle, float aX, float aY, float aZ, Vector3f dest) {
        float hangle = angle * 0.5f;
        float sinAngle = Math.sin(hangle);
        float qx = aX * sinAngle, qy = aY * sinAngle, qz = aZ * sinAngle;
        float qw = Math.cosFromSin(sinAngle, hangle);
        float w2 = qw * qw, x2 = qx * qx, y2 = qy * qy, z2 = qz * qz, zw = qz * qw;
        float xy = qx * qy, xz = qx * qz, yw = qy * qw, yz = qy * qz, xw = qx * qw;
        float x = this.x, y = this.y, z = this.z;
        dest.x = (w2 + x2 - z2 - y2) * x + (-zw + xy - zw + xy) * y + (yw + xz + xz + yw) * z;
        dest.y = (xy + zw + zw + xy) * x + ( y2 - z2 + w2 - x2) * y + (yz + yz - xw - xw) * z;
        dest.z = (xz - yw + xz - yw) * x + ( yz + yz + xw + xw) * y + (z2 - y2 - x2 + w2) * z;
        return dest;
    }
    public Vector3f rotateX(float angle) {
        return rotateX(angle, this);
    }
    public Vector3f rotateX(float angle, Vector3f dest) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float y = this.y * cos - this.z * sin;
        float z = this.y * sin + this.z * cos;
        dest.x = this.x;
        dest.y = y;
        dest.z = z;
        return dest;
    }
    public Vector3f rotateY(float angle) {
        return rotateY(angle, this);
    }
    public Vector3f rotateY(float angle, Vector3f dest) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float x =  this.x * cos + this.z * sin;
        float z = -this.x * sin + this.z * cos;
        dest.x = x;
        dest.y = this.y;
        dest.z = z;
        return dest;
    }
    public Vector3f rotateZ(float angle) {
        return rotateZ(angle, this);
    }
    public Vector3f rotateZ(float angle, Vector3f dest) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float x = this.x * cos - this.y * sin;
        float y = this.x * sin + this.y * cos;
        dest.x = x;
        dest.y = y;
        dest.z = this.z;
        return dest;
    }
    public float lengthSquared() {
        return Math.fma(x, x, Math.fma(y, y, z * z));
    }
    public static float lengthSquared(float x, float y, float z) {
        return Math.fma(x, x, Math.fma(y, y, z * z));
    }
    public float length() {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
    }
    public static float length(float x, float y, float z) {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
    }
    public Vector3f normalize() {
        return normalize(this);
    }
    public Vector3f normalize(Vector3f dest) {
        float scalar = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
        dest.x = this.x * scalar;
        dest.y = this.y * scalar;
        dest.z = this.z * scalar;
        return dest;
    }
    public Vector3f normalize(float length) {
        return normalize(length, this);
    }
    public Vector3f normalize(float length, Vector3f dest) {
        float scalar = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, z * z))) * length;
        dest.x = this.x * scalar;
        dest.y = this.y * scalar;
        dest.z = this.z * scalar;
        return dest;
    }
    public Vector3f cross(Vector3fc v) {
        return cross(v, this);
    }
    public Vector3f cross(float x, float y, float z) {
        return cross(x, y, z, this);
    }
    public Vector3f cross(Vector3fc v, Vector3f dest) {
        float rx = Math.fma(y, v.z(), -z * v.y());
        float ry = Math.fma(z, v.x(), -x * v.z());
        float rz = Math.fma(x, v.y(), -y * v.x());
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector3f cross(float x, float y, float z, Vector3f dest) {
        float rx = Math.fma(this.y, z, -this.z * y);
        float ry = Math.fma(this.z, x, -this.x * z);
        float rz = Math.fma(this.x, y, -this.y * x);
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public float distance(Vector3fc v) {
        float dx = this.x - v.x();
        float dy = this.y - v.y();
        float dz = this.z - v.z();
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, dz * dz)));
    }
    public float distance(float x, float y, float z) {
        float dx = this.x - x;
        float dy = this.y - y;
        float dz = this.z - z;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, dz * dz)));
    }
    public float distanceSquared(Vector3fc v) {
        float dx = this.x - v.x();
        float dy = this.y - v.y();
        float dz = this.z - v.z();
        return Math.fma(dx, dx, Math.fma(dy, dy, dz * dz));
    }
    public float distanceSquared(float x, float y, float z) {
        float dx = this.x - x;
        float dy = this.y - y;
        float dz = this.z - z;
        return Math.fma(dx, dx, Math.fma(dy, dy, dz * dz));
    }
    public static float distance(float x1, float y1, float z1, float x2, float y2, float z2) {
        return Math.sqrt(distanceSquared(x1, y1, z1, x2, y2, z2));
    }
    public static float distanceSquared(float x1, float y1, float z1, float x2, float y2, float z2) {
        float dx = x1 - x2;
        float dy = y1 - y2;
        float dz = z1 - z2;
        return Math.fma(dx, dx, Math.fma(dy, dy, dz * dz));
    }
    public float dot(Vector3fc v) {
        return Math.fma(this.x, v.x(), Math.fma(this.y, v.y(), this.z * v.z()));
    }
    public float dot(float x, float y, float z) {
        return Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
    }
    public float angleCos(Vector3fc v) {
        float x = this.x, y = this.y, z = this.z;
        float length1Squared = Math.fma(x, x, Math.fma(y, y, z * z));
        float length2Squared = Math.fma(v.x(), v.x(), Math.fma(v.y(), v.y(), v.z() * v.z()));
        float dot = Math.fma(x, v.x(), Math.fma(y, v.y(), z * v.z()));
        return dot / (float)Math.sqrt(length1Squared * length2Squared);
    }
    public float angle(Vector3fc v) {
        float cos = angleCos(v);
        cos = cos < 1 ? cos : 1;
        cos = cos > -1 ? cos : -1;
        return Math.acos(cos);
    }
    public float angleSigned(Vector3fc v, Vector3fc n) {
        return angleSigned(v.x(), v.y(), v.z(), n.x(), n.y(), n.z());
    }
    public float angleSigned(float x, float y, float z, float nx, float ny, float nz) {
        float tx = this.x, ty = this.y, tz = this.z;
        return Math.atan2(
                (ty * z - tz * y) * nx + (tz * x - tx * z) * ny + (tx * y - ty * x) * nz,
                tx * x + ty * y + tz * z);
    }
    public Vector3f min(Vector3fc v) {
        return min(v, this);
    }
    public Vector3f min(Vector3fc v, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        return dest;
    }
    public Vector3f max(Vector3fc v) {
        return max(v, this);
    }
    public Vector3f max(Vector3fc v, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        return dest;
    }
    public Vector3f zero() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        return this;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + " " + Runtime.format(z, formatter) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(x);
        out.writeFloat(y);
        out.writeFloat(z);
    }
    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        set(in.readFloat(), in.readFloat(), in.readFloat());
    }
    public Vector3f negate() {
        return negate(this);
    }
    public Vector3f negate(Vector3f dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        return dest;
    }
    public Vector3f absolute() {
        return absolute(this);
    }
    public Vector3f absolute(Vector3f dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        dest.z = Math.abs(this.z);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(x);
        result = prime * result + Float.floatToIntBits(y);
        result = prime * result + Float.floatToIntBits(z);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector3f other = (Vector3f) obj;
        if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))
            return false;
        if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))
            return false;
        if (Float.floatToIntBits(z) != Float.floatToIntBits(other.z))
            return false;
        return true;
    }
    public boolean equals(Vector3fc v, float delta) {
        if (this == v)
            return true;
        if (v == null)
            return false;
        if (getClass() != v.getClass())
            return false;
        if (!Runtime.equals(x, v.x(), delta))
            return false;
        if (!Runtime.equals(y, v.y(), delta))
            return false;
        if (!Runtime.equals(z, v.z(), delta))
            return false;
        return true;
    }
    public boolean equals(float x, float y, float z) {
        if (Float.floatToIntBits(this.x) != Float.floatToIntBits(x))
            return false;
        if (Float.floatToIntBits(this.y) != Float.floatToIntBits(y))
            return false;
        if (Float.floatToIntBits(this.z) != Float.floatToIntBits(z))
            return false;
        return true;
    }
    public Vector3f reflect(Vector3fc normal) {
        float x = normal.x();
        float y = normal.y();
        float z = normal.z();
        float dot = Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
        this.x = this.x - (dot + dot) * x;
        this.y = this.y - (dot + dot) * y;
        this.z = this.z - (dot + dot) * z;
        return this;
    }
    public Vector3f reflect(float x, float y, float z) {
        float dot = Math.fma(this.x, x, Math.fma(this.y, y, this.z * z));
        this.x = this.x - (dot + dot) * x;
        this.y = this.y - (dot + dot) * y;
        this.z = this.z - (dot + dot) * z;
        return this;
    }
    public Vector3f reflect(Vector3fc normal, Vector3f dest) {
        return reflect(normal.x(), normal.y(), normal.z(), dest);
    }
    public Vector3f reflect(float x, float y, float z, Vector3f dest) {
        float dot = this.dot(x, y, z);
        dest.x = this.x - (dot + dot) * x;
        dest.y = this.y - (dot + dot) * y;
        dest.z = this.z - (dot + dot) * z;
        return dest;
    }
    public Vector3f half(Vector3fc other) {
        return this.set(this).add(other.x(), other.y(), other.z()).normalize();
    }
    public Vector3f half(float x, float y, float z) {
        return half(x, y, z, this);
    }
    public Vector3f half(Vector3fc other, Vector3f dest) {
        return half(other.x(), other.y(), other.z(), dest);
    }
    public Vector3f half(float x, float y, float z, Vector3f dest) {
        return dest.set(this).add(x, y, z).normalize();
    }
    public Vector3f smoothStep(Vector3fc v, float t, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        float t2 = t * t;
        float t3 = t2 * t;
        dest.x = (x + x - v.x() - v.x()) * t3 + (3.0f * v.x() - 3.0f * x) * t2 + x * t + x;
        dest.y = (y + y - v.y() - v.y()) * t3 + (3.0f * v.y() - 3.0f * y) * t2 + y * t + y;
        dest.z = (z + z - v.z() - v.z()) * t3 + (3.0f * v.z() - 3.0f * z) * t2 + z * t + z;
        return dest;
    }
    public Vector3f hermite(Vector3fc t0, Vector3fc v1, Vector3fc t1, float t, Vector3f dest) {
        float x = this.x, y = this.y, z = this.z;
        float t2 = t * t;
        float t3 = t2 * t;
        dest.x = (x + x - v1.x() - v1.x() + t1.x() + t0.x()) * t3 + (3.0f * v1.x() - 3.0f * x - t0.x() - t0.x() - t1.x()) * t2 + x * t + x;
        dest.y = (y + y - v1.y() - v1.y() + t1.y() + t0.y()) * t3 + (3.0f * v1.y() - 3.0f * y - t0.y() - t0.y() - t1.y()) * t2 + y * t + y;
        dest.z = (z + z - v1.z() - v1.z() + t1.z() + t0.z()) * t3 + (3.0f * v1.z() - 3.0f * z - t0.z() - t0.z() - t1.z()) * t2 + z * t + z;
        return dest;
    }
    public Vector3f lerp(Vector3fc other, float t) {
        return lerp(other, t, this);
    }
    public Vector3f lerp(Vector3fc other, float t, Vector3f dest) {
        dest.x = Math.fma(other.x() - x, t, x);
        dest.y = Math.fma(other.y() - y, t, y);
        dest.z = Math.fma(other.z() - z, t, z);
        return dest;
    }
    public float get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector3i get(int mode, Vector3i dest) {
        dest.x = Math.roundUsing(this.x(), mode);
        dest.y = Math.roundUsing(this.y(), mode);
        dest.z = Math.roundUsing(this.z(), mode);
        return dest;
    }
    public Vector3f get(Vector3f dest) {
        dest.x = this.x();
        dest.y = this.y();
        dest.z = this.z();
        return dest;
    }
    public Vector3d get(Vector3d dest) {
        dest.x = this.x();
        dest.y = this.y();
        dest.z = this.z();
        return dest;
    }
    public int maxComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        if (absX >= absY && absX >= absZ) {
            return 0;
        } else if (absY >= absZ) {
            return 1;
        }
        return 2;
    }
    public int minComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        if (absX < absY && absX < absZ) {
            return 0;
        } else if (absY < absZ) {
            return 1;
        }
        return 2;
    }
    public Vector3f orthogonalize(Vector3fc v, Vector3f dest) {
        float rx, ry, rz;
        if (Math.abs(v.x()) > Math.abs(v.z())) {
            rx = -v.y();
            ry = v.x();
            rz = 0.0f;
        } else {
            rx = 0.0f;
            ry = -v.z();
            rz = v.y();
        }
        float invLen = Math.invsqrt(rx * rx + ry * ry + rz * rz);
        dest.x = rx * invLen;
        dest.y = ry * invLen;
        dest.z = rz * invLen;
        return dest;
    }
    public Vector3f orthogonalize(Vector3fc v) {
        return orthogonalize(v, this);
    }
    public Vector3f orthogonalizeUnit(Vector3fc v, Vector3f dest) {
        return orthogonalize(v, dest);
    }
    public Vector3f orthogonalizeUnit(Vector3fc v) {
        return orthogonalizeUnit(v, this);
    }
    public Vector3f floor() {
        return floor(this);
    }
    public Vector3f floor(Vector3f dest) {
        dest.x = Math.floor(x);
        dest.y = Math.floor(y);
        dest.z = Math.floor(z);
        return dest;
    }
    public Vector3f ceil() {
        return ceil(this);
    }
    public Vector3f ceil(Vector3f dest) {
        dest.x = Math.ceil(x);
        dest.y = Math.ceil(y);
        dest.z = Math.ceil(z);
        return dest;
    }
    public Vector3f round() {
        return round(this);
    }
    public Vector3f round(Vector3f dest) {
        dest.x = Math.round(x);
        dest.y = Math.round(y);
        dest.z = Math.round(z);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y) && Math.isFinite(z);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix3fc {
    float m00();
    float m01();
    float m02();
    float m10();
    float m11();
    float m12();
    float m20();
    float m21();
    float m22();
    Matrix3f mul(Matrix3fc right, Matrix3f dest);
    Matrix3f mulLocal(Matrix3fc left, Matrix3f dest);
    float determinant();
    Matrix3f invert(Matrix3f dest);
    Matrix3f transpose(Matrix3f dest);
    Matrix3f get(Matrix3f dest);
    Matrix4f get(Matrix4f dest);
    AxisAngle4f getRotation(AxisAngle4f dest);
    Quaternionf getUnnormalizedRotation(Quaternionf dest);
    Quaternionf getNormalizedRotation(Quaternionf dest);
    Quaterniond getUnnormalizedRotation(Quaterniond dest);
    Quaterniond getNormalizedRotation(Quaterniond dest);
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    FloatBuffer get3x4(FloatBuffer buffer);
    FloatBuffer get3x4(int index, FloatBuffer buffer);
    ByteBuffer get3x4(ByteBuffer buffer);
    ByteBuffer get3x4(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    Matrix3fc getToAddress(long address);
    Matrix3fc getTransposedToAddress(long address);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    Matrix3f scale(Vector3fc xyz, Matrix3f dest);
    Matrix3f scale(float x, float y, float z, Matrix3f dest);
    Matrix3f scale(float xyz, Matrix3f dest);
    Matrix3f scaleLocal(float x, float y, float z, Matrix3f dest);
    Vector3f transform(Vector3f v);
    Vector3f transform(Vector3fc v, Vector3f dest);
    Vector3f transform(float x, float y, float z, Vector3f dest);
    Vector3f transformTranspose(Vector3f v);
    Vector3f transformTranspose(Vector3fc v, Vector3f dest);
    Vector3f transformTranspose(float x, float y, float z, Vector3f dest);
    Matrix3f rotateX(float ang, Matrix3f dest);
    Matrix3f rotateY(float ang, Matrix3f dest);
    Matrix3f rotateZ(float ang, Matrix3f dest);
    Matrix3f rotateXYZ(float angleX, float angleY, float angleZ, Matrix3f dest);
    Matrix3f rotateZYX(float angleZ, float angleY, float angleX, Matrix3f dest);
    Matrix3f rotateYXZ(float angleY, float angleX, float angleZ, Matrix3f dest);
    Matrix3f rotate(float ang, float x, float y, float z, Matrix3f dest);
    Matrix3f rotateLocal(float ang, float x, float y, float z, Matrix3f dest);
    Matrix3f rotateLocalX(float ang, Matrix3f dest);
    Matrix3f rotateLocalY(float ang, Matrix3f dest);
    Matrix3f rotateLocalZ(float ang, Matrix3f dest);
    Matrix3f rotate(Quaternionfc quat, Matrix3f dest);
    Matrix3f rotateLocal(Quaternionfc quat, Matrix3f dest);
    Matrix3f rotate(AxisAngle4f axisAngle, Matrix3f dest);
    Matrix3f rotate(float angle, Vector3fc axis, Matrix3f dest);
    Matrix3f lookAlong(Vector3fc dir, Vector3fc up, Matrix3f dest);
    Matrix3f lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix3f dest);
    Vector3f getRow(int row, Vector3f dest) throws IndexOutOfBoundsException;
    Vector3f getColumn(int column, Vector3f dest) throws IndexOutOfBoundsException;
    float get(int column, int row);
    float getRowColumn(int row, int column);
    Matrix3f normal(Matrix3f dest);
    Matrix3f cofactor(Matrix3f dest);
    Vector3f getScale(Vector3f dest);
    Vector3f positiveZ(Vector3f dir);
    Vector3f normalizedPositiveZ(Vector3f dir);
    Vector3f positiveX(Vector3f dir);
    Vector3f normalizedPositiveX(Vector3f dir);
    Vector3f positiveY(Vector3f dir);
    Vector3f normalizedPositiveY(Vector3f dir);
    Matrix3f add(Matrix3fc other, Matrix3f dest);
    Matrix3f sub(Matrix3fc subtrahend, Matrix3f dest);
    Matrix3f mulComponentWise(Matrix3fc other, Matrix3f dest);
    Matrix3f lerp(Matrix3fc other, float t, Matrix3f dest);
    Matrix3f rotateTowards(Vector3fc direction, Vector3fc up, Matrix3f dest);
    Matrix3f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix3f dest);
    Vector3f getEulerAnglesXYZ(Vector3f dest);
    Vector3f getEulerAnglesZYX(Vector3f dest);
    Vector3f getEulerAnglesYXZ(Vector3f dest);
    Matrix3f obliqueZ(float a, float b, Matrix3f dest);
    boolean equals(Matrix3fc m, float delta);
    Matrix3f reflect(float nx, float ny, float nz, Matrix3f dest);
    Matrix3f reflect(Quaternionfc orientation, Matrix3f dest);
    Matrix3f reflect(Vector3fc normal, Matrix3f dest);
    boolean isFinite();
    float quadraticFormProduct(float x, float y, float z);
    float quadraticFormProduct(Vector3fc v);
    Matrix3f mapXZY(Matrix3f dest);
    Matrix3f mapXZnY(Matrix3f dest);
    Matrix3f mapXnYnZ(Matrix3f dest);
    Matrix3f mapXnZY(Matrix3f dest);
    Matrix3f mapXnZnY(Matrix3f dest);
    Matrix3f mapYXZ(Matrix3f dest);
    Matrix3f mapYXnZ(Matrix3f dest);
    Matrix3f mapYZX(Matrix3f dest);
    Matrix3f mapYZnX(Matrix3f dest);
    Matrix3f mapYnXZ(Matrix3f dest);
    Matrix3f mapYnXnZ(Matrix3f dest);
    Matrix3f mapYnZX(Matrix3f dest);
    Matrix3f mapYnZnX(Matrix3f dest);
    Matrix3f mapZXY(Matrix3f dest);
    Matrix3f mapZXnY(Matrix3f dest);
    Matrix3f mapZYX(Matrix3f dest);
    Matrix3f mapZYnX(Matrix3f dest);
    Matrix3f mapZnXY(Matrix3f dest);
    Matrix3f mapZnXnY(Matrix3f dest);
    Matrix3f mapZnYX(Matrix3f dest);
    Matrix3f mapZnYnX(Matrix3f dest);
    Matrix3f mapnXYnZ(Matrix3f dest);
    Matrix3f mapnXZY(Matrix3f dest);
    Matrix3f mapnXZnY(Matrix3f dest);
    Matrix3f mapnXnYZ(Matrix3f dest);
    Matrix3f mapnXnYnZ(Matrix3f dest);
    Matrix3f mapnXnZY(Matrix3f dest);
    Matrix3f mapnXnZnY(Matrix3f dest);
    Matrix3f mapnYXZ(Matrix3f dest);
    Matrix3f mapnYXnZ(Matrix3f dest);
    Matrix3f mapnYZX(Matrix3f dest);
    Matrix3f mapnYZnX(Matrix3f dest);
    Matrix3f mapnYnXZ(Matrix3f dest);
    Matrix3f mapnYnXnZ(Matrix3f dest);
    Matrix3f mapnYnZX(Matrix3f dest);
    Matrix3f mapnYnZnX(Matrix3f dest);
    Matrix3f mapnZXY(Matrix3f dest);
    Matrix3f mapnZXnY(Matrix3f dest);
    Matrix3f mapnZYX(Matrix3f dest);
    Matrix3f mapnZYnX(Matrix3f dest);
    Matrix3f mapnZnXY(Matrix3f dest);
    Matrix3f mapnZnXnY(Matrix3f dest);
    Matrix3f mapnZnYX(Matrix3f dest);
    Matrix3f mapnZnYnX(Matrix3f dest);
    Matrix3f negateX(Matrix3f dest);
    Matrix3f negateY(Matrix3f dest);
    Matrix3f negateZ(Matrix3f dest);
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix4x3fc {
    int PLANE_NX = 0;
    int PLANE_PX = 1;
    int PLANE_NY = 2;
    int PLANE_PY = 3;
    int PLANE_NZ = 4;
    int PLANE_PZ = 5;
    byte PROPERTY_UNKNOWN = 0;
    byte PROPERTY_IDENTITY = 1<<2;
    byte PROPERTY_TRANSLATION = 1<<3;
    byte PROPERTY_ORTHONORMAL = 1<<4;
    int properties();
    float m00();
    float m01();
    float m02();
    float m10();
    float m11();
    float m12();
    float m20();
    float m21();
    float m22();
    float m30();
    float m31();
    float m32();
    Matrix4f get(Matrix4f dest);
    Matrix4d get(Matrix4d dest);
    Matrix4x3f mul(Matrix4x3fc right, Matrix4x3f dest);
    Matrix4x3f mulTranslation(Matrix4x3fc right, Matrix4x3f dest);
    Matrix4x3f mulOrtho(Matrix4x3fc view, Matrix4x3f dest);
    Matrix4x3f mul3x3(float rm00, float rm01, float rm02, float rm10, float rm11, float rm12, float rm20, float rm21, float rm22, Matrix4x3f dest);
    Matrix4x3f fma(Matrix4x3fc other, float otherFactor, Matrix4x3f dest);
    Matrix4x3f add(Matrix4x3fc other, Matrix4x3f dest);
    Matrix4x3f sub(Matrix4x3fc subtrahend, Matrix4x3f dest);
    Matrix4x3f mulComponentWise(Matrix4x3fc other, Matrix4x3f dest);
    float determinant();
    Matrix4x3f invert(Matrix4x3f dest);
    Matrix4f invert(Matrix4f dest);
    Matrix4x3f invertOrtho(Matrix4x3f dest);
    Matrix4x3f transpose3x3(Matrix4x3f dest);
    Matrix3f transpose3x3(Matrix3f dest);
    Vector3f getTranslation(Vector3f dest);
    Vector3f getScale(Vector3f dest);
    Matrix4x3f get(Matrix4x3f dest);
    Matrix4x3d get(Matrix4x3d dest);
    AxisAngle4f getRotation(AxisAngle4f dest);
    AxisAngle4d getRotation(AxisAngle4d dest);
    Quaternionf getUnnormalizedRotation(Quaternionf dest);
    Quaternionf getNormalizedRotation(Quaternionf dest);
    Quaterniond getUnnormalizedRotation(Quaterniond dest);
    Quaterniond getNormalizedRotation(Quaterniond dest);
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    Matrix4x3fc getToAddress(long address);
    Matrix4x3fc getTransposedToAddress(long address);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    float[] get4x4(float[] arr, int offset);
    float[] get4x4(float[] arr);
    FloatBuffer get4x4(FloatBuffer buffer);
    FloatBuffer get4x4(int index, FloatBuffer buffer);
    ByteBuffer get4x4(ByteBuffer buffer);
    ByteBuffer get4x4(int index, ByteBuffer buffer);
    FloatBuffer get3x4(FloatBuffer buffer);
    FloatBuffer get3x4(int index, FloatBuffer buffer);
    ByteBuffer get3x4(ByteBuffer buffer);
    ByteBuffer get3x4(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    float[] getTransposed(float[] arr, int offset);
    float[] getTransposed(float[] arr);
    Vector4f transform(Vector4f v);
    Vector4f transform(Vector4fc v, Vector4f dest);
    Vector3f transformPosition(Vector3f v);
    Vector3f transformPosition(Vector3fc v, Vector3f dest);
    Vector3f transformDirection(Vector3f v);
    Vector3f transformDirection(Vector3fc v, Vector3f dest);
    Matrix4x3f scale(Vector3fc xyz, Matrix4x3f dest);
    Matrix4x3f scale(float xyz, Matrix4x3f dest);
    Matrix4x3f scaleXY(float x, float y, Matrix4x3f dest);
    Matrix4x3f scaleAround(float sx, float sy, float sz, float ox, float oy, float oz, Matrix4x3f dest);
    Matrix4x3f scaleAround(float factor, float ox, float oy, float oz, Matrix4x3f dest);
    Matrix4x3f scale(float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f scaleLocal(float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f rotateX(float ang, Matrix4x3f dest);
    Matrix4x3f rotateY(float ang, Matrix4x3f dest);
    Matrix4x3f rotateZ(float ang, Matrix4x3f dest);
    Matrix4x3f rotateXYZ(float angleX, float angleY, float angleZ, Matrix4x3f dest);
    Matrix4x3f rotateZYX(float angleZ, float angleY, float angleX, Matrix4x3f dest);
    Matrix4x3f rotateYXZ(float angleY, float angleX, float angleZ, Matrix4x3f dest);
    Matrix4x3f rotate(float ang, float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f rotateTranslation(float ang, float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f rotateAround(Quaternionfc quat, float ox, float oy, float oz, Matrix4x3f dest);
    Matrix4x3f rotateLocal(float ang, float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f translate(Vector3fc offset, Matrix4x3f dest);
    Matrix4x3f translate(float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f translateLocal(Vector3fc offset, Matrix4x3f dest);
    Matrix4x3f translateLocal(float x, float y, float z, Matrix4x3f dest);
    Matrix4x3f ortho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest);
    Matrix4x3f ortho(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4x3f dest);
    Matrix4x3f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest);
    Matrix4x3f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4x3f dest);
    Matrix4x3f orthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest);
    Matrix4x3f orthoSymmetric(float width, float height, float zNear, float zFar, Matrix4x3f dest);
    Matrix4x3f orthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest);
    Matrix4x3f orthoSymmetricLH(float width, float height, float zNear, float zFar, Matrix4x3f dest);
    Matrix4x3f ortho2D(float left, float right, float bottom, float top, Matrix4x3f dest);
    Matrix4x3f ortho2DLH(float left, float right, float bottom, float top, Matrix4x3f dest);
    Matrix4x3f lookAlong(Vector3fc dir, Vector3fc up, Matrix4x3f dest);
    Matrix4x3f lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4x3f dest);
    Matrix4x3f lookAt(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4x3f dest);
    Matrix4x3f lookAt(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ, Matrix4x3f dest);
    Matrix4x3f lookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4x3f dest);
    Matrix4x3f lookAtLH(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ, Matrix4x3f dest);
    Matrix4x3f rotate(Quaternionfc quat, Matrix4x3f dest);
    Matrix4x3f rotateTranslation(Quaternionfc quat, Matrix4x3f dest);
    Matrix4x3f rotateLocal(Quaternionfc quat, Matrix4x3f dest);
    Matrix4x3f rotate(AxisAngle4f axisAngle, Matrix4x3f dest);
    Matrix4x3f rotate(float angle, Vector3fc axis, Matrix4x3f dest);
    Matrix4x3f reflect(float a, float b, float c, float d, Matrix4x3f dest);
    Matrix4x3f reflect(float nx, float ny, float nz, float px, float py, float pz, Matrix4x3f dest);
    Matrix4x3f reflect(Quaternionfc orientation, Vector3fc point, Matrix4x3f dest);
    Matrix4x3f reflect(Vector3fc normal, Vector3fc point, Matrix4x3f dest);
    Vector4f getRow(int row, Vector4f dest) throws IndexOutOfBoundsException;
    Vector3f getColumn(int column, Vector3f dest) throws IndexOutOfBoundsException;
    Matrix4x3f normal(Matrix4x3f dest);
    Matrix3f normal(Matrix3f dest);
    Matrix3f cofactor3x3(Matrix3f dest);
    Matrix4x3f cofactor3x3(Matrix4x3f dest);
    Matrix4x3f normalize3x3(Matrix4x3f dest);
    Matrix3f normalize3x3(Matrix3f dest);
    Vector4f frustumPlane(int which, Vector4f dest);
    Vector3f positiveZ(Vector3f dir);
    Vector3f normalizedPositiveZ(Vector3f dir);
    Vector3f positiveX(Vector3f dir);
    Vector3f normalizedPositiveX(Vector3f dir);
    Vector3f positiveY(Vector3f dir);
    Vector3f normalizedPositiveY(Vector3f dir);
    Vector3f origin(Vector3f origin);
    Matrix4x3f shadow(Vector4fc light, float a, float b, float c, float d, Matrix4x3f dest);
    Matrix4x3f shadow(float lightX, float lightY, float lightZ, float lightW, float a, float b, float c, float d, Matrix4x3f dest);
    Matrix4x3f shadow(Vector4fc light, Matrix4x3fc planeTransform, Matrix4x3f dest);
    Matrix4x3f shadow(float lightX, float lightY, float lightZ, float lightW, Matrix4x3fc planeTransform, Matrix4x3f dest);
    Matrix4x3f pick(float x, float y, float width, float height, int[] viewport, Matrix4x3f dest);
    Matrix4x3f arcball(float radius, float centerX, float centerY, float centerZ, float angleX, float angleY, Matrix4x3f dest);
    Matrix4x3f arcball(float radius, Vector3fc center, float angleX, float angleY, Matrix4x3f dest);
    Matrix4x3f transformAab(float minX, float minY, float minZ, float maxX, float maxY, float maxZ, Vector3f outMin, Vector3f outMax);
    Matrix4x3f transformAab(Vector3fc min, Vector3fc max, Vector3f outMin, Vector3f outMax);
    Matrix4x3f lerp(Matrix4x3fc other, float t, Matrix4x3f dest);
    Matrix4x3f rotateTowards(Vector3fc dir, Vector3fc up, Matrix4x3f dest);
    Matrix4x3f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4x3f dest);
    Vector3f getEulerAnglesXYZ(Vector3f dest);
    Vector3f getEulerAnglesZYX(Vector3f dest);
    Vector3f getEulerAnglesYXZ(Vector3f dest);
    Matrix4x3f obliqueZ(float a, float b, Matrix4x3f dest);
    Matrix4x3f withLookAtUp(Vector3fc up, Matrix4x3f dest);
    Matrix4x3f withLookAtUp(float upX, float upY, float upZ, Matrix4x3f dest);
    Matrix4x3f mapXZY(Matrix4x3f dest);
    Matrix4x3f mapXZnY(Matrix4x3f dest);
    Matrix4x3f mapXnYnZ(Matrix4x3f dest);
    Matrix4x3f mapXnZY(Matrix4x3f dest);
    Matrix4x3f mapXnZnY(Matrix4x3f dest);
    Matrix4x3f mapYXZ(Matrix4x3f dest);
    Matrix4x3f mapYXnZ(Matrix4x3f dest);
    Matrix4x3f mapYZX(Matrix4x3f dest);
    Matrix4x3f mapYZnX(Matrix4x3f dest);
    Matrix4x3f mapYnXZ(Matrix4x3f dest);
    Matrix4x3f mapYnXnZ(Matrix4x3f dest);
    Matrix4x3f mapYnZX(Matrix4x3f dest);
    Matrix4x3f mapYnZnX(Matrix4x3f dest);
    Matrix4x3f mapZXY(Matrix4x3f dest);
    Matrix4x3f mapZXnY(Matrix4x3f dest);
    Matrix4x3f mapZYX(Matrix4x3f dest);
    Matrix4x3f mapZYnX(Matrix4x3f dest);
    Matrix4x3f mapZnXY(Matrix4x3f dest);
    Matrix4x3f mapZnXnY(Matrix4x3f dest);
    Matrix4x3f mapZnYX(Matrix4x3f dest);
    Matrix4x3f mapZnYnX(Matrix4x3f dest);
    Matrix4x3f mapnXYnZ(Matrix4x3f dest);
    Matrix4x3f mapnXZY(Matrix4x3f dest);
    Matrix4x3f mapnXZnY(Matrix4x3f dest);
    Matrix4x3f mapnXnYZ(Matrix4x3f dest);
    Matrix4x3f mapnXnYnZ(Matrix4x3f dest);
    Matrix4x3f mapnXnZY(Matrix4x3f dest);
    Matrix4x3f mapnXnZnY(Matrix4x3f dest);
    Matrix4x3f mapnYXZ(Matrix4x3f dest);
    Matrix4x3f mapnYXnZ(Matrix4x3f dest);
    Matrix4x3f mapnYZX(Matrix4x3f dest);
    Matrix4x3f mapnYZnX(Matrix4x3f dest);
    Matrix4x3f mapnYnXZ(Matrix4x3f dest);
    Matrix4x3f mapnYnXnZ(Matrix4x3f dest);
    Matrix4x3f mapnYnZX(Matrix4x3f dest);
    Matrix4x3f mapnYnZnX(Matrix4x3f dest);
    Matrix4x3f mapnZXY(Matrix4x3f dest);
    Matrix4x3f mapnZXnY(Matrix4x3f dest);
    Matrix4x3f mapnZYX(Matrix4x3f dest);
    Matrix4x3f mapnZYnX(Matrix4x3f dest);
    Matrix4x3f mapnZnXY(Matrix4x3f dest);
    Matrix4x3f mapnZnXnY(Matrix4x3f dest);
    Matrix4x3f mapnZnYX(Matrix4x3f dest);
    Matrix4x3f mapnZnYnX(Matrix4x3f dest);
    Matrix4x3f negateX(Matrix4x3f dest);
    Matrix4x3f negateY(Matrix4x3f dest);
    Matrix4x3f negateZ(Matrix4x3f dest);
    boolean equals(Matrix4x3fc m, float delta);
    boolean isFinite();
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector2d implements Externalizable, Cloneable, Vector2dc {
    private static final long serialVersionUID = 1L;
    public double x;
    public double y;
    public Vector2d() {
    }
    public Vector2d(double d) {
        this.x = d;
        this.y = d;
    }
    public Vector2d(double x, double y) {
        this.x = x;
        this.y = y;
    }
    public Vector2d(Vector2dc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2d(Vector2fc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2d(Vector2ic v) {
        x = v.x();
        y = v.y();
    }
    public Vector2d(Vector3dc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2d(Vector3fc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2d(Vector3ic v) {
        x = v.x();
        y = v.y();
    }
    public Vector2d(double[] xy) {
        this.x = xy[0];
        this.y = xy[1];
    }
    public Vector2d(float[] xy) {
        this.x = xy[0];
        this.y = xy[1];
    }
    public Vector2d(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2d(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector2d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2d(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public double x() {
        return this.x;
    }
    public double y() {
        return this.y;
    }
    public Vector2d set(double d) {
        this.x = d;
        this.y = d;
        return this;
    }
    public Vector2d set(double x, double y) {
        this.x = x;
        this.y = y;
        return this;
    }
    public Vector2d set(Vector2dc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2d set(Vector2fc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2d set(Vector2ic v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2d set(Vector3dc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2d set(Vector3fc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2d set(Vector3ic v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2d set(double[] xy) {
        this.x = xy[0];
        this.y = xy[1];
        return this;
    }
    public Vector2d set(float[] xy) {
        this.x = xy[0];
        this.y = xy[1];
        return this;
    }
    public Vector2d set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2d set(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public double get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector2i get(int mode, Vector2i dest) {
        dest.x = Math.roundUsing(this.x(), mode);
        dest.y = Math.roundUsing(this.y(), mode);
        return dest;
    }
    public Vector2f get(Vector2f dest) {
        dest.x = (float) this.x();
        dest.y = (float) this.y();
        return dest;
    }
    public Vector2d get(Vector2d dest) {
        dest.x = this.x();
        dest.y = this.y();
        return dest;
    }
    public Vector2d setComponent(int component, double value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer get(DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public DoubleBuffer get(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector2dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector2d perpendicular() {
        double xTemp = y;
        this.y = x * -1;
        this.x = xTemp;
        return this;
    }
    public Vector2d sub(Vector2dc v) {
        return sub(v, this);
    }
    public Vector2d sub(double x, double y) {
        return sub(x, y, this);
    }
    public Vector2d sub(double x, double y, Vector2d dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        return dest;
    }
    public Vector2d sub(Vector2fc v) {
        return sub(v, this);
    }
    public Vector2d sub(Vector2dc v, Vector2d dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        return dest;
    }
    public Vector2d sub(Vector2fc v, Vector2d dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        return dest;
    }
    public Vector2d mul(double scalar) {
        return mul(scalar, this);
    }
    public Vector2d mul(double scalar, Vector2d dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        return dest;
    }
    public Vector2d mul(double x, double y) {
        return mul(x, y, this);
    }
    public Vector2d mul(double x, double y, Vector2d dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        return dest;
    }
    public Vector2d mul(Vector2dc v) {
        return mul(v, this);
    }
    public Vector2d mul(Vector2dc v, Vector2d dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        return dest;
    }
    public Vector2d div(double scalar) {
        return div(scalar, this);
    }
    public Vector2d div(double scalar, Vector2d dest) {
        double inv = 1.0 / scalar;
        dest.x = x * inv;
        dest.y = y * inv;
        return dest;
    }
    public Vector2d div(double x, double y) {
        return div(x, y, this);
    }
    public Vector2d div(double x, double y, Vector2d dest) {
        dest.x = this.x / x;
        dest.y = this.y / y;
        return dest;
    }
    public Vector2d div(Vector2dc v) {
        return div(v, this);
    }
    public Vector2d div(Vector2fc v) {
        return div(v, this);
    }
    public Vector2d div(Vector2fc v, Vector2d dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        return dest;
    }
    public Vector2d div(Vector2dc v, Vector2d dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        return dest;
    }
    public Vector2d mul(Matrix2fc mat) {
        return mul(mat, this);
    }
    public Vector2d mul(Matrix2dc mat) {
        return mul(mat, this);
    }
    public Vector2d mul(Matrix2dc mat, Vector2d dest) {
        double rx = mat.m00() * x + mat.m10() * y;
        double ry = mat.m01() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2d mul(Matrix2fc mat, Vector2d dest) {
        double rx = mat.m00() * x + mat.m10() * y;
        double ry = mat.m01() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2d mulTranspose(Matrix2dc mat) {
        return mulTranspose(mat, this);
    }
    public Vector2d mulTranspose(Matrix2dc mat, Vector2d dest) {
        double rx = mat.m00() * x + mat.m01() * y;
        double ry = mat.m10() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2d mulTranspose(Matrix2fc mat) {
        return mulTranspose(mat, this);
    }
    public Vector2d mulTranspose(Matrix2fc mat, Vector2d dest) {
        double rx = mat.m00() * x + mat.m01() * y;
        double ry = mat.m10() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2d mulPosition(Matrix3x2dc mat) {
        return mulPosition(mat, this);
    }
    public Vector2d mulPosition(Matrix3x2dc mat, Vector2d dest) {
        double rx = mat.m00() * x + mat.m10() * y + mat.m20();
        double ry = mat.m01() * x + mat.m11() * y + mat.m21();
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public Vector2d mulDirection(Matrix3x2dc mat) {
        return mulDirection(mat, this);
    }
    public Vector2d mulDirection(Matrix3x2dc mat, Vector2d dest) {
        double rx = mat.m00() * x + mat.m10() * y;
        double ry = mat.m01() * x + mat.m11() * y;
        dest.x = rx;
        dest.y = ry;
        return dest;
    }
    public double dot(Vector2dc v) {
        return x * v.x() + y * v.y();
    }
    public double angle(Vector2dc v) {
        double dot = x*v.x() + y*v.y();
        double det = x*v.y() - y*v.x();
        return Math.atan2(det, dot);
    }
    public double lengthSquared() {
        return x * x + y * y;
    }
    public static double lengthSquared(double x, double y) {
        return x * x + y * y;
    }
    public double length() {
        return Math.sqrt(x * x + y * y);
    }
    public static double length(double x, double y) {
        return Math.sqrt(x * x + y * y);
    }
    public double distance(Vector2dc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        return Math.sqrt(dx * dx + dy * dy);
    }
    public double distanceSquared(Vector2dc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        return dx * dx + dy * dy;
    }
    public double distance(Vector2fc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        return Math.sqrt(dx * dx + dy * dy);
    }
    public double distanceSquared(Vector2fc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        return dx * dx + dy * dy;
    }
    public double distance(double x, double y) {
        double dx = this.x - x;
        double dy = this.y - y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    public double distanceSquared(double x, double y) {
        double dx = this.x - x;
        double dy = this.y - y;
        return dx * dx + dy * dy;
    }
    public static double distance(double x1, double y1, double x2, double y2) {
        double dx = x1 - x2;
        double dy = y1 - y2;
        return Math.sqrt(dx * dx + dy * dy);
    }
    public static double distanceSquared(double x1, double y1, double x2, double y2) {
        double dx = x1 - x2;
        double dy = y1 - y2;
        return dx * dx + dy * dy;
    }
    public Vector2d normalize() {
        return normalize(this);
    }
    public Vector2d normalize(Vector2d dest) {
        double invLength = Math.invsqrt(x * x + y * y);
        dest.x = x * invLength;
        dest.y = y * invLength;
        return dest;
    }
    public Vector2d normalize(double length) {
        return normalize(length, this);
    }
    public Vector2d normalize(double length, Vector2d dest) {
        double invLength = Math.invsqrt(x * x + y * y) * length;
        dest.x = x * invLength;
        dest.y = y * invLength;
        return dest;
    }
    public Vector2d add(Vector2dc v) {
        return add(v, this);
    }
    public Vector2d add(double x, double y) {
        return add(x, y, this);
    }
    public Vector2d add(double x, double y, Vector2d dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        return dest;
    }
    public Vector2d add(Vector2fc v) {
        return add(v, this);
    }
    public Vector2d add(Vector2dc v, Vector2d dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        return dest;
    }
    public Vector2d add(Vector2fc v, Vector2d dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        return dest;
    }
    public Vector2d zero() {
        this.x = 0;
        this.y = 0;
        return this;
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(x);
        out.writeDouble(y);
    }
    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        x = in.readDouble();
        y = in.readDouble();
    }
    public Vector2d negate() {
        return negate(this);
    }
    public Vector2d negate(Vector2d dest) {
        dest.x = -x;
        dest.y = -y;
        return dest;
    }
    public Vector2d lerp(Vector2dc other, double t) {
        return lerp(other, t, this);
    }
    public Vector2d lerp(Vector2dc other, double t, Vector2d dest) {
        dest.x = x + (other.x() - x) * t;
        dest.y = y + (other.y() - y) * t;
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(x);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(y);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector2d other = (Vector2d) obj;
        if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
            return false;
        if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
            return false;
        return true;
    }
    public boolean equals(Vector2dc v, double delta) {
        if (this == v)
            return true;
        if (v == null)
            return false;
        if (getClass() != v.getClass())
            return false;
        if (!Runtime.equals(x, v.x(), delta))
            return false;
        if (!Runtime.equals(y, v.y(), delta))
            return false;
        return true;
    }
    public boolean equals(double x, double y) {
        if (Double.doubleToLongBits(this.x) != Double.doubleToLongBits(x))
            return false;
        if (Double.doubleToLongBits(this.y) != Double.doubleToLongBits(y))
            return false;
        return true;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + ")";
    }
    public Vector2d fma(Vector2dc a, Vector2dc b) {
        return fma(a, b, this);
    }
    public Vector2d fma(double a, Vector2dc b) {
        return fma(a, b, this);
    }
    public Vector2d fma(Vector2dc a, Vector2dc b, Vector2d dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        return dest;
    }
    public Vector2d fma(double a, Vector2dc b, Vector2d dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        return dest;
    }
    public Vector2d min(Vector2dc v) {
        return min(v, this);
    }
    public Vector2d min(Vector2dc v, Vector2d dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        return dest;
    }
    public Vector2d max(Vector2dc v) {
        return max(v, this);
    }
    public Vector2d max(Vector2dc v, Vector2d dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        return dest;
    }
    public int maxComponent() {
        double absX = Math.abs(x);
        double absY = Math.abs(y);
        if (absX >= absY)
            return 0;
        return 1;
    }
    public int minComponent() {
        double absX = Math.abs(x);
        double absY = Math.abs(y);
        if (absX < absY)
            return 0;
        return 1;
    }
    public Vector2d floor() {
        return floor(this);
    }
    public Vector2d floor(Vector2d dest) {
        dest.x = Math.floor(x);
        dest.y = Math.floor(y);
        return dest;
    }
    public Vector2d ceil() {
        return ceil(this);
    }
    public Vector2d ceil(Vector2d dest) {
        dest.x = Math.ceil(x);
        dest.y = Math.ceil(y);
        return dest;
    }
    public Vector2d round() {
        return round(this);
    }
    public Vector2d round(Vector2d dest) {
        dest.x = Math.round(x);
        dest.y = Math.round(y);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y);
    }
    public Vector2d absolute() {
        return absolute(this);
    }
    public Vector2d absolute(Vector2d dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        return dest;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix3dc {
    double m00();
    double m01();
    double m02();
    double m10();
    double m11();
    double m12();
    double m20();
    double m21();
    double m22();
    Matrix3d mul(Matrix3dc right, Matrix3d dest);
    Matrix3d mulLocal(Matrix3dc left, Matrix3d dest);
    Matrix3d mul(Matrix3fc right, Matrix3d dest);
    double determinant();
    Matrix3d invert(Matrix3d dest);
    Matrix3d transpose(Matrix3d dest);
    Matrix3d get(Matrix3d dest);
    AxisAngle4f getRotation(AxisAngle4f dest);
    Quaternionf getUnnormalizedRotation(Quaternionf dest);
    Quaternionf getNormalizedRotation(Quaternionf dest);
    Quaterniond getUnnormalizedRotation(Quaterniond dest);
    Quaterniond getNormalizedRotation(Quaterniond dest);
    DoubleBuffer get(DoubleBuffer buffer);
    DoubleBuffer get(int index, DoubleBuffer buffer);
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    ByteBuffer getFloats(ByteBuffer buffer);
    ByteBuffer getFloats(int index, ByteBuffer buffer);
    DoubleBuffer getTransposed(DoubleBuffer buffer);
    DoubleBuffer getTransposed(int index, DoubleBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposedFloats(ByteBuffer buffer);
    ByteBuffer getTransposedFloats(int index, ByteBuffer buffer);
    Matrix3dc getToAddress(long address);
    Matrix3dc getTransposedToAddress(long address);
    double[] get(double[] arr, int offset);
    double[] get(double[] arr);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    Matrix3d scale(Vector3dc xyz, Matrix3d dest);
    Matrix3d scale(double x, double y, double z, Matrix3d dest);
    Matrix3d scale(double xyz, Matrix3d dest);
    Matrix3d scaleLocal(double x, double y, double z, Matrix3d dest);
    Vector3d transform(Vector3d v);
    Vector3d transform(Vector3dc v, Vector3d dest);
    Vector3f transform(Vector3f v);
    Vector3f transform(Vector3fc v, Vector3f dest);
    Vector3d transform(double x, double y, double z, Vector3d dest);
    Vector3d transformTranspose(Vector3d v);
    Vector3d transformTranspose(Vector3dc v, Vector3d dest);
    Vector3d transformTranspose(double x, double y, double z, Vector3d dest);
    Matrix3d rotateX(double ang, Matrix3d dest);
    Matrix3d rotateY(double ang, Matrix3d dest);
    Matrix3d rotateZ(double ang, Matrix3d dest);
    Matrix3d rotateXYZ(double angleX, double angleY, double angleZ, Matrix3d dest);
    Matrix3d rotateZYX(double angleZ, double angleY, double angleX, Matrix3d dest);
    Matrix3d rotateYXZ(double angleY, double angleX, double angleZ, Matrix3d dest);
    Matrix3d rotate(double ang, double x, double y, double z, Matrix3d dest);
    Matrix3d rotateLocal(double ang, double x, double y, double z, Matrix3d dest);
    Matrix3d rotateLocalX(double ang, Matrix3d dest);
    Matrix3d rotateLocalY(double ang, Matrix3d dest);
    Matrix3d rotateLocalZ(double ang, Matrix3d dest);
    Matrix3d rotateLocal(Quaterniondc quat, Matrix3d dest);
    Matrix3d rotateLocal(Quaternionfc quat, Matrix3d dest);
    Matrix3d rotate(Quaterniondc quat, Matrix3d dest);
    Matrix3d rotate(Quaternionfc quat, Matrix3d dest);
    Matrix3d rotate(AxisAngle4f axisAngle, Matrix3d dest);
    Matrix3d rotate(AxisAngle4d axisAngle, Matrix3d dest);
    Matrix3d rotate(double angle, Vector3dc axis, Matrix3d dest);
    Matrix3d rotate(double angle, Vector3fc axis, Matrix3d dest);
    Vector3d getRow(int row, Vector3d dest) throws IndexOutOfBoundsException;
    Vector3d getColumn(int column, Vector3d dest) throws IndexOutOfBoundsException;
    double get(int column, int row);
    double getRowColumn(int row, int column);
    Matrix3d normal(Matrix3d dest);
    Matrix3d cofactor(Matrix3d dest);
    Matrix3d lookAlong(Vector3dc dir, Vector3dc up, Matrix3d dest);
    Matrix3d lookAlong(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix3d dest);
    Vector3d getScale(Vector3d dest);
    Vector3d positiveZ(Vector3d dir);
    Vector3d normalizedPositiveZ(Vector3d dir);
    Vector3d positiveX(Vector3d dir);
    Vector3d normalizedPositiveX(Vector3d dir);
    Vector3d positiveY(Vector3d dir);
    Vector3d normalizedPositiveY(Vector3d dir);
    Matrix3d add(Matrix3dc other, Matrix3d dest);
    Matrix3d sub(Matrix3dc subtrahend, Matrix3d dest);
    Matrix3d mulComponentWise(Matrix3dc other, Matrix3d dest);
    Matrix3d lerp(Matrix3dc other, double t, Matrix3d dest);
    Matrix3d rotateTowards(Vector3dc direction, Vector3dc up, Matrix3d dest);
    Matrix3d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix3d dest);
    Vector3d getEulerAnglesXYZ(Vector3d dest);
    Vector3d getEulerAnglesZYX(Vector3d dest);
    Vector3d getEulerAnglesYXZ(Vector3d dest);
    Matrix3d obliqueZ(double a, double b, Matrix3d dest);
    boolean equals(Matrix3dc m, double delta);
    Matrix3d reflect(double nx, double ny, double nz, Matrix3d dest);
    Matrix3d reflect(Quaterniondc orientation, Matrix3d dest);
    Matrix3d reflect(Vector3dc normal, Matrix3d dest);
    boolean isFinite();
    double quadraticFormProduct(double x, double y, double z);
    double quadraticFormProduct(Vector3dc v);
    double quadraticFormProduct(Vector3fc v);
    Matrix3d mapXZY(Matrix3d dest);
    Matrix3d mapXZnY(Matrix3d dest);
    Matrix3d mapXnYnZ(Matrix3d dest);
    Matrix3d mapXnZY(Matrix3d dest);
    Matrix3d mapXnZnY(Matrix3d dest);
    Matrix3d mapYXZ(Matrix3d dest);
    Matrix3d mapYXnZ(Matrix3d dest);
    Matrix3d mapYZX(Matrix3d dest);
    Matrix3d mapYZnX(Matrix3d dest);
    Matrix3d mapYnXZ(Matrix3d dest);
    Matrix3d mapYnXnZ(Matrix3d dest);
    Matrix3d mapYnZX(Matrix3d dest);
    Matrix3d mapYnZnX(Matrix3d dest);
    Matrix3d mapZXY(Matrix3d dest);
    Matrix3d mapZXnY(Matrix3d dest);
    Matrix3d mapZYX(Matrix3d dest);
    Matrix3d mapZYnX(Matrix3d dest);
    Matrix3d mapZnXY(Matrix3d dest);
    Matrix3d mapZnXnY(Matrix3d dest);
    Matrix3d mapZnYX(Matrix3d dest);
    Matrix3d mapZnYnX(Matrix3d dest);
    Matrix3d mapnXYnZ(Matrix3d dest);
    Matrix3d mapnXZY(Matrix3d dest);
    Matrix3d mapnXZnY(Matrix3d dest);
    Matrix3d mapnXnYZ(Matrix3d dest);
    Matrix3d mapnXnYnZ(Matrix3d dest);
    Matrix3d mapnXnZY(Matrix3d dest);
    Matrix3d mapnXnZnY(Matrix3d dest);
    Matrix3d mapnYXZ(Matrix3d dest);
    Matrix3d mapnYXnZ(Matrix3d dest);
    Matrix3d mapnYZX(Matrix3d dest);
    Matrix3d mapnYZnX(Matrix3d dest);
    Matrix3d mapnYnXZ(Matrix3d dest);
    Matrix3d mapnYnXnZ(Matrix3d dest);
    Matrix3d mapnYnZX(Matrix3d dest);
    Matrix3d mapnYnZnX(Matrix3d dest);
    Matrix3d mapnZXY(Matrix3d dest);
    Matrix3d mapnZXnY(Matrix3d dest);
    Matrix3d mapnZYX(Matrix3d dest);
    Matrix3d mapnZYnX(Matrix3d dest);
    Matrix3d mapnZnXY(Matrix3d dest);
    Matrix3d mapnZnXnY(Matrix3d dest);
    Matrix3d mapnZnYX(Matrix3d dest);
    Matrix3d mapnZnYnX(Matrix3d dest);
    Matrix3d negateX(Matrix3d dest);
    Matrix3d negateY(Matrix3d dest);
    Matrix3d negateZ(Matrix3d dest);
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector4L implements Externalizable, Cloneable, Vector4Lc {
    private static final long serialVersionUID = 1L;
    public long x;
    public long y;
    public long z;
    public long w;
    public Vector4L() {
        this.w = 1L;
    }
    public Vector4L(Vector4Lc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4L(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4L(Vector3Lc v, long w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4L(Vector3ic v, long w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4L(Vector2Lc v, long z, long w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4L(Vector2ic v, long z, long w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4L(Vector3fc v, float w, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
        this.w = Math.roundLongUsing(w, mode);
    }
    public Vector4L(Vector4fc v, int mode) {
        x = Math.roundLongUsing(v.x(), mode);
        y = Math.roundLongUsing(v.y(), mode);
        z = Math.roundLongUsing(v.z(), mode);
        w = Math.roundLongUsing(v.w(), mode);
    }
    public Vector4L(Vector4dc v, int mode) {
        x = Math.roundLongUsing(v.x(), mode);
        y = Math.roundLongUsing(v.y(), mode);
        z = Math.roundLongUsing(v.z(), mode);
        w = Math.roundLongUsing(v.w(), mode);
    }
    public Vector4L(long s) {
        this.x = s;
        this.y = s;
        this.z = s;
        this.w = s;
    }
    public Vector4L(long x, long y, long z, long w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    public Vector4L(int[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
    }
    public Vector4L(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4L(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector4L(LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4L(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public long x() {
        return this.x;
    }
    public long y() {
        return this.y;
    }
    public long z() {
        return this.z;
    }
    public long w() {
        return this.w;
    }
    public Vector3f xyz(Vector3f dest) {
        return dest.set(x, y, z);
    }
    public Vector3d xyz(Vector3d dest) {
        return dest.set(x, y, z);
    }
    public Vector3L xyz(Vector3L dest) {
        return dest.set(x, y, z);
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector2L xy(Vector2L dest) {
        return dest.set(x, y);
    }
    public Vector4L set(Vector4Lc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4L set(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4L set(Vector4dc v) {
        this.x = (int) v.x();
        this.y = (int) v.y();
        this.z = (int) v.z();
        this.w = (int) v.w();
        return this;
    }
    public Vector4L set(Vector4dc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
        this.w = Math.roundLongUsing(v.w(), mode);
        return this;
    }
    public Vector4L set(Vector4fc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
        this.w = Math.roundLongUsing(v.w(), mode);
        return this;
    }
    public Vector4L set(Vector3ic v, long w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4L set(Vector2ic v, long z, long w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4L set(long s) {
        this.x = s;
        this.y = s;
        this.z = s;
        this.w = s;
        return this;
    }
    public Vector4L set(long x, long y, long z, long w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4L set(int[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
        return this;
    }
    public Vector4L set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4L set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4L set(LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4L set(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4L setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public long get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        case 3:
            return w;
        default:
            throw new IllegalArgumentException();
        }
    }
    public int maxComponent() {
        long absX = Math.abs(x);
        long absY = Math.abs(y);
        long absZ = Math.abs(z);
        long absW = Math.abs(w);
        if (absX >= absY && absX >= absZ && absX >= absW) {
            return 0;
        } else if (absY >= absZ && absY >= absW) {
            return 1;
        } else if (absZ >= absW) {
            return 2;
        }
        return 3;
    }
    public int minComponent() {
        long absX = Math.abs(x);
        long absY = Math.abs(y);
        long absZ = Math.abs(z);
        long absW = Math.abs(w);
        if (absX < absY && absX < absZ && absX < absW) {
            return 0;
        } else if (absY < absZ && absY < absW) {
            return 1;
        } else if (absZ < absW) {
            return 2;
        }
        return 3;
    }
    public Vector4L setComponent(int component, long value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            case 3:
                w = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public LongBuffer get(LongBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public LongBuffer get(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector4Lc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector4L sub(Vector4Lc v) {
        return sub(v, this);
    }
    public Vector4L sub(Vector4Lc v, Vector4L dest) {
        dest.x = this.x - v.x();
        dest.y = this.y - v.y();
        dest.z = this.z - v.z();
        dest.w = this.w - v.w();
        return dest;
    }
    public Vector4L sub(Vector4ic v) {
        return sub(v, this);
    }
    public Vector4L sub(Vector4ic v, Vector4L dest) {
        dest.x = this.x - v.x();
        dest.y = this.y - v.y();
        dest.z = this.z - v.z();
        dest.w = this.w - v.w();
        return dest;
    }
    public Vector4L sub(long x, long y, long z, long w) {
        return sub(x, y, z, w, this);
    }
    public Vector4L sub(long x, long y, long z, long w, Vector4L dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        dest.w = this.w - w;
        return dest;
    }
    public Vector4L add(Vector4Lc v) {
        return add(v, this);
    }
    public Vector4L add(Vector4Lc v, Vector4L dest) {
        dest.x = this.x + v.x();
        dest.y = this.y + v.y();
        dest.z = this.z + v.z();
        dest.w = this.w + v.w();
        return dest;
    }
    public Vector4L add(Vector4ic v) {
        return add(v, this);
    }
    public Vector4L add(Vector4ic v, Vector4L dest) {
        dest.x = this.x + v.x();
        dest.y = this.y + v.y();
        dest.z = this.z + v.z();
        dest.w = this.w + v.w();
        return dest;
    }
    public Vector4L add(long x, long y, long z, long w) {
        return add(x, y, z, w, this);
    }
    public Vector4L add(long x, long y, long z, long w, Vector4L dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        dest.w = this.w + w;
        return dest;
    }
    public Vector4L mul(Vector4Lc v) {
        return mul(v, this);
    }
    public Vector4L mul(Vector4Lc v, Vector4L dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        dest.w = w * v.w();
        return dest;
    }
    public Vector4L mul(Vector4ic v) {
        return mul(v, this);
    }
    public Vector4L mul(Vector4ic v, Vector4L dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        dest.w = w * v.w();
        return dest;
    }
    public Vector4L div(Vector4Lc v) {
        return div(v, this);
    }
    public Vector4L div(Vector4Lc v, Vector4L dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        dest.w = w / v.w();
        return dest;
    }
    public Vector4L div(Vector4ic v) {
        return div(v, this);
    }
    public Vector4L div(Vector4ic v, Vector4L dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        dest.w = w / v.w();
        return dest;
    }
    public Vector4L mul(long scalar) {
        return mul(scalar, this);
    }
    public Vector4L mul(long scalar, Vector4L dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        dest.w = w * scalar;
        return dest;
    }
    public Vector4L div(float scalar) {
        return div(scalar, this);
    }
    public Vector4L div(float scalar, Vector4L dest) {
        float invscalar = 1.0f / scalar;
        dest.x = (int) (x * invscalar);
        dest.y = (int) (y * invscalar);
        dest.z = (int) (z * invscalar);
        dest.w = (int) (w * invscalar);
        return dest;
    }
    public Vector4L div(long scalar) {
        return div(scalar, this);
    }
    public Vector4L div(long scalar, Vector4L dest) {
        dest.x = x / scalar;
        dest.y = y / scalar;
        dest.z = z / scalar;
        dest.w = w / scalar;
        return dest;
    }
    public long lengthSquared() {
        return x * x + y * y + z * z + w * w;
    }
    public static long lengthSquared(long x, long y, long z, long w) {
        return x * x + y * y + z * z + w * w;
    }
    public double length() {
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    public static double length(long x, long y, long z, long w) {
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    public double distance(Vector4Lc v) {
        return distance(v.x(), v.y(), v.z(), v.w());
    }
    public double distance(Vector4ic v) {
        return distance(v.x(), v.y(), v.z(), v.w());
    }
    public double distance(long x, long y, long z, long w) {
        long dx = this.x - x;
        long dy = this.y - y;
        long dz = this.z - z;
        long dw = this.w - w;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public long gridDistance(Vector4Lc v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y())  + Math.abs(v.z() - z())  + Math.abs(v.w() - w());
    }
    public long gridDistance(Vector4ic v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y())  + Math.abs(v.z() - z())  + Math.abs(v.w() - w());
    }
    public long gridDistance(long x, long y, long z, long w) {
        return Math.abs(x - x()) + Math.abs(y - y()) + Math.abs(z - z()) + Math.abs(w - w());
    }
    public long distanceSquared(Vector4Lc v) {
        return distanceSquared(v.x(), v.y(), v.z(), v.w());
    }
    public long distanceSquared(Vector4ic v) {
        return distanceSquared(v.x(), v.y(), v.z(), v.w());
    }
    public long distanceSquared(long x, long y, long z, long w) {
        long dx = this.x - x;
        long dy = this.y - y;
        long dz = this.z - z;
        long dw = this.w - w;
        return dx * dx + dy * dy + dz * dz + dw * dw;
    }
    public static double distance(long x1, long y1, long z1, long w1, long x2, long y2, long z2, long w2) {
        long dx = x1 - x2;
        long dy = y1 - y2;
        long dz = z1 - z2;
        long dw = w1 - w2;
        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);
    }
    public static long distanceSquared(long x1, long y1, long z1, long w1, long x2, long y2, long z2, long w2) {
        long dx = x1 - x2;
        long dy = y1 - y2;
        long dz = z1 - z2;
        long dw = w1 - w2;
        return dx * dx + dy * dy + dz * dz + dw * dw;
    }
    public long dot(Vector4Lc v) {
        return x * v.x() + y * v.y() + z * v.z() + w * v.w();
    }
    public long dot(Vector4ic v) {
        return x * v.x() + y * v.y() + z * v.z() + w * v.w();
    }
    public Vector4L zero() {
        x = 0L;
        y = 0L;
        z = 0L;
        w = 0L;
        return this;
    }
    public Vector4L negate() {
        return negate(this);
    }
    public Vector4L negate(Vector4L dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        dest.w = -w;
        return dest;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + formatter.format(x) + " " + formatter.format(y) + " " + formatter.format(z) + " " + formatter.format(w) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeLong(x);
        out.writeLong(y);
        out.writeLong(z);
        out.writeLong(w);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        x = in.readLong();
        y = in.readLong();
        z = in.readLong();
        w = in.readLong();
    }
    public Vector4L min(Vector4Lc v) {
        return min(v, this);
    }
    public Vector4L min(Vector4Lc v, Vector4L dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        dest.w = w < v.w() ? w : v.w();
        return dest;
    }
    public Vector4L max(Vector4Lc v) {
        return max(v, this);
    }
    public Vector4L max(Vector4Lc v, Vector4L dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        dest.w = w > v.w() ? w : v.w();
        return dest;
    }
    public Vector4L absolute() {
        return absolute(this);
    }
    public Vector4L absolute(Vector4L dest) {
        dest.x = Math.abs(x);
        dest.y = Math.abs(y);
        dest.z = Math.abs(z);
        dest.w = Math.abs(w);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (int)(x ^ (x >>> 32));
        result = prime * result + (int)(y ^ (y >>> 32));
        result = prime * result + (int)(z ^ (z >>> 32));
        result = prime * result + (int)(w ^ (w >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Vector4L other = (Vector4L) obj;
        if (x != other.x) {
            return false;
        }
        if (y != other.y) {
            return false;
        }
        if (z != other.z) {
            return false;
        }
        if (w != other.w) {
            return false;
        }
        return true;
    }
    public boolean equals(long x, long y, long z, long w) {
        if (this.x != x)
            return false;
        if (this.y != y)
            return false;
        if (this.z != z)
            return false;
        if (this.w != w)
            return false;
        return true;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector2L implements Externalizable, Cloneable, Vector2Lc {
    private static final long serialVersionUID = 1L;
    public long x;
    public long y;
    public Vector2L() {
    }
    public Vector2L(long s) {
        this.x = s;
        this.y = s;
    }
    public Vector2L(long x, long y) {
        this.x = x;
        this.y = y;
    }
    public Vector2L(float x, float y, int mode) {
        this.x = Math.roundLongUsing(x, mode);
        this.y = Math.roundLongUsing(y, mode);
    }
    public Vector2L(double x, double y, int mode) {
        this.x = Math.roundLongUsing(x, mode);
        this.y = Math.roundLongUsing(y, mode);
    }
    public Vector2L(Vector2Lc v) {
        x = v.x();
        y = v.y();
    }
    public Vector2L(Vector2ic v) {
        x = v.x();
        y = v.y();
    }
    public Vector2L(Vector2fc v, int mode) {
        x = Math.roundLongUsing(v.x(), mode);
        y = Math.roundLongUsing(v.y(), mode);
    }
    public Vector2L(Vector2dc v, int mode) {
        x = Math.roundLongUsing(v.x(), mode);
        y = Math.roundLongUsing(v.y(), mode);
    }
    public Vector2L(long[] xy) {
        this.x = xy[0];
        this.y = xy[1];
    }
    public Vector2L(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2L(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector2L(LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2L(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public long x() {
        return this.x;
    }
    public long y() {
        return this.y;
    }
    public Vector2L set(long s) {
        this.x = s;
        this.y = s;
        return this;
    }
    public Vector2L set(long x, long y) {
        this.x = x;
        this.y = y;
        return this;
    }
    public Vector2L set(Vector2Lc v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2L set(Vector2ic v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2L set(Vector2dc v) {
        this.x = (long) v.x();
        this.y = (long) v.y();
        return this;
    }
    public Vector2L set(Vector2dc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        return this;
    }
    public Vector2L set(Vector2fc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        return this;
    }
    public Vector2L set(long[] xy) {
        this.x = xy[0];
        this.y = xy[1];
        return this;
    }
    public Vector2L set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2L set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2L set(LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2L set(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2L setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public long get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector2L setComponent(int component, long value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public LongBuffer get(LongBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public LongBuffer get(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector2Lc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector2L sub(Vector2Lc v) {
        return sub(v, this);
    }
    public Vector2L sub(Vector2Lc v, Vector2L dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        return dest;
    }
    public Vector2L sub(Vector2ic v) {
        return sub(v, this);
    }
    public Vector2L sub(Vector2ic v, Vector2L dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        return dest;
    }
    public Vector2L sub(long x, long y) {
        return sub(x, y, this);
    }
    public Vector2L sub(long x, long y, Vector2L dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        return dest;
    }
    public long lengthSquared() {
        return x * x + y * y;
    }
    public static long lengthSquared(long x, long y) {
        return x * x + y * y;
    }
    public double length() {
        return Math.sqrt(x * x + y * y);
    }
    public static double length(long x, long y) {
        return Math.sqrt(x * x + y * y);
    }
    public double distance(Vector2Lc v) {
        long dx = this.x - v.x();
        long dy = this.y - v.y();
        return Math.sqrt(dx * dx + dy * dy);
    }
    public double distance(long x, long y) {
        long dx = this.x - x;
        long dy = this.y - y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    public long distanceSquared(Vector2Lc v) {
        long dx = this.x - v.x();
        long dy = this.y - v.y();
        return dx * dx + dy * dy;
    }
    public long distanceSquared(long x, long y) {
        long dx = this.x - x;
        long dy = this.y - y;
        return dx * dx + dy * dy;
    }
    public long gridDistance(Vector2Lc v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y());
    }
    public long gridDistance(long x, long y) {
        return Math.abs(x - x()) + Math.abs(y - y());
    }
    public static double distance(long x1, long y1, long x2, long y2) {
        long dx = x1 - x2;
        long dy = y1 - y2;
        return Math.sqrt(dx * dx + dy * dy);
    }
    public static long distanceSquared(long x1, long y1, long x2, long y2) {
        long dx = x1 - x2;
        long dy = y1 - y2;
        return dx * dx + dy * dy;
    }
    public Vector2L add(Vector2Lc v) {
        this.x = x + v.x();
        this.y = y + v.y();
        return this;
    }
    public Vector2L add(Vector2Lc v, Vector2L dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        return dest;
    }
    public Vector2L add(Vector2ic v) {
        this.x = x + v.x();
        this.y = y + v.y();
        return this;
    }
    public Vector2L add(Vector2ic v, Vector2L dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        return dest;
    }
    public Vector2L add(long x, long y) {
        return add(x, y, this);
    }
    public Vector2L add(long x, long y, Vector2L dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        return dest;
    }
    public Vector2L mul(long scalar) {
        return mul(scalar, this);
    }
    public Vector2L mul(long scalar, Vector2L dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        return dest;
    }
    public Vector2L mul(Vector2Lc v) {
        return mul(v, this);
    }
    public Vector2L mul(Vector2Lc v, Vector2L dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        return dest;
    }
    public Vector2L mul(Vector2ic v) {
        return mul(v, this);
    }
    public Vector2L mul(Vector2ic v, Vector2L dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        return dest;
    }
    public Vector2L mul(long x, long y) {
        return mul(x, y, this);
    }
    public Vector2L mul(long x, long y, Vector2L dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        return dest;
    }
    public Vector2L div(float scalar) {
        return div(scalar, this);
    }
    public Vector2L div(float scalar, Vector2L dest) {
        float invscalar = 1.0f / scalar;
        dest.x = (int) (x * invscalar);
        dest.y = (int) (y * invscalar);
        return dest;
    }
    public Vector2L div(long scalar) {
        return div(scalar, this);
    }
    public Vector2L div(long scalar, Vector2L dest) {
        dest.x = x / scalar;
        dest.y = y / scalar;
        return dest;
    }
    public Vector2L zero() {
        this.x = 0;
        this.y = 0;
        return this;
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeLong(x);
        out.writeLong(y);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        x = in.readLong();
        y = in.readLong();
    }
    public Vector2L negate() {
        return negate(this);
    }
    public Vector2L negate(Vector2L dest) {
        dest.x = -x;
        dest.y = -y;
        return dest;
    }
    public Vector2L min(Vector2Lc v) {
        return min(v, this);
    }
    public Vector2L min(Vector2Lc v, Vector2L dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        return dest;
    }
    public Vector2L max(Vector2Lc v) {
        return max(v, this);
    }
    public Vector2L max(Vector2Lc v, Vector2L dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        return dest;
    }
    public long maxComponent() {
        long absX = Math.abs(x);
        long absY = Math.abs(y);
        if (absX >= absY)
            return 0L;
        return 1L;
    }
    public long minComponent() {
        long absX = Math.abs(x);
        long absY = Math.abs(y);
        if (absX < absY)
            return 0L;
        return 1L;
    }
    public Vector2L absolute() {
        return absolute(this);
    }
    public Vector2L absolute(Vector2L dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        return dest;
    }
    public int hashCode() {
        final long prime = 31L;
        long result = 1L;
        result = prime * result + x;
        result = prime * result + y;
        return (int) (result ^ (result >> 32L));
    }
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Vector2L other = (Vector2L) obj;
        if (x != other.x) {
            return false;
        }
        if (y != other.y) {
            return false;
        }
        return true;
    }
    public boolean equals(long x, long y) {
        if (this.x != x)
            return false;
        if (this.y != y)
            return false;
        return true;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + formatter.format(x) + " " + formatter.format(y) + ")";
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector3L implements Externalizable, Cloneable, Vector3Lc {
    private static final long serialVersionUID = 1L;
    public long x;
    public long y;
    public long z;
    public Vector3L() {
    }
    public Vector3L(int d) {
        this.x = d;
        this.y = d;
        this.z = d;
    }
    public Vector3L(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    public Vector3L(Vector3Lc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
    }
    public Vector3L(Vector2ic v, int z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
    }
    public Vector3L(float x, float y, float z, int mode) {
        this.x = Math.roundLongUsing(x, mode);
        this.y = Math.roundLongUsing(y, mode);
        this.z = Math.roundLongUsing(z, mode);
    }
    public Vector3L(double x, double y, double z, int mode) {
        this.x = Math.roundLongUsing(x, mode);
        this.y = Math.roundLongUsing(y, mode);
        this.z = Math.roundLongUsing(z, mode);
    }
    public Vector3L(Vector2fc v, float z, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(z, mode);
    }
    public Vector3L(Vector3fc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
    }
    public Vector3L(Vector2dc v, float z, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(z, mode);
    }
    public Vector3L(Vector3dc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
    }
    public Vector3L(int[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
    }
    public Vector3L(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3L(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector3L(LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector3L(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public long x() {
        return this.x;
    }
    public long y() {
        return this.y;
    }
    public long z() {
        return this.z;
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector2L xy(Vector2L dest) {
        return dest.set(x, y);
    }
    public Vector3L set(Vector3Lc v) {
        x = v.x();
        y = v.y();
        z = v.z();
        return this;
    }
    public Vector3L set(Vector3dc v) {
        this.x = (int) v.x();
        this.y = (int) v.y();
        this.z = (int) v.z();
        return this;
    }
    public Vector3L set(Vector3dc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
        return this;
    }
    public Vector3L set(Vector3fc v, int mode) {
        this.x = Math.roundLongUsing(v.x(), mode);
        this.y = Math.roundLongUsing(v.y(), mode);
        this.z = Math.roundLongUsing(v.z(), mode);
        return this;
    }
    public Vector3L set(Vector2ic v, long z) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        return this;
    }
    public Vector3L set(long d) {
        this.x = d;
        this.y = d;
        this.z = d;
        return this;
    }
    public Vector3L set(long x, long y, long z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    public Vector3L set(long[] xyz) {
        this.x = xyz[0];
        this.y = xyz[1];
        this.z = xyz[2];
        return this;
    }
    public Vector3L set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3L set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3L set(LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector3L set(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector3L setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public long get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector3L setComponent(int component, int value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public LongBuffer get(LongBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public LongBuffer get(int index, LongBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector3Lc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector3L sub(Vector3Lc v) {
        return sub(v, this);
    }
    public Vector3L sub(Vector3Lc v, Vector3L dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        return dest;
    }
    public Vector3L sub(long x, long y, long z) {
        return sub(x, y, z, this);
    }
    public Vector3L sub(long x, long y, long z, Vector3L dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        return dest;
    }
    public Vector3L add(Vector3Lc v) {
        return add(v, this);
    }
    public Vector3L add(Vector3Lc v, Vector3L dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        return dest;
    }
    public Vector3L add(long x, long y, long z) {
        return add(x, y, z, this);
    }
    public Vector3L add(long x, long y, long z, Vector3L dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        return dest;
    }
    public Vector3L mul(long scalar) {
        return mul(scalar, this);
    }
    public Vector3L mul(long scalar, Vector3L dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        return dest;
    }
    public Vector3L mul(Vector3Lc v) {
        return mul(v, this);
    }
    public Vector3L mul(Vector3Lc v, Vector3L dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        return dest;
    }
    public Vector3L mul(long x, long y, long z) {
        return mul(x, y, z, this);
    }
    public Vector3L mul(long x, long y, long z, Vector3L dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        dest.z = this.z * z;
        return dest;
    }
    public Vector3L div(float scalar) {
        return div(scalar, this);
    }
    public Vector3L div(float scalar, Vector3L dest) {
        float invscalar = 1.0f / scalar;
        dest.x = (int) (x * invscalar);
        dest.y = (int) (y * invscalar);
        dest.z = (int) (z * invscalar);
        return dest;
    }
    public Vector3L div(long scalar) {
        return div(scalar, this);
    }
    public Vector3L div(long scalar, Vector3L dest) {
        dest.x = x / scalar;
        dest.y = y / scalar;
        dest.z = z / scalar;
        return dest;
    }
    public long lengthSquared() {
        return x * x + y * y + z * z;
    }
    public static long lengthSquared(long x, long y, long z) {
        return x * x + y * y + z * z;
    }
    public double length() {
        return Math.sqrt(x * x + y * y + z * z);
    }
    public static double length(long x, long y, long z) {
        return Math.sqrt(x * x + y * y + z * z);
    }
    public double distance(Vector3Lc v) {
        long dx = this.x - v.x();
        long dy = this.y - v.y();
        long dz = this.z - v.z();
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }
    public double distance(long x, long y, long z) {
        long dx = this.x - x;
        long dy = this.y - y;
        long dz = this.z - z;
        return Math.sqrt(dx * dx + dy * dy + dz * dz);
    }
    public long gridDistance(Vector3Lc v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y())  + Math.abs(v.z() - z());
    }
    public long gridDistance(long x, long y, long z) {
        return Math.abs(x - x()) + Math.abs(y - y()) + Math.abs(z - z());
    }
    public long distanceSquared(Vector3Lc v) {
        long dx = this.x - v.x();
        long dy = this.y - v.y();
        long dz = this.z - v.z();
        return dx * dx + dy * dy + dz * dz;
    }
    public long distanceSquared(long x, long y, long z) {
        long dx = this.x - x;
        long dy = this.y - y;
        long dz = this.z - z;
        return dx * dx + dy * dy + dz * dz;
    }
    public static double distance(long x1, long y1, long z1, long x2, long y2, long z2) {
        return Math.sqrt(distanceSquared(x1, y1, z1, x2, y2, z2));
    }
    public static long distanceSquared(long x1, long y1, long z1, long x2, long y2, long z2) {
        long dx = x1 - x2;
        long dy = y1 - y2;
        long dz = z1 - z2;
        return dx * dx + dy * dy + dz * dz;
    }
    public Vector3L zero() {
        this.x = 0L;
        this.y = 0L;
        this.z = 0L;
        return this;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + formatter.format(x) + " " + formatter.format(y) + " " + formatter.format(z) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeLong(x);
        out.writeLong(y);
        out.writeLong(z);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        x = in.readLong();
        y = in.readLong();
        z = in.readLong();
    }
    public Vector3L negate() {
        return negate(this);
    }
    public Vector3L negate(Vector3L dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        return dest;
    }
    public Vector3L min(Vector3Lc v) {
        return min(v, this);
    }
    public Vector3L min(Vector3Lc v, Vector3L dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        return dest;
    }
    public Vector3L max(Vector3Lc v) {
        return max(v, this);
    }
    public Vector3L max(Vector3Lc v, Vector3L dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        return dest;
    }
    public int maxComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        if (absX >= absY && absX >= absZ) {
            return 0;
        } else if (absY >= absZ) {
            return 1;
        }
        return 2;
    }
    public int minComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        if (absX < absY && absX < absZ) {
            return 0;
        } else if (absY < absZ) {
            return 1;
        }
        return 2;
    }
    public Vector3L absolute() {
        return absolute(this);
    }
    public Vector3L absolute(Vector3L dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        dest.z = Math.abs(this.z);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (int)(x ^ (x >>> 32));
        result = prime * result + (int)(y ^ (y >>> 32));
        result = prime * result + (int)(z ^ (z >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Vector3L other = (Vector3L) obj;
        if (x != other.x) {
            return false;
        }
        if (y != other.y) {
            return false;
        }
        if (z != other.z) {
            return false;
        }
        return true;
    }
    public boolean equals(long x, long y, long z) {
        if (this.x != x)
            return false;
        if (this.y != y)
            return false;
        if (this.z != z)
            return false;
        return true;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector4i implements Externalizable, Cloneable, Vector4ic {
    private static final long serialVersionUID = 1L;
    public int x;
    public int y;
    public int z;
    public int w;
    public Vector4i() {
        this.w = 1;
    }
    public Vector4i(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4i(Vector3ic v, int w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4i(Vector2ic v, int z, int w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4i(Vector3fc v, float w, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
        this.w = Math.roundUsing(w, mode);
    }
    public Vector4i(Vector4fc v, int mode) {
        x = Math.roundUsing(v.x(), mode);
        y = Math.roundUsing(v.y(), mode);
        z = Math.roundUsing(v.z(), mode);
        w = Math.roundUsing(v.w(), mode);
    }
    public Vector4i(Vector4dc v, int mode) {
        x = Math.roundUsing(v.x(), mode);
        y = Math.roundUsing(v.y(), mode);
        z = Math.roundUsing(v.z(), mode);
        w = Math.roundUsing(v.w(), mode);
    }
    public Vector4i(int s) {
        this.x = s;
        this.y = s;
        this.z = s;
        this.w = s;
    }
    public Vector4i(int x, int y, int z, int w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    public Vector4i(int[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
    }
    public Vector4i(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4i(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector4i(IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4i(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public int x() {
        return this.x;
    }
    public int y() {
        return this.y;
    }
    public int z() {
        return this.z;
    }
    public int w() {
        return this.w;
    }
    public Vector3f xyz(Vector3f dest) {
        return dest.set(x, y, z);
    }
    public Vector3d xyz(Vector3d dest) {
        return dest.set(x, y, z);
    }
    public Vector3i xyz(Vector3i dest) {
        return dest.set(x, y, z);
    }
    public Vector3L xyz(Vector3L dest) {
        return dest.set(x, y, z);
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector2i xy(Vector2i dest) {
        return dest.set(x, y);
    }
    public Vector2L xy(Vector2L dest) {
        return dest.set(x, y);
    }
    public Vector4i set(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4i set(Vector4dc v) {
        this.x = (int) v.x();
        this.y = (int) v.y();
        this.z = (int) v.z();
        this.w = (int) v.w();
        return this;
    }
    public Vector4i set(Vector4dc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
        this.w = Math.roundUsing(v.w(), mode);
        return this;
    }
    public Vector4i set(Vector4fc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        this.z = Math.roundUsing(v.z(), mode);
        this.w = Math.roundUsing(v.w(), mode);
        return this;
    }
    public Vector4i set(Vector3ic v, int w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4i set(Vector2ic v, int z, int w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4i set(int s) {
        this.x = s;
        this.y = s;
        this.z = s;
        this.w = s;
        return this;
    }
    public Vector4i set(int x, int y, int z, int w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4i set(int[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
        return this;
    }
    public Vector4i set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4i set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4i set(IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4i set(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4i setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public int get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        case 3:
            return w;
        default:
            throw new IllegalArgumentException();
        }
    }
    public int maxComponent() {
        int absX = Math.abs(x);
        int absY = Math.abs(y);
        int absZ = Math.abs(z);
        int absW = Math.abs(w);
        if (absX >= absY && absX >= absZ && absX >= absW) {
            return 0;
        } else if (absY >= absZ && absY >= absW) {
            return 1;
        } else if (absZ >= absW) {
            return 2;
        }
        return 3;
    }
    public int minComponent() {
        int absX = Math.abs(x);
        int absY = Math.abs(y);
        int absZ = Math.abs(z);
        int absW = Math.abs(w);
        if (absX < absY && absX < absZ && absX < absW) {
            return 0;
        } else if (absY < absZ && absY < absW) {
            return 1;
        } else if (absZ < absW) {
            return 2;
        }
        return 3;
    }
    public Vector4i setComponent(int component, int value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            case 3:
                w = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public IntBuffer get(IntBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public IntBuffer get(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector4ic getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector4i sub(Vector4ic v) {
        return sub(v, this);
    }
    public Vector4i sub(int x, int y, int z, int w) {
        return sub(x, y, z, w, this);
    }
    public Vector4i sub(Vector4ic v, Vector4i dest) {
        dest.x = this.x - v.x();
        dest.y = this.y - v.y();
        dest.z = this.z - v.z();
        dest.w = this.w - v.w();
        return dest;
    }
    public Vector4i sub(int x, int y, int z, int w, Vector4i dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        dest.w = this.w - w;
        return dest;
    }
    public Vector4i add(Vector4ic v) {
        return add(v, this);
    }
    public Vector4i add(Vector4ic v, Vector4i dest) {
        dest.x = this.x + v.x();
        dest.y = this.y + v.y();
        dest.z = this.z + v.z();
        dest.w = this.w + v.w();
        return dest;
    }
    public Vector4i add(int x, int y, int z, int w) {
        return add(x, y, z, w, this);
    }
    public Vector4i add(int x, int y, int z, int w, Vector4i dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        dest.w = this.w + w;
        return dest;
    }
    public Vector4i mul(Vector4ic v) {
        return mul(v, this);
    }
    public Vector4i mul(Vector4ic v, Vector4i dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        dest.w = w * v.w();
        return dest;
    }
    public Vector4i div(Vector4ic v) {
        return div(v, this);
    }
    public Vector4i div(Vector4ic v, Vector4i dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        dest.w = w / v.w();
        return dest;
    }
    public Vector4i mul(int scalar) {
        return mul(scalar, this);
    }
    public Vector4i mul(int scalar, Vector4i dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        dest.w = w * scalar;
        return dest;
    }
    public Vector4i div(float scalar) {
        return div(scalar, this);
    }
    public Vector4i div(float scalar, Vector4i dest) {
        float invscalar = 1.0f / scalar;
        dest.x = (int) (x * invscalar);
        dest.y = (int) (y * invscalar);
        dest.z = (int) (z * invscalar);
        dest.w = (int) (w * invscalar);
        return dest;
    }
    public Vector4i div(int scalar) {
        return div(scalar, this);
    }
    public Vector4i div(int scalar, Vector4i dest) {
        dest.x = x / scalar;
        dest.y = y / scalar;
        dest.z = z / scalar;
        dest.w = w / scalar;
        return dest;
    }
    public long lengthSquared() {
        return (long) x * x + (long) y * y + (long) z * z + (long) w * w;
    }
    public static long lengthSquared(int x, int y, int z, int w) {
        return (long) x * x + (long) y * y + (long) z * z + (long) w * w;
    }
    public double length() {
        return Math.sqrt((long) x * x + (long) y * y + (long) z * z + (long) w * w);
    }
    public static double length(int x, int y, int z, int w) {
        return Math.sqrt((long) x * x + (long) y * y + (long) z * z + (long) w * w);
    }
    public double distance(Vector4ic v) {
        return distance(v.x(), v.y(), v.z(), v.w());
    }
    public double distance(int x, int y, int z, int w) {
        int dx = this.x - x;
        int dy = this.y - y;
        int dz = this.z - z;
        int dw = this.w - w;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public long gridDistance(Vector4ic v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y())  + Math.abs(v.z() - z())  + Math.abs(v.w() - w());
    }
    public long gridDistance(int x, int y, int z, int w) {
        return Math.abs(x - x()) + Math.abs(y - y()) + Math.abs(z - z()) + Math.abs(w - w());
    }
    public long distanceSquared(Vector4ic v) {
        return distanceSquared(v.x(), v.y(), v.z(), v.w());
    }
    public long distanceSquared(int x, int y, int z, int w) {
        int dx = this.x - x;
        int dy = this.y - y;
        int dz = this.z - z;
        int dw = this.w - w;
        return (long) dx * dx + (long) dy * dy + (long) dz * dz + (long) dw * dw;
    }
    public static double distance(int x1, int y1, int z1, int w1, int x2, int y2, int z2, int w2) {
        int dx = x1 - x2;
        int dy = y1 - y2;
        int dz = z1 - z2;
        int dw = w1 - w2;
        return Math.sqrt((long) dx * dx + (long) dy * dy + (long) dz * dz + (long) dw * dw);
    }
    public static long distanceSquared(int x1, int y1, int z1, int w1, int x2, int y2, int z2, int w2) {
        int dx = x1 - x2;
        int dy = y1 - y2;
        int dz = z1 - z2;
        int dw = w1 - w2;
        return (long) dx * dx + (long) dy * dy + (long) dz * dz + (long) dw * dw;
    }
    public long dot(Vector4ic v) {
        return (long) x * v.x() + (long) y * v.y() + (long) z * v.z() + (long) w * v.w();
    }
    public Vector4i zero() {
        x = 0;
        y = 0;
        z = 0;
        w = 0;
        return this;
    }
    public Vector4i negate() {
        return negate(this);
    }
    public Vector4i negate(Vector4i dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        dest.w = -w;
        return dest;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + formatter.format(x) + " " + formatter.format(y) + " " + formatter.format(z) + " " + formatter.format(w) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeInt(x);
        out.writeInt(y);
        out.writeInt(z);
        out.writeInt(w);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        x = in.readInt();
        y = in.readInt();
        z = in.readInt();
        w = in.readInt();
    }
    public Vector4i min(Vector4ic v) {
        return min(v, this);
    }
    public Vector4i min(Vector4ic v, Vector4i dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        dest.w = w < v.w() ? w : v.w();
        return dest;
    }
    public Vector4i max(Vector4ic v) {
        return max(v, this);
    }
    public Vector4i max(Vector4ic v, Vector4i dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        dest.w = w > v.w() ? w : v.w();
        return dest;
    }
    public Vector4i absolute() {
        return absolute(this);
    }
    public Vector4i absolute(Vector4i dest) {
        dest.x = Math.abs(x);
        dest.y = Math.abs(y);
        dest.z = Math.abs(z);
        dest.w = Math.abs(w);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + x;
        result = prime * result + y;
        result = prime * result + z;
        result = prime * result + w;
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Vector4i other = (Vector4i) obj;
        if (x != other.x) {
            return false;
        }
        if (y != other.y) {
            return false;
        }
        if (z != other.z) {
            return false;
        }
        if (w != other.w) {
            return false;
        }
        return true;
    }
    public boolean equals(int x, int y, int z, int w) {
        if (this.x != x)
            return false;
        if (this.y != y)
            return false;
        if (this.z != z)
            return false;
        if (this.w != w)
            return false;
        return true;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector2i implements Externalizable, Cloneable, Vector2ic {
    private static final long serialVersionUID = 1L;
    public int x;
    public int y;
    public Vector2i() {
    }
    public Vector2i(int s) {
        this.x = s;
        this.y = s;
    }
    public Vector2i(int x, int y) {
        this.x = x;
        this.y = y;
    }
    public Vector2i(float x, float y, int mode) {
        this.x = Math.roundUsing(x, mode);
        this.y = Math.roundUsing(y, mode);
    }
    public Vector2i(double x, double y, int mode) {
        this.x = Math.roundUsing(x, mode);
        this.y = Math.roundUsing(y, mode);
    }
    public Vector2i(Vector2ic v) {
        x = v.x();
        y = v.y();
    }
    public Vector2i(Vector2fc v, int mode) {
        x = Math.roundUsing(v.x(), mode);
        y = Math.roundUsing(v.y(), mode);
    }
    public Vector2i(Vector2dc v, int mode) {
        x = Math.roundUsing(v.x(), mode);
        y = Math.roundUsing(v.y(), mode);
    }
    public Vector2i(int[] xy) {
        this.x = xy[0];
        this.y = xy[1];
    }
    public Vector2i(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2i(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector2i(IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector2i(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public int x() {
        return this.x;
    }
    public int y() {
        return this.y;
    }
    public Vector2i set(int s) {
        this.x = s;
        this.y = s;
        return this;
    }
    public Vector2i set(int x, int y) {
        this.x = x;
        this.y = y;
        return this;
    }
    public Vector2i set(Vector2ic v) {
        this.x = v.x();
        this.y = v.y();
        return this;
    }
    public Vector2i set(Vector2dc v) {
        this.x = (int) v.x();
        this.y = (int) v.y();
        return this;
    }
    public Vector2i set(Vector2dc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        return this;
    }
    public Vector2i set(Vector2fc v, int mode) {
        this.x = Math.roundUsing(v.x(), mode);
        this.y = Math.roundUsing(v.y(), mode);
        return this;
    }
    public Vector2i set(int[] xy) {
        this.x = xy[0];
        this.y = xy[1];
        return this;
    }
    public Vector2i set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2i set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2i set(IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector2i set(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector2i setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public int get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector2i setComponent(int component, int value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public IntBuffer get(IntBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public IntBuffer get(int index, IntBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector2ic getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector2i sub(Vector2ic v) {
        return sub(v, this);
    }
    public Vector2i sub(Vector2ic v, Vector2i dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        return dest;
    }
    public Vector2i sub(int x, int y) {
        return sub(x, y, this);
    }
    public Vector2i sub(int x, int y, Vector2i dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        return dest;
    }
    public long lengthSquared() {
        return (long) x * x + (long) y * y;
    }
    public static long lengthSquared(int x, int y) {
        return (long) x * x + (long) y * y;
    }
    public double length() {
        return Math.sqrt((long) x * x + (long) y * y);
    }
    public static double length(int x, int y) {
        return Math.sqrt((long) x * x + (long) y * y);
    }
    public double distance(Vector2ic v) {
        int dx = this.x - v.x();
        int dy = this.y - v.y();
        return Math.sqrt((long) dx * dx + (long) dy * dy);
    }
    public double distance(int x, int y) {
        int dx = this.x - x;
        int dy = this.y - y;
        return Math.sqrt((long) dx * dx + (long) dy * dy);
    }
    public long distanceSquared(Vector2ic v) {
        int dx = this.x - v.x();
        int dy = this.y - v.y();
        return (long) dx * dx + (long) dy * dy;
    }
    public long distanceSquared(int x, int y) {
        int dx = this.x - x;
        int dy = this.y - y;
        return (long) dx * dx + (long) dy * dy;
    }
    public long gridDistance(Vector2ic v) {
        return Math.abs(v.x() - x()) + Math.abs(v.y() - y());
    }
    public long gridDistance(int x, int y) {
        return Math.abs(x - x()) + Math.abs(y - y());
    }
    public static double distance(int x1, int y1, int x2, int y2) {
        int dx = x1 - x2;
        int dy = y1 - y2;
        return Math.sqrt((long) dx * dx + (long) dy * dy);
    }
    public static long distanceSquared(int x1, int y1, int x2, int y2) {
        int dx = x1 - x2;
        int dy = y1 - y2;
        return (long) dx * dx + (long) dy * dy;
    }
    public Vector2i add(Vector2ic v) {
        this.x = x + v.x();
        this.y = y + v.y();
        return this;
    }
    public Vector2i add(Vector2ic v, Vector2i dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        return dest;
    }
    public Vector2i add(int x, int y) {
        return add(x, y, this);
    }
    public Vector2i add(int x, int y, Vector2i dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        return dest;
    }
    public Vector2i mul(int scalar) {
        return mul(scalar, this);
    }
    public Vector2i mul(int scalar, Vector2i dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        return dest;
    }
    public Vector2i mul(Vector2ic v) {
        return mul(v, this);
    }
    public Vector2i mul(Vector2ic v, Vector2i dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        return dest;
    }
    public Vector2i mul(int x, int y) {
        return mul(x, y, this);
    }
    public Vector2i mul(int x, int y, Vector2i dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        return dest;
    }
    public Vector2i div(float scalar) {
        return div(scalar, this);
    }
    public Vector2i div(float scalar, Vector2i dest) {
        float invscalar = 1.0f / scalar;
        dest.x = (int) (x * invscalar);
        dest.y = (int) (y * invscalar);
        return dest;
    }
    public Vector2i div(int scalar) {
        return div(scalar, this);
    }
    public Vector2i div(int scalar, Vector2i dest) {
        dest.x = x / scalar;
        dest.y = y / scalar;
        return dest;
    }
    public Vector2i zero() {
        this.x = 0;
        this.y = 0;
        return this;
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeInt(x);
        out.writeInt(y);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        x = in.readInt();
        y = in.readInt();
    }
    public Vector2i negate() {
        return negate(this);
    }
    public Vector2i negate(Vector2i dest) {
        dest.x = -x;
        dest.y = -y;
        return dest;
    }
    public Vector2i min(Vector2ic v) {
        return min(v, this);
    }
    public Vector2i min(Vector2ic v, Vector2i dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        return dest;
    }
    public Vector2i max(Vector2ic v) {
        return max(v, this);
    }
    public Vector2i max(Vector2ic v, Vector2i dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        return dest;
    }
    public int maxComponent() {
        int absX = Math.abs(x);
        int absY = Math.abs(y);
        if (absX >= absY)
            return 0;
        return 1;
    }
    public int minComponent() {
        int absX = Math.abs(x);
        int absY = Math.abs(y);
        if (absX < absY)
            return 0;
        return 1;
    }
    public Vector2i absolute() {
        return absolute(this);
    }
    public Vector2i absolute(Vector2i dest) {
        dest.x = Math.abs(this.x);
        dest.y = Math.abs(this.y);
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + x;
        result = prime * result + y;
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Vector2i other = (Vector2i) obj;
        if (x != other.x) {
            return false;
        }
        if (y != other.y) {
            return false;
        }
        return true;
    }
    public boolean equals(int x, int y) {
        if (this.x != x)
            return false;
        if (this.y != y)
            return false;
        return true;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + formatter.format(x) + " " + formatter.format(y) + ")";
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import org.intellij.lang.annotations.MagicConstant;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix4f implements Externalizable, Cloneable, Matrix4fc {
    private static final long serialVersionUID = 1L;
    int properties;
    float m00, m01, m02, m03;
    float m10, m11, m12, m13;
    float m20, m21, m22, m23;
    float m30, m31, m32, m33;
    public Matrix4f() {
        this._m00(1.0f)
            ._m11(1.0f)
            ._m22(1.0f)
            ._m33(1.0f)
            ._properties(PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f(Matrix3fc mat) {
        set(mat);
    }
    public Matrix4f(Matrix4fc mat) {
        set(mat);
    }
    public Matrix4f(Matrix4x3fc mat) {
        set(mat);
    }
    public Matrix4f(Matrix4dc mat) {
        set(mat);
    }
    public Matrix4f(float m00, float m01, float m02, float m03, 
                    float m10, float m11, float m12, float m13, 
                    float m20, float m21, float m22, float m23,
                    float m30, float m31, float m32, float m33) {
        this._m00(m00)
            ._m01(m01)
            ._m02(m02)
            ._m03(m03)
            ._m10(m10)
            ._m11(m11)
            ._m12(m12)
            ._m13(m13)
            ._m20(m20)
            ._m21(m21)
            ._m22(m22)
            ._m23(m23)
            ._m30(m30)
            ._m31(m31)
            ._m32(m32)
            ._m33(m33)
            .determineProperties();
    }
    public Matrix4f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        determineProperties();
    }
    public Matrix4f(Vector4fc col0, Vector4fc col1, Vector4fc col2, Vector4fc col3) {
        set(col0, col1, col2, col3);
    }
    Matrix4f _properties(int properties) {
        this.properties = properties;
        return this;
    }
    public Matrix4f assume(@MagicConstant(intValues = {PROPERTY_UNKNOWN, PROPERTY_IDENTITY, PROPERTY_TRANSLATION, PROPERTY_AFFINE, PROPERTY_ORTHONORMAL, PROPERTY_PERSPECTIVE}) int properties) {
        this._properties(properties);
        return this;
    }
    public Matrix4f determineProperties() {
        int properties = PROPERTY_UNKNOWN;
        if (m03() == 0.0f && m13() == 0.0f) {
            if (m23() == 0.0f && m33() == 1.0f) {
                properties |= PROPERTY_AFFINE;
                if (m00() == 1.0f && m01() == 0.0f && m02() == 0.0f && m10() == 0.0f && m11() == 1.0f && m12() == 0.0f
                        && m20() == 0.0f && m21() == 0.0f && m22() == 1.0f) {
                    properties |= PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
                    if (m30() == 0.0f && m31() == 0.0f && m32() == 0.0f)
                        properties |= PROPERTY_IDENTITY;
                }
            } else if (m01() == 0.0f && m02() == 0.0f && m10() == 0.0f && m12() == 0.0f && m20() == 0.0f && m21() == 0.0f
                    && m30() == 0.0f && m31() == 0.0f && m33() == 0.0f) {
                properties |= PROPERTY_PERSPECTIVE;
            }
        }
        this.properties = properties;
        return this;
    }
    @MagicConstant(intValues = {PROPERTY_UNKNOWN, PROPERTY_IDENTITY, PROPERTY_TRANSLATION, PROPERTY_AFFINE, PROPERTY_ORTHONORMAL, PROPERTY_PERSPECTIVE})
    public int properties() {
        return properties;
    }
    public float m00() {
        return m00;
    }
    public float m01() {
        return m01;
    }
    public float m02() {
        return m02;
    }
    public float m03() {
        return m03;
    }
    public float m10() {
        return m10;
    }
    public float m11() {
        return m11;
    }
    public float m12() {
        return m12;
    }
    public float m13() {
        return m13;
    }
    public float m20() {
        return m20;
    }
    public float m21() {
        return m21;
    }
    public float m22() {
        return m22;
    }
    public float m23() {
        return m23;
    }
    public float m30() {
        return m30;
    }
    public float m31() {
        return m31;
    }
    public float m32() {
        return m32;
    }
    public float m33() {
        return m33;
    }
    public Matrix4f m00(float m00) {
        this.m00 = m00;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m00 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m01(float m01) {
        this.m01 = m01;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m01 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m02(float m02) {
        this.m02 = m02;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m02 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m03(float m03) {
        this.m03 = m03;
        if (m03 != 0.0f)
            properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4f m10(float m10) {
        this.m10 = m10;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m10 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m11(float m11) {
        this.m11 = m11;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m11 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m12(float m12) {
        this.m12 = m12;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m12 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m13(float m13) {
        this.m13 = m13;
        if (m13 != 0.0f)
            properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4f m20(float m20) {
        this.m20 = m20;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m20 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m21(float m21) {
        this.m21 = m21;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m21 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m22(float m22) {
        this.m22 = m22;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m22 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4f m23(float m23) {
        this.m23 = m23;
        if (m23 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f m30(float m30) {
        this.m30 = m30;
        if (m30 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4f m31(float m31) {
        this.m31 = m31;
        if (m31 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4f m32(float m32) {
        this.m32 = m32;
        if (m32 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4f m33(float m33) {
        this.m33 = m33;
        if (m33 != 0.0f)
            properties &= ~(PROPERTY_PERSPECTIVE);
        if (m33 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL | PROPERTY_AFFINE);
        return this;
    }
    Matrix4f _m00(float m00) {
        this.m00 = m00;
        return this;
    }
    Matrix4f _m01(float m01) {
        this.m01 = m01;
        return this;
    }
    Matrix4f _m02(float m02) {
        this.m02 = m02;
        return this;
    }
    Matrix4f _m03(float m03) {
        this.m03 = m03;
        return this;
    }
    Matrix4f _m10(float m10) {
        this.m10 = m10;
        return this;
    }
    Matrix4f _m11(float m11) {
        this.m11 = m11;
        return this;
    }
    Matrix4f _m12(float m12) {
        this.m12 = m12;
        return this;
    }
    Matrix4f _m13(float m13) {
        this.m13 = m13;
        return this;
    }
    Matrix4f _m20(float m20) {
        this.m20 = m20;
        return this;
    }
    Matrix4f _m21(float m21) {
        this.m21 = m21;
        return this;
    }
    Matrix4f _m22(float m22) {
        this.m22 = m22;
        return this;
    }
    Matrix4f _m23(float m23) {
        this.m23 = m23;
        return this;
    }
    Matrix4f _m30(float m30) {
        this.m30 = m30;
        return this;
    }
    Matrix4f _m31(float m31) {
        this.m31 = m31;
        return this;
    }
    Matrix4f _m32(float m32) {
        this.m32 = m32;
        return this;
    }
    Matrix4f _m33(float m33) {
        this.m33 = m33;
        return this;
    }
    public Matrix4f identity() {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return this;
        return
        _m00(1.0f).
        _m01(0.0f).
        _m02(0.0f).
        _m03(0.0f).
        _m10(0.0f).
        _m11(1.0f).
        _m12(0.0f).
        _m13(0.0f).
        _m20(0.0f).
        _m21(0.0f).
        _m22(1.0f).
        _m23(0.0f).
        _m30(0.0f).
        _m31(0.0f).
        _m32(0.0f).
        _m33(1.0f).
        _properties(PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f set(Matrix4fc m) {
        if (m == this)
            return this;
        if (JvmciCode.canUseJvmci && m instanceof Matrix4f) {
            JvmciCode.__Matrix4f_set((Matrix4f) m, this);
            properties = m.properties();
            return this;
        }
        return
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m03(m.m03()).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m13(m.m13()).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22()).
        _m23(m.m23()).
        _m30(m.m30()).
        _m31(m.m31()).
        _m32(m.m32()).
        _m33(m.m33()).
        _properties(m.properties());
    }
    public Matrix4f setTransposed(Matrix4fc m) {
        if ((m.properties() & PROPERTY_IDENTITY) != 0)
            return this.identity();
        return setTransposedInternal(m);
    }
    private Matrix4f setTransposedInternal(Matrix4fc m) {
        float nm10 = m.m01(), nm12 = m.m21(), nm13 = m.m31();
        float nm20 = m.m02(), nm21 = m.m12(), nm30 = m.m03();
        float nm31 = m.m13(), nm32 = m.m23();
        return this
        ._m00(m.m00())._m01(m.m10())._m02(m.m20())._m03(m.m30())
        ._m10(nm10)._m11(m.m11())._m12(nm12)._m13(nm13)
        ._m20(nm20)._m21(nm21)._m22(m.m22())._m23(m.m32())
        ._m30(nm30)._m31(nm31)._m32(nm32)._m33(m.m33())
        ._properties(m.properties() & PROPERTY_IDENTITY);
    }
    public Matrix4f set(Matrix4x3fc m) {
        return
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m03(0.0f).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m13(0.0f).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22()).
        _m23(0.0f).
        _m30(m.m30()).
        _m31(m.m31()).
        _m32(m.m32()).
        _m33(1.0f).
        _properties(m.properties() | PROPERTY_AFFINE);
    }
    public Matrix4f set(Matrix4dc m) {
        return this
        ._m00((float) m.m00())
        ._m01((float) m.m01())
        ._m02((float) m.m02())
        ._m03((float) m.m03())
        ._m10((float) m.m10())
        ._m11((float) m.m11())
        ._m12((float) m.m12())
        ._m13((float) m.m13())
        ._m20((float) m.m20())
        ._m21((float) m.m21())
        ._m22((float) m.m22())
        ._m23((float) m.m23())
        ._m30((float) m.m30())
        ._m31((float) m.m31())
        ._m32((float) m.m32())
        ._m33((float) m.m33())
        ._properties(m.properties());
    }
    public Matrix4f set(Matrix3fc mat) {
        return this
        ._m00(mat.m00())
        ._m01(mat.m01())
        ._m02(mat.m02())
        ._m03(0.0f)
        ._m10(mat.m10())
        ._m11(mat.m11())
        ._m12(mat.m12())
        ._m13(0.0f)
        ._m20(mat.m20())
        ._m21(mat.m21())
        ._m22(mat.m22())
        ._m23(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f).
        _properties(PROPERTY_AFFINE);
    }
    public Matrix4f set(AxisAngle4f axisAngle) {
        float x = axisAngle.x;
        float y = axisAngle.y;
        float z = axisAngle.z;
        float angle = axisAngle.angle;
        double n = Math.sqrt(x*x + y*y + z*z);
        n = 1/n;
        x *= n;
        y *= n;
        z *= n;
        float s = Math.sin(angle);
        float c = Math.cosFromSin(s, angle);
        float omc = 1.0f - c;
        this._m00((float)(c + x*x*omc))
            ._m11((float)(c + y*y*omc))
            ._m22((float)(c + z*z*omc));
        float tmp1 = x*y*omc;
        float tmp2 = z*s;
        this._m10((float)(tmp1 - tmp2))
            ._m01((float)(tmp1 + tmp2));
        tmp1 = x*z*omc;
        tmp2 = y*s;
        this._m20((float)(tmp1 + tmp2))
            ._m02((float)(tmp1 - tmp2));
        tmp1 = y*z*omc;
        tmp2 = x*s;
        return this
        ._m21((float)(tmp1 - tmp2))
        ._m12((float)(tmp1 + tmp2))
        ._m03(0.0f)
        ._m13(0.0f)
        ._m23(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f set(AxisAngle4d axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double n = Math.sqrt(x*x + y*y + z*z);
        n = 1/n;
        x *= n;
        y *= n;
        z *= n;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0 - c;
        this._m00((float)(c + x*x*omc))
            ._m11((float)(c + y*y*omc))
            ._m22((float)(c + z*z*omc));
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        this._m10((float)(tmp1 - tmp2))
            ._m01((float)(tmp1 + tmp2));
        tmp1 = x*z*omc;
        tmp2 = y*s;
        this._m20((float)(tmp1 + tmp2))
            ._m02((float)(tmp1 - tmp2));
        tmp1 = y*z*omc;
        tmp2 = x*s;
        return this
        ._m21((float)(tmp1 - tmp2))
        ._m12((float)(tmp1 + tmp2))
        ._m03(0.0f)
        ._m13(0.0f)
        ._m23(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f set(Quaternionfc q) {
        return rotation(q);
    }
    public Matrix4f set(Quaterniondc q) {
        double w2 = q.w() * q.w();
        double x2 = q.x() * q.x();
        double y2 = q.y() * q.y();
        double z2 = q.z() * q.z();
        double zw = q.z() * q.w();
        double xy = q.x() * q.y();
        double xz = q.x() * q.z();
        double yw = q.y() * q.w();
        double yz = q.y() * q.z();
        double xw = q.x() * q.w();
        return
        _m00((float) (w2 + x2 - z2 - y2)).
        _m01((float) (xy + zw + zw + xy)).
        _m02((float) (xz - yw + xz - yw)).
        _m03(0.0f).
        _m10((float) (-zw + xy - zw + xy)).
        _m11((float) (y2 - z2 + w2 - x2)).
        _m12((float) (yz + yz + xw + xw)).
        _m13(0.0f).
        _m20((float) (yw + xz + xz + yw)).
        _m21((float) (yz + yz - xw - xw)).
        _m22((float) (z2 - y2 - x2 + w2)).
        _m30(0.0f).
        _m31(0.0f).
        _m32(0.0f).
        _m33(1.0f).
        _properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f set3x3(Matrix4fc mat) {
        MemUtil.INSTANCE.copy3x3(mat, this);
        return _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4f set4x3(Matrix4x3fc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _m30(mat.m30()).
        _m31(mat.m31()).
        _m32(mat.m32()).
        _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4f set4x3(Matrix4fc mat) {
        MemUtil.INSTANCE.copy4x3(mat, this);
        return _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4f mul(Matrix4fc right) {
       return mul(right, this);
    }
    public Matrix4f mul(Matrix4fc right, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if (JvmciCode.canUseJvmci && right instanceof Matrix4f) {
            Matrix4f mright = (Matrix4f) right;
            JvmciCode.__Matrix4f_mul(this, mright, dest);
            dest.properties = properties & mright.properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
            return dest;
        }
        else if ((properties & PROPERTY_TRANSLATION) != 0 && (right.properties() & PROPERTY_AFFINE) != 0)
            return mulTranslationAffine(right, dest);
        else if ((properties & PROPERTY_AFFINE) != 0 && (right.properties() & PROPERTY_AFFINE) != 0)
            return mulAffine(right, dest);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0 && (right.properties() & PROPERTY_AFFINE) != 0)
            return mulPerspectiveAffine(right, dest);
        else if ((right.properties() & PROPERTY_AFFINE) != 0)
            return mulAffineR(right, dest);
        return mul0(right, dest);
    }
    public Matrix4f mul0(Matrix4fc right) {
       return mul0(right, this);
    }
    public Matrix4f mul0(Matrix4fc right, Matrix4f dest) {
        float nm00 = Math.fma(m00(), right.m00(), Math.fma(m10(), right.m01(), Math.fma(m20(), right.m02(), m30() * right.m03())));
        float nm01 = Math.fma(m01(), right.m00(), Math.fma(m11(), right.m01(), Math.fma(m21(), right.m02(), m31() * right.m03())));
        float nm02 = Math.fma(m02(), right.m00(), Math.fma(m12(), right.m01(), Math.fma(m22(), right.m02(), m32() * right.m03())));
        float nm03 = Math.fma(m03(), right.m00(), Math.fma(m13(), right.m01(), Math.fma(m23(), right.m02(), m33() * right.m03())));
        float nm10 = Math.fma(m00(), right.m10(), Math.fma(m10(), right.m11(), Math.fma(m20(), right.m12(), m30() * right.m13())));
        float nm11 = Math.fma(m01(), right.m10(), Math.fma(m11(), right.m11(), Math.fma(m21(), right.m12(), m31() * right.m13())));
        float nm12 = Math.fma(m02(), right.m10(), Math.fma(m12(), right.m11(), Math.fma(m22(), right.m12(), m32() * right.m13())));
        float nm13 = Math.fma(m03(), right.m10(), Math.fma(m13(), right.m11(), Math.fma(m23(), right.m12(), m33() * right.m13())));
        float nm20 = Math.fma(m00(), right.m20(), Math.fma(m10(), right.m21(), Math.fma(m20(), right.m22(), m30() * right.m23())));
        float nm21 = Math.fma(m01(), right.m20(), Math.fma(m11(), right.m21(), Math.fma(m21(), right.m22(), m31() * right.m23())));
        float nm22 = Math.fma(m02(), right.m20(), Math.fma(m12(), right.m21(), Math.fma(m22(), right.m22(), m32() * right.m23())));
        float nm23 = Math.fma(m03(), right.m20(), Math.fma(m13(), right.m21(), Math.fma(m23(), right.m22(), m33() * right.m23())));
        float nm30 = Math.fma(m00(), right.m30(), Math.fma(m10(), right.m31(), Math.fma(m20(), right.m32(), m30() * right.m33())));
        float nm31 = Math.fma(m01(), right.m30(), Math.fma(m11(), right.m31(), Math.fma(m21(), right.m32(), m31() * right.m33())));
        float nm32 = Math.fma(m02(), right.m30(), Math.fma(m12(), right.m31(), Math.fma(m22(), right.m32(), m32() * right.m33())));
        float nm33 = Math.fma(m03(), right.m30(), Math.fma(m13(), right.m31(), Math.fma(m23(), right.m32(), m33() * right.m33())));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f mul(
            float r00, float r01, float r02, float r03,
            float r10, float r11, float r12, float r13,
            float r20, float r21, float r22, float r23,
            float r30, float r31, float r32, float r33) {
        return mul(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33, this);
    }
    public Matrix4f mul(
            float r00, float r01, float r02, float r03,
            float r10, float r11, float r12, float r13,
            float r20, float r21, float r22, float r23,
            float r30, float r31, float r32, float r33, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return mulAffineL(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33, dest);
        return mulGeneric(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33, dest);
    }
    private Matrix4f mulAffineL(
            float r00, float r01, float r02, float r03,
            float r10, float r11, float r12, float r13,
            float r20, float r21, float r22, float r23,
            float r30, float r31, float r32, float r33, Matrix4f dest) {
        float nm00 = Math.fma(m00(), r00, Math.fma(m10(), r01, Math.fma(m20(), r02, m30() * r03)));
        float nm01 = Math.fma(m01(), r00, Math.fma(m11(), r01, Math.fma(m21(), r02, m31() * r03)));
        float nm02 = Math.fma(m02(), r00, Math.fma(m12(), r01, Math.fma(m22(), r02, m32() * r03)));
        float nm03 = r03;
        float nm10 = Math.fma(m00(), r10, Math.fma(m10(), r11, Math.fma(m20(), r12, m30() * r13)));
        float nm11 = Math.fma(m01(), r10, Math.fma(m11(), r11, Math.fma(m21(), r12, m31() * r13)));
        float nm12 = Math.fma(m02(), r10, Math.fma(m12(), r11, Math.fma(m22(), r12, m32() * r13)));
        float nm13 = r13;
        float nm20 = Math.fma(m00(), r20, Math.fma(m10(), r21, Math.fma(m20(), r22, m30() * r23)));
        float nm21 = Math.fma(m01(), r20, Math.fma(m11(), r21, Math.fma(m21(), r22, m31() * r23)));
        float nm22 = Math.fma(m02(), r20, Math.fma(m12(), r21, Math.fma(m22(), r22, m32() * r23)));
        float nm23 = r23;
        float nm30 = Math.fma(m00(), r30, Math.fma(m10(), r31, Math.fma(m20(), r32, m30() * r33)));
        float nm31 = Math.fma(m01(), r30, Math.fma(m11(), r31, Math.fma(m21(), r32, m31() * r33)));
        float nm32 = Math.fma(m02(), r30, Math.fma(m12(), r31, Math.fma(m22(), r32, m32() * r33)));
        float nm33 = r33;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_AFFINE);
    }
    private Matrix4f mulGeneric(
            float r00, float r01, float r02, float r03,
            float r10, float r11, float r12, float r13,
            float r20, float r21, float r22, float r23,
            float r30, float r31, float r32, float r33, Matrix4f dest) {
        float nm00 = Math.fma(m00(), r00, Math.fma(m10(), r01, Math.fma(m20(), r02, m30() * r03)));
        float nm01 = Math.fma(m01(), r00, Math.fma(m11(), r01, Math.fma(m21(), r02, m31() * r03)));
        float nm02 = Math.fma(m02(), r00, Math.fma(m12(), r01, Math.fma(m22(), r02, m32() * r03)));
        float nm03 = Math.fma(m03(), r00, Math.fma(m13(), r01, Math.fma(m23(), r02, m33() * r03)));
        float nm10 = Math.fma(m00(), r10, Math.fma(m10(), r11, Math.fma(m20(), r12, m30() * r13)));
        float nm11 = Math.fma(m01(), r10, Math.fma(m11(), r11, Math.fma(m21(), r12, m31() * r13)));
        float nm12 = Math.fma(m02(), r10, Math.fma(m12(), r11, Math.fma(m22(), r12, m32() * r13)));
        float nm13 = Math.fma(m03(), r10, Math.fma(m13(), r11, Math.fma(m23(), r12, m33() * r13)));
        float nm20 = Math.fma(m00(), r20, Math.fma(m10(), r21, Math.fma(m20(), r22, m30() * r23)));
        float nm21 = Math.fma(m01(), r20, Math.fma(m11(), r21, Math.fma(m21(), r22, m31() * r23)));
        float nm22 = Math.fma(m02(), r20, Math.fma(m12(), r21, Math.fma(m22(), r22, m32() * r23)));
        float nm23 = Math.fma(m03(), r20, Math.fma(m13(), r21, Math.fma(m23(), r22, m33() * r23)));
        float nm30 = Math.fma(m00(), r30, Math.fma(m10(), r31, Math.fma(m20(), r32, m30() * r33)));
        float nm31 = Math.fma(m01(), r30, Math.fma(m11(), r31, Math.fma(m21(), r32, m31() * r33)));
        float nm32 = Math.fma(m02(), r30, Math.fma(m12(), r31, Math.fma(m22(), r32, m32() * r33)));
        float nm33 = Math.fma(m03(), r30, Math.fma(m13(), r31, Math.fma(m23(), r32, m33() * r33)));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f mul3x3(
            float r00, float r01, float r02,
            float r10, float r11, float r12,
            float r20, float r21, float r22) {
        return mul3x3(r00, r01, r02, r10, r11, r12, r20, r21, r22, this);
    }
    public Matrix4f mul3x3(
            float r00, float r01, float r02,
            float r10, float r11, float r12,
            float r20, float r21, float r22, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(r00, r01, r02, 0, r10, r11, r12, 0, r20, r21, r22, 0, 0, 0, 0, 1);
        return mulGeneric3x3(r00, r01, r02, r10, r11, r12, r20, r21, r22, dest);
    }
    private Matrix4f mulGeneric3x3(
            float r00, float r01, float r02,
            float r10, float r11, float r12,
            float r20, float r21, float r22, Matrix4f dest) {
        float nm00 = Math.fma(m00(), r00, Math.fma(m10(), r01, m20() * r02));
        float nm01 = Math.fma(m01(), r00, Math.fma(m11(), r01, m21() * r02));
        float nm02 = Math.fma(m02(), r00, Math.fma(m12(), r01, m22() * r02));
        float nm03 = Math.fma(m03(), r00, Math.fma(m13(), r01, m23() * r02));
        float nm10 = Math.fma(m00(), r10, Math.fma(m10(), r11, m20() * r12));
        float nm11 = Math.fma(m01(), r10, Math.fma(m11(), r11, m21() * r12));
        float nm12 = Math.fma(m02(), r10, Math.fma(m12(), r11, m22() * r12));
        float nm13 = Math.fma(m03(), r10, Math.fma(m13(), r11, m23() * r12));
        float nm20 = Math.fma(m00(), r20, Math.fma(m10(), r21, m20() * r22));
        float nm21 = Math.fma(m01(), r20, Math.fma(m11(), r21, m21() * r22));
        float nm22 = Math.fma(m02(), r20, Math.fma(m12(), r21, m22() * r22));
        float nm23 = Math.fma(m03(), r20, Math.fma(m13(), r21, m23() * r22));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(this.properties & PROPERTY_AFFINE);
    }
    public Matrix4f mulLocal(Matrix4fc left) {
       return mulLocal(left, this);
    }
    public Matrix4f mulLocal(Matrix4fc left, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(left);
        else if ((left.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if ((properties & PROPERTY_AFFINE) != 0 && (left.properties() & PROPERTY_AFFINE) != 0)
            return mulLocalAffine(left, dest);
        return mulLocalGeneric(left, dest);
    }
    private Matrix4f mulLocalGeneric(Matrix4fc left, Matrix4f dest) {
        float nm00 = Math.fma(left.m00(), m00(), Math.fma(left.m10(), m01(), Math.fma(left.m20(), m02(), left.m30() * m03())));
        float nm01 = Math.fma(left.m01(), m00(), Math.fma(left.m11(), m01(), Math.fma(left.m21(), m02(), left.m31() * m03())));
        float nm02 = Math.fma(left.m02(), m00(), Math.fma(left.m12(), m01(), Math.fma(left.m22(), m02(), left.m32() * m03())));
        float nm03 = Math.fma(left.m03(), m00(), Math.fma(left.m13(), m01(), Math.fma(left.m23(), m02(), left.m33() * m03())));
        float nm10 = Math.fma(left.m00(), m10(), Math.fma(left.m10(), m11(), Math.fma(left.m20(), m12(), left.m30() * m13())));
        float nm11 = Math.fma(left.m01(), m10(), Math.fma(left.m11(), m11(), Math.fma(left.m21(), m12(), left.m31() * m13())));
        float nm12 = Math.fma(left.m02(), m10(), Math.fma(left.m12(), m11(), Math.fma(left.m22(), m12(), left.m32() * m13())));
        float nm13 = Math.fma(left.m03(), m10(), Math.fma(left.m13(), m11(), Math.fma(left.m23(), m12(), left.m33() * m13())));
        float nm20 = Math.fma(left.m00(), m20(), Math.fma(left.m10(), m21(), Math.fma(left.m20(), m22(), left.m30() * m23())));
        float nm21 = Math.fma(left.m01(), m20(), Math.fma(left.m11(), m21(), Math.fma(left.m21(), m22(), left.m31() * m23())));
        float nm22 = Math.fma(left.m02(), m20(), Math.fma(left.m12(), m21(), Math.fma(left.m22(), m22(), left.m32() * m23())));
        float nm23 = Math.fma(left.m03(), m20(), Math.fma(left.m13(), m21(), Math.fma(left.m23(), m22(), left.m33() * m23())));
        float nm30 = Math.fma(left.m00(), m30(), Math.fma(left.m10(), m31(), Math.fma(left.m20(), m32(), left.m30() * m33())));
        float nm31 = Math.fma(left.m01(), m30(), Math.fma(left.m11(), m31(), Math.fma(left.m21(), m32(), left.m31() * m33())));
        float nm32 = Math.fma(left.m02(), m30(), Math.fma(left.m12(), m31(), Math.fma(left.m22(), m32(), left.m32() * m33())));
        float nm33 = Math.fma(left.m03(), m30(), Math.fma(left.m13(), m31(), Math.fma(left.m23(), m32(), left.m33() * m33())));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f mulLocalAffine(Matrix4fc left) {
       return mulLocalAffine(left, this);
    }
    public Matrix4f mulLocalAffine(Matrix4fc left, Matrix4f dest) {
        float nm00 = left.m00() * m00() + left.m10() * m01() + left.m20() * m02();
        float nm01 = left.m01() * m00() + left.m11() * m01() + left.m21() * m02();
        float nm02 = left.m02() * m00() + left.m12() * m01() + left.m22() * m02();
        float nm03 = left.m03();
        float nm10 = left.m00() * m10() + left.m10() * m11() + left.m20() * m12();
        float nm11 = left.m01() * m10() + left.m11() * m11() + left.m21() * m12();
        float nm12 = left.m02() * m10() + left.m12() * m11() + left.m22() * m12();
        float nm13 = left.m13();
        float nm20 = left.m00() * m20() + left.m10() * m21() + left.m20() * m22();
        float nm21 = left.m01() * m20() + left.m11() * m21() + left.m21() * m22();
        float nm22 = left.m02() * m20() + left.m12() * m21() + left.m22() * m22();
        float nm23 = left.m23();
        float nm30 = left.m00() * m30() + left.m10() * m31() + left.m20() * m32() + left.m30();
        float nm31 = left.m01() * m30() + left.m11() * m31() + left.m21() * m32() + left.m31();
        float nm32 = left.m02() * m30() + left.m12() * m31() + left.m22() * m32() + left.m32();
        float nm33 = left.m33();
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_AFFINE | (this.properties() & left.properties() & PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mul(Matrix4x3fc right) {
        return mul(right, this);
    }
    public Matrix4f mul(Matrix4x3fc right, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return mulTranslation(right, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return mulAffine(right, dest);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return mulPerspectiveAffine(right, dest);
        return mulGeneric(right, dest);
    }
    private Matrix4f mulTranslation(Matrix4x3fc right, Matrix4f dest) {
        return dest
        ._m00(right.m00())
        ._m01(right.m01())
        ._m02(right.m02())
        ._m03(m03())
        ._m10(right.m10())
        ._m11(right.m11())
        ._m12(right.m12())
        ._m13(m13())
        ._m20(right.m20())
        ._m21(right.m21())
        ._m22(right.m22())
        ._m23(m23())
        ._m30(right.m30() + m30())
        ._m31(right.m31() + m31())
        ._m32(right.m32() + m32())
        ._m33(m33())
        ._properties(PROPERTY_AFFINE | (right.properties() & PROPERTY_ORTHONORMAL));
    }
    private Matrix4f mulAffine(Matrix4x3fc right, Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        float m20 = this.m20(), m21 = this.m21(), m22 = this.m22();
        float rm00 = right.m00(), rm01 = right.m01(), rm02 = right.m02();
        float rm10 = right.m10(), rm11 = right.m11(), rm12 = right.m12();
        float rm20 = right.m20(), rm21 = right.m21(), rm22 = right.m22();
        float rm30 = right.m30(), rm31 = right.m31(), rm32 = right.m32();
        return dest
        ._m00(Math.fma(m00, rm00, Math.fma(m10, rm01, m20 * rm02)))
        ._m01(Math.fma(m01, rm00, Math.fma(m11, rm01, m21 * rm02)))
        ._m02(Math.fma(m02, rm00, Math.fma(m12, rm01, m22 * rm02)))
        ._m03(m03())
        ._m10(Math.fma(m00, rm10, Math.fma(m10, rm11, m20 * rm12)))
        ._m11(Math.fma(m01, rm10, Math.fma(m11, rm11, m21 * rm12)))
        ._m12(Math.fma(m02, rm10, Math.fma(m12, rm11, m22 * rm12)))
        ._m13(m13())
        ._m20(Math.fma(m00, rm20, Math.fma(m10, rm21, m20 * rm22)))
        ._m21(Math.fma(m01, rm20, Math.fma(m11, rm21, m21 * rm22)))
        ._m22(Math.fma(m02, rm20, Math.fma(m12, rm21, m22 * rm22)))
        ._m23(m23())
        ._m30(Math.fma(m00, rm30, Math.fma(m10, rm31, Math.fma(m20, rm32, m30()))))
        ._m31(Math.fma(m01, rm30, Math.fma(m11, rm31, Math.fma(m21, rm32, m31()))))
        ._m32(Math.fma(m02, rm30, Math.fma(m12, rm31, Math.fma(m22, rm32, m32()))))
        ._m33(m33())
        ._properties(PROPERTY_AFFINE | (this.properties & right.properties() & PROPERTY_ORTHONORMAL));
    }
    private Matrix4f mulGeneric(Matrix4x3fc right, Matrix4f dest) {
        float nm00 = Math.fma(m00(), right.m00(), Math.fma(m10(), right.m01(), m20() * right.m02()));
        float nm01 = Math.fma(m01(), right.m00(), Math.fma(m11(), right.m01(), m21() * right.m02()));
        float nm02 = Math.fma(m02(), right.m00(), Math.fma(m12(), right.m01(), m22() * right.m02()));
        float nm03 = Math.fma(m03(), right.m00(), Math.fma(m13(), right.m01(), m23() * right.m02()));
        float nm10 = Math.fma(m00(), right.m10(), Math.fma(m10(), right.m11(), m20() * right.m12()));
        float nm11 = Math.fma(m01(), right.m10(), Math.fma(m11(), right.m11(), m21() * right.m12()));
        float nm12 = Math.fma(m02(), right.m10(), Math.fma(m12(), right.m11(), m22() * right.m12()));
        float nm13 = Math.fma(m03(), right.m10(), Math.fma(m13(), right.m11(), m23() * right.m12()));
        float nm20 = Math.fma(m00(), right.m20(), Math.fma(m10(), right.m21(), m20() * right.m22()));
        float nm21 = Math.fma(m01(), right.m20(), Math.fma(m11(), right.m21(), m21() * right.m22()));
        float nm22 = Math.fma(m02(), right.m20(), Math.fma(m12(), right.m21(), m22() * right.m22()));
        float nm23 = Math.fma(m03(), right.m20(), Math.fma(m13(), right.m21(), m23() * right.m22()));
        float nm30 = Math.fma(m00(), right.m30(), Math.fma(m10(), right.m31(), Math.fma(m20(), right.m32(), m30())));
        float nm31 = Math.fma(m01(), right.m30(), Math.fma(m11(), right.m31(), Math.fma(m21(), right.m32(), m31())));
        float nm32 = Math.fma(m02(), right.m30(), Math.fma(m12(), right.m31(), Math.fma(m22(), right.m32(), m32())));
        float nm33 = Math.fma(m03(), right.m30(), Math.fma(m13(), right.m31(), Math.fma(m23(), right.m32(), m33())));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mul(Matrix3x2fc right) {
        return mul(right, this);
    }
    public Matrix4f mul(Matrix3x2fc right, Matrix4f dest) {
        float nm00 = m00() * right.m00() + m10() * right.m01();
        float nm01 = m01() * right.m00() + m11() * right.m01();
        float nm02 = m02() * right.m00() + m12() * right.m01();
        float nm03 = m03() * right.m00() + m13() * right.m01();
        float nm10 = m00() * right.m10() + m10() * right.m11();
        float nm11 = m01() * right.m10() + m11() * right.m11();
        float nm12 = m02() * right.m10() + m12() * right.m11();
        float nm13 = m03() * right.m10() + m13() * right.m11();
        float nm30 = m00() * right.m20() + m10() * right.m21() + m30();
        float nm31 = m01() * right.m20() + m11() * right.m21() + m31();
        float nm32 = m02() * right.m20() + m12() * right.m21() + m32();
        float nm33 = m03() * right.m20() + m13() * right.m21() + m33();
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(m20())
        ._m21(m21())
        ._m22(m22())
        ._m23(m23())
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mulPerspectiveAffine(Matrix4fc view) {
       return mulPerspectiveAffine(view, this);
    }
    public Matrix4f mulPerspectiveAffine(Matrix4fc view, Matrix4f dest) {
        float nm00 = m00() * view.m00(), nm01 = m11() * view.m01(), nm02 = m22() * view.m02(), nm03 = m23() * view.m02();
        float nm10 = m00() * view.m10(), nm11 = m11() * view.m11(), nm12 = m22() * view.m12(), nm13 = m23() * view.m12();
        float nm20 = m00() * view.m20(), nm21 = m11() * view.m21(), nm22 = m22() * view.m22(), nm23 = m23() * view.m22();
        float nm30 = m00() * view.m30(), nm31 = m11() * view.m31(), nm32 = m22() * view.m32() + m32(), nm33 = m23() * view.m32();
        return dest
            ._m00(nm00)._m01(nm01)._m02(nm02)._m03(nm03)
            ._m10(nm10)._m11(nm11)._m12(nm12)._m13(nm13)
            ._m20(nm20)._m21(nm21)._m22(nm22)._m23(nm23)
            ._m30(nm30)._m31(nm31)._m32(nm32)._m33(nm33)
            ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f mulPerspectiveAffine(Matrix4x3fc view) {
       return mulPerspectiveAffine(view, this);
    }
    public Matrix4f mulPerspectiveAffine(Matrix4x3fc view, Matrix4f dest) {
        float lm00 = m00(), lm11 = m11(), lm22 = m22(), lm23 = m23();
        return dest.
        _m00(lm00 * view.m00())._m01(lm11 * view.m01())._m02(lm22 * view.m02())._m03(lm23 * view.m02()).
        _m10(lm00 * view.m10())._m11(lm11 * view.m11())._m12(lm22 * view.m12())._m13(lm23 * view.m12()).
        _m20(lm00 * view.m20())._m21(lm11 * view.m21())._m22(lm22 * view.m22())._m23(lm23 * view.m22()).
        _m30(lm00 * view.m30())._m31(lm11 * view.m31())._m32(lm22 * view.m32() + m32())._m33(lm23 * view.m32()).
        _properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f mulAffineR(Matrix4fc right) {
       return mulAffineR(right, this);
    }
    public Matrix4f mulAffineR(Matrix4fc right, Matrix4f dest) {
        float nm00 = Math.fma(m00(), right.m00(), Math.fma(m10(), right.m01(), m20() * right.m02()));
        float nm01 = Math.fma(m01(), right.m00(), Math.fma(m11(), right.m01(), m21() * right.m02()));
        float nm02 = Math.fma(m02(), right.m00(), Math.fma(m12(), right.m01(), m22() * right.m02()));
        float nm03 = Math.fma(m03(), right.m00(), Math.fma(m13(), right.m01(), m23() * right.m02()));
        float nm10 = Math.fma(m00(), right.m10(), Math.fma(m10(), right.m11(), m20() * right.m12()));
        float nm11 = Math.fma(m01(), right.m10(), Math.fma(m11(), right.m11(), m21() * right.m12()));
        float nm12 = Math.fma(m02(), right.m10(), Math.fma(m12(), right.m11(), m22() * right.m12()));
        float nm13 = Math.fma(m03(), right.m10(), Math.fma(m13(), right.m11(), m23() * right.m12()));
        float nm20 = Math.fma(m00(), right.m20(), Math.fma(m10(), right.m21(), m20() * right.m22()));
        float nm21 = Math.fma(m01(), right.m20(), Math.fma(m11(), right.m21(), m21() * right.m22()));
        float nm22 = Math.fma(m02(), right.m20(), Math.fma(m12(), right.m21(), m22() * right.m22()));
        float nm23 = Math.fma(m03(), right.m20(), Math.fma(m13(), right.m21(), m23() * right.m22()));
        float nm30 = Math.fma(m00(), right.m30(), Math.fma(m10(), right.m31(), Math.fma(m20(), right.m32(), m30())));
        float nm31 = Math.fma(m01(), right.m30(), Math.fma(m11(), right.m31(), Math.fma(m21(), right.m32(), m31())));
        float nm32 = Math.fma(m02(), right.m30(), Math.fma(m12(), right.m31(), Math.fma(m22(), right.m32(), m32())));
        float nm33 = Math.fma(m03(), right.m30(), Math.fma(m13(), right.m31(), Math.fma(m23(), right.m32(), m33())));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mulAffine(Matrix4fc right) {
       return mulAffine(right, this);
    }
    public Matrix4f mulAffine(Matrix4fc right, Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        float m20 = this.m20(), m21 = this.m21(), m22 = this.m22();
        float rm00 = right.m00(), rm01 = right.m01(), rm02 = right.m02();
        float rm10 = right.m10(), rm11 = right.m11(), rm12 = right.m12();
        float rm20 = right.m20(), rm21 = right.m21(), rm22 = right.m22();
        float rm30 = right.m30(), rm31 = right.m31(), rm32 = right.m32();
        return dest
        ._m00(Math.fma(m00, rm00, Math.fma(m10, rm01, m20 * rm02)))
        ._m01(Math.fma(m01, rm00, Math.fma(m11, rm01, m21 * rm02)))
        ._m02(Math.fma(m02, rm00, Math.fma(m12, rm01, m22 * rm02)))
        ._m03(m03())
        ._m10(Math.fma(m00, rm10, Math.fma(m10, rm11, m20 * rm12)))
        ._m11(Math.fma(m01, rm10, Math.fma(m11, rm11, m21 * rm12)))
        ._m12(Math.fma(m02, rm10, Math.fma(m12, rm11, m22 * rm12)))
        ._m13(m13())
        ._m20(Math.fma(m00, rm20, Math.fma(m10, rm21, m20 * rm22)))
        ._m21(Math.fma(m01, rm20, Math.fma(m11, rm21, m21 * rm22)))
        ._m22(Math.fma(m02, rm20, Math.fma(m12, rm21, m22 * rm22)))
        ._m23(m23())
        ._m30(Math.fma(m00, rm30, Math.fma(m10, rm31, Math.fma(m20, rm32, m30()))))
        ._m31(Math.fma(m01, rm30, Math.fma(m11, rm31, Math.fma(m21, rm32, m31()))))
        ._m32(Math.fma(m02, rm30, Math.fma(m12, rm31, Math.fma(m22, rm32, m32()))))
        ._m33(m33())
        ._properties(PROPERTY_AFFINE | (this.properties & right.properties() & PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mulTranslationAffine(Matrix4fc right, Matrix4f dest) {
        return dest
        ._m00(right.m00())
        ._m01(right.m01())
        ._m02(right.m02())
        ._m03(m03())
        ._m10(right.m10())
        ._m11(right.m11())
        ._m12(right.m12())
        ._m13(m13())
        ._m20(right.m20())
        ._m21(right.m21())
        ._m22(right.m22())
        ._m23(m23())
        ._m30(right.m30() + m30())
        ._m31(right.m31() + m31())
        ._m32(right.m32() + m32())
        ._m33(m33())
        ._properties(PROPERTY_AFFINE | (right.properties() & PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mulOrthoAffine(Matrix4fc view) {
        return mulOrthoAffine(view, this);
    }
    public Matrix4f mulOrthoAffine(Matrix4fc view, Matrix4f dest) {
        float nm00 = m00() * view.m00();
        float nm01 = m11() * view.m01();
        float nm02 = m22() * view.m02();
        float nm10 = m00() * view.m10();
        float nm11 = m11() * view.m11();
        float nm12 = m22() * view.m12();
        float nm20 = m00() * view.m20();
        float nm21 = m11() * view.m21();
        float nm22 = m22() * view.m22();
        float nm30 = m00() * view.m30() + m30();
        float nm31 = m11() * view.m31() + m31();
        float nm32 = m22() * view.m32() + m32();
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0f)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0f)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE);
    }
    public Matrix4f fma4x3(Matrix4fc other, float otherFactor) {
        return fma4x3(other, otherFactor, this);
    }
    public Matrix4f fma4x3(Matrix4fc other, float otherFactor, Matrix4f dest) {
        dest._m00(Math.fma(other.m00(), otherFactor, m00()))
            ._m01(Math.fma(other.m01(), otherFactor, m01()))
            ._m02(Math.fma(other.m02(), otherFactor, m02()))
            ._m03(m03())
            ._m10(Math.fma(other.m10(), otherFactor, m10()))
            ._m11(Math.fma(other.m11(), otherFactor, m11()))
            ._m12(Math.fma(other.m12(), otherFactor, m12()))
            ._m13(m13())
            ._m20(Math.fma(other.m20(), otherFactor, m20()))
            ._m21(Math.fma(other.m21(), otherFactor, m21()))
            ._m22(Math.fma(other.m22(), otherFactor, m22()))
            ._m23(m23())
            ._m30(Math.fma(other.m30(), otherFactor, m30()))
            ._m31(Math.fma(other.m31(), otherFactor, m31()))
            ._m32(Math.fma(other.m32(), otherFactor, m32()))
            ._m33(m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f add(Matrix4fc other) {
        return add(other, this);
    }
    public Matrix4f add(Matrix4fc other, Matrix4f dest) {
        dest._m00(m00() + other.m00())
            ._m01(m01() + other.m01())
            ._m02(m02() + other.m02())
            ._m03(m03() + other.m03())
            ._m10(m10() + other.m10())
            ._m11(m11() + other.m11())
            ._m12(m12() + other.m12())
            ._m13(m13() + other.m13())
            ._m20(m20() + other.m20())
            ._m21(m21() + other.m21())
            ._m22(m22() + other.m22())
            ._m23(m23() + other.m23())
            ._m30(m30() + other.m30())
            ._m31(m31() + other.m31())
            ._m32(m32() + other.m32())
            ._m33(m33() + other.m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f sub(Matrix4fc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix4f sub(Matrix4fc subtrahend, Matrix4f dest) {
        dest._m00(m00() - subtrahend.m00())
            ._m01(m01() - subtrahend.m01())
            ._m02(m02() - subtrahend.m02())
            ._m03(m03() - subtrahend.m03())
            ._m10(m10() - subtrahend.m10())
            ._m11(m11() - subtrahend.m11())
            ._m12(m12() - subtrahend.m12())
            ._m13(m13() - subtrahend.m13())
            ._m20(m20() - subtrahend.m20())
            ._m21(m21() - subtrahend.m21())
            ._m22(m22() - subtrahend.m22())
            ._m23(m23() - subtrahend.m23())
            ._m30(m30() - subtrahend.m30())
            ._m31(m31() - subtrahend.m31())
            ._m32(m32() - subtrahend.m32())
            ._m33(m33() - subtrahend.m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f mulComponentWise(Matrix4fc other) {
        return mulComponentWise(other, this);
    }
    public Matrix4f mulComponentWise(Matrix4fc other, Matrix4f dest) {
        dest._m00(m00() * other.m00())
            ._m01(m01() * other.m01())
            ._m02(m02() * other.m02())
            ._m03(m03() * other.m03())
            ._m10(m10() * other.m10())
            ._m11(m11() * other.m11())
            ._m12(m12() * other.m12())
            ._m13(m13() * other.m13())
            ._m20(m20() * other.m20())
            ._m21(m21() * other.m21())
            ._m22(m22() * other.m22())
            ._m23(m23() * other.m23())
            ._m30(m30() * other.m30())
            ._m31(m31() * other.m31())
            ._m32(m32() * other.m32())
            ._m33(m33() * other.m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f add4x3(Matrix4fc other) {
        return add4x3(other, this);
    }
    public Matrix4f add4x3(Matrix4fc other, Matrix4f dest) {
        dest._m00(m00() + other.m00())
            ._m01(m01() + other.m01())
            ._m02(m02() + other.m02())
            ._m03(m03())
            ._m10(m10() + other.m10())
            ._m11(m11() + other.m11())
            ._m12(m12() + other.m12())
            ._m13(m13())
            ._m20(m20() + other.m20())
            ._m21(m21() + other.m21())
            ._m22(m22() + other.m22())
            ._m23(m23())
            ._m30(m30() + other.m30())
            ._m31(m31() + other.m31())
            ._m32(m32() + other.m32())
            ._m33(m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f sub4x3(Matrix4f subtrahend) {
        return sub4x3(subtrahend, this);
    }
    public Matrix4f sub4x3(Matrix4fc subtrahend, Matrix4f dest) {
        dest._m00(m00() - subtrahend.m00())
            ._m01(m01() - subtrahend.m01())
            ._m02(m02() - subtrahend.m02())
            ._m03(m03())
            ._m10(m10() - subtrahend.m10())
            ._m11(m11() - subtrahend.m11())
            ._m12(m12() - subtrahend.m12())
            ._m13(m13())
            ._m20(m20() - subtrahend.m20())
            ._m21(m21() - subtrahend.m21())
            ._m22(m22() - subtrahend.m22())
            ._m23(m23())
            ._m30(m30() - subtrahend.m30())
            ._m31(m31() - subtrahend.m31())
            ._m32(m32() - subtrahend.m32())
            ._m33(m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f mul4x3ComponentWise(Matrix4fc other) {
        return mul4x3ComponentWise(other, this);
    }
    public Matrix4f mul4x3ComponentWise(Matrix4fc other, Matrix4f dest) {
        dest._m00(m00() * other.m00())
            ._m01(m01() * other.m01())
            ._m02(m02() * other.m02())
            ._m03(m03())
            ._m10(m10() * other.m10())
            ._m11(m11() * other.m11())
            ._m12(m12() * other.m12())
            ._m13(m13())
            ._m20(m20() * other.m20())
            ._m21(m21() * other.m21())
            ._m22(m22() * other.m22())
            ._m23(m23())
            ._m30(m30() * other.m30())
            ._m31(m31() * other.m31())
            ._m32(m32() * other.m32())
            ._m33(m33())
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f set(float m00, float m01, float m02, float m03,
                        float m10, float m11, float m12, float m13,
                        float m20, float m21, float m22, float m23, 
                        float m30, float m31, float m32, float m33) {
        return this
        ._m00(m00)
        ._m10(m10)
        ._m20(m20)
        ._m30(m30)
        ._m01(m01)
        ._m11(m11)
        ._m21(m21)
        ._m31(m31)
        ._m02(m02)
        ._m12(m12)
        ._m22(m22)
        ._m32(m32)
        ._m03(m03)
        ._m13(m13)
        ._m23(m23)
        ._m33(m33)
        .determineProperties();
    }
    public Matrix4f set(float m[], int off) {
        MemUtil.INSTANCE.copy(m, off, this);
        return determineProperties();
    }
    public Matrix4f set(float m[]) {
        return set(m, 0);
    }
    public Matrix4f setTransposed(float m[], int off) {
        MemUtil.INSTANCE.copyTransposed(m, off, this);
        return determineProperties();
    }
    public Matrix4f setTransposed(float m[]) {
        return setTransposed(m, 0);
    }
    public Matrix4f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return determineProperties();
    }
    public Matrix4f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return determineProperties();
    }
    public Matrix4f setTransposed(FloatBuffer buffer) {
        MemUtil.INSTANCE.getTransposed(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4f setTransposed(ByteBuffer buffer) {
        MemUtil.INSTANCE.getTransposed(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return determineProperties();
    }
    public Matrix4f setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return determineProperties();
    }
    public Matrix4f set(Vector4fc col0, Vector4fc col1, Vector4fc col2, Vector4fc col3) {
        return
        _m00(col0.x()).
        _m01(col0.y()).
        _m02(col0.z()).
        _m03(col0.w()).
        _m10(col1.x()).
        _m11(col1.y()).
        _m12(col1.z()).
        _m13(col1.w()).
        _m20(col2.x()).
        _m21(col2.y()).
        _m22(col2.z()).
        _m23(col2.w()).
        _m30(col3.x()).
        _m31(col3.y()).
        _m32(col3.z()).
        _m33(col3.w()).
        determineProperties();
    }
    public float determinant() {
        if ((properties & PROPERTY_AFFINE) != 0)
            return determinantAffine();
        return (m00() * m11() - m01() * m10()) * (m22() * m33() - m23() * m32())
             + (m02() * m10() - m00() * m12()) * (m21() * m33() - m23() * m31())
             + (m00() * m13() - m03() * m10()) * (m21() * m32() - m22() * m31())
             + (m01() * m12() - m02() * m11()) * (m20() * m33() - m23() * m30())
             + (m03() * m11() - m01() * m13()) * (m20() * m32() - m22() * m30())
             + (m02() * m13() - m03() * m12()) * (m20() * m31() - m21() * m30());
    }
    public float determinant3x3() {
        return (m00() * m11() - m01() * m10()) * m22()
             + (m02() * m10() - m00() * m12()) * m21()
             + (m01() * m12() - m02() * m11()) * m20();
    }
    public float determinantAffine() {
        return (m00() * m11() - m01() * m10()) * m22()
             + (m02() * m10() - m00() * m12()) * m21()
             + (m01() * m12() - m02() * m11()) * m20();
    }
    public Matrix4f invert(Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return invertTranslation(dest);
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return invertOrthonormal(dest);
        else if (JvmciCode.canUseJvmci) {
            JvmciCode.__Matrix4f_invert(this, dest);
            dest.properties = properties & PROPERTY_AFFINE;
            return dest;
        }
        else if ((properties & PROPERTY_AFFINE) != 0)
            return invertAffine(dest);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return invertPerspective(dest);
        return invertGeneric(dest);
    }
    private Matrix4f invertTranslation(Matrix4f dest) {
        if (dest != this)
            dest.set(this);
        return dest._m30(-m30())._m31(-m31())._m32(-m32())._properties(PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
    }
    private Matrix4f invertOrthonormal(Matrix4f dest) {
        float nm30 = -(m00() * m30() + m01() * m31() + m02() * m32());
        float nm31 = -(m10() * m30() + m11() * m31() + m12() * m32());
        float nm32 = -(m20() * m30() + m21() * m31() + m22() * m32());
        float m01 = this.m01();
        float m02 = this.m02();
        float m12 = this.m12();
        return dest
        ._m00(m00())
        ._m01(m10())
        ._m02(m20())
        ._m03(0.0f)
        ._m10(m01)
        ._m11(m11())
        ._m12(m21())
        ._m13(0.0f)
        ._m20(m02)
        ._m21(m12)
        ._m22(m22())
        ._m23(0.0f)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    private Matrix4f invertGeneric(Matrix4f dest) {
        if (this != dest)
            return invertGenericNonThis(dest);
        return invertGenericThis(dest);
    }
    private Matrix4f invertGenericNonThis(Matrix4f dest) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float c = m00() * m13() - m03() * m10();
        float d = m01() * m12() - m02() * m11();
        float e = m01() * m13() - m03() * m11();
        float f = m02() * m13() - m03() * m12();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float i = m20() * m33() - m23() * m30();
        float j = m21() * m32() - m22() * m31();
        float k = m21() * m33() - m23() * m31();
        float l = m22() * m33() - m23() * m32();
        float det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0f / det;
        return dest
        ._m00(Math.fma( m11(), l, Math.fma(-m12(), k,  m13() * j)) * det)
        ._m01(Math.fma(-m01(), l, Math.fma( m02(), k, -m03() * j)) * det)
        ._m02(Math.fma( m31(), f, Math.fma(-m32(), e,  m33() * d)) * det)
        ._m03(Math.fma(-m21(), f, Math.fma( m22(), e, -m23() * d)) * det)
        ._m10(Math.fma(-m10(), l, Math.fma( m12(), i, -m13() * h)) * det)
        ._m11(Math.fma( m00(), l, Math.fma(-m02(), i,  m03() * h)) * det)
        ._m12(Math.fma(-m30(), f, Math.fma( m32(), c, -m33() * b)) * det)
        ._m13(Math.fma( m20(), f, Math.fma(-m22(), c,  m23() * b)) * det)
        ._m20(Math.fma( m10(), k, Math.fma(-m11(), i,  m13() * g)) * det)
        ._m21(Math.fma(-m00(), k, Math.fma( m01(), i, -m03() * g)) * det)
        ._m22(Math.fma( m30(), e, Math.fma(-m31(), c,  m33() * a)) * det)
        ._m23(Math.fma(-m20(), e, Math.fma( m21(), c, -m23() * a)) * det)
        ._m30(Math.fma(-m10(), j, Math.fma( m11(), h, -m12() * g)) * det)
        ._m31(Math.fma( m00(), j, Math.fma(-m01(), h,  m02() * g)) * det)
        ._m32(Math.fma(-m30(), d, Math.fma( m31(), b, -m32() * a)) * det)
        ._m33(Math.fma( m20(), d, Math.fma(-m21(), b,  m22() * a)) * det)
        ._properties(PROPERTY_UNKNOWN);
    }
    private Matrix4f invertGenericThis(Matrix4f dest) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float c = m00() * m13() - m03() * m10();
        float d = m01() * m12() - m02() * m11();
        float e = m01() * m13() - m03() * m11();
        float f = m02() * m13() - m03() * m12();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float i = m20() * m33() - m23() * m30();
        float j = m21() * m32() - m22() * m31();
        float k = m21() * m33() - m23() * m31();
        float l = m22() * m33() - m23() * m32();
        float det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0f / det;
        float nm00 = Math.fma( m11(), l, Math.fma(-m12(), k,  m13() * j)) * det;
        float nm01 = Math.fma(-m01(), l, Math.fma( m02(), k, -m03() * j)) * det;
        float nm02 = Math.fma( m31(), f, Math.fma(-m32(), e,  m33() * d)) * det;
        float nm03 = Math.fma(-m21(), f, Math.fma( m22(), e, -m23() * d)) * det;
        float nm10 = Math.fma(-m10(), l, Math.fma( m12(), i, -m13() * h)) * det;
        float nm11 = Math.fma( m00(), l, Math.fma(-m02(), i,  m03() * h)) * det;
        float nm12 = Math.fma(-m30(), f, Math.fma( m32(), c, -m33() * b)) * det;
        float nm13 = Math.fma( m20(), f, Math.fma(-m22(), c,  m23() * b)) * det;
        float nm20 = Math.fma( m10(), k, Math.fma(-m11(), i,  m13() * g)) * det;
        float nm21 = Math.fma(-m00(), k, Math.fma( m01(), i, -m03() * g)) * det;
        float nm22 = Math.fma( m30(), e, Math.fma(-m31(), c,  m33() * a)) * det;
        float nm23 = Math.fma(-m20(), e, Math.fma( m21(), c, -m23() * a)) * det;
        float nm30 = Math.fma(-m10(), j, Math.fma( m11(), h, -m12() * g)) * det;
        float nm31 = Math.fma( m00(), j, Math.fma(-m01(), h,  m02() * g)) * det;
        float nm32 = Math.fma(-m30(), d, Math.fma( m31(), b, -m32() * a)) * det;
        float nm33 = Math.fma( m20(), d, Math.fma(-m21(), b,  m22() * a)) * det;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f invert() {
        return invert(this);
    }
    public Matrix4f invertPerspective(Matrix4f dest) {
        float a =  1.0f / (m00() * m11());
        float l = -1.0f / (m23() * m32());
        return dest
        .set(m11() * a, 0, 0, 0,
                 0, m00() * a, 0, 0,
                 0, 0, 0, -m23() * l,
                 0, 0, -m32() * l, m22() * l)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f invertPerspective() {
        return invertPerspective(this);
    }
    public Matrix4f invertFrustum(Matrix4f dest) {
        float invM00 = 1.0f / m00();
        float invM11 = 1.0f / m11();
        float invM23 = 1.0f / m23();
        float invM32 = 1.0f / m32();
        return dest
        .set(invM00, 0, 0, 0,
                 0, invM11, 0, 0,
                 0, 0, 0, invM32,
                 -m20() * invM00 * invM23, -m21() * invM11 * invM23, invM23, -m22() * invM23 * invM32);
    }
    public Matrix4f invertFrustum() {
        return invertFrustum(this);
    }
    public Matrix4f invertOrtho(Matrix4f dest) {
        float invM00 = 1.0f / m00();
        float invM11 = 1.0f / m11();
        float invM22 = 1.0f / m22();
        return dest
        .set(invM00, 0, 0, 0,
                 0, invM11, 0, 0,
                 0, 0, invM22, 0,
                 -m30() * invM00, -m31() * invM11, -m32() * invM22, 1)
        ._properties(PROPERTY_AFFINE | (this.properties & PROPERTY_ORTHONORMAL));
    }
    public Matrix4f invertOrtho() {
        return invertOrtho(this);
    }
    public Matrix4f invertPerspectiveView(Matrix4fc view, Matrix4f dest) {
        float a =  1.0f / (m00() * m11());
        float l = -1.0f / (m23() * m32());
        float pm00 =  m11() * a;
        float pm11 =  m00() * a;
        float pm23 = -m23() * l;
        float pm32 = -m32() * l;
        float pm33 =  m22() * l;
        float vm30 = -view.m00() * view.m30() - view.m01() * view.m31() - view.m02() * view.m32();
        float vm31 = -view.m10() * view.m30() - view.m11() * view.m31() - view.m12() * view.m32();
        float vm32 = -view.m20() * view.m30() - view.m21() * view.m31() - view.m22() * view.m32();
        float nm10 = view.m01() * pm11;
        float nm30 = view.m02() * pm32 + vm30 * pm33;
        float nm31 = view.m12() * pm32 + vm31 * pm33;
        float nm32 = view.m22() * pm32 + vm32 * pm33;
        return dest
        ._m00(view.m00() * pm00)
        ._m01(view.m10() * pm00)
        ._m02(view.m20() * pm00)
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(view.m11() * pm11)
        ._m12(view.m21() * pm11)
        ._m13(0.0f)
        ._m20(vm30 * pm23)
        ._m21(vm31 * pm23)
        ._m22(vm32 * pm23)
        ._m23(pm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(pm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f invertPerspectiveView(Matrix4x3fc view, Matrix4f dest) {
        float a =  1.0f / (m00() * m11());
        float l = -1.0f / (m23() * m32());
        float pm00 =  m11() * a;
        float pm11 =  m00() * a;
        float pm23 = -m23() * l;
        float pm32 = -m32() * l;
        float pm33 =  m22() * l;
        float vm30 = -view.m00() * view.m30() - view.m01() * view.m31() - view.m02() * view.m32();
        float vm31 = -view.m10() * view.m30() - view.m11() * view.m31() - view.m12() * view.m32();
        float vm32 = -view.m20() * view.m30() - view.m21() * view.m31() - view.m22() * view.m32();
        return dest
        ._m00(view.m00() * pm00)
        ._m01(view.m10() * pm00)
        ._m02(view.m20() * pm00)
        ._m03(0.0f)
        ._m10(view.m01() * pm11)
        ._m11(view.m11() * pm11)
        ._m12(view.m21() * pm11)
        ._m13(0.0f)
        ._m20(vm30 * pm23)
        ._m21(vm31 * pm23)
        ._m22(vm32 * pm23)
        ._m23(pm23)
        ._m30(view.m02() * pm32 + vm30 * pm33)
        ._m31(view.m12() * pm32 + vm31 * pm33)
        ._m32(view.m22() * pm32 + vm32 * pm33)
        ._m33(pm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f invertAffine(Matrix4f dest) {
        float m11m00 = m00() * m11(), m10m01 = m01() * m10(), m10m02 = m02() * m10();
        float m12m00 = m00() * m12(), m12m01 = m01() * m12(), m11m02 = m02() * m11();
        float det = (m11m00 - m10m01) * m22() + (m10m02 - m12m00) * m21() + (m12m01 - m11m02) * m20();
        float s = 1.0f / det;
        float m10m22 = m10() * m22(), m10m21 = m10() * m21(), m11m22 = m11() * m22();
        float m11m20 = m11() * m20(), m12m21 = m12() * m21(), m12m20 = m12() * m20();
        float m20m02 = m20() * m02(), m20m01 = m20() * m01(), m21m02 = m21() * m02();
        float m21m00 = m21() * m00(), m22m01 = m22() * m01(), m22m00 = m22() * m00();
        float nm31 = (m20m02 * m31() - m20m01 * m32() + m21m00 * m32() - m21m02 * m30() + m22m01 * m30() - m22m00 * m31()) * s;
        float nm32 = (m11m02 * m30() - m12m01 * m30() + m12m00 * m31() - m10m02 * m31() + m10m01 * m32() - m11m00 * m32()) * s;
        return dest
        ._m00((m11m22 - m12m21) * s)
        ._m01((m21m02 - m22m01) * s)
        ._m02((m12m01 - m11m02) * s)
        ._m03(0.0f)
        ._m10((m12m20 - m10m22) * s)
        ._m11((m22m00 - m20m02) * s)
        ._m12((m10m02 - m12m00) * s)
        ._m13(0.0f)
        ._m20((m10m21 - m11m20) * s)
        ._m21((m20m01 - m21m00) * s)
        ._m22((m11m00 - m10m01) * s)
        ._m23(0.0f)
        ._m30((m10m22 * m31() - m10m21 * m32() + m11m20 * m32() - m11m22 * m30() + m12m21 * m30() - m12m20 * m31()) * s)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE);
    }
    public Matrix4f invertAffine() {
        return invertAffine(this);
    }
    public Matrix4f transpose(Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if (JvmciCode.canUseJvmci) {
            JvmciCode.__Matrix4f_transpose(this, dest);
            dest.properties = PROPERTY_UNKNOWN;
            return dest;
        }
        else if (this != dest)
            return transposeNonThisGeneric(dest);
        return transposeThisGeneric(dest);
    }
    private Matrix4f transposeNonThisGeneric(Matrix4f dest) {
        return dest
        ._m00(m00())
        ._m01(m10())
        ._m02(m20())
        ._m03(m30())
        ._m10(m01())
        ._m11(m11())
        ._m12(m21())
        ._m13(m31())
        ._m20(m02())
        ._m21(m12())
        ._m22(m22())
        ._m23(m32())
        ._m30(m03())
        ._m31(m13())
        ._m32(m23())
        ._m33(m33())
        ._properties(PROPERTY_UNKNOWN);
    }
    private Matrix4f transposeThisGeneric(Matrix4f dest) {
        float nm10 = m01();
        float nm20 = m02();
        float nm21 = m12();
        float nm30 = m03();
        float nm31 = m13();
        float nm32 = m23();
        return dest
        ._m01(m10())
        ._m02(m20())
        ._m03(m30())
        ._m10(nm10)
        ._m12(m21())
        ._m13(m31())
        ._m20(nm20)
        ._m21(nm21)
        ._m23(m32())
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f transpose3x3() {
        return transpose3x3(this);
    }
    public Matrix4f transpose3x3(Matrix4f dest) {
        float nm10 = m01(), nm20 = m02(), nm21 = m12();
        return dest
        ._m00(m00())
        ._m01(m10())
        ._m02(m20())
        ._m10(nm10)
        ._m11(m11())
        ._m12(m21())
        ._m20(nm20)
        ._m21(nm21)
        ._m22(m22())
        ._properties(this.properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix3f transpose3x3(Matrix3f dest) {
        return dest
        ._m00(m00())
        ._m01(m10())
        ._m02(m20())
        ._m10(m01())
        ._m11(m11())
        ._m12(m21())
        ._m20(m02())
        ._m21(m12())
        ._m22(m22());
    }
    public Matrix4f transpose() {
        return transpose(this);
    }
    public Matrix4f translation(float x, float y, float z) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        return this._m30(x)._m31(y)._m32(z)._properties(PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f translation(Vector3fc offset) {
        return translation(offset.x(), offset.y(), offset.z());
    }
    public Matrix4f setTranslation(float x, float y, float z) {
        return this._m30(x)._m31(y)._m32(z)._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY));
    }
    public Matrix4f setTranslation(Vector3fc xyz) {
        return setTranslation(xyz.x(), xyz.y(), xyz.z());
    }
    public Vector3f getTranslation(Vector3f dest) {
        dest.x = m30();
        dest.y = m31();
        dest.z = m32();
        return dest;
    }
    public Vector3f getScale(Vector3f dest) {
        dest.x = Math.sqrt(m00() * m00() + m01() * m01() + m02() * m02());
        dest.y = Math.sqrt(m10() * m10() + m11() * m11() + m12() * m12());
        dest.z = Math.sqrt(m20() * m20() + m21() * m21() + m22() * m22());
        return dest;
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00(), formatter) + " " + Runtime.format(m10(), formatter) + " " + Runtime.format(m20(), formatter) + " " + Runtime.format(m30(), formatter) + "\n"
             + Runtime.format(m01(), formatter) + " " + Runtime.format(m11(), formatter) + " " + Runtime.format(m21(), formatter) + " " + Runtime.format(m31(), formatter) + "\n"
             + Runtime.format(m02(), formatter) + " " + Runtime.format(m12(), formatter) + " " + Runtime.format(m22(), formatter) + " " + Runtime.format(m32(), formatter) + "\n"
             + Runtime.format(m03(), formatter) + " " + Runtime.format(m13(), formatter) + " " + Runtime.format(m23(), formatter) + " " + Runtime.format(m33(), formatter) + "\n";
    }
    public Matrix4f get(Matrix4f dest) {
        return dest.set(this);
    }
    public Matrix4x3f get4x3(Matrix4x3f dest) {
        return dest.set(this);
    }
    public Matrix4d get(Matrix4d dest) {
        return dest.set(this);
    }
    public Matrix3f get3x3(Matrix3f dest) {
        return dest.set(this);
    }
    public Matrix3d get3x3(Matrix3d dest) {
        return dest.set(this);
    }
    public AxisAngle4f getRotation(AxisAngle4f dest) {
        return dest.set(this);
    }
    public AxisAngle4d getRotation(AxisAngle4d dest) {
        return dest.set(this);
    }
    public Quaternionf getUnnormalizedRotation(Quaternionf dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaternionf getNormalizedRotation(Quaternionf dest) {
        return dest.setFromNormalized(this);
    }
    public Quaterniond getUnnormalizedRotation(Quaterniond dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaterniond getNormalizedRotation(Quaterniond dest) {
        return dest.setFromNormalized(this);
    }
    public FloatBuffer get(FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get4x3(FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x3(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get4x3(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x3(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get4x3(ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x3(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get4x3(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x3(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get3x4(FloatBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get3x4(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get3x4(ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get3x4(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get4x3Transposed(FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x3Transposed(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get4x3Transposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x3Transposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get4x3Transposed(ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x3Transposed(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get4x3Transposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x3Transposed(this, index, buffer);
        return buffer;
    }
    public Matrix4fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix4fc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public float[] get(float[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public float[] get(float[] arr) {
        MemUtil.INSTANCE.copy(this, arr, 0);
        return arr;
    }
    public Matrix4f zero() {
        MemUtil.INSTANCE.zero(this);
        return _properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f scaling(float factor) {
        return scaling(factor, factor, factor);
    }
    public Matrix4f scaling(float x, float y, float z) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        return this
        ._m00(x)
        ._m11(y)
        ._m22(z)
        ._properties(PROPERTY_AFFINE | (one ? PROPERTY_ORTHONORMAL : 0));
    }
    public Matrix4f scaling(Vector3fc xyz) {
        return scaling(xyz.x(), xyz.y(), xyz.z());
    }
    public Matrix4f rotation(float angle, Vector3fc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4f rotation(AxisAngle4f axisAngle) {
        return rotation(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix4f rotation(float angle, float x, float y, float z) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotationX(x * angle);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotationY(y * angle);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotationZ(z * angle);
        return rotationInternal(angle, x, y, z);
    }
    private Matrix4f rotationInternal(float angle, float x, float y, float z) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float C = 1.0f - cos, xy = x * y, xz = x * z, yz = y * z;
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        return this
        ._m00(cos + x * x * C)
        ._m10(xy * C - z * sin)
        ._m20(xz * C + y * sin)
        ._m01(xy * C + z * sin)
        ._m11(cos + y * y * C)
        ._m21(yz * C - x * sin)
        ._m02(xz * C - y * sin)
        ._m12(yz * C + x * sin)
        ._m22(cos + z * z * C)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f rotationX(float ang) {
        float sin = Math.sin(ang), cos = Math.cosFromSin(sin, ang);
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m11(cos)._m12(sin)._m21(-sin)._m22(cos)._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f rotationY(float ang) {
        float sin = Math.sin(ang), cos = Math.cosFromSin(sin, ang);
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(cos)._m02(-sin)._m20(sin)._m22(cos)._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f rotationZ(float ang) {
        float sin = Math.sin(ang), cos = Math.cosFromSin(sin, ang);
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        return this._m00(cos)._m01(sin)._m10(-sin)._m11(cos)._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f rotationTowardsXY(float dirX, float dirY) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        return this._m00(dirY)._m01(dirX)._m10(-dirX)._m11(dirY)._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f rotationXYZ(float angleX, float angleY, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        float nm01 = -sinX * -sinY, nm02 = cosX * -sinY;
        return this
        ._m20(sinY)
        ._m21(-sinX * cosY)
        ._m22(cosX * cosY)
        ._m00(cosY * cosZ)
        ._m01(nm01 * cosZ + cosX * sinZ)
        ._m02(nm02 * cosZ + sinX * sinZ)
        ._m10(cosY * -sinZ)
        ._m11(nm01 * -sinZ + cosX * cosZ)
        ._m12(nm02 * -sinZ + sinX * cosZ)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f rotationZYX(float angleZ, float angleY, float angleX) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float nm20 = cosZ * sinY;
        float nm21 = sinZ * sinY;
        return this
        ._m00(cosZ * cosY)
        ._m01(sinZ * cosY)
        ._m02(-sinY)
        ._m03(0.0f)
        ._m10(-sinZ * cosX + nm20 * sinX)
        ._m11(cosZ * cosX + nm21 * sinX)
        ._m12(cosY * sinX)
        ._m13(0.0f)
        ._m20(-sinZ * -sinX + nm20 * cosX)
        ._m21(cosZ * -sinX + nm21 * cosX)
        ._m22(cosY * cosX)
        ._m23(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f rotationYXZ(float angleY, float angleX, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float nm10 = sinY * sinX, nm12 = cosY * sinX;
        return this
        ._m20(sinY * cosX)
        ._m21(-sinX)
        ._m22(cosY * cosX)
        ._m23(0.0f)
        ._m00(cosY * cosZ + nm10 * sinZ)
        ._m01(cosX * sinZ)
        ._m02(-sinY * cosZ + nm12 * sinZ)
        ._m03(0.0f)
        ._m10(cosY * -sinZ + nm10 * cosZ)
        ._m11(cosX * cosZ)
        ._m12(-sinY * -sinZ + nm12 * cosZ)
        ._m13(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f setRotationXYZ(float angleX, float angleY, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float nm01 = -sinX * -sinY;
        float nm02 = cosX * -sinY;
        return this
        ._m20(sinY)
        ._m21(-sinX * cosY)
        ._m22(cosX * cosY)
        ._m00(cosY * cosZ)
        ._m01(nm01 * cosZ + cosX * sinZ)
        ._m02(nm02 * cosZ + sinX * sinZ)
        ._m10(cosY * -sinZ)
        ._m11(nm01 * -sinZ + cosX * cosZ)
        ._m12(nm02 * -sinZ + sinX * cosZ)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f setRotationZYX(float angleZ, float angleY, float angleX) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float nm20 = cosZ * sinY, nm21 = sinZ * sinY;
        return this
        ._m00(cosZ * cosY)
        ._m01(sinZ * cosY)
        ._m02(-sinY)
        ._m10(-sinZ * cosX + nm20 * sinX)
        ._m11(cosZ * cosX + nm21 * sinX)
        ._m12(cosY * sinX)
        ._m20(-sinZ * -sinX + nm20 * cosX)
        ._m21(cosZ * -sinX + nm21 * cosX)
        ._m22(cosY * cosX)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f setRotationYXZ(float angleY, float angleX, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float nm10 = sinY * sinX, nm12 = cosY * sinX;
        return this
        ._m20(sinY * cosX)
        ._m21(-sinX)
        ._m22(cosY * cosX)
        ._m00(cosY * cosZ + nm10 * sinZ)
        ._m01(cosX * sinZ)
        ._m02(-sinY * cosZ + nm12 * sinZ)
        ._m10(cosY * -sinZ + nm10 * cosZ)
        ._m11(cosX * cosZ)
        ._m12(-sinY * -sinZ + nm12 * cosZ)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotation(Quaternionfc quat) {
        float w2 = quat.w() * quat.w();
        float x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y();
        float z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw;
        float xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz;
        float yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz;
        float xw = quat.x() * quat.w(), dxw = xw + xw;
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        return this
        ._m00(w2 + x2 - z2 - y2)
        ._m01(dxy + dzw)
        ._m02(dxz - dyw)
        ._m10(-dzw + dxy)
        ._m11(y2 - z2 + w2 - x2)
        ._m12(dyz + dxw)
        ._m20(dyw + dxz)
        ._m21(dyz - dxw)
        ._m22(z2 - y2 - x2 + w2)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f translationRotateScale(float tx, float ty, float tz, 
                                           float qx, float qy, float qz, float qw, 
                                           float sx, float sy, float sz) {
        float dqx = qx + qx;
        float dqy = qy + qy;
        float dqz = qz + qz;
        float q00 = dqx * qx;
        float q11 = dqy * qy;
        float q22 = dqz * qz;
        float q01 = dqx * qy;
        float q02 = dqx * qz;
        float q03 = dqx * qw;
        float q12 = dqy * qz;
        float q13 = dqy * qw;
        float q23 = dqz * qw;
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        return this
        ._m00(sx - (q11 + q22) * sx)
        ._m01((q01 + q23) * sx)
        ._m02((q02 - q13) * sx)
        ._m03(0.0f)
        ._m10((q01 - q23) * sy)
        ._m11(sy - (q22 + q00) * sy)
        ._m12((q12 + q03) * sy)
        ._m13(0.0f)
        ._m20((q02 + q13) * sz)
        ._m21((q12 - q03) * sz)
        ._m22(sz - (q11 + q00) * sz)
        ._m23(0.0f)
        ._m30(tx)
        ._m31(ty)
        ._m32(tz)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | (one ? PROPERTY_ORTHONORMAL : 0));
    }
    public Matrix4f translationRotateScale(Vector3fc translation, 
                                           Quaternionfc quat, 
                                           Vector3fc scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4f translationRotateScale(float tx, float ty, float tz, 
                                           float qx, float qy, float qz, float qw, 
                                           float scale) {
        return translationRotateScale(tx, ty, tz, qx, qy, qz, qw, scale, scale, scale);
    }
    public Matrix4f translationRotateScale(Vector3fc translation, 
                                           Quaternionfc quat, 
                                           float scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale, scale, scale);
    }
    public Matrix4f translationRotateScaleInvert(float tx, float ty, float tz, 
                                                 float qx, float qy, float qz, float qw, 
                                                 float sx, float sy, float sz) {
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        if (one)
            return translationRotateInvert(tx, ty, tz, qx, qy, qz, qw);
        float nqx = -qx, nqy = -qy, nqz = -qz;
        float dqx = nqx + nqx;
        float dqy = nqy + nqy;
        float dqz = nqz + nqz;
        float q00 = dqx * nqx;
        float q11 = dqy * nqy;
        float q22 = dqz * nqz;
        float q01 = dqx * nqy;
        float q02 = dqx * nqz;
        float q03 = dqx * qw;
        float q12 = dqy * nqz;
        float q13 = dqy * qw;
        float q23 = dqz * qw;
        float isx = 1/sx, isy = 1/sy, isz = 1/sz;
        return this
        ._m00(isx * (1.0f - q11 - q22))
        ._m01(isy * (q01 + q23))
        ._m02(isz * (q02 - q13))
        ._m03(0.0f)
        ._m10(isx * (q01 - q23))
        ._m11(isy * (1.0f - q22 - q00))
        ._m12(isz * (q12 + q03))
        ._m13(0.0f)
        ._m20(isx * (q02 + q13))
        ._m21(isy * (q12 - q03))
        ._m22(isz * (1.0f - q11 - q00))
        ._m23(0.0f)
        ._m30(-m00() * tx - m10() * ty - m20() * tz)
        ._m31(-m01() * tx - m11() * ty - m21() * tz)
        ._m32(-m02() * tx - m12() * ty - m22() * tz)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE);
    }
    public Matrix4f translationRotateScaleInvert(Vector3fc translation, 
                                                 Quaternionfc quat, 
                                                 Vector3fc scale) {
        return translationRotateScaleInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4f translationRotateScaleInvert(Vector3fc translation, 
                                                 Quaternionfc quat, 
                                                 float scale) {
        return translationRotateScaleInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale, scale, scale);
    }
    public Matrix4f translationRotateScaleMulAffine(float tx, float ty, float tz, 
                                                    float qx, float qy, float qz, float qw, 
                                                    float sx, float sy, float sz,
                                                    Matrix4f m) {
        float w2 = qw * qw;
        float x2 = qx * qx;
        float y2 = qy * qy;
        float z2 = qz * qz;
        float zw = qz * qw;
        float xy = qx * qy;
        float xz = qx * qz;
        float yw = qy * qw;
        float yz = qy * qz;
        float xw = qx * qw;
        float nm00 = w2 + x2 - z2 - y2;
        float nm01 = xy + zw + zw + xy;
        float nm02 = xz - yw + xz - yw;
        float nm10 = -zw + xy - zw + xy;
        float nm11 = y2 - z2 + w2 - x2;
        float nm12 = yz + yz + xw + xw;
        float nm20 = yw + xz + xz + yw;
        float nm21 = yz + yz - xw - xw;
        float nm22 = z2 - y2 - x2 + w2;
        float m00 = nm00 * m.m00() + nm10 * m.m01() + nm20 * m.m02();
        float m01 = nm01 * m.m00() + nm11 * m.m01() + nm21 * m.m02();
        this._m02(nm02 * m.m00() + nm12 * m.m01() + nm22 * m.m02())
            ._m00(m00)
            ._m01(m01)
            ._m03(0.0f);
        float m10 = nm00 * m.m10() + nm10 * m.m11() + nm20 * m.m12();
        float m11 = nm01 * m.m10() + nm11 * m.m11() + nm21 * m.m12();
        this._m12(nm02 * m.m10() + nm12 * m.m11() + nm22 * m.m12())
            ._m10(m10)
            ._m11(m11)
            ._m13(0.0f);
        float m20 = nm00 * m.m20() + nm10 * m.m21() + nm20 * m.m22();
        float m21 = nm01 * m.m20() + nm11 * m.m21() + nm21 * m.m22();
        this._m22(nm02 * m.m20() + nm12 * m.m21() + nm22 * m.m22())
            ._m20(m20)
            ._m21(m21)
            ._m23(0.0f);
        float m30 = nm00 * m.m30() + nm10 * m.m31() + nm20 * m.m32() + tx;
        float m31 = nm01 * m.m30() + nm11 * m.m31() + nm21 * m.m32() + ty;
        this._m32(nm02 * m.m30() + nm12 * m.m31() + nm22 * m.m32() + tz)
            ._m30(m30)
            ._m31(m31)
            ._m33(1.0f);
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        return _properties(PROPERTY_AFFINE | (one && (m.properties & PROPERTY_ORTHONORMAL) != 0 ? PROPERTY_ORTHONORMAL : 0));
    }
    public Matrix4f translationRotateScaleMulAffine(Vector3fc translation, 
                                                    Quaternionfc quat, 
                                                    Vector3fc scale,
                                                    Matrix4f m) {
        return translationRotateScaleMulAffine(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z(), m);
    }
    public Matrix4f translationRotate(float tx, float ty, float tz, float qx, float qy, float qz, float qw) {
        float w2 = qw * qw;
        float x2 = qx * qx;
        float y2 = qy * qy;
        float z2 = qz * qz;
        float zw = qz * qw;
        float xy = qx * qy;
        float xz = qx * qz;
        float yw = qy * qw;
        float yz = qy * qz;
        float xw = qx * qw;
        return this
        ._m00(w2 + x2 - z2 - y2)
        ._m01(xy + zw + zw + xy)
        ._m02(xz - yw + xz - yw)
        ._m10(-zw + xy - zw + xy)
        ._m11(y2 - z2 + w2 - x2)
        ._m12(yz + yz + xw + xw)
        ._m20(yw + xz + xz + yw)
        ._m21(yz + yz - xw - xw)
        ._m22(z2 - y2 - x2 + w2)
        ._m30(tx)
        ._m31(ty)
        ._m32(tz)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f translationRotate(float tx, float ty, float tz, Quaternionfc quat) {
        return translationRotate(tx, ty, tz, quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4f translationRotate(Vector3fc translation, 
                                      Quaternionfc quat) {
        return translationRotate(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4f translationRotateInvert(float tx, float ty, float tz, float qx, float qy, float qz, float qw) {
        float nqx = -qx, nqy = -qy, nqz = -qz;
        float dqx = nqx + nqx;
        float dqy = nqy + nqy;
        float dqz = nqz + nqz;
        float q00 = dqx * nqx;
        float q11 = dqy * nqy;
        float q22 = dqz * nqz;
        float q01 = dqx * nqy;
        float q02 = dqx * nqz;
        float q03 = dqx * qw;
        float q12 = dqy * nqz;
        float q13 = dqy * qw;
        float q23 = dqz * qw;
        return this
        ._m00(1.0f - q11 - q22)
        ._m01(q01 + q23)
        ._m02(q02 - q13)
        ._m03(0.0f)
        ._m10(q01 - q23)
        ._m11(1.0f - q22 - q00)
        ._m12(q12 + q03)
        ._m13(0.0f)
        ._m20(q02 + q13)
        ._m21(q12 - q03)
        ._m22(1.0f - q11 - q00)
        ._m23(0.0f)
        ._m30(-m00() * tx - m10() * ty - m20() * tz)
        ._m31(-m01() * tx - m11() * ty - m21() * tz)
        ._m32(-m02() * tx - m12() * ty - m22() * tz)
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f translationRotateInvert(Vector3fc translation, 
                                            Quaternionfc quat) {
        return translationRotateInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4f set3x3(Matrix3fc mat) {
        return
        set3x3Matrix3fc(mat).
        _properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    private Matrix4f set3x3Matrix3fc(Matrix3fc mat) {
        return this
        ._m00(mat.m00())
        ._m01(mat.m01())
        ._m02(mat.m02())
        ._m10(mat.m10())
        ._m11(mat.m11())
        ._m12(mat.m12())
        ._m20(mat.m20())
        ._m21(mat.m21())
        ._m22(mat.m22());
    }
    public Vector4f transform(Vector4f v) {
        return v.mul(this);
    }
    public Vector4f transform(Vector4fc v, Vector4f dest) {
        return v.mul(this, dest);
    }
    public Vector4f transform(float x, float y, float z, float w, Vector4f dest) {
       return dest.set(x, y, z, w).mul(this);
    }
    public Vector4f transformTranspose(Vector4f v) {
        return v.mulTranspose(this);
    }
    public Vector4f transformTranspose(Vector4fc v, Vector4f dest) {
        return v.mulTranspose(this, dest);
    }
    public Vector4f transformTranspose(float x, float y, float z, float w, Vector4f dest) {
       return dest.set(x, y, z, w).mulTranspose(this);
    }
    public Vector4f transformProject(Vector4f v) {
        return v.mulProject(this);
    }
    public Vector4f transformProject(Vector4fc v, Vector4f dest) {
        return v.mulProject(this, dest);
    }
    public Vector4f transformProject(float x, float y, float z, float w, Vector4f dest) {
        return dest.set(x, y, z, w).mulProject(this);
    }
    public Vector3f transformProject(Vector4fc v, Vector3f dest) {
        return v.mulProject(this, dest);
    }
    public Vector3f transformProject(float x, float y, float z, float w, Vector3f dest) {
        return dest.set(x, y, z).mulProject(this, w, dest);
    }
    public Vector3f transformProject(Vector3f v) {
        return v.mulProject(this);
    }
    public Vector3f transformProject(Vector3fc v, Vector3f dest) {
        return v.mulProject(this, dest);
    }
    public Vector3f transformProject(float x, float y, float z, Vector3f dest) {
        return dest.set(x, y, z).mulProject(this);
    }
    public Vector3f transformPosition(Vector3f v) {
        return v.mulPosition(this);
    }
    public Vector3f transformPosition(Vector3fc v, Vector3f dest) {
        return transformPosition(v.x(), v.y(), v.z(), dest);
    }
    public Vector3f transformPosition(float x, float y, float z, Vector3f dest) {
        return dest.set(x, y, z).mulPosition(this);
    }
    public Vector3f transformDirection(Vector3f v) {
        return transformDirection(v.x, v.y, v.z, v);
    }
    public Vector3f transformDirection(Vector3fc v, Vector3f dest) {
        return transformDirection(v.x(), v.y(), v.z(), dest);
    }
    public Vector3f transformDirection(float x, float y, float z, Vector3f dest) {
        return dest.set(x, y, z).mulDirection(this);
    }
    public Vector4f transformAffine(Vector4f v) {
        return v.mulAffine(this, v);
    }
    public Vector4f transformAffine(Vector4fc v, Vector4f dest) {
        return transformAffine(v.x(), v.y(), v.z(), v.w(), dest);
    }
    public Vector4f transformAffine(float x, float y, float z, float w, Vector4f dest) {
        return dest.set(x, y, z, w).mulAffine(this, dest);
    }
    public Matrix4f scale(Vector3fc xyz, Matrix4f dest) {
        return scale(xyz.x(), xyz.y(), xyz.z(), dest);
    }
    public Matrix4f scale(Vector3fc xyz) {
        return scale(xyz.x(), xyz.y(), xyz.z(), this);
    }
    public Matrix4f scale(float xyz, Matrix4f dest) {
        return scale(xyz, xyz, xyz, dest);
    }
    public Matrix4f scale(float xyz) {
        return scale(xyz, xyz, xyz);
    }
    public Matrix4f scaleXY(float x, float y, Matrix4f dest) {
        return scale(x, y, 1.0f, dest);
    }
    public Matrix4f scaleXY(float x, float y) {
        return scale(x, y, 1.0f);
    }
    public Matrix4f scale(float x, float y, float z, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.scaling(x, y, z);
        return scaleGeneric(x, y, z, dest);
    }
    private Matrix4f scaleGeneric(float x, float y, float z, Matrix4f dest) {
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        return dest
        ._m00(m00() * x)
        ._m01(m01() * x)
        ._m02(m02() * x)
        ._m03(m03() * x)
        ._m10(m10() * y)
        ._m11(m11() * y)
        ._m12(m12() * y)
        ._m13(m13() * y)
        ._m20(m20() * z)
        ._m21(m21() * z)
        ._m22(m22() * z)
        ._m23(m23() * z)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
            | (one ? 0 : PROPERTY_ORTHONORMAL)));
    }
    public Matrix4f scale(float x, float y, float z) {
        return scale(x, y, z, this);
    }
    public Matrix4f scaleAround(float sx, float sy, float sz, float ox, float oy, float oz, Matrix4f dest) {
        float nm30 = m00() * ox + m10() * oy + m20() * oz + m30();
        float nm31 = m01() * ox + m11() * oy + m21() * oz + m31();
        float nm32 = m02() * ox + m12() * oy + m22() * oz + m32();
        float nm33 = m03() * ox + m13() * oy + m23() * oz + m33();
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        return dest
        ._m00(m00() * sx)
        ._m01(m01() * sx)
        ._m02(m02() * sx)
        ._m03(m03() * sx)
        ._m10(m10() * sy)
        ._m11(m11() * sy)
        ._m12(m12() * sy)
        ._m13(m13() * sy)
        ._m20(m20() * sz)
        ._m21(m21() * sz)
        ._m22(m22() * sz)
        ._m23(m23() * sz)
        ._m30(-dest.m00() * ox - dest.m10() * oy - dest.m20() * oz + nm30)
        ._m31(-dest.m01() * ox - dest.m11() * oy - dest.m21() * oz + nm31)
        ._m32(-dest.m02() * ox - dest.m12() * oy - dest.m22() * oz + nm32)
        ._m33(-dest.m03() * ox - dest.m13() * oy - dest.m23() * oz + nm33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
            | (one ? 0 : PROPERTY_ORTHONORMAL)));
    }
    public Matrix4f scaleAround(float sx, float sy, float sz, float ox, float oy, float oz) {
        return scaleAround(sx, sy, sz, ox, oy, oz, this);
    }
    public Matrix4f scaleAround(float factor, float ox, float oy, float oz) {
        return scaleAround(factor, factor, factor, ox, oy, oz, this);
    }
    public Matrix4f scaleAround(float factor, float ox, float oy, float oz, Matrix4f dest) {
        return scaleAround(factor, factor, factor, ox, oy, oz, dest);
    }
    public Matrix4f scaleLocal(float x, float y, float z, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.scaling(x, y, z);
        return scaleLocalGeneric(x, y, z, dest);
    }
    private Matrix4f scaleLocalGeneric(float x, float y, float z, Matrix4f dest) {
        float nm00 = x * m00();
        float nm01 = y * m01();
        float nm02 = z * m02();
        float nm10 = x * m10();
        float nm11 = y * m11();
        float nm12 = z * m12();
        float nm20 = x * m20();
        float nm21 = y * m21();
        float nm22 = z * m22();
        float nm30 = x * m30();
        float nm31 = y * m31();
        float nm32 = z * m32();
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03())
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13())
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23())
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
            | (one ? 0 : PROPERTY_ORTHONORMAL)));
    }
    public Matrix4f scaleLocal(float xyz, Matrix4f dest) {
        return scaleLocal(xyz, xyz, xyz, dest);
    }
    public Matrix4f scaleLocal(float xyz) {
        return scaleLocal(xyz, this);
    }
    public Matrix4f scaleLocal(float x, float y, float z) {
        return scaleLocal(x, y, z, this);
    }
    public Matrix4f scaleAroundLocal(float sx, float sy, float sz, float ox, float oy, float oz, Matrix4f dest) {
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        return dest
        ._m00(sx * (m00() - ox * m03()) + ox * m03())
        ._m01(sy * (m01() - oy * m03()) + oy * m03())
        ._m02(sz * (m02() - oz * m03()) + oz * m03())
        ._m03(m03())
        ._m10(sx * (m10() - ox * m13()) + ox * m13())
        ._m11(sy * (m11() - oy * m13()) + oy * m13())
        ._m12(sz * (m12() - oz * m13()) + oz * m13())
        ._m13(m13())
        ._m20(sx * (m20() - ox * m23()) + ox * m23())
        ._m21(sy * (m21() - oy * m23()) + oy * m23())
        ._m22(sz * (m22() - oz * m23()) + oz * m23())
        ._m23(m23())
        ._m30(sx * (m30() - ox * m33()) + ox * m33())
        ._m31(sy * (m31() - oy * m33()) + oy * m33())
        ._m32(sz * (m32() - oz * m33()) + oz * m33())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
            | (one ? 0 : PROPERTY_ORTHONORMAL)));
    }
    public Matrix4f scaleAroundLocal(float sx, float sy, float sz, float ox, float oy, float oz) {
        return scaleAroundLocal(sx, sy, sz, ox, oy, oz, this);
    }
    public Matrix4f scaleAroundLocal(float factor, float ox, float oy, float oz) {
        return scaleAroundLocal(factor, factor, factor, ox, oy, oz, this);
    }
    public Matrix4f scaleAroundLocal(float factor, float ox, float oy, float oz, Matrix4f dest) {
        return scaleAroundLocal(factor, factor, factor, ox, oy, oz, dest);
    }
    public Matrix4f rotateX(float ang, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationX(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float x = m30(), y = m31(), z = m32();
            return dest.rotationX(ang).setTranslation(x, y, z);
        }
        return rotateXInternal(ang, dest);
    }
    private Matrix4f rotateXInternal(float ang, Matrix4f dest) {
        float sin = Math.sin(ang), cos = Math.cosFromSin(sin, ang);
        float lm10 = m10(), lm11 = m11(), lm12 = m12(), lm13 = m13(), lm20 = m20(), lm21 = m21(), lm22 = m22(), lm23 = m23();
        return dest
        ._m20(Math.fma(lm10, -sin, lm20 * cos))
        ._m21(Math.fma(lm11, -sin, lm21 * cos))
        ._m22(Math.fma(lm12, -sin, lm22 * cos))
        ._m23(Math.fma(lm13, -sin, lm23 * cos))
        ._m10(Math.fma(lm10, cos, lm20 * sin))
        ._m11(Math.fma(lm11, cos, lm21 * sin))
        ._m12(Math.fma(lm12, cos, lm22 * sin))
        ._m13(Math.fma(lm13, cos, lm23 * sin))
        ._m00(m00())
        ._m01(m01())
        ._m02(m02())
        ._m03(m03())
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateX(float ang) {
        return rotateX(ang, this);
    }
    public Matrix4f rotateY(float ang, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationY(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float x = m30(), y = m31(), z = m32();
            return dest.rotationY(ang).setTranslation(x, y, z);
        }
        return rotateYInternal(ang, dest);
    }
    private Matrix4f rotateYInternal(float ang, Matrix4f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm00 = Math.fma(m00(), cos, m20() * -sin);
        float nm01 = Math.fma(m01(), cos, m21() * -sin);
        float nm02 = Math.fma(m02(), cos, m22() * -sin);
        float nm03 = Math.fma(m03(), cos, m23() * -sin);
        return dest
        ._m20(Math.fma(m00(), sin, m20() * cos))
        ._m21(Math.fma(m01(), sin, m21() * cos))
        ._m22(Math.fma(m02(), sin, m22() * cos))
        ._m23(Math.fma(m03(), sin, m23() * cos))
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(m10())
        ._m11(m11())
        ._m12(m12())
        ._m13(m13())
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateY(float ang) {
        return rotateY(ang, this);
    }
    public Matrix4f rotateZ(float ang, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationZ(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float x = m30(), y = m31(), z = m32();
            return dest.rotationZ(ang).setTranslation(x, y, z);
        }
        return rotateZInternal(ang, dest);
    }
    private Matrix4f rotateZInternal(float ang, Matrix4f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        return rotateTowardsXY(sin, cos, dest);
    }
    public Matrix4f rotateZ(float ang) {
        return rotateZ(ang, this);
    }
    public Matrix4f rotateTowardsXY(float dirX, float dirY) {
        return rotateTowardsXY(dirX, dirY, this);
    }
    public Matrix4f rotateTowardsXY(float dirX, float dirY, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationTowardsXY(dirX, dirY);
        float nm00 = Math.fma(m00(), dirY, m10() * dirX);
        float nm01 = Math.fma(m01(), dirY, m11() * dirX);
        float nm02 = Math.fma(m02(), dirY, m12() * dirX);
        float nm03 = Math.fma(m03(), dirY, m13() * dirX);
        return dest
        ._m10(Math.fma(m00(), -dirX, m10() * dirY))
        ._m11(Math.fma(m01(), -dirX, m11() * dirY))
        ._m12(Math.fma(m02(), -dirX, m12() * dirY))
        ._m13(Math.fma(m03(), -dirX, m13() * dirY))
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m20(m20())
        ._m21(m21())
        ._m22(m22())
        ._m23(m23())
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateXYZ(Vector3fc angles) {
        return rotateXYZ(angles.x(), angles.y(), angles.z());
    }
    public Matrix4f rotateXYZ(float angleX, float angleY, float angleZ) {
        return rotateXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix4f rotateXYZ(float angleX, float angleY, float angleZ, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationXYZ(angleX, angleY, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30(), ty = m31(), tz = m32();
            return dest.rotationXYZ(angleX, angleY, angleZ).setTranslation(tx, ty, tz);
        } else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffineXYZ(angleX, angleY, angleZ, dest);
        return rotateXYZInternal(angleX, angleY, angleZ, dest);
    }
    private Matrix4f rotateXYZInternal(float angleX, float angleY, float angleZ, Matrix4f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm10 = Math.fma(m10(), cosX, m20() * sinX);
        float nm11 = Math.fma(m11(), cosX, m21() * sinX);
        float nm12 = Math.fma(m12(), cosX, m22() * sinX);
        float nm13 = Math.fma(m13(), cosX, m23() * sinX);
        float nm20 = Math.fma(m10(), m_sinX, m20() * cosX);
        float nm21 = Math.fma(m11(), m_sinX, m21() * cosX);
        float nm22 = Math.fma(m12(), m_sinX, m22() * cosX);
        float nm23 = Math.fma(m13(), m_sinX, m23() * cosX);
        float nm00 = Math.fma(m00(), cosY, nm20 * m_sinY);
        float nm01 = Math.fma(m01(), cosY, nm21 * m_sinY);
        float nm02 = Math.fma(m02(), cosY, nm22 * m_sinY);
        float nm03 = Math.fma(m03(), cosY, nm23 * m_sinY);
        return dest
        ._m20(Math.fma(m00(), sinY, nm20 * cosY))
        ._m21(Math.fma(m01(), sinY, nm21 * cosY))
        ._m22(Math.fma(m02(), sinY, nm22 * cosY))
        ._m23(Math.fma(m03(), sinY, nm23 * cosY))
        ._m00(Math.fma(nm00, cosZ, nm10 * sinZ))
        ._m01(Math.fma(nm01, cosZ, nm11 * sinZ))
        ._m02(Math.fma(nm02, cosZ, nm12 * sinZ))
        ._m03(Math.fma(nm03, cosZ, nm13 * sinZ))
        ._m10(Math.fma(nm00, m_sinZ, nm10 * cosZ))
        ._m11(Math.fma(nm01, m_sinZ, nm11 * cosZ))
        ._m12(Math.fma(nm02, m_sinZ, nm12 * cosZ))
        ._m13(Math.fma(nm03, m_sinZ, nm13 * cosZ))
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAffineXYZ(float angleX, float angleY, float angleZ) {
        return rotateAffineXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix4f rotateAffineXYZ(float angleX, float angleY, float angleZ, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationXYZ(angleX, angleY, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30(), ty = m31(), tz = m32();
            return dest.rotationXYZ(angleX, angleY, angleZ).setTranslation(tx, ty, tz);
        }
        return rotateAffineXYZInternal(angleX, angleY, angleZ, dest);
    }
    private Matrix4f rotateAffineXYZInternal(float angleX, float angleY, float angleZ, Matrix4f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm10 = Math.fma(m10(), cosX, m20() * sinX);
        float nm11 = Math.fma(m11(), cosX, m21() * sinX);
        float nm12 = Math.fma(m12(), cosX, m22() * sinX);
        float nm20 = Math.fma(m10(), m_sinX, m20() * cosX);
        float nm21 = Math.fma(m11(), m_sinX, m21() * cosX);
        float nm22 = Math.fma(m12(), m_sinX, m22() * cosX);
        float nm00 = Math.fma(m00(), cosY, nm20 * m_sinY);
        float nm01 = Math.fma(m01(), cosY, nm21 * m_sinY);
        float nm02 = Math.fma(m02(), cosY, nm22 * m_sinY);
        return dest
        ._m20(Math.fma(m00(), sinY, nm20 * cosY))
        ._m21(Math.fma(m01(), sinY, nm21 * cosY))
        ._m22(Math.fma(m02(), sinY, nm22 * cosY))
        ._m23(0.0f)
        ._m00(Math.fma(nm00, cosZ, nm10 * sinZ))
        ._m01(Math.fma(nm01, cosZ, nm11 * sinZ))
        ._m02(Math.fma(nm02, cosZ, nm12 * sinZ))
        ._m03(0.0f)
        ._m10(Math.fma(nm00, m_sinZ, nm10 * cosZ))
        ._m11(Math.fma(nm01, m_sinZ, nm11 * cosZ))
        ._m12(Math.fma(nm02, m_sinZ, nm12 * cosZ))
        ._m13(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateZYX(Vector3f angles) {
        return rotateZYX(angles.z, angles.y, angles.x);
    }
    public Matrix4f rotateZYX(float angleZ, float angleY, float angleX) {
        return rotateZYX(angleZ, angleY, angleX, this);
    }
    public Matrix4f rotateZYX(float angleZ, float angleY, float angleX, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationZYX(angleZ, angleY, angleX);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30(), ty = m31(), tz = m32();
            return dest.rotationZYX(angleZ, angleY, angleX).setTranslation(tx, ty, tz);
        } else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffineZYX(angleZ, angleY, angleX, dest);
        return rotateZYXInternal(angleZ, angleY, angleX, dest);
    }
    private Matrix4f rotateZYXInternal(float angleZ, float angleY, float angleX, Matrix4f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = m00() * cosZ + m10() * sinZ;
        float nm01 = m01() * cosZ + m11() * sinZ;
        float nm02 = m02() * cosZ + m12() * sinZ;
        float nm03 = m03() * cosZ + m13() * sinZ;
        float nm10 = m00() * m_sinZ + m10() * cosZ;
        float nm11 = m01() * m_sinZ + m11() * cosZ;
        float nm12 = m02() * m_sinZ + m12() * cosZ;
        float nm13 = m03() * m_sinZ + m13() * cosZ;
        float nm20 = nm00 * sinY + m20() * cosY;
        float nm21 = nm01 * sinY + m21() * cosY;
        float nm22 = nm02 * sinY + m22() * cosY;
        float nm23 = nm03 * sinY + m23() * cosY;
        return dest
        ._m00(nm00 * cosY + m20() * m_sinY)
        ._m01(nm01 * cosY + m21() * m_sinY)
        ._m02(nm02 * cosY + m22() * m_sinY)
        ._m03(nm03 * cosY + m23() * m_sinY)
        ._m10(nm10 * cosX + nm20 * sinX)
        ._m11(nm11 * cosX + nm21 * sinX)
        ._m12(nm12 * cosX + nm22 * sinX)
        ._m13(nm13 * cosX + nm23 * sinX)
        ._m20(nm10 * m_sinX + nm20 * cosX)
        ._m21(nm11 * m_sinX + nm21 * cosX)
        ._m22(nm12 * m_sinX + nm22 * cosX)
        ._m23(nm13 * m_sinX + nm23 * cosX)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAffineZYX(float angleZ, float angleY, float angleX) {
        return rotateAffineZYX(angleZ, angleY, angleX, this);
    }
    public Matrix4f rotateAffineZYX(float angleZ, float angleY, float angleX, Matrix4f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = m00() * cosZ + m10() * sinZ;
        float nm01 = m01() * cosZ + m11() * sinZ;
        float nm02 = m02() * cosZ + m12() * sinZ;
        float nm10 = m00() * m_sinZ + m10() * cosZ;
        float nm11 = m01() * m_sinZ + m11() * cosZ;
        float nm12 = m02() * m_sinZ + m12() * cosZ;
        float nm20 = nm00 * sinY + m20() * cosY;
        float nm21 = nm01 * sinY + m21() * cosY;
        float nm22 = nm02 * sinY + m22() * cosY;
        return dest
        ._m00(nm00 * cosY + m20() * m_sinY)
        ._m01(nm01 * cosY + m21() * m_sinY)
        ._m02(nm02 * cosY + m22() * m_sinY)
        ._m03(0.0f)
        ._m10(nm10 * cosX + nm20 * sinX)
        ._m11(nm11 * cosX + nm21 * sinX)
        ._m12(nm12 * cosX + nm22 * sinX)
        ._m13(0.0f)
        ._m20(nm10 * m_sinX + nm20 * cosX)
        ._m21(nm11 * m_sinX + nm21 * cosX)
        ._m22(nm12 * m_sinX + nm22 * cosX)
        ._m23(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateYXZ(Vector3f angles) {
        return rotateYXZ(angles.y, angles.x, angles.z);
    }
    public Matrix4f rotateYXZ(float angleY, float angleX, float angleZ) {
        return rotateYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix4f rotateYXZ(float angleY, float angleX, float angleZ, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationYXZ(angleY, angleX, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30(), ty = m31(), tz = m32();
            return dest.rotationYXZ(angleY, angleX, angleZ).setTranslation(tx, ty, tz);
        } else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffineYXZ(angleY, angleX, angleZ, dest);
        return rotateYXZInternal(angleY, angleX, angleZ, dest);
    }
    private Matrix4f rotateYXZInternal(float angleY, float angleX, float angleZ, Matrix4f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm20 = m00() * sinY + m20() * cosY;
        float nm21 = m01() * sinY + m21() * cosY;
        float nm22 = m02() * sinY + m22() * cosY;
        float nm23 = m03() * sinY + m23() * cosY;
        float nm00 = m00() * cosY + m20() * m_sinY;
        float nm01 = m01() * cosY + m21() * m_sinY;
        float nm02 = m02() * cosY + m22() * m_sinY;
        float nm03 = m03() * cosY + m23() * m_sinY;
        float nm10 = m10() * cosX + nm20 * sinX;
        float nm11 = m11() * cosX + nm21 * sinX;
        float nm12 = m12() * cosX + nm22 * sinX;
        float nm13 = m13() * cosX + nm23 * sinX;
        return dest
        ._m20(m10() * m_sinX + nm20 * cosX)
        ._m21(m11() * m_sinX + nm21 * cosX)
        ._m22(m12() * m_sinX + nm22 * cosX)
        ._m23(m13() * m_sinX + nm23 * cosX)
        ._m00(nm00 * cosZ + nm10 * sinZ)
        ._m01(nm01 * cosZ + nm11 * sinZ)
        ._m02(nm02 * cosZ + nm12 * sinZ)
        ._m03(nm03 * cosZ + nm13 * sinZ)
        ._m10(nm00 * m_sinZ + nm10 * cosZ)
        ._m11(nm01 * m_sinZ + nm11 * cosZ)
        ._m12(nm02 * m_sinZ + nm12 * cosZ)
        ._m13(nm03 * m_sinZ + nm13 * cosZ)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAffineYXZ(float angleY, float angleX, float angleZ) {
        return rotateAffineYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix4f rotateAffineYXZ(float angleY, float angleX, float angleZ, Matrix4f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm20 = m00() * sinY + m20() * cosY;
        float nm21 = m01() * sinY + m21() * cosY;
        float nm22 = m02() * sinY + m22() * cosY;
        float nm00 = m00() * cosY + m20() * m_sinY;
        float nm01 = m01() * cosY + m21() * m_sinY;
        float nm02 = m02() * cosY + m22() * m_sinY;
        float nm10 = m10() * cosX + nm20 * sinX;
        float nm11 = m11() * cosX + nm21 * sinX;
        float nm12 = m12() * cosX + nm22 * sinX;
        return dest
        ._m20(m10() * m_sinX + nm20 * cosX)
        ._m21(m11() * m_sinX + nm21 * cosX)
        ._m22(m12() * m_sinX + nm22 * cosX)
        ._m23(0.0f)
        ._m00(nm00 * cosZ + nm10 * sinZ)
        ._m01(nm01 * cosZ + nm11 * sinZ)
        ._m02(nm02 * cosZ + nm12 * sinZ)
        ._m03(0.0f)
        ._m10(nm00 * m_sinZ + nm10 * cosZ)
        ._m11(nm01 * m_sinZ + nm11 * cosZ)
        ._m12(nm02 * m_sinZ + nm12 * cosZ)
        ._m13(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotate(float ang, float x, float y, float z, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(ang, x, y, z);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(ang, x, y, z, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffine(ang, x, y, z, dest);
        return rotateGeneric(ang, x, y, z, dest);
    }
    private Matrix4f rotateGeneric(float ang, float x, float y, float z, Matrix4f dest) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotateX(x * ang, dest);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotateY(y * ang, dest);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotateZ(z * ang, dest);
        return rotateGenericInternal(ang, x, y, z, dest);
    }
    private Matrix4f rotateGenericInternal(float ang, float x, float y, float z, Matrix4f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float rm00 = xx * C + c;
        float rm01 = xy * C + z * s;
        float rm02 = xz * C - y * s;
        float rm10 = xy * C - z * s;
        float rm11 = yy * C + c;
        float rm12 = yz * C + x * s;
        float rm20 = xz * C + y * s;
        float rm21 = yz * C - x * s;
        float rm22 = zz * C + c;
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm03 = m03() * rm00 + m13() * rm01 + m23() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        float nm13 = m03() * rm10 + m13() * rm11 + m23() * rm12;
        return dest
        ._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
        ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
        ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
        ._m23(m03() * rm20 + m13() * rm21 + m23() * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotate(float ang, float x, float y, float z) {
        return rotate(ang, x, y, z, this);
    }
    public Matrix4f rotateTranslation(float ang, float x, float y, float z, Matrix4f dest) {
        float tx = m30(), ty = m31(), tz = m32();
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return dest.rotationX(x * ang).setTranslation(tx, ty, tz);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return dest.rotationY(y * ang).setTranslation(tx, ty, tz);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return dest.rotationZ(z * ang).setTranslation(tx, ty, tz);
        return rotateTranslationInternal(ang, x, y, z, dest);
    }
    private Matrix4f rotateTranslationInternal(float ang, float x, float y, float z, Matrix4f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float rm00 = xx * C + c;
        float rm01 = xy * C + z * s;
        float rm02 = xz * C - y * s;
        float rm10 = xy * C - z * s;
        float rm11 = yy * C + c;
        float rm12 = yz * C + x * s;
        float rm20 = xz * C + y * s;
        float rm21 = yz * C - x * s;
        float rm22 = zz * C + c;
        return dest
        ._m20(rm20)
        ._m21(rm21)
        ._m22(rm22)
        ._m23(0.0f)
        ._m00(rm00)
        ._m01(rm01)
        ._m02(rm02)
        ._m03(0.0f)
        ._m10(rm10)
        ._m11(rm11)
        ._m12(rm12)
        ._m13(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(1.0f)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAffine(float ang, float x, float y, float z, Matrix4f dest) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotateX(x * ang, dest);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotateY(y * ang, dest);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotateZ(z * ang, dest);
        return rotateAffineInternal(ang, x, y, z, dest);
    }
    private Matrix4f rotateAffineInternal(float ang, float x, float y, float z, Matrix4f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float rm00 = xx * C + c;
        float rm01 = xy * C + z * s;
        float rm02 = xz * C - y * s;
        float rm10 = xy * C - z * s;
        float rm11 = yy * C + c;
        float rm12 = yz * C + x * s;
        float rm20 = xz * C + y * s;
        float rm21 = yz * C - x * s;
        float rm22 = zz * C + c;
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        return dest
        ._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
        ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
        ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
        ._m23(0.0f)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(1.0f)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAffine(float ang, float x, float y, float z) {
        return rotateAffine(ang, x, y, z, this);
    }
    public Matrix4f rotateLocal(float ang, float x, float y, float z, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(ang, x, y, z);
        return rotateLocalGeneric(ang, x, y, z, dest);
    }
    private Matrix4f rotateLocalGeneric(float ang, float x, float y, float z, Matrix4f dest) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotateLocalX(x * ang, dest);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotateLocalY(y * ang, dest);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotateLocalZ(z * ang, dest);
        return rotateLocalGenericInternal(ang, x, y, z, dest);
    }
    private Matrix4f rotateLocalGenericInternal(float ang, float x, float y, float z, Matrix4f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float lm00 = xx * C + c;
        float lm01 = xy * C + z * s;
        float lm02 = xz * C - y * s;
        float lm10 = xy * C - z * s;
        float lm11 = yy * C + c;
        float lm12 = yz * C + x * s;
        float lm20 = xz * C + y * s;
        float lm21 = yz * C - x * s;
        float lm22 = zz * C + c;
        float nm00 = lm00 * m00() + lm10 * m01() + lm20 * m02();
        float nm01 = lm01 * m00() + lm11 * m01() + lm21 * m02();
        float nm02 = lm02 * m00() + lm12 * m01() + lm22 * m02();
        float nm10 = lm00 * m10() + lm10 * m11() + lm20 * m12();
        float nm11 = lm01 * m10() + lm11 * m11() + lm21 * m12();
        float nm12 = lm02 * m10() + lm12 * m11() + lm22 * m12();
        float nm20 = lm00 * m20() + lm10 * m21() + lm20 * m22();
        float nm21 = lm01 * m20() + lm11 * m21() + lm21 * m22();
        float nm22 = lm02 * m20() + lm12 * m21() + lm22 * m22();
        float nm30 = lm00 * m30() + lm10 * m31() + lm20 * m32();
        float nm31 = lm01 * m30() + lm11 * m31() + lm21 * m32();
        float nm32 = lm02 * m30() + lm12 * m31() + lm22 * m32();
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03())
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13())
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23())
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateLocal(float ang, float x, float y, float z) {
        return rotateLocal(ang, x, y, z, this);
    }
    public Matrix4f rotateLocalX(float ang, Matrix4f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm02 = sin * m01() + cos * m02();
        float nm12 = sin * m11() + cos * m12();
        float nm22 = sin * m21() + cos * m22();
        float nm32 = sin * m31() + cos * m32();
        return dest
        ._m00(m00())
        ._m01(cos * m01() - sin * m02())
        ._m02(nm02)
        ._m03(m03())
        ._m10(m10())
        ._m11(cos * m11() - sin * m12())
        ._m12(nm12)
        ._m13(m13())
        ._m20(m20())
        ._m21(cos * m21() - sin * m22())
        ._m22(nm22)
        ._m23(m23())
        ._m30(m30())
        ._m31(cos * m31() - sin * m32())
        ._m32(nm32)
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateLocalX(float ang) {
        return rotateLocalX(ang, this);
    }
    public Matrix4f rotateLocalY(float ang, Matrix4f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm02 = -sin * m00() + cos * m02();
        float nm12 = -sin * m10() + cos * m12();
        float nm22 = -sin * m20() + cos * m22();
        float nm32 = -sin * m30() + cos * m32();
        return dest
        ._m00(cos * m00() + sin * m02())
        ._m01(m01())
        ._m02(nm02)
        ._m03(m03())
        ._m10(cos * m10() + sin * m12())
        ._m11(m11())
        ._m12(nm12)
        ._m13(m13())
        ._m20(cos * m20() + sin * m22())
        ._m21(m21())
        ._m22(nm22)
        ._m23(m23())
        ._m30(cos * m30() + sin * m32())
        ._m31(m31())
        ._m32(nm32)
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateLocalY(float ang) {
        return rotateLocalY(ang, this);
    }
    public Matrix4f rotateLocalZ(float ang, Matrix4f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm01 = sin * m00() + cos * m01();
        float nm11 = sin * m10() + cos * m11();
        float nm21 = sin * m20() + cos * m21();
        float nm31 = sin * m30() + cos * m31();
        return dest
        ._m00(cos * m00() - sin * m01())
        ._m01(nm01)
        ._m02(m02())
        ._m03(m03())
        ._m10(cos * m10() - sin * m11())
        ._m11(nm11)
        ._m12(m12())
        ._m13(m13())
        ._m20(cos * m20() - sin * m21())
        ._m21(nm21)
        ._m22(m22())
        ._m23(m23())
        ._m30(cos * m30() - sin * m31())
        ._m31(nm31)
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateLocalZ(float ang) {
        return rotateLocalZ(ang, this);
    }
    public Matrix4f translate(Vector3fc offset) {
        return translate(offset.x(), offset.y(), offset.z());
    }
    public Matrix4f translate(Vector3fc offset, Matrix4f dest) {
        return translate(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4f translate(float x, float y, float z, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.translation(x, y, z);
        return translateGeneric(x, y, z, dest);
    }
    private Matrix4f translateGeneric(float x, float y, float z, Matrix4f dest) {
        MemUtil.INSTANCE.copy(this, dest);
        return dest
        ._m30(Math.fma(m00(), x, Math.fma(m10(), y, Math.fma(m20(), z, m30()))))
        ._m31(Math.fma(m01(), x, Math.fma(m11(), y, Math.fma(m21(), z, m31()))))
        ._m32(Math.fma(m02(), x, Math.fma(m12(), y, Math.fma(m22(), z, m32()))))
        ._m33(Math.fma(m03(), x, Math.fma(m13(), y, Math.fma(m23(), z, m33()))))
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY));
    }
    public Matrix4f translate(float x, float y, float z) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return translation(x, y, z);
        return translateGeneric(x, y, z);
    }
    private Matrix4f translateGeneric(float x, float y, float z) {
        return this
        ._m30(Math.fma(m00(), x, Math.fma(m10(), y, Math.fma(m20(), z, m30()))))
        ._m31(Math.fma(m01(), x, Math.fma(m11(), y, Math.fma(m21(), z, m31()))))
        ._m32(Math.fma(m02(), x, Math.fma(m12(), y, Math.fma(m22(), z, m32()))))
        ._m33(Math.fma(m03(), x, Math.fma(m13(), y, Math.fma(m23(), z, m33()))))
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY));
    }
    public Matrix4f translateLocal(Vector3fc offset) {
        return translateLocal(offset.x(), offset.y(), offset.z());
    }
    public Matrix4f translateLocal(Vector3fc offset, Matrix4f dest) {
        return translateLocal(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4f translateLocal(float x, float y, float z, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.translation(x, y, z);
        return translateLocalGeneric(x, y, z, dest);
    }
    private Matrix4f translateLocalGeneric(float x, float y, float z, Matrix4f dest) {
        float nm00 = m00() + x * m03();
        float nm01 = m01() + y * m03();
        float nm02 = m02() + z * m03();
        float nm10 = m10() + x * m13();
        float nm11 = m11() + y * m13();
        float nm12 = m12() + z * m13();
        float nm20 = m20() + x * m23();
        float nm21 = m21() + y * m23();
        float nm22 = m22() + z * m23();
        float nm30 = m30() + x * m33();
        float nm31 = m31() + y * m33();
        float nm32 = m32() + z * m33();
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03())
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13())
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23())
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY));
    }
    public Matrix4f translateLocal(float x, float y, float z) {
        return translateLocal(x, y, z, this);
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(m00());
        out.writeFloat(m01());
        out.writeFloat(m02());
        out.writeFloat(m03());
        out.writeFloat(m10());
        out.writeFloat(m11());
        out.writeFloat(m12());
        out.writeFloat(m13());
        out.writeFloat(m20());
        out.writeFloat(m21());
        out.writeFloat(m22());
        out.writeFloat(m23());
        out.writeFloat(m30());
        out.writeFloat(m31());
        out.writeFloat(m32());
        out.writeFloat(m33());
    }
    public void readExternal(ObjectInput in) throws IOException {
        this._m00(in.readFloat())
            ._m01(in.readFloat())
            ._m02(in.readFloat())
            ._m03(in.readFloat())
            ._m10(in.readFloat())
            ._m11(in.readFloat())
            ._m12(in.readFloat())
            ._m13(in.readFloat())
            ._m20(in.readFloat())
            ._m21(in.readFloat())
            ._m22(in.readFloat())
            ._m23(in.readFloat())
            ._m30(in.readFloat())
            ._m31(in.readFloat())
            ._m32(in.readFloat())
            ._m33(in.readFloat())
            .determineProperties();
    }
    public Matrix4f ortho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrtho(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return orthoGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f orthoGeneric(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar);
        float rm30 = (left + right) / (left - right);
        float rm31 = (top + bottom) / (bottom - top);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30())
            ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31())
            ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32())
            ._m33(m03() * rm30 + m13() * rm31 + m23() * rm32 + m33())
            ._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m20(m20() * rm22)
            ._m21(m21() * rm22)
            ._m22(m22() * rm22)
            ._m23(m23() * rm22)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f ortho(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest) {
        return ortho(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4f ortho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        return ortho(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f ortho(float left, float right, float bottom, float top, float zNear, float zFar) {
        return ortho(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrthoLH(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return orthoLHGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f orthoLHGeneric(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear);
        float rm30 = (left + right) / (left - right);
        float rm31 = (top + bottom) / (bottom - top);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30())
            ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31())
            ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32())
            ._m33(m03() * rm30 + m13() * rm31 + m23() * rm32 + m33())
            ._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m20(m20() * rm22)
            ._m21(m21() * rm22)
            ._m22(m22() * rm22)
            ._m23(m23() * rm22)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest) {
        return orthoLH(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        return orthoLH(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar) {
        return orthoLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4f setOrtho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(2.0f / (right - left))
            ._m11(2.0f / (top - bottom))
            ._m22((zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar))
            ._m30((right + left) / (left - right))
            ._m31((top + bottom) / (bottom - top))
            ._m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar))
            ._properties(PROPERTY_AFFINE);
        return this;
    }
    public Matrix4f setOrtho(float left, float right, float bottom, float top, float zNear, float zFar) {
        return setOrtho(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4f setOrthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(2.0f / (right - left))
            ._m11(2.0f / (top - bottom))
            ._m22((zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear))
            ._m30((right + left) / (left - right))
            ._m31((top + bottom) / (bottom - top))
            ._m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar))
            ._properties(PROPERTY_AFFINE);
        return this;
    }
    public Matrix4f setOrthoLH(float left, float right, float bottom, float top, float zNear, float zFar) {
        return setOrthoLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4f orthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrthoSymmetric(width, height, zNear, zFar, zZeroToOne);
        return orthoSymmetricGeneric(width, height, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f orthoSymmetricGeneric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = 2.0f / width;
        float rm11 = 2.0f / height;
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m20() * rm32 + m30())
            ._m31(m21() * rm32 + m31())
            ._m32(m22() * rm32 + m32())
            ._m33(m23() * rm32 + m33())
            ._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m20(m20() * rm22)
            ._m21(m21() * rm22)
            ._m22(m22() * rm22)
            ._m23(m23() * rm22)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f orthoSymmetric(float width, float height, float zNear, float zFar, Matrix4f dest) {
        return orthoSymmetric(width, height, zNear, zFar, false, dest);
    }
    public Matrix4f orthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        return orthoSymmetric(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f orthoSymmetric(float width, float height, float zNear, float zFar) {
        return orthoSymmetric(width, height, zNear, zFar, false, this);
    }
    public Matrix4f orthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrthoSymmetricLH(width, height, zNear, zFar, zZeroToOne);
        return orthoSymmetricLHGeneric(width, height, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f orthoSymmetricLHGeneric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = 2.0f / width;
        float rm11 = 2.0f / height;
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m20() * rm32 + m30())
            ._m31(m21() * rm32 + m31())
            ._m32(m22() * rm32 + m32())
            ._m33(m23() * rm32 + m33())
            ._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m20(m20() * rm22)
            ._m21(m21() * rm22)
            ._m22(m22() * rm22)
            ._m23(m23() * rm22)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f orthoSymmetricLH(float width, float height, float zNear, float zFar, Matrix4f dest) {
        return orthoSymmetricLH(width, height, zNear, zFar, false, dest);
    }
    public Matrix4f orthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        return orthoSymmetricLH(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f orthoSymmetricLH(float width, float height, float zNear, float zFar) {
        return orthoSymmetricLH(width, height, zNear, zFar, false, this);
    }
    public Matrix4f setOrthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(2.0f / width)
            ._m11(2.0f / height)
            ._m22((zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar))
            ._m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar))
            ._properties(PROPERTY_AFFINE);
        return this;
    }
    public Matrix4f setOrthoSymmetric(float width, float height, float zNear, float zFar) {
        return setOrthoSymmetric(width, height, zNear, zFar, false);
    }
    public Matrix4f setOrthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(2.0f / width)
            ._m11(2.0f / height)
            ._m22((zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear))
            ._m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar))
            ._properties(PROPERTY_AFFINE);
        return this;
    }
    public Matrix4f setOrthoSymmetricLH(float width, float height, float zNear, float zFar) {
        return setOrthoSymmetricLH(width, height, zNear, zFar, false);
    }
    public Matrix4f ortho2D(float left, float right, float bottom, float top, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrtho2D(left, right, bottom, top);
        return ortho2DGeneric(left, right, bottom, top, dest);
    }
    private Matrix4f ortho2DGeneric(float left, float right, float bottom, float top, Matrix4f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm30 = (right + left) / (left - right);
        float rm31 = (top + bottom) / (bottom - top);
        dest._m30(m00() * rm30 + m10() * rm31 + m30())
            ._m31(m01() * rm30 + m11() * rm31 + m31())
            ._m32(m02() * rm30 + m12() * rm31 + m32())
            ._m33(m03() * rm30 + m13() * rm31 + m33())
            ._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m20(-m20())
            ._m21(-m21())
            ._m22(-m22())
            ._m23(-m23())
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f ortho2D(float left, float right, float bottom, float top) {
        return ortho2D(left, right, bottom, top, this);
    }
    public Matrix4f ortho2DLH(float left, float right, float bottom, float top, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrtho2DLH(left, right, bottom, top);
        return ortho2DLHGeneric(left, right, bottom, top, dest);
    }
    private Matrix4f ortho2DLHGeneric(float left, float right, float bottom, float top, Matrix4f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm30 = (right + left) / (left - right);
        float rm31 = (top + bottom) / (bottom - top);
        dest._m30(m00() * rm30 + m10() * rm31 + m30())
            ._m31(m01() * rm30 + m11() * rm31 + m31())
            ._m32(m02() * rm30 + m12() * rm31 + m32())
            ._m33(m03() * rm30 + m13() * rm31 + m33())
            ._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m20(m20())
            ._m21(m21())
            ._m22(m22())
            ._m23(m23())
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f ortho2DLH(float left, float right, float bottom, float top) {
        return ortho2DLH(left, right, bottom, top, this);
    }
    public Matrix4f setOrtho2D(float left, float right, float bottom, float top) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(2.0f / (right - left))
            ._m11(2.0f / (top - bottom))
            ._m22(-1.0f)
            ._m30((right + left) / (left - right))
            ._m31((top + bottom) / (bottom - top))
            ._properties(PROPERTY_AFFINE);
        return this;
    }
    public Matrix4f setOrtho2DLH(float left, float right, float bottom, float top) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(2.0f / (right - left))
            ._m11(2.0f / (top - bottom))
            ._m30((right + left) / (left - right))
            ._m31((top + bottom) / (bottom - top))
            ._properties(PROPERTY_AFFINE);
        return this;
    }
    public Matrix4f lookAlong(Vector3fc dir, Vector3fc up) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4f lookAlong(Vector3fc dir, Vector3fc up, Matrix4f dest) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4f lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAlong(dirX, dirY, dirZ, upX, upY, upZ);
        return lookAlongGeneric(dirX, dirY, dirZ, upX, upY, upZ, dest);
    }
    private Matrix4f lookAlongGeneric(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4f dest) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float nm00 = m00() * leftX + m10() * upnX + m20() * dirX;
        float nm01 = m01() * leftX + m11() * upnX + m21() * dirX;
        float nm02 = m02() * leftX + m12() * upnX + m22() * dirX;
        float nm03 = m03() * leftX + m13() * upnX + m23() * dirX;
        float nm10 = m00() * leftY + m10() * upnY + m20() * dirY;
        float nm11 = m01() * leftY + m11() * upnY + m21() * dirY;
        float nm12 = m02() * leftY + m12() * upnY + m22() * dirY;
        float nm13 = m03() * leftY + m13() * upnY + m23() * dirY;
        return dest
        ._m20(m00() * leftZ + m10() * upnZ + m20() * dirZ)
        ._m21(m01() * leftZ + m11() * upnZ + m21() * dirZ)
        ._m22(m02() * leftZ + m12() * upnZ + m22() * dirZ)
        ._m23(m03() * leftZ + m13() * upnZ + m23() * dirZ)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f lookAlong(float dirX, float dirY, float dirZ,
                              float upX, float upY, float upZ) {
        return lookAlong(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix4f setLookAlong(Vector3fc dir, Vector3fc up) {
        return setLookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4f setLookAlong(float dirX, float dirY, float dirZ,
                                 float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        this._m00(leftX)
            ._m01(dirY * leftZ - dirZ * leftY)
            ._m02(dirX)
            ._m03(0.0f)
            ._m10(leftY)
            ._m11(dirZ * leftX - dirX * leftZ)
            ._m12(dirY)
            ._m13(0.0f)
            ._m20(leftZ)
            ._m21(dirX * leftY - dirY * leftX)
            ._m22(dirZ)
            ._m23(0.0f)
            ._m30(0.0f)
            ._m31(0.0f)
            ._m32(0.0f)
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f setLookAt(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return setLookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z());
    }
    public Matrix4f setLookAt(float eyeX, float eyeY, float eyeZ,
                              float centerX, float centerY, float centerZ,
                              float upX, float upY, float upZ) {
        float dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        return this
        ._m00(leftX)
        ._m01(upnX)
        ._m02(dirX)
        ._m03(0.0f)
        ._m10(leftY)
        ._m11(upnY)
        ._m12(dirY)
        ._m13(0.0f)
        ._m20(leftZ)
        ._m21(upnZ)
        ._m22(dirZ)
        ._m23(0.0f)
        ._m30(-(leftX * eyeX + leftY * eyeY + leftZ * eyeZ))
        ._m31(-(upnX * eyeX + upnY * eyeY + upnZ * eyeZ))
        ._m32(-(dirX * eyeX + dirY * eyeY + dirZ * eyeZ))
        ._m33(1.0f)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4f lookAt(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4f dest) {
        return lookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4f lookAt(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return lookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4f lookAt(float eyeX, float eyeY, float eyeZ,
                           float centerX, float centerY, float centerZ,
                           float upX, float upY, float upZ, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return lookAtPerspective(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
        return lookAtGeneric(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
    }
    private Matrix4f lookAtGeneric(float eyeX, float eyeY, float eyeZ,
                                   float centerX, float centerY, float centerZ,
                                   float upX, float upY, float upZ, Matrix4f dest) {
        float dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        float rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        float rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        float nm00 = m00() * leftX + m10() * upnX + m20() * dirX;
        float nm01 = m01() * leftX + m11() * upnX + m21() * dirX;
        float nm02 = m02() * leftX + m12() * upnX + m22() * dirX;
        float nm03 = m03() * leftX + m13() * upnX + m23() * dirX;
        float nm10 = m00() * leftY + m10() * upnY + m20() * dirY;
        float nm11 = m01() * leftY + m11() * upnY + m21() * dirY;
        float nm12 = m02() * leftY + m12() * upnY + m22() * dirY;
        float nm13 = m03() * leftY + m13() * upnY + m23() * dirY;
        return dest
        ._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30())
        ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31())
        ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32())
        ._m33(m03() * rm30 + m13() * rm31 + m23() * rm32 + m33())
        ._m20(m00() * leftZ + m10() * upnZ + m20() * dirZ)
        ._m21(m01() * leftZ + m11() * upnZ + m21() * dirZ)
        ._m22(m02() * leftZ + m12() * upnZ + m22() * dirZ)
        ._m23(m03() * leftZ + m13() * upnZ + m23() * dirZ)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f lookAtPerspective(float eyeX, float eyeY, float eyeZ,
            float centerX, float centerY, float centerZ,
            float upX, float upY, float upZ, Matrix4f dest) {
        float dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        float rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        float rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        float nm10 = m00() * leftY;
        float nm20 = m00() * leftZ;
        float nm21 = m11() * upnZ;
        float nm30 = m00() * rm30;
        float nm31 = m11() * rm31;
        float nm32 = m22() * rm32 + m32();
        float nm33 = m23() * rm32;
        return dest
        ._m00(m00() * leftX)
        ._m01(m11() * upnX)
        ._m02(m22() * dirX)
        ._m03(m23() * dirX)
        ._m10(nm10)
        ._m11(m11() * upnY)
        ._m12(m22() * dirY)
        ._m13(m23() * dirY)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(m22() * dirZ)
        ._m23(m23() * dirZ)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f lookAt(float eyeX, float eyeY, float eyeZ,
                           float centerX, float centerY, float centerZ,
                           float upX, float upY, float upZ) {
        return lookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, this);
    }
    public Matrix4f setLookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return setLookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z());
    }
    public Matrix4f setLookAtLH(float eyeX, float eyeY, float eyeZ,
                                float centerX, float centerY, float centerZ,
                                float upX, float upY, float upZ) {
        float dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        this._m00(leftX)
            ._m01(upnX)
            ._m02(dirX)
            ._m03(0.0f)
            ._m10(leftY)
            ._m11(upnY)
            ._m12(dirY)
            ._m13(0.0f)
            ._m20(leftZ)
            ._m21(upnZ)
            ._m22(dirZ)
            ._m23(0.0f)
            ._m30(-(leftX * eyeX + leftY * eyeY + leftZ * eyeZ))
            ._m31(-(upnX * eyeX + upnY * eyeY + upnZ * eyeZ))
            ._m32(-(dirX * eyeX + dirY * eyeY + dirZ * eyeZ))
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f lookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4f dest) {
        return lookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4f lookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return lookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4f lookAtLH(float eyeX, float eyeY, float eyeZ,
                             float centerX, float centerY, float centerZ,
                             float upX, float upY, float upZ, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAtLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return lookAtPerspectiveLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
        return lookAtLHGeneric(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
    }
    private Matrix4f lookAtLHGeneric(float eyeX, float eyeY, float eyeZ,
                                     float centerX, float centerY, float centerZ,
                                     float upX, float upY, float upZ, Matrix4f dest) {
        float dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        float rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        float rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        float nm00 = m00() * leftX + m10() * upnX + m20() * dirX;
        float nm01 = m01() * leftX + m11() * upnX + m21() * dirX;
        float nm02 = m02() * leftX + m12() * upnX + m22() * dirX;
        float nm03 = m03() * leftX + m13() * upnX + m23() * dirX;
        float nm10 = m00() * leftY + m10() * upnY + m20() * dirY;
        float nm11 = m01() * leftY + m11() * upnY + m21() * dirY;
        float nm12 = m02() * leftY + m12() * upnY + m22() * dirY;
        float nm13 = m03() * leftY + m13() * upnY + m23() * dirY;
        return dest
        ._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30())
        ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31())
        ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32())
        ._m33(m03() * rm30 + m13() * rm31 + m23() * rm32 + m33())
        ._m20(m00() * leftZ + m10() * upnZ + m20() * dirZ)
        ._m21(m01() * leftZ + m11() * upnZ + m21() * dirZ)
        ._m22(m02() * leftZ + m12() * upnZ + m22() * dirZ)
        ._m23(m03() * leftZ + m13() * upnZ + m23() * dirZ)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f lookAtLH(float eyeX, float eyeY, float eyeZ,
                             float centerX, float centerY, float centerZ,
                             float upX, float upY, float upZ) {
        return lookAtLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, this);
    }
    public Matrix4f lookAtPerspectiveLH(float eyeX, float eyeY, float eyeZ,
            float centerX, float centerY, float centerZ,
            float upX, float upY, float upZ, Matrix4f dest) {
        float dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        float rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        float rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        float nm00 = m00() * leftX;
        float nm01 = m11() * upnX;
        float nm02 = m22() * dirX;
        float nm03 = m23() * dirX;
        float nm10 = m00() * leftY;
        float nm11 = m11() * upnY;
        float nm12 = m22() * dirY;
        float nm13 = m23() * dirY;
        float nm20 = m00() * leftZ;
        float nm21 = m11() * upnZ;
        float nm22 = m22() * dirZ;
        float nm23 = m23() * dirZ;
        float nm30 = m00() * rm30;
        float nm31 = m11() * rm31;
        float nm32 = m22() * rm32 + m32();
        float nm33 = m23() * rm32;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f tile(int x, int y, int w, int h) {
        return tile(x, y, w, h, this);
    }
    public Matrix4f tile(int x, int y, int w, int h, Matrix4f dest) {
        float tx = w - 1 - (x<<1), ty = h - 1 - (y<<1);
        return dest
        ._m30(Math.fma(m00(), tx, Math.fma(m10(), ty, m30())))
        ._m31(Math.fma(m01(), tx, Math.fma(m11(), ty, m31())))
        ._m32(Math.fma(m02(), tx, Math.fma(m12(), ty, m32())))
        ._m33(Math.fma(m03(), tx, Math.fma(m13(), ty, m33())))
        ._m00(m00() * w)
        ._m01(m01() * w)
        ._m02(m02() * w)
        ._m03(m03() * w)
        ._m10(m10() * h)
        ._m11(m11() * h)
        ._m12(m12() * h)
        ._m13(m13() * h)
        ._m20(m20())
        ._m21(m21())
        ._m22(m22())
        ._m23(m23())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f perspective(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspective(fovy, aspect, zNear, zFar, zZeroToOne);
        return perspectiveGeneric(fovy, aspect, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f perspectiveGeneric(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float h = Math.tan(fovy * 0.5f);
        float rm00 = 1.0f / (h * aspect);
        float rm11 = 1.0f / h;
        float rm22;
        float rm32;
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            rm22 = e - 1.0f;
            rm32 = (e - (zZeroToOne ? 1.0f : 2.0f)) * zNear;
        } else if (nearInf) {
            float e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0f : 1.0f) - e;
            rm32 = ((zZeroToOne ? 1.0f : 2.0f) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        float nm20 = m20() * rm22 - m30();
        float nm21 = m21() * rm22 - m31();
        float nm22 = m22() * rm22 - m32();
        float nm23 = m23() * rm22 - m33();
        dest._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m30(m20() * rm32)
            ._m31(m21() * rm32)
            ._m32(m22() * rm32)
            ._m33(m23() * rm32)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f perspective(float fovy, float aspect, float zNear, float zFar, Matrix4f dest) {
        return perspective(fovy, aspect, zNear, zFar, false, dest);
    }
    public Matrix4f perspective(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne) {
        return perspective(fovy, aspect, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f perspective(float fovy, float aspect, float zNear, float zFar) {
        return perspective(fovy, aspect, zNear, zFar, this);
    }
    public Matrix4f perspectiveRect(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspectiveRect(width, height, zNear, zFar, zZeroToOne);
        return perspectiveRectGeneric(width, height, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f perspectiveRectGeneric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = (zNear + zNear) / width;
        float rm11 = (zNear + zNear) / height;
        float rm22, rm32;
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            rm22 = e - 1.0f;
            rm32 = (e - (zZeroToOne ? 1.0f : 2.0f)) * zNear;
        } else if (nearInf) {
            float e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0f : 1.0f) - e;
            rm32 = ((zZeroToOne ? 1.0f : 2.0f) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        float nm20 = m20() * rm22 - m30();
        float nm21 = m21() * rm22 - m31();
        float nm22 = m22() * rm22 - m32();
        float nm23 = m23() * rm22 - m33();
        dest._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m30(m20() * rm32)
            ._m31(m21() * rm32)
            ._m32(m22() * rm32)
            ._m33(m23() * rm32)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f perspectiveRect(float width, float height, float zNear, float zFar, Matrix4f dest) {
        return perspectiveRect(width, height, zNear, zFar, false, dest);
    }
    public Matrix4f perspectiveRect(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        return perspectiveRect(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f perspectiveRect(float width, float height, float zNear, float zFar) {
        return perspectiveRect(width, height, zNear, zFar, this);
    }
    public Matrix4f perspectiveOffCenter(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, zZeroToOne);
        return perspectiveOffCenterGeneric(fovy, offAngleX, offAngleY, aspect, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f perspectiveOffCenterGeneric(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float h = Math.tan(fovy * 0.5f);
        float xScale = 1.0f / (h * aspect);
        float yScale = 1.0f / h;
        float offX = Math.tan(offAngleX), offY = Math.tan(offAngleY);
        float rm20 = offX * xScale;
        float rm21 = offY * yScale;
        float rm22;
        float rm32;
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            rm22 = e - 1.0f;
            rm32 = (e - (zZeroToOne ? 1.0f : 2.0f)) * zNear;
        } else if (nearInf) {
            float e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0f : 1.0f) - e;
            rm32 = ((zZeroToOne ? 1.0f : 2.0f) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        float nm20 = m00() * rm20 + m10() * rm21 + m20() * rm22 - m30();
        float nm21 = m01() * rm20 + m11() * rm21 + m21() * rm22 - m31();
        float nm22 = m02() * rm20 + m12() * rm21 + m22() * rm22 - m32();
        float nm23 = m03() * rm20 + m13() * rm21 + m23() * rm22 - m33();
        dest._m00(m00() * xScale)
            ._m01(m01() * xScale)
            ._m02(m02() * xScale)
            ._m03(m03() * xScale)
            ._m10(m10() * yScale)
            ._m11(m11() * yScale)
            ._m12(m12() * yScale)
            ._m13(m13() * yScale)
            ._m30(m20() * rm32)
            ._m31(m21() * rm32)
            ._m32(m22() * rm32)
            ._m33(m23() * rm32)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
                | PROPERTY_ORTHONORMAL | (rm20 == 0.0f && rm21 == 0.0f ? 0 : PROPERTY_PERSPECTIVE)));
        return dest;
    }
    public Matrix4f perspectiveOffCenter(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar, Matrix4f dest) {
        return perspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, false, dest);
    }
    public Matrix4f perspectiveOffCenter(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar, boolean zZeroToOne) {
        return perspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f perspectiveOffCenter(float fovy, float offAngleX, float offAngleY, float aspect, float zNear, float zFar) {
        return perspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, this);
    }
    public Matrix4f perspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne) {
        return perspectiveOffCenterFov(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f perspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        return frustum(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne, dest);
    }
    public Matrix4f perspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar) {
        return perspectiveOffCenterFov(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, this);
    }
    public Matrix4f perspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, Matrix4f dest) {
        return frustum(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, dest);
    }
    public Matrix4f perspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne) {
        return perspectiveOffCenterFovLH(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f perspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        return frustumLH(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne, dest);
    }
    public Matrix4f perspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar) {
        return perspectiveOffCenterFovLH(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, this);
    }
    public Matrix4f perspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, Matrix4f dest) {
        return frustumLH(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, dest);
    }
    public Matrix4f setPerspective(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.zero(this);
        float h = Math.tan(fovy * 0.5f);
        this._m00(1.0f / (h * aspect))
            ._m11(1.0f / h);
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            this._m22(e - 1.0f)
                ._m32((e - (zZeroToOne ? 1.0f : 2.0f)) * zNear);
        } else if (nearInf) {
            float e = 1E-6f;
            this._m22((zZeroToOne ? 0.0f : 1.0f) - e)
                ._m32(((zZeroToOne ? 1.0f : 2.0f) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar))
                ._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        return this
        ._m23(-1.0f)
        ._properties(PROPERTY_PERSPECTIVE);
    }
    public Matrix4f setPerspective(float fovy, float aspect, float zNear, float zFar) {
        return setPerspective(fovy, aspect, zNear, zFar, false);
    }
    public Matrix4f setPerspectiveRect(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.zero(this);
        this._m00((zNear + zNear) / width)
            ._m11((zNear + zNear) / height);
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            this._m22(e - 1.0f)
                ._m32((e - (zZeroToOne ? 1.0f : 2.0f)) * zNear);
        } else if (nearInf) {
            float e = 1E-6f;
            this._m22((zZeroToOne ? 0.0f : 1.0f) - e)
                ._m32(((zZeroToOne ? 1.0f : 2.0f) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar))
                ._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        this._m23(-1.0f)
            ._properties(PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4f setPerspectiveRect(float width, float height, float zNear, float zFar) {
        return setPerspectiveRect(width, height, zNear, zFar, false);
    }
    public Matrix4f setPerspectiveOffCenter(float fovy, float offAngleX, float offAngleY,
            float aspect, float zNear, float zFar) {
        return setPerspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, false);
    }
    public Matrix4f setPerspectiveOffCenter(float fovy, float offAngleX, float offAngleY,
                                            float aspect, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.zero(this);
        float h = Math.tan(fovy * 0.5f);
        float xScale = 1.0f / (h * aspect), yScale = 1.0f / h;
        float offX = Math.tan(offAngleX), offY = Math.tan(offAngleY);
        this._m00(xScale)
            ._m11(yScale)
            ._m20(offX * xScale)
            ._m21(offY * yScale);
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            this._m22(e - 1.0f)
                ._m32((e - (zZeroToOne ? 1.0f : 2.0f)) * zNear);
        } else if (nearInf) {
            float e = 1E-6f;
            this._m22((zZeroToOne ? 0.0f : 1.0f) - e)
                ._m32(((zZeroToOne ? 1.0f : 2.0f) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar))
                ._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        this._m23(-1.0f)
            ._properties(offAngleX == 0.0f && offAngleY == 0.0f ? PROPERTY_PERSPECTIVE : 0);
        return this;
    }
    public Matrix4f setPerspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar) {
        return setPerspectiveOffCenterFov(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, false);
    }
    public Matrix4f setPerspectiveOffCenterFov(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne) {
        return setFrustum(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne);
    }
    public Matrix4f setPerspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar) {
        return setPerspectiveOffCenterFovLH(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, false);
    }
    public Matrix4f setPerspectiveOffCenterFovLH(float angleLeft, float angleRight, float angleDown, float angleUp, float zNear, float zFar, boolean zZeroToOne) {
        return setFrustumLH(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne);
    }
    public Matrix4f perspectiveLH(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspectiveLH(fovy, aspect, zNear, zFar, zZeroToOne);
        return perspectiveLHGeneric(fovy, aspect, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f perspectiveLHGeneric(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float h = Math.tan(fovy * 0.5f);
        float rm00 = 1.0f / (h * aspect);
        float rm11 = 1.0f / h;
        float rm22;
        float rm32;
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            rm22 = 1.0f - e;
            rm32 = (e - (zZeroToOne ? 1.0f : 2.0f)) * zNear;
        } else if (nearInf) {
            float e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0f : 1.0f) - e;
            rm32 = ((zZeroToOne ? 1.0f : 2.0f) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        float nm20 = m20() * rm22 + m30();
        float nm21 = m21() * rm22 + m31();
        float nm22 = m22() * rm22 + m32();
        float nm23 = m23() * rm22 + m33();
        dest._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m30(m20() * rm32)
            ._m31(m21() * rm32)
            ._m32(m22() * rm32)
            ._m33(m23() * rm32)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f perspectiveLH(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne) {
        return perspectiveLH(fovy, aspect, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f perspectiveLH(float fovy, float aspect, float zNear, float zFar, Matrix4f dest) {
        return perspectiveLH(fovy, aspect, zNear, zFar, false, dest);
    }
    public Matrix4f perspectiveLH(float fovy, float aspect, float zNear, float zFar) {
        return perspectiveLH(fovy, aspect, zNear, zFar, this);
    }
    public Matrix4f setPerspectiveLH(float fovy, float aspect, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.zero(this);
        float h = Math.tan(fovy * 0.5f);
        this._m00(1.0f / (h * aspect))
            ._m11(1.0f / h);
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            this._m22(1.0f - e)
                ._m32((e - (zZeroToOne ? 1.0f : 2.0f)) * zNear);
        } else if (nearInf) {
            float e = 1E-6f;
            this._m22((zZeroToOne ? 0.0f : 1.0f) - e)
                ._m32(((zZeroToOne ? 1.0f : 2.0f) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear))
                ._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        this._m23(1.0f)
            ._properties(PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4f setPerspectiveLH(float fovy, float aspect, float zNear, float zFar) {
        return setPerspectiveLH(fovy, aspect, zNear, zFar, false);
    }
    public Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setFrustum(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return frustumGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f frustumGeneric(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = (zNear + zNear) / (right - left);
        float rm11 = (zNear + zNear) / (top - bottom);
        float rm20 = (right + left) / (right - left);
        float rm21 = (top + bottom) / (top - bottom);
        float rm22;
        float rm32;
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            rm22 = e - 1.0f;
            rm32 = (e - (zZeroToOne ? 1.0f : 2.0f)) * zNear;
        } else if (nearInf) {
            float e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0f : 1.0f) - e;
            rm32 = ((zZeroToOne ? 1.0f : 2.0f) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        float nm20 = m00() * rm20 + m10() * rm21 + m20() * rm22 - m30();
        float nm21 = m01() * rm20 + m11() * rm21 + m21() * rm22 - m31();
        float nm22 = m02() * rm20 + m12() * rm21 + m22() * rm22 - m32();
        float nm23 = m03() * rm20 + m13() * rm21 + m23() * rm22 - m33();
        dest._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m30(m20() * rm32)
            ._m31(m21() * rm32)
            ._m32(m22() * rm32)
            ._m33(m23() * rm32)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest) {
        return frustum(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        return frustum(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f frustum(float left, float right, float bottom, float top, float zNear, float zFar) {
        return frustum(left, right, bottom, top, zNear, zFar, this);
    }
    public Matrix4f setFrustum(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00((zNear + zNear) / (right - left))
            ._m11((zNear + zNear) / (top - bottom))
            ._m20((right + left) / (right - left))
            ._m21((top + bottom) / (top - bottom));
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            this._m22(e - 1.0f)
                ._m32((e - (zZeroToOne ? 1.0f : 2.0f)) * zNear);
        } else if (nearInf) {
            float e = 1E-6f;
            this._m22((zZeroToOne ? 0.0f : 1.0f) - e)
                ._m32(((zZeroToOne ? 1.0f : 2.0f) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar))
                ._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        this._m23(-1.0f)
            ._m33(0.0f)
            ._properties(this.m20() == 0.0f && this.m21() == 0.0f ? PROPERTY_PERSPECTIVE : 0);
        return this;
    }
    public Matrix4f setFrustum(float left, float right, float bottom, float top, float zNear, float zFar) {
        return setFrustum(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4f frustumLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setFrustumLH(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return frustumLHGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4f frustumLHGeneric(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4f dest) {
        float rm00 = (zNear + zNear) / (right - left);
        float rm11 = (zNear + zNear) / (top - bottom);
        float rm20 = (right + left) / (right - left);
        float rm21 = (top + bottom) / (top - bottom);
        float rm22;
        float rm32;
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            rm22 = 1.0f - e;
            rm32 = (e - (zZeroToOne ? 1.0f : 2.0f)) * zNear;
        } else if (nearInf) {
            float e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0f : 1.0f) - e;
            rm32 = ((zZeroToOne ? 1.0f : 2.0f) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        float nm20 = m00() * rm20 + m10() * rm21 + m20() * rm22 + m30();
        float nm21 = m01() * rm20 + m11() * rm21 + m21() * rm22 + m31();
        float nm22 = m02() * rm20 + m12() * rm21 + m22() * rm22 + m32();
        float nm23 = m03() * rm20 + m13() * rm21 + m23() * rm22 + m33();
        dest._m00(m00() * rm00)
            ._m01(m01() * rm00)
            ._m02(m02() * rm00)
            ._m03(m03() * rm00)
            ._m10(m10() * rm11)
            ._m11(m11() * rm11)
            ._m12(m12() * rm11)
            ._m13(m13() * rm11)
            ._m30(m20() * rm32)
            ._m31(m21() * rm32)
            ._m32(m22() * rm32)
            ._m33(m23() * rm32)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f frustumLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        return frustumLH(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4f frustumLH(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4f dest) {
        return frustumLH(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4f frustumLH(float left, float right, float bottom, float top, float zNear, float zFar) {
        return frustumLH(left, right, bottom, top, zNear, zFar, this);
    }
    public Matrix4f setFrustumLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00((zNear + zNear) / (right - left))
            ._m11((zNear + zNear) / (top - bottom))
            ._m20((right + left) / (right - left))
            ._m21((top + bottom) / (top - bottom));
        boolean farInf = zFar > 0 && Float.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Float.isInfinite(zNear);
        if (farInf) {
            float e = 1E-6f;
            this._m22(1.0f - e)
                ._m32((e - (zZeroToOne ? 1.0f : 2.0f)) * zNear);
        } else if (nearInf) {
            float e = 1E-6f;
            this._m22((zZeroToOne ? 0.0f : 1.0f) - e)
                ._m32(((zZeroToOne ? 1.0f : 2.0f) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear))
                ._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        return this
        ._m23(1.0f)
        ._m33(0.0f)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f setFrustumLH(float left, float right, float bottom, float top, float zNear, float zFar) {
        return setFrustumLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4f setFromIntrinsic(float alphaX, float alphaY, float gamma, float u0, float v0, int imgWidth, int imgHeight, float near, float far) {
        float l00 = 2.0f / imgWidth;
        float l11 = 2.0f / imgHeight;
        float invNearFar = 1.0f / (near - far);
        float l22 = 2.0f * invNearFar;
        return this
        ._m00(l00 * alphaX)
        ._m01(0.0f)
        ._m02(0.0f)
        ._m03(0.0f)
        ._m10(l00 * gamma)
        ._m11(l11 * alphaY)
        ._m12(0.0f)
        ._m13(0.0f)
        ._m20(l00 * u0 - 1.0f)
        ._m21(l11 * v0 - 1.0f)
        ._m22(l22 * -(near + far) + (far + near) * invNearFar)
        ._m23(-1.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(l22 * -near * far)
        ._m33(0.0f)
        ._properties(PROPERTY_PERSPECTIVE);
    }
    public Matrix4f rotate(Quaternionfc quat, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(quat);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(quat, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffine(quat, dest);
        return rotateGeneric(quat, dest);
    }
    private Matrix4f rotateGeneric(Quaternionfc quat, Matrix4f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = -dzw + dxy;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float nm00 = Math.fma(m00(), rm00, Math.fma(m10(), rm01, m20() * rm02));
        float nm01 = Math.fma(m01(), rm00, Math.fma(m11(), rm01, m21() * rm02));
        float nm02 = Math.fma(m02(), rm00, Math.fma(m12(), rm01, m22() * rm02));
        float nm03 = Math.fma(m03(), rm00, Math.fma(m13(), rm01, m23() * rm02));
        float nm10 = Math.fma(m00(), rm10, Math.fma(m10(), rm11, m20() * rm12));
        float nm11 = Math.fma(m01(), rm10, Math.fma(m11(), rm11, m21() * rm12));
        float nm12 = Math.fma(m02(), rm10, Math.fma(m12(), rm11, m22() * rm12));
        float nm13 = Math.fma(m03(), rm10, Math.fma(m13(), rm11, m23() * rm12));
        return dest
        ._m20(Math.fma(m00(), rm20, Math.fma(m10(), rm21, m20() * rm22)))
        ._m21(Math.fma(m01(), rm20, Math.fma(m11(), rm21, m21() * rm22)))
        ._m22(Math.fma(m02(), rm20, Math.fma(m12(), rm21, m22() * rm22)))
        ._m23(Math.fma(m03(), rm20, Math.fma(m13(), rm21, m23() * rm22)))
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotate(Quaternionfc quat) {
        return rotate(quat, this);
    }
    public Matrix4f rotateAffine(Quaternionfc quat, Matrix4f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = -dzw + dxy;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        return dest
        ._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
        ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
        ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
        ._m23(0.0f)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAffine(Quaternionfc quat) {
        return rotateAffine(quat, this);
    }
    public Matrix4f rotateTranslation(Quaternionfc quat, Matrix4f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = -dzw + dxy;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        return dest
        ._m20(rm20)
        ._m21(rm21)
        ._m22(rm22)
        ._m23(0.0f)
        ._m00(rm00)
        ._m01(rm01)
        ._m02(rm02)
        ._m03(0.0f)
        ._m10(rm10)
        ._m11(rm11)
        ._m12(rm12)
        ._m13(0.0f)
        ._m30(m30())
        ._m31(m31())
        ._m32(m32())
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateAround(Quaternionfc quat, float ox, float oy, float oz) {
        return rotateAround(quat, ox, oy, oz, this);
    }
    public Matrix4f rotateAroundAffine(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = -dzw + dxy;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float tm30 = m00() * ox + m10() * oy + m20() * oz + m30();
        float tm31 = m01() * ox + m11() * oy + m21() * oz + m31();
        float tm32 = m02() * ox + m12() * oy + m22() * oz + m32();
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        dest._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
            ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
            ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
            ._m23(0.0f)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(0.0f)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(0.0f)
            ._m30(-nm00 * ox - nm10 * oy - m20() * oz + tm30)
            ._m31(-nm01 * ox - nm11 * oy - m21() * oz + tm31)
            ._m32(-nm02 * ox - nm12 * oy - m22() * oz + tm32)
            ._m33(1.0f)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f rotateAround(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return rotationAround(quat, ox, oy, oz);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAroundAffine(quat, ox, oy, oz, dest);
        return rotateAroundGeneric(quat, ox, oy, oz, dest);
    }
    private Matrix4f rotateAroundGeneric(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = -dzw + dxy;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float tm30 = m00() * ox + m10() * oy + m20() * oz + m30();
        float tm31 = m01() * ox + m11() * oy + m21() * oz + m31();
        float tm32 = m02() * ox + m12() * oy + m22() * oz + m32();
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm03 = m03() * rm00 + m13() * rm01 + m23() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        float nm13 = m03() * rm10 + m13() * rm11 + m23() * rm12;
        dest._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
            ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
            ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
            ._m23(m03() * rm20 + m13() * rm21 + m23() * rm22)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(nm03)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(nm13)
            ._m30(-nm00 * ox - nm10 * oy - m20() * oz + tm30)
            ._m31(-nm01 * ox - nm11 * oy - m21() * oz + tm31)
            ._m32(-nm02 * ox - nm12 * oy - m22() * oz + tm32)
            ._m33(m33())
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f rotationAround(Quaternionfc quat, float ox, float oy, float oz) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        this._m20(dyw + dxz)
            ._m21(dyz - dxw)
            ._m22(z2 - y2 - x2 + w2)
            ._m23(0.0f)
            ._m00(w2 + x2 - z2 - y2)
            ._m01(dxy + dzw)
            ._m02(dxz - dyw)
            ._m03(0.0f)
            ._m10(-dzw + dxy)
            ._m11(y2 - z2 + w2 - x2)
            ._m12(dyz + dxw)
            ._m13(0.0f)
            ._m30(-m00() * ox - m10() * oy - m20() * oz + ox)
            ._m31(-m01() * ox - m11() * oy - m21() * oz + oy)
            ._m32(-m02() * ox - m12() * oy - m22() * oz + oz)
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f rotateLocal(Quaternionfc quat, Matrix4f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float lm00 = w2 + x2 - z2 - y2;
        float lm01 = dxy + dzw;
        float lm02 = dxz - dyw;
        float lm10 = -dzw + dxy;
        float lm11 = y2 - z2 + w2 - x2;
        float lm12 = dyz + dxw;
        float lm20 = dyw + dxz;
        float lm21 = dyz - dxw;
        float lm22 = z2 - y2 - x2 + w2;
        float nm00 = lm00 * m00() + lm10 * m01() + lm20 * m02();
        float nm01 = lm01 * m00() + lm11 * m01() + lm21 * m02();
        float nm02 = lm02 * m00() + lm12 * m01() + lm22 * m02();
        float nm10 = lm00 * m10() + lm10 * m11() + lm20 * m12();
        float nm11 = lm01 * m10() + lm11 * m11() + lm21 * m12();
        float nm12 = lm02 * m10() + lm12 * m11() + lm22 * m12();
        float nm20 = lm00 * m20() + lm10 * m21() + lm20 * m22();
        float nm21 = lm01 * m20() + lm11 * m21() + lm21 * m22();
        float nm22 = lm02 * m20() + lm12 * m21() + lm22 * m22();
        float nm30 = lm00 * m30() + lm10 * m31() + lm20 * m32();
        float nm31 = lm01 * m30() + lm11 * m31() + lm21 * m32();
        float nm32 = lm02 * m30() + lm12 * m31() + lm22 * m32();
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03())
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13())
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23())
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33())
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4f rotateLocal(Quaternionfc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix4f rotateAroundLocal(Quaternionfc quat, float ox, float oy, float oz, Matrix4f dest) {
        float w2 = quat.w() * quat.w();
        float x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y();
        float z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w();
        float xy = quat.x() * quat.y();
        float xz = quat.x() * quat.z();
        float yw = quat.y() * quat.w();
        float yz = quat.y() * quat.z();
        float xw = quat.x() * quat.w();
        float lm00 = w2 + x2 - z2 - y2;
        float lm01 = xy + zw + zw + xy;
        float lm02 = xz - yw + xz - yw;
        float lm10 = -zw + xy - zw + xy;
        float lm11 = y2 - z2 + w2 - x2;
        float lm12 = yz + yz + xw + xw;
        float lm20 = yw + xz + xz + yw;
        float lm21 = yz + yz - xw - xw;
        float lm22 = z2 - y2 - x2 + w2;
        float tm00 = m00() - ox * m03();
        float tm01 = m01() - oy * m03();
        float tm02 = m02() - oz * m03();
        float tm10 = m10() - ox * m13();
        float tm11 = m11() - oy * m13();
        float tm12 = m12() - oz * m13();
        float tm20 = m20() - ox * m23();
        float tm21 = m21() - oy * m23();
        float tm22 = m22() - oz * m23();
        float tm30 = m30() - ox * m33();
        float tm31 = m31() - oy * m33();
        float tm32 = m32() - oz * m33();
        dest._m00(lm00 * tm00 + lm10 * tm01 + lm20 * tm02 + ox * m03())
            ._m01(lm01 * tm00 + lm11 * tm01 + lm21 * tm02 + oy * m03())
            ._m02(lm02 * tm00 + lm12 * tm01 + lm22 * tm02 + oz * m03())
            ._m03(m03())
            ._m10(lm00 * tm10 + lm10 * tm11 + lm20 * tm12 + ox * m13())
            ._m11(lm01 * tm10 + lm11 * tm11 + lm21 * tm12 + oy * m13())
            ._m12(lm02 * tm10 + lm12 * tm11 + lm22 * tm12 + oz * m13())
            ._m13(m13())
            ._m20(lm00 * tm20 + lm10 * tm21 + lm20 * tm22 + ox * m23())
            ._m21(lm01 * tm20 + lm11 * tm21 + lm21 * tm22 + oy * m23())
            ._m22(lm02 * tm20 + lm12 * tm21 + lm22 * tm22 + oz * m23())
            ._m23(m23())
            ._m30(lm00 * tm30 + lm10 * tm31 + lm20 * tm32 + ox * m33())
            ._m31(lm01 * tm30 + lm11 * tm31 + lm21 * tm32 + oy * m33())
            ._m32(lm02 * tm30 + lm12 * tm31 + lm22 * tm32 + oz * m33())
            ._m33(m33())
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f rotateAroundLocal(Quaternionfc quat, float ox, float oy, float oz) {
        return rotateAroundLocal(quat, ox, oy, oz, this);
    }
    public Matrix4f rotate(AxisAngle4f axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix4f rotate(AxisAngle4f axisAngle, Matrix4f dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix4f rotate(float angle, Vector3fc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4f rotate(float angle, Vector3fc axis, Matrix4f dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Vector4f unproject(float winX, float winY, float winZ, int[] viewport, Vector4f dest) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float c = m00() * m13() - m03() * m10();
        float d = m01() * m12() - m02() * m11();
        float e = m01() * m13() - m03() * m11();
        float f = m02() * m13() - m03() * m12();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float i = m20() * m33() - m23() * m30();
        float j = m21() * m32() - m22() * m31();
        float k = m21() * m33() - m23() * m31();
        float l = m22() * m33() - m23() * m32();
        float det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0f / det;
        float im00 = ( m11() * l - m12() * k + m13() * j) * det;
        float im01 = (-m01() * l + m02() * k - m03() * j) * det;
        float im02 = ( m31() * f - m32() * e + m33() * d) * det;
        float im03 = (-m21() * f + m22() * e - m23() * d) * det;
        float im10 = (-m10() * l + m12() * i - m13() * h) * det;
        float im11 = ( m00() * l - m02() * i + m03() * h) * det;
        float im12 = (-m30() * f + m32() * c - m33() * b) * det;
        float im13 = ( m20() * f - m22() * c + m23() * b) * det;
        float im20 = ( m10() * k - m11() * i + m13() * g) * det;
        float im21 = (-m00() * k + m01() * i - m03() * g) * det;
        float im22 = ( m30() * e - m31() * c + m33() * a) * det;
        float im23 = (-m20() * e + m21() * c - m23() * a) * det;
        float im30 = (-m10() * j + m11() * h - m12() * g) * det;
        float im31 = ( m00() * j - m01() * h + m02() * g) * det;
        float im32 = (-m30() * d + m31() * b - m32() * a) * det;
        float im33 = ( m20() * d - m21() * b + m22() * a) * det;
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        float ndcZ = winZ+winZ-1.0f;
        float invW = 1.0f / (im03 * ndcX + im13 * ndcY + im23 * ndcZ + im33);
        return dest.set((im00 * ndcX + im10 * ndcY + im20 * ndcZ + im30) * invW,
                        (im01 * ndcX + im11 * ndcY + im21 * ndcZ + im31) * invW,
                        (im02 * ndcX + im12 * ndcY + im22 * ndcZ + im32) * invW,
                        1.0f);
    }
    public Vector3f unproject(float winX, float winY, float winZ, int[] viewport, Vector3f dest) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float c = m00() * m13() - m03() * m10();
        float d = m01() * m12() - m02() * m11();
        float e = m01() * m13() - m03() * m11();
        float f = m02() * m13() - m03() * m12();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float i = m20() * m33() - m23() * m30();
        float j = m21() * m32() - m22() * m31();
        float k = m21() * m33() - m23() * m31();
        float l = m22() * m33() - m23() * m32();
        float det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0f / det;
        float im00 = ( m11() * l - m12() * k + m13() * j) * det;
        float im01 = (-m01() * l + m02() * k - m03() * j) * det;
        float im02 = ( m31() * f - m32() * e + m33() * d) * det;
        float im03 = (-m21() * f + m22() * e - m23() * d) * det;
        float im10 = (-m10() * l + m12() * i - m13() * h) * det;
        float im11 = ( m00() * l - m02() * i + m03() * h) * det;
        float im12 = (-m30() * f + m32() * c - m33() * b) * det;
        float im13 = ( m20() * f - m22() * c + m23() * b) * det;
        float im20 = ( m10() * k - m11() * i + m13() * g) * det;
        float im21 = (-m00() * k + m01() * i - m03() * g) * det;
        float im22 = ( m30() * e - m31() * c + m33() * a) * det;
        float im23 = (-m20() * e + m21() * c - m23() * a) * det;
        float im30 = (-m10() * j + m11() * h - m12() * g) * det;
        float im31 = ( m00() * j - m01() * h + m02() * g) * det;
        float im32 = (-m30() * d + m31() * b - m32() * a) * det;
        float im33 = ( m20() * d - m21() * b + m22() * a) * det;
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        float ndcZ = winZ+winZ-1.0f;
        float invW = 1.0f / (im03 * ndcX + im13 * ndcY + im23 * ndcZ + im33);
        return dest.set((im00 * ndcX + im10 * ndcY + im20 * ndcZ + im30) * invW,
                        (im01 * ndcX + im11 * ndcY + im21 * ndcZ + im31) * invW,
                        (im02 * ndcX + im12 * ndcY + im22 * ndcZ + im32) * invW);
    }
    public Vector4f unproject(Vector3fc winCoords, int[] viewport, Vector4f dest) {
        return unproject(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Vector3f unproject(Vector3fc winCoords, int[] viewport, Vector3f dest) {
        return unproject(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Matrix4f unprojectRay(float winX, float winY, int[] viewport, Vector3f originDest, Vector3f dirDest) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float c = m00() * m13() - m03() * m10();
        float d = m01() * m12() - m02() * m11();
        float e = m01() * m13() - m03() * m11();
        float f = m02() * m13() - m03() * m12();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float i = m20() * m33() - m23() * m30();
        float j = m21() * m32() - m22() * m31();
        float k = m21() * m33() - m23() * m31();
        float l = m22() * m33() - m23() * m32();
        float det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0f / det;
        float im00 = ( m11() * l - m12() * k + m13() * j) * det;
        float im01 = (-m01() * l + m02() * k - m03() * j) * det;
        float im02 = ( m31() * f - m32() * e + m33() * d) * det;
        float im03 = (-m21() * f + m22() * e - m23() * d) * det;
        float im10 = (-m10() * l + m12() * i - m13() * h) * det;
        float im11 = ( m00() * l - m02() * i + m03() * h) * det;
        float im12 = (-m30() * f + m32() * c - m33() * b) * det;
        float im13 = ( m20() * f - m22() * c + m23() * b) * det;
        float im20 = ( m10() * k - m11() * i + m13() * g) * det;
        float im21 = (-m00() * k + m01() * i - m03() * g) * det;
        float im22 = ( m30() * e - m31() * c + m33() * a) * det;
        float im23 = (-m20() * e + m21() * c - m23() * a) * det;
        float im30 = (-m10() * j + m11() * h - m12() * g) * det;
        float im31 = ( m00() * j - m01() * h + m02() * g) * det;
        float im32 = (-m30() * d + m31() * b - m32() * a) * det;
        float im33 = ( m20() * d - m21() * b + m22() * a) * det;
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        float px = im00 * ndcX + im10 * ndcY + im30;
        float py = im01 * ndcX + im11 * ndcY + im31;
        float pz = im02 * ndcX + im12 * ndcY + im32;
        float invNearW = 1.0f / (im03 * ndcX + im13 * ndcY - im23 + im33);
        float nearX = (px - im20) * invNearW;
        float nearY = (py - im21) * invNearW;
        float nearZ = (pz - im22) * invNearW;
        float invW0 = 1.0f / (im03 * ndcX + im13 * ndcY + im33);
        float x0 = px * invW0;
        float y0 = py * invW0;
        float z0 = pz * invW0;
        originDest.x = nearX; originDest.y = nearY; originDest.z = nearZ;
        dirDest.x = x0 - nearX; dirDest.y = y0 - nearY; dirDest.z = z0 - nearZ;
        return this;
    }
    public Matrix4f unprojectRay(Vector2fc winCoords, int[] viewport, Vector3f originDest, Vector3f dirDest) {
        return unprojectRay(winCoords.x(), winCoords.y(), viewport, originDest, dirDest);
    }
    public Vector4f unprojectInv(Vector3fc winCoords, int[] viewport, Vector4f dest) {
        return unprojectInv(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Vector4f unprojectInv(float winX, float winY, float winZ, int[] viewport, Vector4f dest) {
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        float ndcZ = winZ+winZ-1.0f;
        float invW = 1.0f / (m03() * ndcX + m13() * ndcY + m23() * ndcZ + m33());
        return dest.set((m00() * ndcX + m10() * ndcY + m20() * ndcZ + m30()) * invW,
                        (m01() * ndcX + m11() * ndcY + m21() * ndcZ + m31()) * invW,
                        (m02() * ndcX + m12() * ndcY + m22() * ndcZ + m32()) * invW,
                        1.0f);
    }
    public Matrix4f unprojectInvRay(Vector2fc winCoords, int[] viewport, Vector3f originDest, Vector3f dirDest) {
        return unprojectInvRay(winCoords.x(), winCoords.y(), viewport, originDest, dirDest);
    }
    public Matrix4f unprojectInvRay(float winX, float winY, int[] viewport, Vector3f originDest, Vector3f dirDest) {
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        float px = m00() * ndcX + m10() * ndcY + m30();
        float py = m01() * ndcX + m11() * ndcY + m31();
        float pz = m02() * ndcX + m12() * ndcY + m32();
        float invNearW = 1.0f / (m03() * ndcX + m13() * ndcY - m23() + m33());
        float nearX = (px - m20()) * invNearW;
        float nearY = (py - m21()) * invNearW;
        float nearZ = (pz - m22()) * invNearW;
        float invW0 = 1.0f / (m03() * ndcX + m13() * ndcY + m33());
        float x0 = px * invW0;
        float y0 = py * invW0;
        float z0 = pz * invW0;
        originDest.x = nearX; originDest.y = nearY; originDest.z = nearZ;
        dirDest.x = x0 - nearX; dirDest.y = y0 - nearY; dirDest.z = z0 - nearZ;
        return this;
    }
    public Vector3f unprojectInv(Vector3fc winCoords, int[] viewport, Vector3f dest) {
        return unprojectInv(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Vector3f unprojectInv(float winX, float winY, float winZ, int[] viewport, Vector3f dest) {
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        float ndcZ = winZ+winZ-1.0f;
        float invW = 1.0f / (m03() * ndcX + m13() * ndcY + m23() * ndcZ + m33());
        return dest.set((m00() * ndcX + m10() * ndcY + m20() * ndcZ + m30()) * invW,
                        (m01() * ndcX + m11() * ndcY + m21() * ndcZ + m31()) * invW,
                        (m02() * ndcX + m12() * ndcY + m22() * ndcZ + m32()) * invW);
    }
    public Vector4f project(float x, float y, float z, int[] viewport, Vector4f winCoordsDest) {
        float invW = 1.0f / Math.fma(m03(), x, Math.fma(m13(), y, Math.fma(m23(), z, m33())));
        float nx = Math.fma(m00(), x, Math.fma(m10(), y, Math.fma(m20(), z, m30()))) * invW;
        float ny = Math.fma(m01(), x, Math.fma(m11(), y, Math.fma(m21(), z, m31()))) * invW;
        float nz = Math.fma(m02(), x, Math.fma(m12(), y, Math.fma(m22(), z, m32()))) * invW;
        return winCoordsDest.set(Math.fma(Math.fma(nx, 0.5f, 0.5f), viewport[2], viewport[0]),
                                 Math.fma(Math.fma(ny, 0.5f, 0.5f), viewport[3], viewport[1]),
                                 Math.fma(0.5f, nz, 0.5f),
                                 1.0f);
    }
    public Vector3f project(float x, float y, float z, int[] viewport, Vector3f winCoordsDest) {
        float invW = 1.0f / Math.fma(m03(), x, Math.fma(m13(), y, Math.fma(m23(), z, m33())));
        float nx = Math.fma(m00(), x, Math.fma(m10(), y, Math.fma(m20(), z, m30()))) * invW;
        float ny = Math.fma(m01(), x, Math.fma(m11(), y, Math.fma(m21(), z, m31()))) * invW;
        float nz = Math.fma(m02(), x, Math.fma(m12(), y, Math.fma(m22(), z, m32()))) * invW;
        winCoordsDest.x = Math.fma(Math.fma(nx, 0.5f, 0.5f), viewport[2], viewport[0]);
        winCoordsDest.y = Math.fma(Math.fma(ny, 0.5f, 0.5f), viewport[3], viewport[1]);
        winCoordsDest.z = Math.fma(0.5f, nz, 0.5f);
        return winCoordsDest;
    }
    public Vector4f project(Vector3fc position, int[] viewport, Vector4f winCoordsDest) {
        return project(position.x(), position.y(), position.z(), viewport, winCoordsDest);
    }
    public Vector3f project(Vector3fc position, int[] viewport, Vector3f winCoordsDest) {
        return project(position.x(), position.y(), position.z(), viewport, winCoordsDest);
    }
    public Matrix4f reflect(float a, float b, float c, float d, Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.reflection(a, b, c, d);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return reflectAffine(a, b, c, d, dest);
        return reflectGeneric(a, b, c, d, dest);
    }
    private Matrix4f reflectAffine(float a, float b, float c, float d, Matrix4f dest) {
        float da = a + a, db = b + b, dc = c + c, dd = d + d;
        float rm00 = 1.0f - da * a;
        float rm01 = -da * b;
        float rm02 = -da * c;
        float rm10 = -db * a;
        float rm11 = 1.0f - db * b;
        float rm12 = -db * c;
        float rm20 = -dc * a;
        float rm21 = -dc * b;
        float rm22 = 1.0f - dc * c;
        float rm30 = -dd * a;
        float rm31 = -dd * b;
        float rm32 = -dd * c;
        dest._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30())
            ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31())
            ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32())
            ._m33(m33());
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        dest._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
            ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
            ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
            ._m23(0.0f)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(0.0f)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(0.0f)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    private Matrix4f reflectGeneric(float a, float b, float c, float d, Matrix4f dest) {
        float da = a + a, db = b + b, dc = c + c, dd = d + d;
        float rm00 = 1.0f - da * a;
        float rm01 = -da * b;
        float rm02 = -da * c;
        float rm10 = -db * a;
        float rm11 = 1.0f - db * b;
        float rm12 = -db * c;
        float rm20 = -dc * a;
        float rm21 = -dc * b;
        float rm22 = 1.0f - dc * c;
        float rm30 = -dd * a;
        float rm31 = -dd * b;
        float rm32 = -dd * c;
        dest._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30())
            ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31())
            ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32())
            ._m33(m03() * rm30 + m13() * rm31 + m23() * rm32 + m33());
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm03 = m03() * rm00 + m13() * rm01 + m23() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        float nm13 = m03() * rm10 + m13() * rm11 + m23() * rm12;
        dest._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
            ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
            ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
            ._m23(m03() * rm20 + m13() * rm21 + m23() * rm22)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(nm03)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(nm13)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f reflect(float a, float b, float c, float d) {
        return reflect(a, b, c, d, this);
    }
    public Matrix4f reflect(float nx, float ny, float nz, float px, float py, float pz) {
        return reflect(nx, ny, nz, px, py, pz, this);
    }
    public Matrix4f reflect(float nx, float ny, float nz, float px, float py, float pz, Matrix4f dest) {
        float invLength = Math.invsqrt(nx * nx + ny * ny + nz * nz);
        float nnx = nx * invLength;
        float nny = ny * invLength;
        float nnz = nz * invLength;
        return reflect(nnx, nny, nnz, -nnx * px - nny * py - nnz * pz, dest);
    }
    public Matrix4f reflect(Vector3fc normal, Vector3fc point) {
        return reflect(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z());
    }
    public Matrix4f reflect(Quaternionfc orientation, Vector3fc point) {
        return reflect(orientation, point, this);
    }
    public Matrix4f reflect(Quaternionfc orientation, Vector3fc point, Matrix4f dest) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        float normalX = (float) (orientation.x() * num3 + orientation.w() * num2);
        float normalY = (float) (orientation.y() * num3 - orientation.w() * num1);
        float normalZ = (float) (1.0 - (orientation.x() * num1 + orientation.y() * num2));
        return reflect(normalX, normalY, normalZ, point.x(), point.y(), point.z(), dest);
    }
    public Matrix4f reflect(Vector3fc normal, Vector3fc point, Matrix4f dest) {
        return reflect(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z(), dest);
    }
    public Matrix4f reflection(float a, float b, float c, float d) {
        float da = a + a, db = b + b, dc = c + c, dd = d + d;
        this._m00(1.0f - da * a)
            ._m01(-da * b)
            ._m02(-da * c)
            ._m03(0.0f)
            ._m10(-db * a)
            ._m11(1.0f - db * b)
            ._m12(-db * c)
            ._m13(0.0f)
            ._m20(-dc * a)
            ._m21(-dc * b)
            ._m22(1.0f - dc * c)
            ._m23(0.0f)
            ._m30(-dd * a)
            ._m31(-dd * b)
            ._m32(-dd * c)
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f reflection(float nx, float ny, float nz, float px, float py, float pz) {
        float invLength = Math.invsqrt(nx * nx + ny * ny + nz * nz);
        float nnx = nx * invLength;
        float nny = ny * invLength;
        float nnz = nz * invLength;
        return reflection(nnx, nny, nnz, -nnx * px - nny * py - nnz * pz);
    }
    public Matrix4f reflection(Vector3fc normal, Vector3fc point) {
        return reflection(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z());
    }
    public Matrix4f reflection(Quaternionfc orientation, Vector3fc point) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        float normalX = (float) (orientation.x() * num3 + orientation.w() * num2);
        float normalY = (float) (orientation.y() * num3 - orientation.w() * num1);
        float normalZ = (float) (1.0 - (orientation.x() * num1 + orientation.y() * num2));
        return reflection(normalX, normalY, normalZ, point.x(), point.y(), point.z());
    }
    public Vector4f getRow(int row, Vector4f dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            return dest.set(m00(), m10(), m20(), m30());
        case 1:
            return dest.set(m01(), m11(), m21(), m31());
        case 2:
            return dest.set(m02(), m12(), m22(), m32());
        case 3:
            return dest.set(m03(), m13(), m23(), m33());
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Vector3f getRow(int row, Vector3f dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            return dest.set(m00(), m10(), m20());
        case 1:
            return dest.set(m01(), m11(), m21());
        case 2:
            return dest.set(m02(), m12(), m22());
        case 3:
            return dest.set(m03(), m13(), m23());
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Matrix4f setRow(int row, Vector4fc src) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            return _m00(src.x())._m10(src.y())._m20(src.z())._m30(src.w())._properties(PROPERTY_UNKNOWN);
        case 1:
            return _m01(src.x())._m11(src.y())._m21(src.z())._m31(src.w())._properties(PROPERTY_UNKNOWN);
        case 2:
            return _m02(src.x())._m12(src.y())._m22(src.z())._m32(src.w())._properties(PROPERTY_UNKNOWN);
        case 3:
            return _m03(src.x())._m13(src.y())._m23(src.z())._m33(src.w())._properties(PROPERTY_UNKNOWN);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Vector4f getColumn(int column, Vector4f dest) throws IndexOutOfBoundsException {
        return MemUtil.INSTANCE.getColumn(this, column, dest);
    }
    public Vector3f getColumn(int column, Vector3f dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            return dest.set(m00(), m01(), m02());
        case 1:
            return dest.set(m10(), m11(), m12());
        case 2:
            return dest.set(m20(), m21(), m22());
        case 3:
            return dest.set(m30(), m31(), m32());
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Matrix4f setColumn(int column, Vector4fc src) throws IndexOutOfBoundsException {
        if (src instanceof Vector4f)
            return MemUtil.INSTANCE.setColumn((Vector4f) src, column, this)._properties(PROPERTY_UNKNOWN);
        return MemUtil.INSTANCE.setColumn(src, column, this)._properties(PROPERTY_UNKNOWN);
    }
    public float get(int column, int row) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix4f set(int column, int row, float value) {
        return MemUtil.INSTANCE.set(this, column, row, value)._properties(PROPERTY_UNKNOWN);
    }
    public float getRowColumn(int row, int column) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix4f setRowColumn(int row, int column, float value) {
        return MemUtil.INSTANCE.set(this, column, row, value)._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4f normal() {
        return normal(this);
    }
    public Matrix4f normal(Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalOrthonormal(dest);
        return normalGeneric(dest);
    }
    private Matrix4f normalOrthonormal(Matrix4f dest) {
        dest.set(this);
        return dest._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    private Matrix4f normalGeneric(Matrix4f dest) {
        float m00m11 = m00() * m11();
        float m01m10 = m01() * m10();
        float m02m10 = m02() * m10();
        float m00m12 = m00() * m12();
        float m01m12 = m01() * m12();
        float m02m11 = m02() * m11();
        float det = (m00m11 - m01m10) * m22() + (m02m10 - m00m12) * m21() + (m01m12 - m02m11) * m20();
        float s = 1.0f / det;
        float nm00 = (m11() * m22() - m21() * m12()) * s;
        float nm01 = (m20() * m12() - m10() * m22()) * s;
        float nm02 = (m10() * m21() - m20() * m11()) * s;
        float nm10 = (m21() * m02() - m01() * m22()) * s;
        float nm11 = (m00() * m22() - m20() * m02()) * s;
        float nm12 = (m20() * m01() - m00() * m21()) * s;
        float nm20 = (m01m12 - m02m11) * s;
        float nm21 = (m02m10 - m00m12) * s;
        float nm22 = (m00m11 - m01m10) * s;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0f)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f)
        ._properties((properties | PROPERTY_AFFINE) & ~(PROPERTY_TRANSLATION | PROPERTY_PERSPECTIVE));
    }
    public Matrix3f normal(Matrix3f dest) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalOrthonormal(dest);
        return normalGeneric(dest);
    }
    private Matrix3f normalOrthonormal(Matrix3f dest) {
        dest.set(this);
        return dest;
    }
    private Matrix3f normalGeneric(Matrix3f dest) {
        float det = (m00() * m11() - (m01() * m10())) * m22()
                  + (m02() * m10() - (m00() * m12())) * m21()
                  + (m01() * m12() - (m02() * m11())) * m20();
        float s = 1.0f / det;
        return dest._m00((m11() * m22() - m21() * m12()) * s)
                   ._m01((m20() * m12() - m10() * m22()) * s)
                   ._m02((m10() * m21() - m20() * m11()) * s)
                   ._m10((m21() * m02() - m01() * m22()) * s)
                   ._m11((m00() * m22() - m20() * m02()) * s)
                   ._m12((m20() * m01() - m00() * m21()) * s)
                   ._m20((m01() * m12() - m02() * m11()) * s)
                   ._m21((m02() * m10() - m00() * m12()) * s)
                   ._m22((m00() * m11() - m01() * m10()) * s);
    }
    public Matrix4f cofactor3x3() {
        return cofactor3x3(this);
    }
    public Matrix3f cofactor3x3(Matrix3f dest) {
        return dest._m00(m11() * m22() - m21() * m12())
                   ._m01(m20() * m12() - m10() * m22())
                   ._m02(m10() * m21() - m20() * m11())
                   ._m10(m21() * m02() - m01() * m22())
                   ._m11(m00() * m22() - m20() * m02())
                   ._m12(m20() * m01() - m00() * m21())
                   ._m20(m01() * m12() - m02() * m11())
                   ._m21(m02() * m10() - m00() * m12())
                   ._m22(m00() * m11() - m01() * m10());
    }
    public Matrix4f cofactor3x3(Matrix4f dest) {
        float nm10 = m21() * m02() - m01() * m22();
        float nm11 = m00() * m22() - m20() * m02();
        float nm12 = m20() * m01() - m00() * m21();
        float nm20 = m01() * m12() - m11() * m02();
        float nm21 = m02() * m10() - m12() * m00();
        float nm22 = m00() * m11() - m10() * m01();
        return dest
        ._m00(m11() * m22() - m21() * m12())
        ._m01(m20() * m12() - m10() * m22())
        ._m02(m10() * m21() - m20() * m11())
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0f)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0f)
        ._m30(0.0f)
        ._m31(0.0f)
        ._m32(0.0f)
        ._m33(1.0f)
        ._properties((properties | PROPERTY_AFFINE) & ~(PROPERTY_TRANSLATION | PROPERTY_PERSPECTIVE));
    }
    public Matrix4f normalize3x3() {
        return normalize3x3(this);
    }
    public Matrix4f normalize3x3(Matrix4f dest) {
        float invXlen = Math.invsqrt(m00() * m00() + m01() * m01() + m02() * m02());
        float invYlen = Math.invsqrt(m10() * m10() + m11() * m11() + m12() * m12());
        float invZlen = Math.invsqrt(m20() * m20() + m21() * m21() + m22() * m22());
        return dest
        ._m00(m00() * invXlen)._m01(m01() * invXlen)._m02(m02() * invXlen)
        ._m10(m10() * invYlen)._m11(m11() * invYlen)._m12(m12() * invYlen)
        ._m20(m20() * invZlen)._m21(m21() * invZlen)._m22(m22() * invZlen)
        ._m30(m30())._m31(m31())._m32(m32())._m33(m33())
        ._properties(properties);
    }
    public Matrix3f normalize3x3(Matrix3f dest) {
        float invXlen = Math.invsqrt(m00() * m00() + m01() * m01() + m02() * m02());
        float invYlen = Math.invsqrt(m10() * m10() + m11() * m11() + m12() * m12());
        float invZlen = Math.invsqrt(m20() * m20() + m21() * m21() + m22() * m22());
        return dest
        ._m00(m00() * invXlen)._m01(m01() * invXlen)._m02(m02() * invXlen)
        ._m10(m10() * invYlen)._m11(m11() * invYlen)._m12(m12() * invYlen)
        ._m20(m20() * invZlen)._m21(m21() * invZlen)._m22(m22() * invZlen);
    }
    public Vector4f frustumPlane(int plane, Vector4f dest) {
        switch (plane) {
        case PLANE_NX:
            dest.set(m03() + m00(), m13() + m10(), m23() + m20(), m33() + m30()).normalize3();
            break;
        case PLANE_PX:
            dest.set(m03() - m00(), m13() - m10(), m23() - m20(), m33() - m30()).normalize3();
            break;
        case PLANE_NY:
            dest.set(m03() + m01(), m13() + m11(), m23() + m21(), m33() + m31()).normalize3();
            break;
        case PLANE_PY:
            dest.set(m03() - m01(), m13() - m11(), m23() - m21(), m33() - m31()).normalize3();
            break;
        case PLANE_NZ:
            dest.set(m03() + m02(), m13() + m12(), m23() + m22(), m33() + m32()).normalize3();
            break;
        case PLANE_PZ:
            dest.set(m03() - m02(), m13() - m12(), m23() - m22(), m33() - m32()).normalize3();
            break;
        default:
            throw new IllegalArgumentException("dest"); 
        }
        return dest;
    }
    public Vector3f frustumCorner(int corner, Vector3f point) {
        float d1, d2, d3;
        float n1x, n1y, n1z, n2x, n2y, n2z, n3x, n3y, n3z;
        switch (corner) {
        case CORNER_NXNYNZ: 
            n1x = m03() + m00(); n1y = m13() + m10(); n1z = m23() + m20(); d1 = m33() + m30(); 
            n2x = m03() + m01(); n2y = m13() + m11(); n2z = m23() + m21(); d2 = m33() + m31(); 
            n3x = m03() + m02(); n3y = m13() + m12(); n3z = m23() + m22(); d3 = m33() + m32(); 
            break;
        case CORNER_PXNYNZ: 
            n1x = m03() - m00(); n1y = m13() - m10(); n1z = m23() - m20(); d1 = m33() - m30(); 
            n2x = m03() + m01(); n2y = m13() + m11(); n2z = m23() + m21(); d2 = m33() + m31(); 
            n3x = m03() + m02(); n3y = m13() + m12(); n3z = m23() + m22(); d3 = m33() + m32(); 
            break;
        case CORNER_PXPYNZ: 
            n1x = m03() - m00(); n1y = m13() - m10(); n1z = m23() - m20(); d1 = m33() - m30(); 
            n2x = m03() - m01(); n2y = m13() - m11(); n2z = m23() - m21(); d2 = m33() - m31(); 
            n3x = m03() + m02(); n3y = m13() + m12(); n3z = m23() + m22(); d3 = m33() + m32(); 
            break;
        case CORNER_NXPYNZ: 
            n1x = m03() + m00(); n1y = m13() + m10(); n1z = m23() + m20(); d1 = m33() + m30(); 
            n2x = m03() - m01(); n2y = m13() - m11(); n2z = m23() - m21(); d2 = m33() - m31(); 
            n3x = m03() + m02(); n3y = m13() + m12(); n3z = m23() + m22(); d3 = m33() + m32(); 
            break;
        case CORNER_PXNYPZ: 
            n1x = m03() - m00(); n1y = m13() - m10(); n1z = m23() - m20(); d1 = m33() - m30(); 
            n2x = m03() + m01(); n2y = m13() + m11(); n2z = m23() + m21(); d2 = m33() + m31(); 
            n3x = m03() - m02(); n3y = m13() - m12(); n3z = m23() - m22(); d3 = m33() - m32(); 
            break;
        case CORNER_NXNYPZ: 
            n1x = m03() + m00(); n1y = m13() + m10(); n1z = m23() + m20(); d1 = m33() + m30(); 
            n2x = m03() + m01(); n2y = m13() + m11(); n2z = m23() + m21(); d2 = m33() + m31(); 
            n3x = m03() - m02(); n3y = m13() - m12(); n3z = m23() - m22(); d3 = m33() - m32(); 
            break;
        case CORNER_NXPYPZ: 
            n1x = m03() + m00(); n1y = m13() + m10(); n1z = m23() + m20(); d1 = m33() + m30(); 
            n2x = m03() - m01(); n2y = m13() - m11(); n2z = m23() - m21(); d2 = m33() - m31(); 
            n3x = m03() - m02(); n3y = m13() - m12(); n3z = m23() - m22(); d3 = m33() - m32(); 
            break;
        case CORNER_PXPYPZ: 
            n1x = m03() - m00(); n1y = m13() - m10(); n1z = m23() - m20(); d1 = m33() - m30(); 
            n2x = m03() - m01(); n2y = m13() - m11(); n2z = m23() - m21(); d2 = m33() - m31(); 
            n3x = m03() - m02(); n3y = m13() - m12(); n3z = m23() - m22(); d3 = m33() - m32(); 
            break;
        default:
            throw new IllegalArgumentException("corner"); 
        }
        float c23x, c23y, c23z;
        c23x = n2y * n3z - n2z * n3y;
        c23y = n2z * n3x - n2x * n3z;
        c23z = n2x * n3y - n2y * n3x;
        float c31x, c31y, c31z;
        c31x = n3y * n1z - n3z * n1y;
        c31y = n3z * n1x - n3x * n1z;
        c31z = n3x * n1y - n3y * n1x;
        float c12x, c12y, c12z;
        c12x = n1y * n2z - n1z * n2y;
        c12y = n1z * n2x - n1x * n2z;
        c12z = n1x * n2y - n1y * n2x;
        float invDot = 1.0f / (n1x * c23x + n1y * c23y + n1z * c23z);
        point.x = (-c23x * d1 - c31x * d2 - c12x * d3) * invDot;
        point.y = (-c23y * d1 - c31y * d2 - c12y * d3) * invDot;
        point.z = (-c23z * d1 - c31z * d2 - c12z * d3) * invDot;
        return point;
    }
    public Vector3f perspectiveOrigin(Vector3f origin) {
        float d1, d2, d3;
        float n1x, n1y, n1z, n2x, n2y, n2z, n3x, n3y, n3z;
        n1x = m03() + m00(); n1y = m13() + m10(); n1z = m23() + m20(); d1 = m33() + m30(); 
        n2x = m03() - m00(); n2y = m13() - m10(); n2z = m23() - m20(); d2 = m33() - m30(); 
        n3x = m03() - m01(); n3y = m13() - m11(); n3z = m23() - m21(); d3 = m33() - m31(); 
        float c23x, c23y, c23z;
        c23x = n2y * n3z - n2z * n3y;
        c23y = n2z * n3x - n2x * n3z;
        c23z = n2x * n3y - n2y * n3x;
        float c31x, c31y, c31z;
        c31x = n3y * n1z - n3z * n1y;
        c31y = n3z * n1x - n3x * n1z;
        c31z = n3x * n1y - n3y * n1x;
        float c12x, c12y, c12z;
        c12x = n1y * n2z - n1z * n2y;
        c12y = n1z * n2x - n1x * n2z;
        c12z = n1x * n2y - n1y * n2x;
        float invDot = 1.0f / (n1x * c23x + n1y * c23y + n1z * c23z);
        origin.x = (-c23x * d1 - c31x * d2 - c12x * d3) * invDot;
        origin.y = (-c23y * d1 - c31y * d2 - c12y * d3) * invDot;
        origin.z = (-c23z * d1 - c31z * d2 - c12z * d3) * invDot;
        return origin;
    }
    public Vector3f perspectiveInvOrigin(Vector3f dest) {
        float invW = 1.0f / m23();
        dest.x = m20() * invW;
        dest.y = m21() * invW;
        dest.z = m22() * invW;
        return dest;
    }
    public float perspectiveFov() {
        float n1x, n1y, n1z, n2x, n2y, n2z;
        n1x = m03() + m01(); n1y = m13() + m11(); n1z = m23() + m21(); 
        n2x = m01() - m03(); n2y = m11() - m13(); n2z = m21() - m23(); 
        float n1len = Math.sqrt(n1x * n1x + n1y * n1y + n1z * n1z);
        float n2len = Math.sqrt(n2x * n2x + n2y * n2y + n2z * n2z);
        return Math.acos((n1x * n2x + n1y * n2y + n1z * n2z) / (n1len * n2len));
    }
    public float perspectiveNear() {
        return m32() / (m23() + m22());
    }
    public float perspectiveFar() {
        return m32() / (m22() - m23());
    }
    public Vector3f frustumRayDir(float x, float y, Vector3f dir) {
        float a = m10() * m23(), b = m13() * m21(), c = m10() * m21(), d = m11() * m23(), e = m13() * m20(), f = m11() * m20();
        float g = m03() * m20(), h = m01() * m23(), i = m01() * m20(), j = m03() * m21(), k = m00() * m23(), l = m00() * m21();
        float m = m00() * m13(), n = m03() * m11(), o = m00() * m11(), p = m01() * m13(), q = m03() * m10(), r = m01() * m10();
        float m1x, m1y, m1z;
        m1x = (d + e + f - a - b - c) * (1.0f - y) + (a - b - c + d - e + f) * y;
        m1y = (j + k + l - g - h - i) * (1.0f - y) + (g - h - i + j - k + l) * y;
        m1z = (p + q + r - m - n - o) * (1.0f - y) + (m - n - o + p - q + r) * y;
        float m2x, m2y, m2z;
        m2x = (b - c - d + e + f - a) * (1.0f - y) + (a + b - c - d - e + f) * y;
        m2y = (h - i - j + k + l - g) * (1.0f - y) + (g + h - i - j - k + l) * y;
        m2z = (n - o - p + q + r - m) * (1.0f - y) + (m + n - o - p - q + r) * y;
        dir.x = m1x + (m2x - m1x) * x;
        dir.y = m1y + (m2y - m1y) * x;
        dir.z = m1z + (m2z - m1z) * x;
        return dir.normalize(dir);
    }
    public Vector3f positiveZ(Vector3f dir) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalizedPositiveZ(dir);
        return positiveZGeneric(dir);
    }
    private Vector3f positiveZGeneric(Vector3f dir) {
        return dir.set(m10() * m21() - m11() * m20(), m20() * m01() - m21() * m00(), m00() * m11() - m01() * m10()).normalize();
    }
    public Vector3f normalizedPositiveZ(Vector3f dir) {
        return dir.set(m02(), m12(), m22());
    }
    public Vector3f positiveX(Vector3f dir) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalizedPositiveX(dir);
        return positiveXGeneric(dir);
    }
    private Vector3f positiveXGeneric(Vector3f dir) {
        return dir.set(m11() * m22() - m12() * m21(), m02() * m21() - m01() * m22(), m01() * m12() - m02() * m11()).normalize();
    }
    public Vector3f normalizedPositiveX(Vector3f dir) {
        return dir.set(m00(), m10(), m20());
    }
    public Vector3f positiveY(Vector3f dir) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalizedPositiveY(dir);
        return positiveYGeneric(dir);
    }
    private Vector3f positiveYGeneric(Vector3f dir) {
        return dir.set(m12() * m20() - m10() * m22(), m00() * m22() - m02() * m20(), m02() * m10() - m00() * m12()).normalize();
    }
    public Vector3f normalizedPositiveY(Vector3f dir) {
        return dir.set(m01(), m11(), m21());
    }
    public Vector3f originAffine(Vector3f origin) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float d = m01() * m12() - m02() * m11();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float j = m21() * m32() - m22() * m31();
        return origin.set(-m10() * j + m11() * h - m12() * g, m00() * j - m01() * h + m02() * g, -m30() * d + m31() * b - m32() * a);
    }
    public Vector3f origin(Vector3f dest) {
        if ((properties & PROPERTY_AFFINE) != 0)
            return originAffine(dest);
        return originGeneric(dest);
    }
    private Vector3f originGeneric(Vector3f dest) {
        float a = m00() * m11() - m01() * m10();
        float b = m00() * m12() - m02() * m10();
        float c = m00() * m13() - m03() * m10();
        float d = m01() * m12() - m02() * m11();
        float e = m01() * m13() - m03() * m11();
        float f = m02() * m13() - m03() * m12();
        float g = m20() * m31() - m21() * m30();
        float h = m20() * m32() - m22() * m30();
        float i = m20() * m33() - m23() * m30();
        float j = m21() * m32() - m22() * m31();
        float k = m21() * m33() - m23() * m31();
        float l = m22() * m33() - m23() * m32();
        float det = a * l - b * k + c * j + d * i - e * h + f * g;
        float invDet = 1.0f / det;
        float nm30 = (-m10() * j + m11() * h - m12() * g) * invDet;
        float nm31 = ( m00() * j - m01() * h + m02() * g) * invDet;
        float nm32 = (-m30() * d + m31() * b - m32() * a) * invDet;
        float nm33 = det / ( m20() * d - m21() * b + m22() * a);
        return dest.set(nm30 * nm33, nm31 * nm33, nm32 * nm33);
    }
    public Matrix4f shadow(Vector4f light, float a, float b, float c, float d) {
        return shadow(light.x, light.y, light.z, light.w, a, b, c, d, this);
    }
    public Matrix4f shadow(Vector4f light, float a, float b, float c, float d, Matrix4f dest) {
        return shadow(light.x, light.y, light.z, light.w, a, b, c, d, dest);
    }
    public Matrix4f shadow(float lightX, float lightY, float lightZ, float lightW, float a, float b, float c, float d) {
        return shadow(lightX, lightY, lightZ, lightW, a, b, c, d, this);
    }
    public Matrix4f shadow(float lightX, float lightY, float lightZ, float lightW, float a, float b, float c, float d, Matrix4f dest) {
        float invPlaneLen = Math.invsqrt(a*a + b*b + c*c);
        float an = a * invPlaneLen;
        float bn = b * invPlaneLen;
        float cn = c * invPlaneLen;
        float dn = d * invPlaneLen;
        float dot = an * lightX + bn * lightY + cn * lightZ + dn * lightW;
        float rm00 = dot - an * lightX;
        float rm01 = -an * lightY;
        float rm02 = -an * lightZ;
        float rm03 = -an * lightW;
        float rm10 = -bn * lightX;
        float rm11 = dot - bn * lightY;
        float rm12 = -bn * lightZ;
        float rm13 = -bn * lightW;
        float rm20 = -cn * lightX;
        float rm21 = -cn * lightY;
        float rm22 = dot - cn * lightZ;
        float rm23 = -cn * lightW;
        float rm30 = -dn * lightX;
        float rm31 = -dn * lightY;
        float rm32 = -dn * lightZ;
        float rm33 = dot - dn * lightW;
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02 + m30() * rm03;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02 + m31() * rm03;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02 + m32() * rm03;
        float nm03 = m03() * rm00 + m13() * rm01 + m23() * rm02 + m33() * rm03;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12 + m30() * rm13;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12 + m31() * rm13;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12 + m32() * rm13;
        float nm13 = m03() * rm10 + m13() * rm11 + m23() * rm12 + m33() * rm13;
        float nm20 = m00() * rm20 + m10() * rm21 + m20() * rm22 + m30() * rm23;
        float nm21 = m01() * rm20 + m11() * rm21 + m21() * rm22 + m31() * rm23;
        float nm22 = m02() * rm20 + m12() * rm21 + m22() * rm22 + m32() * rm23;
        float nm23 = m03() * rm20 + m13() * rm21 + m23() * rm22 + m33() * rm23;
        dest._m30(m00() * rm30 + m10() * rm31 + m20() * rm32 + m30() * rm33)
            ._m31(m01() * rm30 + m11() * rm31 + m21() * rm32 + m31() * rm33)
            ._m32(m02() * rm30 + m12() * rm31 + m22() * rm32 + m32() * rm33)
            ._m33(m03() * rm30 + m13() * rm31 + m23() * rm32 + m33() * rm33)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(nm03)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(nm13)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f shadow(Vector4f light, Matrix4fc planeTransform, Matrix4f dest) {
        float a = planeTransform.m10();
        float b = planeTransform.m11();
        float c = planeTransform.m12();
        float d = -a * planeTransform.m30() - b * planeTransform.m31() - c * planeTransform.m32();
        return shadow(light.x, light.y, light.z, light.w, a, b, c, d, dest);
    }
    public Matrix4f shadow(Vector4f light, Matrix4f planeTransform) {
        return shadow(light, planeTransform, this);
    }
    public Matrix4f shadow(float lightX, float lightY, float lightZ, float lightW, Matrix4fc planeTransform, Matrix4f dest) {
        float a = planeTransform.m10();
        float b = planeTransform.m11();
        float c = planeTransform.m12();
        float d = -a * planeTransform.m30() - b * planeTransform.m31() - c * planeTransform.m32();
        return shadow(lightX, lightY, lightZ, lightW, a, b, c, d, dest);
    }
    public Matrix4f shadow(float lightX, float lightY, float lightZ, float lightW, Matrix4f planeTransform) {
        return shadow(lightX, lightY, lightZ, lightW, planeTransform, this);
    }
    public Matrix4f billboardCylindrical(Vector3fc objPos, Vector3fc targetPos, Vector3fc up) {
        float dirX = targetPos.x() - objPos.x();
        float dirY = targetPos.y() - objPos.y();
        float dirZ = targetPos.z() - objPos.z();
        float leftX = up.y() * dirZ - up.z() * dirY;
        float leftY = up.z() * dirX - up.x() * dirZ;
        float leftZ = up.x() * dirY - up.y() * dirX;
        float invLeftLen = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLen;
        leftY *= invLeftLen;
        leftZ *= invLeftLen;
        dirX = leftY * up.z() - leftZ * up.y();
        dirY = leftZ * up.x() - leftX * up.z();
        dirZ = leftX * up.y() - leftY * up.x();
        float invDirLen = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLen;
        dirY *= invDirLen;
        dirZ *= invDirLen;
        this._m00(leftX)
            ._m01(leftY)
            ._m02(leftZ)
            ._m03(0.0f)
            ._m10(up.x())
            ._m11(up.y())
            ._m12(up.z())
            ._m13(0.0f)
            ._m20(dirX)
            ._m21(dirY)
            ._m22(dirZ)
            ._m23(0.0f)
            ._m30(objPos.x())
            ._m31(objPos.y())
            ._m32(objPos.z())
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f billboardSpherical(Vector3fc objPos, Vector3fc targetPos, Vector3fc up) {
        float dirX = targetPos.x() - objPos.x();
        float dirY = targetPos.y() - objPos.y();
        float dirZ = targetPos.z() - objPos.z();
        float invDirLen = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLen;
        dirY *= invDirLen;
        dirZ *= invDirLen;
        float leftX = up.y() * dirZ - up.z() * dirY;
        float leftY = up.z() * dirX - up.x() * dirZ;
        float leftZ = up.x() * dirY - up.y() * dirX;
        float invLeftLen = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLen;
        leftY *= invLeftLen;
        leftZ *= invLeftLen;
        float upX = dirY * leftZ - dirZ * leftY;
        float upY = dirZ * leftX - dirX * leftZ;
        float upZ = dirX * leftY - dirY * leftX;
        this._m00(leftX)
            ._m01(leftY)
            ._m02(leftZ)
            ._m03(0.0f)
            ._m10(upX)
            ._m11(upY)
            ._m12(upZ)
            ._m13(0.0f)
            ._m20(dirX)
            ._m21(dirY)
            ._m22(dirZ)
            ._m23(0.0f)
            ._m30(objPos.x())
            ._m31(objPos.y())
            ._m32(objPos.z())
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f billboardSpherical(Vector3fc objPos, Vector3fc targetPos) {
        float toDirX = targetPos.x() - objPos.x();
        float toDirY = targetPos.y() - objPos.y();
        float toDirZ = targetPos.z() - objPos.z();
        float x = -toDirY;
        float y = toDirX;
        float w = Math.sqrt(toDirX * toDirX + toDirY * toDirY + toDirZ * toDirZ) + toDirZ;
        float invNorm = Math.invsqrt(x * x + y * y + w * w);
        x *= invNorm;
        y *= invNorm;
        w *= invNorm;
        float q00 = (x + x) * x;
        float q11 = (y + y) * y;
        float q01 = (x + x) * y;
        float q03 = (x + x) * w;
        float q13 = (y + y) * w;
        this._m00(1.0f - q11)
            ._m01(q01)
            ._m02(-q13)
            ._m03(0.0f)
            ._m10(q01)
            ._m11(1.0f - q00)
            ._m12(q03)
            ._m13(0.0f)
            ._m20(q13)
            ._m21(-q03)
            ._m22(1.0f - q11 - q00)
            ._m23(0.0f)
            ._m30(objPos.x())
            ._m31(objPos.y())
            ._m32(objPos.z())
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(m00());
        result = prime * result + Float.floatToIntBits(m01());
        result = prime * result + Float.floatToIntBits(m02());
        result = prime * result + Float.floatToIntBits(m03());
        result = prime * result + Float.floatToIntBits(m10());
        result = prime * result + Float.floatToIntBits(m11());
        result = prime * result + Float.floatToIntBits(m12());
        result = prime * result + Float.floatToIntBits(m13());
        result = prime * result + Float.floatToIntBits(m20());
        result = prime * result + Float.floatToIntBits(m21());
        result = prime * result + Float.floatToIntBits(m22());
        result = prime * result + Float.floatToIntBits(m23());
        result = prime * result + Float.floatToIntBits(m30());
        result = prime * result + Float.floatToIntBits(m31());
        result = prime * result + Float.floatToIntBits(m32());
        result = prime * result + Float.floatToIntBits(m33());
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix4f))
            return false;
        Matrix4fc other = (Matrix4fc) obj;
        if (Float.floatToIntBits(m00()) != Float.floatToIntBits(other.m00()))
            return false;
        if (Float.floatToIntBits(m01()) != Float.floatToIntBits(other.m01()))
            return false;
        if (Float.floatToIntBits(m02()) != Float.floatToIntBits(other.m02()))
            return false;
        if (Float.floatToIntBits(m03()) != Float.floatToIntBits(other.m03()))
            return false;
        if (Float.floatToIntBits(m10()) != Float.floatToIntBits(other.m10()))
            return false;
        if (Float.floatToIntBits(m11()) != Float.floatToIntBits(other.m11()))
            return false;
        if (Float.floatToIntBits(m12()) != Float.floatToIntBits(other.m12()))
            return false;
        if (Float.floatToIntBits(m13()) != Float.floatToIntBits(other.m13()))
            return false;
        if (Float.floatToIntBits(m20()) != Float.floatToIntBits(other.m20()))
            return false;
        if (Float.floatToIntBits(m21()) != Float.floatToIntBits(other.m21()))
            return false;
        if (Float.floatToIntBits(m22()) != Float.floatToIntBits(other.m22()))
            return false;
        if (Float.floatToIntBits(m23()) != Float.floatToIntBits(other.m23()))
            return false;
        if (Float.floatToIntBits(m30()) != Float.floatToIntBits(other.m30()))
            return false;
        if (Float.floatToIntBits(m31()) != Float.floatToIntBits(other.m31()))
            return false;
        if (Float.floatToIntBits(m32()) != Float.floatToIntBits(other.m32()))
            return false;
        if (Float.floatToIntBits(m33()) != Float.floatToIntBits(other.m33()))
            return false;
        return true;
    }
    public boolean equals(Matrix4fc m, float delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00(), m.m00(), delta))
            return false;
        if (!Runtime.equals(m01(), m.m01(), delta))
            return false;
        if (!Runtime.equals(m02(), m.m02(), delta))
            return false;
        if (!Runtime.equals(m03(), m.m03(), delta))
            return false;
        if (!Runtime.equals(m10(), m.m10(), delta))
            return false;
        if (!Runtime.equals(m11(), m.m11(), delta))
            return false;
        if (!Runtime.equals(m12(), m.m12(), delta))
            return false;
        if (!Runtime.equals(m13(), m.m13(), delta))
            return false;
        if (!Runtime.equals(m20(), m.m20(), delta))
            return false;
        if (!Runtime.equals(m21(), m.m21(), delta))
            return false;
        if (!Runtime.equals(m22(), m.m22(), delta))
            return false;
        if (!Runtime.equals(m23(), m.m23(), delta))
            return false;
        if (!Runtime.equals(m30(), m.m30(), delta))
            return false;
        if (!Runtime.equals(m31(), m.m31(), delta))
            return false;
        if (!Runtime.equals(m32(), m.m32(), delta))
            return false;
        if (!Runtime.equals(m33(), m.m33(), delta))
            return false;
        return true;
    }
    public Matrix4f pick(float x, float y, float width, float height, int[] viewport, Matrix4f dest) {
        float sx = viewport[2] / width;
        float sy = viewport[3] / height;
        float tx = (viewport[2] + 2.0f * (viewport[0] - x)) / width;
        float ty = (viewport[3] + 2.0f * (viewport[1] - y)) / height;
        dest._m30(m00() * tx + m10() * ty + m30())
            ._m31(m01() * tx + m11() * ty + m31())
            ._m32(m02() * tx + m12() * ty + m32())
            ._m33(m03() * tx + m13() * ty + m33())
            ._m00(m00() * sx)
            ._m01(m01() * sx)
            ._m02(m02() * sx)
            ._m03(m03() * sx)
            ._m10(m10() * sy)
            ._m11(m11() * sy)
            ._m12(m12() * sy)
            ._m13(m13() * sy)
            ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4f pick(float x, float y, float width, float height, int[] viewport) {
        return pick(x, y, width, height, viewport, this);
    }
    public boolean isAffine() {
        return m03() == 0.0f && m13() == 0.0f && m23() == 0.0f && m33() == 1.0f;
    }
    public Matrix4f swap(Matrix4f other) {
        MemUtil.INSTANCE.swap(this, other);
        int props = properties;
        this.properties = other.properties();
        other.properties = props;
        return this;
    }
    public Matrix4f arcball(float radius, float centerX, float centerY, float centerZ, float angleX, float angleY, Matrix4f dest) {
        float m30 = m20() * -radius + this.m30();
        float m31 = m21() * -radius + this.m31();
        float m32 = m22() * -radius + this.m32();
        float m33 = m23() * -radius + this.m33();
        float sin = Math.sin(angleX);
        float cos = Math.cosFromSin(sin, angleX);
        float nm10 = m10() * cos + m20() * sin;
        float nm11 = m11() * cos + m21() * sin;
        float nm12 = m12() * cos + m22() * sin;
        float nm13 = m13() * cos + m23() * sin;
        float m20 = this.m20() * cos - m10() * sin;
        float m21 = this.m21() * cos - m11() * sin;
        float m22 = this.m22() * cos - m12() * sin;
        float m23 = this.m23() * cos - m13() * sin;
        sin = Math.sin(angleY);
        cos = Math.cosFromSin(sin, angleY);
        float nm00 = m00() * cos - m20 * sin;
        float nm01 = m01() * cos - m21 * sin;
        float nm02 = m02() * cos - m22 * sin;
        float nm03 = m03() * cos - m23 * sin;
        float nm20 = m00() * sin + m20 * cos;
        float nm21 = m01() * sin + m21 * cos;
        float nm22 = m02() * sin + m22 * cos;
        float nm23 = m03() * sin + m23 * cos;
        dest._m30(-nm00 * centerX - nm10 * centerY - nm20 * centerZ + m30)
            ._m31(-nm01 * centerX - nm11 * centerY - nm21 * centerZ + m31)
            ._m32(-nm02 * centerX - nm12 * centerY - nm22 * centerZ + m32)
            ._m33(-nm03 * centerX - nm13 * centerY - nm23 * centerZ + m33)
            ._m20(nm20)
            ._m21(nm21)
            ._m22(nm22)
            ._m23(nm23)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(nm13)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(nm03)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f arcball(float radius, Vector3fc center, float angleX, float angleY, Matrix4f dest) {
        return arcball(radius, center.x(), center.y(), center.z(), angleX, angleY, dest);
    }
    public Matrix4f arcball(float radius, float centerX, float centerY, float centerZ, float angleX, float angleY) {
        return arcball(radius, centerX, centerY, centerZ, angleX, angleY, this);
    }
    public Matrix4f arcball(float radius, Vector3fc center, float angleX, float angleY) {
        return arcball(radius, center.x(), center.y(), center.z(), angleX, angleY, this);
    }
    public Matrix4f frustumAabb(Vector3f min, Vector3f max) {
        float minX = Float.POSITIVE_INFINITY;
        float minY = Float.POSITIVE_INFINITY;
        float minZ = Float.POSITIVE_INFINITY;
        float maxX = Float.NEGATIVE_INFINITY;
        float maxY = Float.NEGATIVE_INFINITY;
        float maxZ = Float.NEGATIVE_INFINITY;
        for (int t = 0; t < 8; t++) {
            float x = ((t & 1) << 1) - 1.0f;
            float y = (((t >>> 1) & 1) << 1) - 1.0f;
            float z = (((t >>> 2) & 1) << 1) - 1.0f;
            float invW = 1.0f / (m03() * x + m13() * y + m23() * z + m33());
            float nx = (m00() * x + m10() * y + m20() * z + m30()) * invW;
            float ny = (m01() * x + m11() * y + m21() * z + m31()) * invW;
            float nz = (m02() * x + m12() * y + m22() * z + m32()) * invW;
            minX = minX < nx ? minX : nx;
            minY = minY < ny ? minY : ny;
            minZ = minZ < nz ? minZ : nz;
            maxX = maxX > nx ? maxX : nx;
            maxY = maxY > ny ? maxY : ny;
            maxZ = maxZ > nz ? maxZ : nz;
        }
        min.x = minX;
        min.y = minY;
        min.z = minZ;
        max.x = maxX;
        max.y = maxY;
        max.z = maxZ;
        return this;
    }
    public Matrix4f projectedGridRange(Matrix4fc projector, float sLower, float sUpper, Matrix4f dest) {
        float minX = Float.POSITIVE_INFINITY, minY = Float.POSITIVE_INFINITY;
        float maxX = Float.NEGATIVE_INFINITY, maxY = Float.NEGATIVE_INFINITY;
        boolean intersection = false;
        for (int t = 0; t < 3 * 4; t++) {
            float c0X, c0Y, c0Z;
            float c1X, c1Y, c1Z;
            if (t < 4) {
                c0X = -1; c1X = +1;
                c0Y = c1Y = ((t & 1) << 1) - 1.0f;
                c0Z = c1Z = (((t >>> 1) & 1) << 1) - 1.0f;
            } else if (t < 8) {
                c0Y = -1; c1Y = +1;
                c0X = c1X = ((t & 1) << 1) - 1.0f;
                c0Z = c1Z = (((t >>> 1) & 1) << 1) - 1.0f;
            } else {
                c0Z = -1; c1Z = +1;
                c0X = c1X = ((t & 1) << 1) - 1.0f;
                c0Y = c1Y = (((t >>> 1) & 1) << 1) - 1.0f;
            }
            float invW = 1.0f / (m03() * c0X + m13() * c0Y + m23() * c0Z + m33());
            float p0x = (m00() * c0X + m10() * c0Y + m20() * c0Z + m30()) * invW;
            float p0y = (m01() * c0X + m11() * c0Y + m21() * c0Z + m31()) * invW;
            float p0z = (m02() * c0X + m12() * c0Y + m22() * c0Z + m32()) * invW;
            invW = 1.0f / (m03() * c1X + m13() * c1Y + m23() * c1Z + m33());
            float p1x = (m00() * c1X + m10() * c1Y + m20() * c1Z + m30()) * invW;
            float p1y = (m01() * c1X + m11() * c1Y + m21() * c1Z + m31()) * invW;
            float p1z = (m02() * c1X + m12() * c1Y + m22() * c1Z + m32()) * invW;
            float dirX = p1x - p0x;
            float dirY = p1y - p0y;
            float dirZ = p1z - p0z;
            float invDenom = 1.0f / dirY;
            for (int s = 0; s < 2; s++) {
                float isectT = -(p0y + (s == 0 ? sLower : sUpper)) * invDenom;
                if (isectT >= 0.0f && isectT <= 1.0f) {
                    intersection = true;
                    float ix = p0x + isectT * dirX;
                    float iz = p0z + isectT * dirZ;
                    invW = 1.0f / (projector.m03() * ix + projector.m23() * iz + projector.m33());
                    float px = (projector.m00() * ix + projector.m20() * iz + projector.m30()) * invW;
                    float py = (projector.m01() * ix + projector.m21() * iz + projector.m31()) * invW;
                    minX = minX < px ? minX : px;
                    minY = minY < py ? minY : py;
                    maxX = maxX > px ? maxX : px;
                    maxY = maxY > py ? maxY : py;
                }
            }
        }
        if (!intersection)
            return null; 
        dest.set(maxX - minX, 0, 0, 0, 0, maxY - minY, 0, 0, 0, 0, 1, 0, minX, minY, 0, 1);
        dest._properties(PROPERTY_AFFINE);
        return dest;
    }
    public Matrix4f perspectiveFrustumSlice(float near, float far, Matrix4f dest) {
        float invOldNear = (m23() + m22()) / m32();
        float invNearFar = 1.0f / (near - far);
        dest._m00(m00() * invOldNear * near)
            ._m01(m01())
            ._m02(m02())
            ._m03(m03())
            ._m10(m10())
            ._m11(m11() * invOldNear * near)
            ._m12(m12())
            ._m13(m13())
            ._m20(m20())
            ._m21(m21())
            ._m22((far + near) * invNearFar)
            ._m23(m23())
            ._m30(m30())
            ._m31(m31())
            ._m32((far + far) * near * invNearFar)
            ._m33(m33())
            ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4f orthoCrop(Matrix4fc view, Matrix4f dest) {
        float minX = Float.POSITIVE_INFINITY, maxX = Float.NEGATIVE_INFINITY;
        float minY = Float.POSITIVE_INFINITY, maxY = Float.NEGATIVE_INFINITY;
        float minZ = Float.POSITIVE_INFINITY, maxZ = Float.NEGATIVE_INFINITY;
        for (int t = 0; t < 8; t++) {
            float x = ((t & 1) << 1) - 1.0f;
            float y = (((t >>> 1) & 1) << 1) - 1.0f;
            float z = (((t >>> 2) & 1) << 1) - 1.0f;
            float invW = 1.0f / (m03() * x + m13() * y + m23() * z + m33());
            float wx = (m00() * x + m10() * y + m20() * z + m30()) * invW;
            float wy = (m01() * x + m11() * y + m21() * z + m31()) * invW;
            float wz = (m02() * x + m12() * y + m22() * z + m32()) * invW;
            invW = 1.0f / (view.m03() * wx + view.m13() * wy + view.m23() * wz + view.m33());
            float vx = view.m00() * wx + view.m10() * wy + view.m20() * wz + view.m30();
            float vy = view.m01() * wx + view.m11() * wy + view.m21() * wz + view.m31();
            float vz = (view.m02() * wx + view.m12() * wy + view.m22() * wz + view.m32()) * invW;
            minX = minX < vx ? minX : vx;
            maxX = maxX > vx ? maxX : vx;
            minY = minY < vy ? minY : vy;
            maxY = maxY > vy ? maxY : vy;
            minZ = minZ < vz ? minZ : vz;
            maxZ = maxZ > vz ? maxZ : vz;
        }
        return dest.setOrtho(minX, maxX, minY, maxY, -maxZ, -minZ);
    }
    public Matrix4f trapezoidCrop(float p0x, float p0y, float p1x, float p1y, float p2x, float p2y, float p3x, float p3y) {
        float aX = p1y - p0y, aY = p0x - p1x;
        float nm00 = aY;
        float nm10 = -aX;
        float nm30 = aX * p0y - aY * p0x;
        float nm01 = aX;
        float nm11 = aY;
        float nm31 = -(aX * p0x + aY * p0y);
        float c3x = nm00 * p3x + nm10 * p3y + nm30;
        float c3y = nm01 * p3x + nm11 * p3y + nm31;
        float s = -c3x / c3y;
        nm00 += s * nm01;
        nm10 += s * nm11;
        nm30 += s * nm31;
        float d1x = nm00 * p1x + nm10 * p1y + nm30;
        float d2x = nm00 * p2x + nm10 * p2y + nm30;
        float d = d1x * c3y / (d2x - d1x);
        nm31 += d;
        float sx = 2.0f / d2x;
        float sy = 1.0f / (c3y + d);
        float u = (sy + sy) * d / (1.0f - sy * d);
        float m03 = nm01 * sy;
        float m13 = nm11 * sy;
        float m33 = nm31 * sy;
        nm01 = (u + 1.0f) * m03;
        nm11 = (u + 1.0f) * m13;
        nm31 = (u + 1.0f) * m33 - u;
        nm00 = sx * nm00 - m03;
        nm10 = sx * nm10 - m13;
        nm30 = sx * nm30 - m33;
        set(nm00, nm01, 0, m03,
            nm10, nm11, 0, m13,
              0,   0, 1,   0,
            nm30, nm31, 0, m33);
        _properties(PROPERTY_UNKNOWN);
        return this;
    }
    public Matrix4f transformAab(float minX, float minY, float minZ, float maxX, float maxY, float maxZ, Vector3f outMin, Vector3f outMax) {
        float xax = m00() * minX, xay = m01() * minX, xaz = m02() * minX;
        float xbx = m00() * maxX, xby = m01() * maxX, xbz = m02() * maxX;
        float yax = m10() * minY, yay = m11() * minY, yaz = m12() * minY;
        float ybx = m10() * maxY, yby = m11() * maxY, ybz = m12() * maxY;
        float zax = m20() * minZ, zay = m21() * minZ, zaz = m22() * minZ;
        float zbx = m20() * maxZ, zby = m21() * maxZ, zbz = m22() * maxZ;
        float xminx, xminy, xminz, yminx, yminy, yminz, zminx, zminy, zminz;
        float xmaxx, xmaxy, xmaxz, ymaxx, ymaxy, ymaxz, zmaxx, zmaxy, zmaxz;
        if (xax < xbx) {
            xminx = xax;
            xmaxx = xbx;
        } else {
            xminx = xbx;
            xmaxx = xax;
        }
        if (xay < xby) {
            xminy = xay;
            xmaxy = xby;
        } else {
            xminy = xby;
            xmaxy = xay;
        }
        if (xaz < xbz) {
            xminz = xaz;
            xmaxz = xbz;
        } else {
            xminz = xbz;
            xmaxz = xaz;
        }
        if (yax < ybx) {
            yminx = yax;
            ymaxx = ybx;
        } else {
            yminx = ybx;
            ymaxx = yax;
        }
        if (yay < yby) {
            yminy = yay;
            ymaxy = yby;
        } else {
            yminy = yby;
            ymaxy = yay;
        }
        if (yaz < ybz) {
            yminz = yaz;
            ymaxz = ybz;
        } else {
            yminz = ybz;
            ymaxz = yaz;
        }
        if (zax < zbx) {
            zminx = zax;
            zmaxx = zbx;
        } else {
            zminx = zbx;
            zmaxx = zax;
        }
        if (zay < zby) {
            zminy = zay;
            zmaxy = zby;
        } else {
            zminy = zby;
            zmaxy = zay;
        }
        if (zaz < zbz) {
            zminz = zaz;
            zmaxz = zbz;
        } else {
            zminz = zbz;
            zmaxz = zaz;
        }
        outMin.x = xminx + yminx + zminx + m30();
        outMin.y = xminy + yminy + zminy + m31();
        outMin.z = xminz + yminz + zminz + m32();
        outMax.x = xmaxx + ymaxx + zmaxx + m30();
        outMax.y = xmaxy + ymaxy + zmaxy + m31();
        outMax.z = xmaxz + ymaxz + zmaxz + m32();
        return this;
    }
    public Matrix4f transformAab(Vector3fc min, Vector3fc max, Vector3f outMin, Vector3f outMax) {
        return transformAab(min.x(), min.y(), min.z(), max.x(), max.y(), max.z(), outMin, outMax);
    }
    public Matrix4f lerp(Matrix4fc other, float t) {
        return lerp(other, t, this);
    }
    public Matrix4f lerp(Matrix4fc other, float t, Matrix4f dest) {
        dest._m00(Math.fma(other.m00() - m00(), t, m00()))
            ._m01(Math.fma(other.m01() - m01(), t, m01()))
            ._m02(Math.fma(other.m02() - m02(), t, m02()))
            ._m03(Math.fma(other.m03() - m03(), t, m03()))
            ._m10(Math.fma(other.m10() - m10(), t, m10()))
            ._m11(Math.fma(other.m11() - m11(), t, m11()))
            ._m12(Math.fma(other.m12() - m12(), t, m12()))
            ._m13(Math.fma(other.m13() - m13(), t, m13()))
            ._m20(Math.fma(other.m20() - m20(), t, m20()))
            ._m21(Math.fma(other.m21() - m21(), t, m21()))
            ._m22(Math.fma(other.m22() - m22(), t, m22()))
            ._m23(Math.fma(other.m23() - m23(), t, m23()))
            ._m30(Math.fma(other.m30() - m30(), t, m30()))
            ._m31(Math.fma(other.m31() - m31(), t, m31()))
            ._m32(Math.fma(other.m32() - m32(), t, m32()))
            ._m33(Math.fma(other.m33() - m33(), t, m33()))
            ._properties(properties & other.properties());
        return dest;
    }
    public Matrix4f rotateTowards(Vector3fc dir, Vector3fc up, Matrix4f dest) {
        return rotateTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4f rotateTowards(Vector3fc dir, Vector3fc up) {
        return rotateTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        return rotateTowards(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix4f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4f dest) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        float rm00 = leftX;
        float rm01 = leftY;
        float rm02 = leftZ;
        float rm10 = upnX;
        float rm11 = upnY;
        float rm12 = upnZ;
        float rm20 = ndirX;
        float rm21 = ndirY;
        float rm22 = ndirZ;
        dest._m30(m30())
            ._m31(m31())
            ._m32(m32())
            ._m33(m33());
        float nm00 = m00() * rm00 + m10() * rm01 + m20() * rm02;
        float nm01 = m01() * rm00 + m11() * rm01 + m21() * rm02;
        float nm02 = m02() * rm00 + m12() * rm01 + m22() * rm02;
        float nm03 = m03() * rm00 + m13() * rm01 + m23() * rm02;
        float nm10 = m00() * rm10 + m10() * rm11 + m20() * rm12;
        float nm11 = m01() * rm10 + m11() * rm11 + m21() * rm12;
        float nm12 = m02() * rm10 + m12() * rm11 + m22() * rm12;
        float nm13 = m03() * rm10 + m13() * rm11 + m23() * rm12;
        dest._m20(m00() * rm20 + m10() * rm21 + m20() * rm22)
            ._m21(m01() * rm20 + m11() * rm21 + m21() * rm22)
            ._m22(m02() * rm20 + m12() * rm21 + m22() * rm22)
            ._m23(m03() * rm20 + m13() * rm21 + m23() * rm22)
            ._m00(nm00)
            ._m01(nm01)
            ._m02(nm02)
            ._m03(nm03)
            ._m10(nm10)
            ._m11(nm11)
            ._m12(nm12)
            ._m13(nm13)
            ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f rotationTowards(Vector3fc dir, Vector3fc up) {
        return rotationTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4f rotationTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        this._m00(leftX)
            ._m01(leftY)
            ._m02(leftZ)
            ._m10(upnX)
            ._m11(upnY)
            ._m12(upnZ)
            ._m20(ndirX)
            ._m21(ndirY)
            ._m22(ndirZ)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f translationRotateTowards(Vector3fc pos, Vector3fc dir, Vector3fc up) {
        return translationRotateTowards(pos.x(), pos.y(), pos.z(), dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4f translationRotateTowards(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        this._m00(leftX)
            ._m01(leftY)
            ._m02(leftZ)
            ._m03(0.0f)
            ._m10(upnX)
            ._m11(upnY)
            ._m12(upnZ)
            ._m13(0.0f)
            ._m20(ndirX)
            ._m21(ndirY)
            ._m22(ndirZ)
            ._m23(0.0f)
            ._m30(posX)
            ._m31(posY)
            ._m32(posZ)
            ._m33(1.0f)
            ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Vector3f getEulerAnglesZYX(Vector3f dest) {
        dest.x = Math.atan2(m12(), m22());
        dest.y = Math.atan2(-m02(), Math.sqrt(1.0f - m02() * m02()));
        dest.z = Math.atan2(m01(), m00());
        return dest;
    }
    public Vector3f getEulerAnglesXYZ(Vector3f dest) {
        dest.x = Math.atan2(-m21(), m22());
        dest.y = Math.atan2(m20(), Math.sqrt(1.0f - m20() * m20()));
        dest.z = Math.atan2(-m10(), m00());
        return dest;
    }
    public Vector3f getEulerAnglesYXZ(Vector3f dest) {
        dest.x = Math.atan2(-m21(), Math.sqrt(1.0f - m21() * m21()));
        dest.y = Math.atan2(m20(), m22());
        dest.z = Math.atan2(m01(), m11());
        return dest;
    }
    public Matrix4f affineSpan(Vector3f corner, Vector3f xDir, Vector3f yDir, Vector3f zDir) {
        float a = m10() * m22(), b = m10() * m21(), c = m10() * m02(), d = m10() * m01();
        float e = m11() * m22(), f = m11() * m20(), g = m11() * m02(), h = m11() * m00();
        float i = m12() * m21(), j = m12() * m20(), k = m12() * m01(), l = m12() * m00();
        float m = m20() * m02(), n = m20() * m01(), o = m21() * m02(), p = m21() * m00();
        float q = m22() * m01(), r = m22() * m00();
        float s = 1.0f / (m00() * m11() - m01() * m10()) * m22() + (m02() * m10() - m00() * m12()) * m21() + (m01() * m12() - m02() * m11()) * m20();
        float nm00 = (e - i) * s, nm01 = (o - q) * s, nm02 = (k - g) * s;
        float nm10 = (j - a) * s, nm11 = (r - m) * s, nm12 = (c - l) * s;
        float nm20 = (b - f) * s, nm21 = (n - p) * s, nm22 = (h - d) * s;
        corner.x = -nm00 - nm10 - nm20 + (a * m31() - b * m32() + f * m32() - e * m30() + i * m30() - j * m31()) * s;
        corner.y = -nm01 - nm11 - nm21 + (m * m31() - n * m32() + p * m32() - o * m30() + q * m30() - r * m31()) * s;
        corner.z = -nm02 - nm12 - nm22 + (g * m30() - k * m30() + l * m31() - c * m31() + d * m32() - h * m32()) * s;
        xDir.x = 2.0f * nm00; xDir.y = 2.0f * nm01; xDir.z = 2.0f * nm02;
        yDir.x = 2.0f * nm10; yDir.y = 2.0f * nm11; yDir.z = 2.0f * nm12;
        zDir.x = 2.0f * nm20; zDir.y = 2.0f * nm21; zDir.z = 2.0f * nm22;
        return this;
    }
    public boolean testPoint(float x, float y, float z) {
        float nxX = m03() + m00(), nxY = m13() + m10(), nxZ = m23() + m20(), nxW = m33() + m30();
        float pxX = m03() - m00(), pxY = m13() - m10(), pxZ = m23() - m20(), pxW = m33() - m30();
        float nyX = m03() + m01(), nyY = m13() + m11(), nyZ = m23() + m21(), nyW = m33() + m31();
        float pyX = m03() - m01(), pyY = m13() - m11(), pyZ = m23() - m21(), pyW = m33() - m31();
        float nzX = m03() + m02(), nzY = m13() + m12(), nzZ = m23() + m22(), nzW = m33() + m32();
        float pzX = m03() - m02(), pzY = m13() - m12(), pzZ = m23() - m22(), pzW = m33() - m32();
        return nxX * x + nxY * y + nxZ * z + nxW >= 0 && pxX * x + pxY * y + pxZ * z + pxW >= 0 &&
               nyX * x + nyY * y + nyZ * z + nyW >= 0 && pyX * x + pyY * y + pyZ * z + pyW >= 0 &&
               nzX * x + nzY * y + nzZ * z + nzW >= 0 && pzX * x + pzY * y + pzZ * z + pzW >= 0;
    }
    public boolean testSphere(float x, float y, float z, float r) {
        float invl;
        float nxX = m03() + m00(), nxY = m13() + m10(), nxZ = m23() + m20(), nxW = m33() + m30();
        invl = Math.invsqrt(nxX * nxX + nxY * nxY + nxZ * nxZ);
        nxX *= invl; nxY *= invl; nxZ *= invl; nxW *= invl;
        float pxX = m03() - m00(), pxY = m13() - m10(), pxZ = m23() - m20(), pxW = m33() - m30();
        invl = Math.invsqrt(pxX * pxX + pxY * pxY + pxZ * pxZ);
        pxX *= invl; pxY *= invl; pxZ *= invl; pxW *= invl;
        float nyX = m03() + m01(), nyY = m13() + m11(), nyZ = m23() + m21(), nyW = m33() + m31();
        invl = Math.invsqrt(nyX * nyX + nyY * nyY + nyZ * nyZ);
        nyX *= invl; nyY *= invl; nyZ *= invl; nyW *= invl;
        float pyX = m03() - m01(), pyY = m13() - m11(), pyZ = m23() - m21(), pyW = m33() - m31();
        invl = Math.invsqrt(pyX * pyX + pyY * pyY + pyZ * pyZ);
        pyX *= invl; pyY *= invl; pyZ *= invl; pyW *= invl;
        float nzX = m03() + m02(), nzY = m13() + m12(), nzZ = m23() + m22(), nzW = m33() + m32();
        invl = Math.invsqrt(nzX * nzX + nzY * nzY + nzZ * nzZ);
        nzX *= invl; nzY *= invl; nzZ *= invl; nzW *= invl;
        float pzX = m03() - m02(), pzY = m13() - m12(), pzZ = m23() - m22(), pzW = m33() - m32();
        invl = Math.invsqrt(pzX * pzX + pzY * pzY + pzZ * pzZ);
        pzX *= invl; pzY *= invl; pzZ *= invl; pzW *= invl;
        return nxX * x + nxY * y + nxZ * z + nxW >= -r && pxX * x + pxY * y + pxZ * z + pxW >= -r &&
               nyX * x + nyY * y + nyZ * z + nyW >= -r && pyX * x + pyY * y + pyZ * z + pyW >= -r &&
               nzX * x + nzY * y + nzZ * z + nzW >= -r && pzX * x + pzY * y + pzZ * z + pzW >= -r;
    }
    public boolean testAab(float minX, float minY, float minZ, float maxX, float maxY, float maxZ) {
        float nxX = m03() + m00(), nxY = m13() + m10(), nxZ = m23() + m20(), nxW = m33() + m30();
        float pxX = m03() - m00(), pxY = m13() - m10(), pxZ = m23() - m20(), pxW = m33() - m30();
        float nyX = m03() + m01(), nyY = m13() + m11(), nyZ = m23() + m21(), nyW = m33() + m31();
        float pyX = m03() - m01(), pyY = m13() - m11(), pyZ = m23() - m21(), pyW = m33() - m31();
        float nzX = m03() + m02(), nzY = m13() + m12(), nzZ = m23() + m22(), nzW = m33() + m32();
        float pzX = m03() - m02(), pzY = m13() - m12(), pzZ = m23() - m22(), pzW = m33() - m32();
        return nxX * (nxX < 0 ? minX : maxX) + nxY * (nxY < 0 ? minY : maxY) + nxZ * (nxZ < 0 ? minZ : maxZ) >= -nxW &&
               pxX * (pxX < 0 ? minX : maxX) + pxY * (pxY < 0 ? minY : maxY) + pxZ * (pxZ < 0 ? minZ : maxZ) >= -pxW &&
               nyX * (nyX < 0 ? minX : maxX) + nyY * (nyY < 0 ? minY : maxY) + nyZ * (nyZ < 0 ? minZ : maxZ) >= -nyW &&
               pyX * (pyX < 0 ? minX : maxX) + pyY * (pyY < 0 ? minY : maxY) + pyZ * (pyZ < 0 ? minZ : maxZ) >= -pyW &&
               nzX * (nzX < 0 ? minX : maxX) + nzY * (nzY < 0 ? minY : maxY) + nzZ * (nzZ < 0 ? minZ : maxZ) >= -nzW &&
               pzX * (pzX < 0 ? minX : maxX) + pzY * (pzY < 0 ? minY : maxY) + pzZ * (pzZ < 0 ? minZ : maxZ) >= -pzW;
    }
    public Matrix4f obliqueZ(float a, float b) {
        return this
        ._m20(m00() * a + m10() * b + m20())
        ._m21(m01() * a + m11() * b + m21())
        ._m22(m02() * a + m12() * b + m22())
        ._properties(this.properties & PROPERTY_AFFINE);
    }
    public Matrix4f obliqueZ(float a, float b, Matrix4f dest) {
        dest._m00(m00())
            ._m01(m01())
            ._m02(m02())
            ._m03(m03())
            ._m10(m10())
            ._m11(m11())
            ._m12(m12())
            ._m13(m13())
            ._m20(m00() * a + m10() * b + m20())
            ._m21(m01() * a + m11() * b + m21())
            ._m22(m02() * a + m12() * b + m22())
            ._m23(m23())
            ._m30(m30())
            ._m31(m31())
            ._m32(m32())
            ._m33(m33())
            ._properties(this.properties & PROPERTY_AFFINE);
        return dest;
    }
    public static void perspectiveOffCenterViewFromRectangle(
            Vector3f eye, Vector3f p, Vector3f x, Vector3f y, float nearFarDist, boolean zeroToOne,
            Matrix4f projDest, Matrix4f viewDest) {
        float zx = y.y * x.z - y.z * x.y, zy = y.z * x.x - y.x * x.z, zz = y.x * x.y - y.y * x.x;
        float zd = zx * (p.x - eye.x) + zy * (p.y - eye.y) + zz * (p.z - eye.z);
        float zs = zd >= 0 ? 1 : -1; zx *= zs; zy *= zs; zz *= zs; zd *= zs; 
        viewDest.setLookAt(eye.x, eye.y, eye.z, eye.x + zx, eye.y + zy, eye.z + zz, y.x, y.y, y.z);
        float px = viewDest.m00() * p.x + viewDest.m10() * p.y + viewDest.m20() * p.z + viewDest.m30();
        float py = viewDest.m01() * p.x + viewDest.m11() * p.y + viewDest.m21() * p.z + viewDest.m31();
        float tx = viewDest.m00() * x.x + viewDest.m10() * x.y + viewDest.m20() * x.z;
        float ty = viewDest.m01() * y.x + viewDest.m11() * y.y + viewDest.m21() * y.z;
        float len = Math.sqrt(zx * zx + zy * zy + zz * zz);
        float near = zd / len, far;
        if (Float.isInfinite(nearFarDist) && nearFarDist < 0.0f) {
            far = near;
            near = Float.POSITIVE_INFINITY;
        } else if (Float.isInfinite(nearFarDist) && nearFarDist > 0.0f) {
            far = Float.POSITIVE_INFINITY;
        } else if (nearFarDist < 0.0f) {
            far = near;
            near = near + nearFarDist;
        } else {
            far = near + nearFarDist;
        }
        projDest.setFrustum(px, px + tx, py, py + ty, near, far, zeroToOne);
    }
    public Matrix4f withLookAtUp(Vector3fc up) {
        return withLookAtUp(up.x(), up.y(), up.z(), this);
    }
    public Matrix4f withLookAtUp(Vector3fc up, Matrix4f dest) {
        return withLookAtUp(up.x(), up.y(), up.z());
    }
    public Matrix4f withLookAtUp(float upX, float upY, float upZ) {
        return withLookAtUp(upX, upY, upZ, this);
    }
    public Matrix4f withLookAtUp(float upX, float upY, float upZ, Matrix4f dest) {
        float y = (upY * m21() - upZ * m11()) * m02() +
                  (upZ * m01() - upX * m21()) * m12() +
                  (upX * m11() - upY * m01()) * m22();
        float x = upX * m01() + upY * m11() + upZ * m21();
        if ((properties & PROPERTY_ORTHONORMAL) == 0)
            x *= Math.sqrt(m01() * m01() + m11() * m11() + m21() * m21());
        float invsqrt = Math.invsqrt(y * y + x * x);
        float c = x * invsqrt, s = y * invsqrt;
        float nm00 = c * m00() - s * m01(), nm10 = c * m10() - s * m11(), nm20 = c * m20() - s * m21(), nm31 = s * m30() + c * m31();
        float nm01 = s * m00() + c * m01(), nm11 = s * m10() + c * m11(), nm21 = s * m20() + c * m21(), nm30 = c * m30() - s * m31();
        dest._m00(nm00)._m10(nm10)._m20(nm20)._m30(nm30)
            ._m01(nm01)._m11(nm11)._m21(nm21)._m31(nm31);
        if (dest != this) {
            dest._m02(m02())._m12(m12())._m22(m22())._m32(m32())
                ._m03(m03())._m13(m13())._m23(m23())._m33(m33());
        }
        dest._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4f mapXZY() {
        return mapXZY(this);
    }
    public Matrix4f mapXZY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapXZnY() {
        return mapXZnY(this);
    }
    public Matrix4f mapXZnY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapXnYnZ() {
        return mapXnYnZ(this);
    }
    public Matrix4f mapXnYnZ(Matrix4f dest) {
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapXnZY() {
        return mapXnZY(this);
    }
    public Matrix4f mapXnZY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapXnZnY() {
        return mapXnZnY(this);
    }
    public Matrix4f mapXnZnY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYXZ() {
        return mapYXZ(this);
    }
    public Matrix4f mapYXZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYXnZ() {
        return mapYXnZ(this);
    }
    public Matrix4f mapYXnZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYZX() {
        return mapYZX(this);
    }
    public Matrix4f mapYZX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYZnX() {
        return mapYZnX(this);
    }
    public Matrix4f mapYZnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYnXZ() {
        return mapYnXZ(this);
    }
    public Matrix4f mapYnXZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYnXnZ() {
        return mapYnXnZ(this);
    }
    public Matrix4f mapYnXnZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYnZX() {
        return mapYnZX(this);
    }
    public Matrix4f mapYnZX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapYnZnX() {
        return mapYnZnX(this);
    }
    public Matrix4f mapYnZnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m10())._m01(m11())._m02(m12())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZXY() {
        return mapZXY(this);
    }
    public Matrix4f mapZXY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZXnY() {
        return mapZXnY(this);
    }
    public Matrix4f mapZXnY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZYX() {
        return mapZYX(this);
    }
    public Matrix4f mapZYX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZYnX() {
        return mapZYnX(this);
    }
    public Matrix4f mapZYnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZnXY() {
        return mapZnXY(this);
    }
    public Matrix4f mapZnXY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZnXnY() {
        return mapZnXnY(this);
    }
    public Matrix4f mapZnXnY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZnYX() {
        return mapZnYX(this);
    }
    public Matrix4f mapZnYX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapZnYnX() {
        return mapZnYnX(this);
    }
    public Matrix4f mapZnYnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(m20())._m01(m21())._m02(m22())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXYnZ() {
        return mapnXYnZ(this);
    }
    public Matrix4f mapnXYnZ(Matrix4f dest) {
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXZY() {
        return mapnXZY(this);
    }
    public Matrix4f mapnXZY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXZnY() {
        return mapnXZnY(this);
    }
    public Matrix4f mapnXZnY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXnYZ() {
        return mapnXnYZ(this);
    }
    public Matrix4f mapnXnYZ(Matrix4f dest) {
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXnYnZ() {
        return mapnXnYnZ(this);
    }
    public Matrix4f mapnXnYnZ(Matrix4f dest) {
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXnZY() {
        return mapnXnZY(this);
    }
    public Matrix4f mapnXnZY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnXnZnY() {
        return mapnXnZnY(this);
    }
    public Matrix4f mapnXnZnY(Matrix4f dest) {
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYXZ() {
        return mapnYXZ(this);
    }
    public Matrix4f mapnYXZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYXnZ() {
        return mapnYXnZ(this);
    }
    public Matrix4f mapnYXnZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYZX() {
        return mapnYZX(this);
    }
    public Matrix4f mapnYZX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYZnX() {
        return mapnYZnX(this);
    }
    public Matrix4f mapnYZnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(m20())._m11(m21())._m12(m22())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYnXZ() {
        return mapnYnXZ(this);
    }
    public Matrix4f mapnYnXZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYnXnZ() {
        return mapnYnXnZ(this);
    }
    public Matrix4f mapnYnXnZ(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYnZX() {
        return mapnYnZX(this);
    }
    public Matrix4f mapnYnZX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnYnZnX() {
        return mapnYnZnX(this);
    }
    public Matrix4f mapnYnZnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m10())._m01(-m11())._m02(-m12())._m03(m03())._m10(-m20())._m11(-m21())._m12(-m22())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZXY() {
        return mapnZXY(this);
    }
    public Matrix4f mapnZXY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZXnY() {
        return mapnZXnY(this);
    }
    public Matrix4f mapnZXnY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(m00)._m11(m01)._m12(m02)._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZYX() {
        return mapnZYX(this);
    }
    public Matrix4f mapnZYX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZYnX() {
        return mapnZYnX(this);
    }
    public Matrix4f mapnZYnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZnXY() {
        return mapnZnXY(this);
    }
    public Matrix4f mapnZnXY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(m10)._m21(m11)._m22(m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZnXnY() {
        return mapnZnXnY(this);
    }
    public Matrix4f mapnZnXnY(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        float m10 = this.m10(), m11 = this.m11(), m12 = this.m12();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13())._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZnYX() {
        return mapnZnYX(this);
    }
    public Matrix4f mapnZnYX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(m00)._m21(m01)._m22(m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f mapnZnYnX() {
        return mapnZnYnX(this);
    }
    public Matrix4f mapnZnYnX(Matrix4f dest) {
        float m00 = this.m00(), m01 = this.m01(), m02 = this.m02();
        return dest._m00(-m20())._m01(-m21())._m02(-m22())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f negateX() {
        return _m00(-m00())._m01(-m01())._m02(-m02())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f negateX(Matrix4f dest) {
        return dest._m00(-m00())._m01(-m01())._m02(-m02())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f negateY() {
        return _m10(-m10())._m11(-m11())._m12(-m12())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f negateY(Matrix4f dest) {
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(-m10())._m11(-m11())._m12(-m12())._m13(m13())._m20(m20())._m21(m21())._m22(m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f negateZ() {
        return _m20(-m20())._m21(-m21())._m22(-m22())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4f negateZ(Matrix4f dest) {
        return dest._m00(m00())._m01(m01())._m02(m02())._m03(m03())._m10(m10())._m11(m11())._m12(m12())._m13(m13())._m20(-m20())._m21(-m21())._m22(-m22())._m23(m23())._m30(m30())._m31(m31())._m32(m32())._m33(m33())._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public boolean isFinite() {
        return Math.isFinite(m00()) && Math.isFinite(m01()) && Math.isFinite(m02()) && Math.isFinite(m03()) &&
               Math.isFinite(m10()) && Math.isFinite(m11()) && Math.isFinite(m12()) && Math.isFinite(m13()) &&
               Math.isFinite(m20()) && Math.isFinite(m21()) && Math.isFinite(m22()) && Math.isFinite(m23()) &&
               Math.isFinite(m30()) && Math.isFinite(m31()) && Math.isFinite(m32()) && Math.isFinite(m33());
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector4f implements Externalizable, Cloneable, Vector4fc {
    private static final long serialVersionUID = 1L;
    public float x;
    public float y;
    public float z;
    public float w;
    public Vector4f() {
        this.w = 1.0f;
    }
    public Vector4f(Vector4fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4f(Vector4dc v) {
        x = (float) v.x();
        y = (float) v.y();
        z = (float) v.z();
        w = (float) v.w();
    }
    public Vector4f(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4f(Vector3fc v, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4f(Vector3ic v, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4f(Vector2fc v, float z, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4f(Vector2ic v, float z, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4f(float d) {
        this.x = d;
        this.y = d;
        this.z = d;
        this.w = d;
    }
    public Vector4f(float x, float y, float z, float w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    public Vector4f(float[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
    }
    public Vector4f(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4f(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector4f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4f(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public float x() {
        return this.x;
    }
    public float y() {
        return this.y;
    }
    public float z() {
        return this.z;
    }
    public float w() {
        return this.w;
    }
    public Vector3f xyz(Vector3f dest) {
        return dest.set(x, y, z);
    }
    public Vector3d xyz(Vector3d dest) {
        return dest.set(x, y, z);
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector4f set(Vector4fc v) {
        if (v == this)
            return this;
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4f set(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4f set(Vector4dc v) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        this.z = (float) v.z();
        this.w = (float) v.w();
        return this;
    }
    public Vector4f set(Vector3fc v, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4f set(Vector3dc v) {
        this.x = (float) v.x();
        this.y = (float) v.y();
        this.z = (float) v.z();
        return this;
    }
    public Vector4f set(Vector3ic v, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4f set(Vector2fc v, float z, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4f set(Vector2ic v, float z, float w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4f set(float d) {
        this.x = d;
        this.y = d;
        this.z = d;
        this.w = d;
        return this;
    }
    public Vector4f set(float x, float y, float z, float w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4f set(float x, float y, float z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    public Vector4f set(double d) {
        this.x = (float) d;
        this.y = (float) d;
        this.z = (float) d;
        this.w = (float) d;
        return this;
    }
    public Vector4f set(double x, double y, double z, double w) {
        this.x = (float) x;
        this.y = (float) y;
        this.z = (float) z;
        this.w = (float) w;
        return this;
    }
    public Vector4f set(float[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
        return this;
    }
    public Vector4f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Vector4f setComponent(int component, float value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            case 3:
                w = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public FloatBuffer get(FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector4fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector4f sub(Vector4fc v) {
        return sub(v, this);
    }
    public Vector4f sub(float x, float y, float z, float w) {
        return sub(x, y, z, w, this);
    }
    public Vector4f sub(Vector4fc v, Vector4f dest) {
        dest.x = this.x - v.x();
        dest.y = this.y - v.y();
        dest.z = this.z - v.z();
        dest.w = this.w - v.w();
        return dest;
    }
    public Vector4f sub(float x, float y, float z, float w, Vector4f dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        dest.w = this.w - w;
        return dest;
    }
    public Vector4f add(Vector4fc v) {
        return add(v, this);
    }
    public Vector4f add(Vector4fc v, Vector4f dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        dest.w = w + v.w();
        return dest;
    }
    public Vector4f add(float x, float y, float z, float w) {
        return add(x, y, z, w, this);
    }
    public Vector4f add(float x, float y, float z, float w, Vector4f dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        dest.w = this.w + w;
        return dest;
    }
    public Vector4f fma(Vector4fc a, Vector4fc b) {
        return fma(a, b, this);
    }
    public Vector4f fma(float a, Vector4fc b) {
        return fma(a, b, this);
    }
    public Vector4f fma(Vector4fc a, Vector4fc b, Vector4f dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        dest.z = Math.fma(a.z(), b.z(), z);
        dest.w = Math.fma(a.w(), b.w(), w);
        return dest;
    }
    public Vector4f fma(float a, Vector4fc b, Vector4f dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        dest.z = Math.fma(a, b.z(), z);
        dest.w = Math.fma(a, b.w(), w);
        return dest;
    }
    public Vector4f mulAdd(Vector4fc a, Vector4fc b) {
        return mulAdd(a, b, this);
    }
    public Vector4f mulAdd(float a, Vector4fc b) {
        return mulAdd(a, b, this);
    }
    public Vector4f mulAdd(Vector4fc a, Vector4fc b, Vector4f dest) {
        dest.x = Math.fma(x, a.x(), b.x());
        dest.y = Math.fma(y, a.y(), b.y());
        dest.z = Math.fma(z, a.z(), b.z());
        return dest;
    }
    public Vector4f mulAdd(float a, Vector4fc b, Vector4f dest) {
        dest.x = Math.fma(x, a, b.x());
        dest.y = Math.fma(y, a, b.y());
        dest.z = Math.fma(z, a, b.z());
        return dest;
    }
    public Vector4f mul(Vector4fc v) {
        return mul(v, this);
    }
    public Vector4f mul(Vector4fc v, Vector4f dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        dest.w = w * v.w();
        return dest;
    }
    public Vector4f div(Vector4fc v) {
        return div(v, this);
    }
    public Vector4f div(Vector4fc v, Vector4f dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        dest.w = w / v.w();
        return dest;
    }
    public Vector4f mul(Matrix4fc mat) {
        return mul(mat, this);
    }
    public Vector4f mul(Matrix4fc mat, Vector4f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulTranslation(mat, dest);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulAffine(mat, dest);
        return mulGeneric(mat, dest);
    }
    public Vector4f mulAffine(Matrix4fc mat) {
        return mulAffine(mat, this);
    }
    public Vector4f mulAffine(Matrix4fc mat, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.w = w;
        return dest;
    }
    public Vector4f mulTranspose(Matrix4fc mat) {
        return mulTranspose(mat, this);
    }
    public Vector4f mulTranspose(Matrix4fc mat, Vector4f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulAffineTranspose(mat, dest);
        return mulGenericTranspose(mat, dest);
    }
    public Vector4f mulAffineTranspose(Matrix4fc mat) {
        return mulAffineTranspose(mat, this);
    }
    public Vector4f mulAffineTranspose(Matrix4fc mat, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        dest.w = Math.fma(mat.m30(), x, Math.fma(mat.m31(), y, mat.m32() * z + w));
        return dest;
    }
    public Vector4f mulGenericTranspose(Matrix4fc mat) {
        return mulGenericTranspose(mat, this);
    }
    public Vector4f mulGenericTranspose(Matrix4fc mat, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, Math.fma(mat.m02(), z, mat.m03() * w)));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, Math.fma(mat.m12(), z, mat.m13() * w)));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, Math.fma(mat.m22(), z, mat.m23() * w)));
        dest.w = Math.fma(mat.m30(), x, Math.fma(mat.m31(), y, Math.fma(mat.m32(), z, mat.m33() * w)));
        return dest;
    }
    public Vector4f mulTranslation(Matrix4fc mat) {
        return mulTranslation(mat, this);
    }
    public Vector4f mulTranslation(Matrix4fc mat, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m30(), w, x);
        dest.y = Math.fma(mat.m31(), w, y);
        dest.z = Math.fma(mat.m32(), w, z);
        dest.w = w;
        return dest;
    }
    public Vector4f mulGeneric(Matrix4fc mat) {
        return mulGeneric(mat, this);
    }
    public Vector4f mulGeneric(Matrix4fc mat, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        dest.y = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        dest.z = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.w = Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        return dest;
    }
    public Vector4f mul(Matrix4x3fc mat) {
        return mul(mat, this);
    }
    public Vector4f mul(Matrix4x3fc mat, Vector4f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4x3fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4x3fc.PROPERTY_TRANSLATION) != 0)
            return mulTranslation(mat, dest);
        return mulGeneric(mat, dest);
    }
    public Vector4f mulGeneric(Matrix4x3fc mat) {
        return mulGeneric(mat, this);
    }
    public Vector4f mulGeneric(Matrix4x3fc mat, Vector4f dest) {
        float rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        float ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        float rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = w;
        return dest;
    }
    public Vector4f mulTranslation(Matrix4x3fc mat) {
        return mulTranslation(mat, this);
    }
    public Vector4f mulTranslation(Matrix4x3fc mat, Vector4f dest) {
        dest.x = Math.fma(mat.m30(), w, x);
        dest.y = Math.fma(mat.m31(), w, y);
        dest.z = Math.fma(mat.m32(), w, z);
        dest.w = w;
        return dest;
    }
    public Vector4f mulProject(Matrix4fc mat) {
        return mulProject(mat, this);
    }
    public Vector4f mulProject(Matrix4fc mat, Vector4f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector3f mulProject(Matrix4fc mat, Vector3f dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector4f mulProjectGeneric(Matrix4fc mat) {
        return mulProjectGeneric(mat, this);
    }
    public Vector4f mulProjectGeneric(Matrix4fc mat, Vector4f dest) {
        float invW = 1.0f / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        float rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        float ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        float rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = 1.0f;
        return dest;
    }
    public Vector3f mulProjectGeneric(Matrix4fc mat, Vector3f dest) {
        float invW = 1.0f / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        float rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        float ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        float rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4f mulProjectTranslation(Matrix4fc mat) {
        return mulProjectTranslation(mat, this);
    }
    public Vector4f mulProjectTranslation(Matrix4fc mat, Vector4f dest) {
        float invW = 1.0f / w;
        float rx = Math.fma(mat.m00(), x, mat.m30() * w) * invW;
        float ry = Math.fma(mat.m11(), y, mat.m31() * w) * invW;
        float rz = Math.fma(mat.m22(), z, mat.m32() * w) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = 1.0f;
        return dest;
    }
    public Vector3f mulProjectTranslation(Matrix4fc mat, Vector3f dest) {
        float invW = 1.0f / w;
        float rx = Math.fma(mat.m00(), x, mat.m30() * w) * invW;
        float ry = Math.fma(mat.m11(), y, mat.m31() * w) * invW;
        float rz = Math.fma(mat.m22(), z, mat.m32() * w) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4f mulProjectAffine(Matrix4fc mat) {
        return mulProjectAffine(mat, this);
    }
    public Vector4f mulProjectAffine(Matrix4fc mat, Vector4f dest) {
        float invW = 1.0f / w;
        float rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        float ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        float rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = 1.0f;
        return dest;
    }
    public Vector3f mulProjectAffine(Matrix4fc mat, Vector3f dest) {
        float invW = 1.0f / w;
        float rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        float ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        float rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4f mul(float scalar) {
        return mul(scalar, this);
    }
    public Vector4f mul(float scalar, Vector4f dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        dest.w = w * scalar;
        return dest;
    }
    public Vector4f mul(float x, float y, float z, float w) {
        return mul(x, y, z, w, this);
    }
    public Vector4f mul(float x, float y, float z, float w, Vector4f dest) {
        dest.x = this.x * x;
        dest.y = this.y * y;
        dest.z = this.z * z;
        dest.w = this.w * w;
        return dest;
    }
    public Vector4f div(float scalar) {
        return div(scalar, this);
    }
    public Vector4f div(float scalar, Vector4f dest) {
        float inv = 1.0f / scalar;
        dest.x = x * inv;
        dest.y = y * inv;
        dest.z = z * inv;
        dest.w = w * inv;
        return dest;
    }
    public Vector4f div(float x, float y, float z, float w) {
        return div(x, y, z, w, this);
    }
    public Vector4f div(float x, float y, float z, float w, Vector4f dest) {
        dest.x = this.x / x;
        dest.y = this.y / y;
        dest.z = this.z / z;
        dest.w = this.w / w;
        return dest;
    }
    public Vector4f rotate(Quaternionfc quat) {
        return quat.transform(this, this);
    }
    public Vector4f rotate(Quaternionfc quat, Vector4f dest) {
        return quat.transform(this, dest);
    }
    public Vector4f rotateAxis(float angle, float x, float y, float z) {
        return rotateAxis(angle, x, y, z, this);
    }
    public Vector4f rotateAxis(float angle, float aX, float aY, float aZ, Vector4f dest) {
        if (aY == 0.0f && aZ == 0.0f && Math.absEqualsOne(aX))
            return rotateX(aX * angle, dest);
        else if (aX == 0.0f && aZ == 0.0f && Math.absEqualsOne(aY))
            return rotateY(aY * angle, dest);
        else if (aX == 0.0f && aY == 0.0f && Math.absEqualsOne(aZ))
            return rotateZ(aZ * angle, dest);
        return rotateAxisInternal(angle, aX, aY, aZ, dest);
    }
    private Vector4f rotateAxisInternal(float angle, float aX, float aY, float aZ, Vector4f dest) {
        float hangle = angle * 0.5f;
        float sinAngle = Math.sin(hangle);
        float qx = aX * sinAngle, qy = aY * sinAngle, qz = aZ * sinAngle;
        float qw = Math.cosFromSin(sinAngle, hangle);
        float w2 = qw * qw, x2 = qx * qx, y2 = qy * qy, z2 = qz * qz, zw = qz * qw;
        float xy = qx * qy, xz = qx * qz, yw = qy * qw, yz = qy * qz, xw = qx * qw;
        float x = this.x, y = this.y, z = this.z;
        dest.x = (w2 + x2 - z2 - y2) * x + (-zw + xy - zw + xy) * y + (yw + xz + xz + yw) * z;
        dest.y = (xy + zw + zw + xy) * x + ( y2 - z2 + w2 - x2) * y + (yz + yz - xw - xw) * z;
        dest.z = (xz - yw + xz - yw) * x + ( yz + yz + xw + xw) * y + (z2 - y2 - x2 + w2) * z;
        return dest;
    }
    public Vector4f rotateX(float angle) {
        return rotateX(angle, this);
    }
    public Vector4f rotateX(float angle, Vector4f dest) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float y = this.y * cos - this.z * sin;
        float z = this.y * sin + this.z * cos;
        dest.x = this.x;
        dest.y = y;
        dest.z = z;
        dest.w = this.w;
        return dest;
    }
    public Vector4f rotateY(float angle) {
        return rotateY(angle, this);
    }
    public Vector4f rotateY(float angle, Vector4f dest) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float x =  this.x * cos + this.z * sin;
        float z = -this.x * sin + this.z * cos;
        dest.x = x;
        dest.y = this.y;
        dest.z = z;
        dest.w = this.w;
        return dest;
    }
    public Vector4f rotateZ(float angle) {
        return rotateZ(angle, this);
    }
    public Vector4f rotateZ(float angle, Vector4f dest) {
        float sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        float x = this.x * cos - this.y * sin;
        float y = this.x * sin + this.y * cos;
        dest.x = x;
        dest.y = y;
        dest.z = this.z;
        dest.w = this.w;
        return dest;
    }
    public float lengthSquared() {
        return Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
    }
    public static float lengthSquared(float x, float y, float z, float w) {
        return Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
    }
    public static float lengthSquared(int x, int y, int z, int w) {
        return Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
    }
    public float length() {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
    }
    public static float length(float x, float y, float z, float w) {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
    }
    public Vector4f normalize() {
        return normalize(this);
    }
    public Vector4f normalize(Vector4f dest) {
        float invLength = 1.0f / length();
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        dest.w = w * invLength;
        return dest;
    }
    public Vector4f normalize(float length) {
        return normalize(length, this);
    }
    public Vector4f normalize(float length, Vector4f dest) {
        float invLength = 1.0f / length() * length;
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        dest.w = w * invLength;
        return dest;
    }
    public Vector4f normalize3() {
        return normalize3(this);
    }
    public Vector4f normalize3(Vector4f dest) {
        float invLength = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        dest.w = w * invLength;
        return dest;
    }
    public float distance(Vector4fc v) {
        return distance(v.x(), v.y(), v.z(), v.w());
    }
    public float distance(float x, float y, float z, float w) {
        float dx = this.x - x;
        float dy = this.y - y;
        float dz = this.z - z;
        float dw = this.w - w;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public float distanceSquared(Vector4fc v) {
        return distanceSquared(v.x(), v.y(), v.z(), v.w());
    }
    public float distanceSquared(float x, float y, float z, float w) {
        float dx = this.x - x;
        float dy = this.y - y;
        float dz = this.z - z;
        float dw = this.w - w;
        return Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw)));
    }
    public static float distance(float x1, float y1, float z1, float w1, float x2, float y2, float z2, float w2) {
        float dx = x1 - x2;
        float dy = y1 - y2;
        float dz = z1 - z2;
        float dw = w1 - w2;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public static float distanceSquared(float x1, float y1, float z1, float w1, float x2, float y2, float z2, float w2) {
        float dx = x1 - x2;
        float dy = y1 - y2;
        float dz = z1 - z2;
        float dw = w1 - w2;
        return Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw)));
    }
    public float dot(Vector4fc v) {
        return Math.fma(this.x, v.x(), Math.fma(this.y, v.y(), Math.fma(this.z, v.z(), this.w * v.w())));
    }
    public float dot(float x, float y, float z, float w) {
        return Math.fma(this.x, x, Math.fma(this.y, y, Math.fma(this.z, z, this.w * w)));
    }
    public float angleCos(Vector4fc v) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        float length1Squared = Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
        float length2Squared = Math.fma(v.x(), v.x(), Math.fma(v.y(), v.y(), Math.fma(v.z(), v.z(), v.w() * v.w())));
        float dot = Math.fma(x, v.x(), Math.fma(y, v.y(), Math.fma(z, v.z(), w * v.w())));
        return dot / Math.sqrt(length1Squared * length2Squared);
    }
    public float angle(Vector4fc v) {
        float cos = angleCos(v);
        cos = cos < 1 ? cos : 1;
        cos = cos > -1 ? cos : -1;
        return Math.acos(cos);
    }
    public Vector4f zero() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
        return this;
    }
    public Vector4f negate() {
        return negate(this);
    }
    public Vector4f negate(Vector4f dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        dest.w = -w;
        return dest;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + " " + Runtime.format(z, formatter) + " " + Runtime.format(w, formatter) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(x);
        out.writeFloat(y);
        out.writeFloat(z);
        out.writeFloat(w);
    }
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        this.set(in.readFloat(), in.readFloat(), in.readFloat(), in.readFloat());
    }
    public Vector4f min(Vector4fc v) {
        return min(v, this);
    }
    public Vector4f min(Vector4fc v, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        dest.w = w < v.w() ? w : v.w();
        return dest;
    }
    public Vector4f max(Vector4fc v) {
        return max(v, this);
    }
    public Vector4f max(Vector4fc v, Vector4f dest) {
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        dest.w = w > v.w() ? w : v.w();
        return dest;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(w);
        result = prime * result + Float.floatToIntBits(x);
        result = prime * result + Float.floatToIntBits(y);
        result = prime * result + Float.floatToIntBits(z);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector4f other = (Vector4f) obj;
        if (Float.floatToIntBits(w) != Float.floatToIntBits(other.w))
            return false;
        if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))
            return false;
        if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))
            return false;
        if (Float.floatToIntBits(z) != Float.floatToIntBits(other.z))
            return false;
        return true;
    }
    public boolean equals(Vector4fc v, float delta) {
        if (this == v)
            return true;
        if (v == null)
            return false;
        if (getClass() != v.getClass())
            return false;
        if (!Runtime.equals(x, v.x(), delta))
            return false;
        if (!Runtime.equals(y, v.y(), delta))
            return false;
        if (!Runtime.equals(z, v.z(), delta))
            return false;
        if (!Runtime.equals(w, v.w(), delta))
            return false;
        return true;
    }
    public boolean equals(float x, float y, float z, float w) {
        if (Float.floatToIntBits(this.x) != Float.floatToIntBits(x))
            return false;
        if (Float.floatToIntBits(this.y) != Float.floatToIntBits(y))
            return false;
        if (Float.floatToIntBits(this.z) != Float.floatToIntBits(z))
            return false;
        if (Float.floatToIntBits(this.w) != Float.floatToIntBits(w))
            return false;
        return true;
    }
    public Vector4f smoothStep(Vector4fc v, float t, Vector4f dest) {
        float t2 = t * t;
        float t3 = t2 * t;
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = (x + x - v.x() - v.x()) * t3 + (3.0f * v.x() - 3.0f * x) * t2 + x * t + x;
        dest.y = (y + y - v.y() - v.y()) * t3 + (3.0f * v.y() - 3.0f * y) * t2 + y * t + y;
        dest.z = (z + z - v.z() - v.z()) * t3 + (3.0f * v.z() - 3.0f * z) * t2 + z * t + z;
        dest.w = (w + w - v.w() - v.w()) * t3 + (3.0f * v.w() - 3.0f * w) * t2 + w * t + w;
        return dest;
    }
    public Vector4f hermite(Vector4fc t0, Vector4fc v1, Vector4fc t1, float t, Vector4f dest) {
        float t2 = t * t;
        float t3 = t2 * t;
        float x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = (x + x - v1.x() - v1.x() + t1.x() + t0.x()) * t3 + (3.0f * v1.x() - 3.0f * x - t0.x() - t0.x() - t1.x()) * t2 + x * t + x;
        dest.y = (y + y - v1.y() - v1.y() + t1.y() + t0.y()) * t3 + (3.0f * v1.y() - 3.0f * y - t0.y() - t0.y() - t1.y()) * t2 + y * t + y;
        dest.z = (z + z - v1.z() - v1.z() + t1.z() + t0.z()) * t3 + (3.0f * v1.z() - 3.0f * z - t0.z() - t0.z() - t1.z()) * t2 + z * t + z;
        dest.w = (w + w - v1.w() - v1.w() + t1.w() + t0.w()) * t3 + (3.0f * v1.w() - 3.0f * w - t0.w() - t0.w() - t1.w()) * t2 + w * t + w;
        return dest;
    }
    public Vector4f lerp(Vector4fc other, float t) {
        return lerp(other, t, this);
    }
    public Vector4f lerp(Vector4fc other, float t, Vector4f dest) {
        dest.x = Math.fma(other.x() - x, t, x);
        dest.y = Math.fma(other.y() - y, t, y);
        dest.z = Math.fma(other.z() - z, t, z);
        dest.w = Math.fma(other.w() - w, t, w);
        return dest;
    }
    public float get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        case 3:
            return w;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector4i get(int mode, Vector4i dest) {
        dest.x = Math.roundUsing(this.x(), mode);
        dest.y = Math.roundUsing(this.y(), mode);
        dest.z = Math.roundUsing(this.z(), mode);
        dest.w = Math.roundUsing(this.w(), mode);
        return dest;
    }
    public Vector4f get(Vector4f dest) {
        dest.x = this.x();
        dest.y = this.y();
        dest.z = this.z();
        dest.w = this.w();
        return dest;
    }
    public Vector4d get(Vector4d dest) {
        dest.x = this.x();
        dest.y = this.y();
        dest.z = this.z();
        dest.w = this.w();
        return dest;
    }
    public int maxComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        float absW = Math.abs(w);
        if (absX >= absY && absX >= absZ && absX >= absW) {
            return 0;
        } else if (absY >= absZ && absY >= absW) {
            return 1;
        } else if (absZ >= absW) {
            return 2;
        }
        return 3;
    }
    public int minComponent() {
        float absX = Math.abs(x);
        float absY = Math.abs(y);
        float absZ = Math.abs(z);
        float absW = Math.abs(w);
        if (absX < absY && absX < absZ && absX < absW) {
            return 0;
        } else if (absY < absZ && absY < absW) {
            return 1;
        } else if (absZ < absW) {
            return 2;
        }
        return 3;
    }
    public Vector4f floor() {
        return floor(this);
    }
    public Vector4f floor(Vector4f dest) {
        dest.x = Math.floor(x);
        dest.y = Math.floor(y);
        dest.z = Math.floor(z);
        dest.w = Math.floor(w);
        return dest;
    }
    public Vector4f ceil() {
        return ceil(this);
    }
    public Vector4f ceil(Vector4f dest) {
        dest.x = Math.ceil(x);
        dest.y = Math.ceil(y);
        dest.z = Math.ceil(z);
        dest.w = Math.ceil(w);
        return dest;
    }
    public Vector4f round() {
        return round(this);
    }
    public Vector4f round(Vector4f dest) {
        dest.x = Math.round(x);
        dest.y = Math.round(y);
        dest.z = Math.round(z);
        dest.w = Math.round(w);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y) && Math.isFinite(z) && Math.isFinite(w);
    }
    public Vector4f absolute() {
        return absolute(this);
    }
    public Vector4f absolute(Vector4f dest) {
        dest.x = Math.abs(x);
        dest.y = Math.abs(y);
        dest.z = Math.abs(z);
        dest.w = Math.abs(w);
        return dest;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Quaternionf implements Externalizable, Cloneable, Quaternionfc {
    private static final long serialVersionUID = 1L;
    private int __pad;
    public float w;
    public float x;
    public float y;
    public float z;
    public Quaternionf() {
        this.w = 1.0f;
    }
    public Quaternionf(double x, double y, double z, double w) {
        this.x = (float) x;
        this.y = (float) y;
        this.z = (float) z;
        this.w = (float) w;
    }
    public Quaternionf(float x, float y, float z, float w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    public Quaternionf(Quaternionfc source) {
        set(source);
    }
    public Quaternionf(Quaterniondc source) {
        set(source);
    }
    public Quaternionf(AxisAngle4f axisAngle) {
        float sin = Math.sin(axisAngle.angle * 0.5f);
        float cos = Math.cosFromSin(sin, axisAngle.angle * 0.5f);
        x = axisAngle.x * sin;
        y = axisAngle.y * sin;
        z = axisAngle.z * sin;
        w = cos;
    }
    public Quaternionf(AxisAngle4d axisAngle) {
        double sin = Math.sin(axisAngle.angle * 0.5f);
        double cos = Math.cosFromSin(sin, axisAngle.angle * 0.5f);
        x = (float) (axisAngle.x * sin);
        y = (float) (axisAngle.y * sin);
        z = (float) (axisAngle.z * sin);
        w = (float) cos;
    }
    public float x() {
        return this.x;
    }
    public float y() {
        return this.y;
    }
    public float z() {
        return this.z;
    }
    public float w() {
        return this.w;
    }
    public Quaternionf normalize() {
        return normalize(this);
    }
    public Quaternionf normalize(Quaternionf dest) {
        float invNorm = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
        dest.x = x * invNorm;
        dest.y = y * invNorm;
        dest.z = z * invNorm;
        dest.w = w * invNorm;
        return dest;
    }
    public Quaternionf add(float x, float y, float z, float w) {
        return add(x, y, z, w, this);
    }
    public Quaternionf add(float x, float y, float z, float w, Quaternionf dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        dest.w = this.w + w;
        return dest;
    }
    public Quaternionf add(Quaternionfc q2) {
        return add(q2, this);
    }
    public Quaternionf add(Quaternionfc q2, Quaternionf dest) {
        dest.x = x + q2.x();
        dest.y = y + q2.y();
        dest.z = z + q2.z();
        dest.w = w + q2.w();
        return dest;
    }
    public Quaternionf sub(float x, float y, float z, float w) {
        return sub(x, y, z, w, this);
    }
    public Quaternionf sub(float x, float y, float z, float w, Quaternionf dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        dest.w = this.w - w;
        return dest;
    }
    public Quaternionf sub(Quaternionfc q2) {
        return sub(q2, this);
    }
    public Quaternionf sub(Quaternionfc q2, Quaternionf dest) {
        dest.x = x - q2.x();
        dest.y = y - q2.y();
        dest.z = z - q2.z();
        dest.w = w - q2.w();
        return dest;
    }
    public float dot(Quaternionf otherQuat) {
        return this.x * otherQuat.x + this.y * otherQuat.y + this.z * otherQuat.z + this.w * otherQuat.w;
    }
    public float angle() {
        return (float) (2.0 * Math.safeAcos(w));
    }
    public Matrix3f get(Matrix3f dest) {
        return dest.set(this);
    }
    public Matrix3d get(Matrix3d dest) {
        return dest.set(this);
    }
    public Matrix4f get(Matrix4f dest) {
        return dest.set(this);
    }
    public Matrix4d get(Matrix4d dest) {
        return dest.set(this);
    }
    public Matrix4x3f get(Matrix4x3f dest) {
        return dest.set(this);
    }
    public Matrix4x3d get(Matrix4x3d dest) {
        return dest.set(this);
    }
    public AxisAngle4f get(AxisAngle4f dest) {
        float x = this.x;
        float y = this.y;
        float z = this.z;
        float w = this.w;
        if (w > 1.0f) {
            float invNorm = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
            x *= invNorm;
            y *= invNorm;
            z *= invNorm;
            w *= invNorm;
        }
        dest.angle = (float) (2.0f * Math.acos(w));
        float s = Math.sqrt(1.0f - w * w);
        if (s < 0.001f) {
            dest.x = x;
            dest.y = y;
            dest.z = z;
        } else {
            s = 1.0f / s;
            dest.x = x * s;
            dest.y = y * s;
            dest.z = z * s;
        }
        return dest;
    }
    public AxisAngle4d get(AxisAngle4d dest) {
        float x = this.x;
        float y = this.y;
        float z = this.z;
        float w = this.w;
        if (w > 1.0f) {
            float invNorm = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
            x *= invNorm;
            y *= invNorm;
            z *= invNorm;
            w *= invNorm;
        }
        dest.angle = (float) (2.0f * Math.acos(w));
        float s = Math.sqrt(1.0f - w * w);
        if (s < 0.001f) {
            dest.x = x;
            dest.y = y;
            dest.z = z;
        } else {
            s = 1.0f / s;
            dest.x = x * s;
            dest.y = y * s;
            dest.z = z * s;
        }
        return dest;
    }
    public Quaterniond get(Quaterniond dest) {
        return dest.set(this);
    }
    public Quaternionf get(Quaternionf dest) {
        return dest.set(this);
    }
    public ByteBuffer getAsMatrix3f(ByteBuffer dest) {
        MemUtil.INSTANCE.putMatrix3f(this, dest.position(), dest);
        return dest;
    }
    public FloatBuffer getAsMatrix3f(FloatBuffer dest) {
        MemUtil.INSTANCE.putMatrix3f(this, dest.position(), dest);
        return dest;
    }
    public ByteBuffer getAsMatrix4f(ByteBuffer dest) {
        MemUtil.INSTANCE.putMatrix4f(this, dest.position(), dest);
        return dest;
    }
    public FloatBuffer getAsMatrix4f(FloatBuffer dest) {
        MemUtil.INSTANCE.putMatrix4f(this, dest.position(), dest);
        return dest;
    }
    public ByteBuffer getAsMatrix4x3f(ByteBuffer dest) {
        MemUtil.INSTANCE.putMatrix4x3f(this, dest.position(), dest);
        return dest;
    }
    public FloatBuffer getAsMatrix4x3f(FloatBuffer dest) {
        MemUtil.INSTANCE.putMatrix4x3f(this, dest.position(), dest);
        return dest;
    }
    public Quaternionf set(float x, float y, float z, float w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    public Quaternionf set(Quaternionfc q) {
        this.x = q.x();
        this.y = q.y();
        this.z = q.z();
        this.w = q.w();
        return this;
    }
    public Quaternionf set(Quaterniondc q) {
        this.x = (float) q.x();
        this.y = (float) q.y();
        this.z = (float) q.z();
        this.w = (float) q.w();
        return this;
    }
    public Quaternionf set(AxisAngle4f axisAngle) {
        return setAngleAxis(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Quaternionf set(AxisAngle4d axisAngle) {
        return setAngleAxis(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Quaternionf setAngleAxis(float angle, float x, float y, float z) {
        float s = Math.sin(angle * 0.5f);
        this.x = x * s;
        this.y = y * s;
        this.z = z * s;
        this.w = Math.cosFromSin(s, angle * 0.5f);
        return this;
    }
    public Quaternionf setAngleAxis(double angle, double x, double y, double z) {
        double s = Math.sin(angle * 0.5f);
        this.x = (float) (x * s);
        this.y = (float) (y * s);
        this.z = (float) (z * s);
        this.w = (float) Math.cosFromSin(s, angle * 0.5f);
        return this;
    }
    public Quaternionf rotationAxis(AxisAngle4f axisAngle) {
        return rotationAxis(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Quaternionf rotationAxis(float angle, float axisX, float axisY, float axisZ) {
        float hangle = angle / 2.0f;
        float sinAngle = Math.sin(hangle);
        float invVLength = Math.invsqrt(axisX * axisX + axisY * axisY + axisZ * axisZ);
        return set(axisX * invVLength * sinAngle,
                   axisY * invVLength * sinAngle,
                   axisZ * invVLength * sinAngle,
                   Math.cosFromSin(sinAngle, hangle));
    }
    public Quaternionf rotationAxis(float angle, Vector3fc axis) {
        return rotationAxis(angle, axis.x(), axis.y(), axis.z());
    }
    public Quaternionf rotationX(float angle) {
        float sin = Math.sin(angle * 0.5f);
        float cos = Math.cosFromSin(sin, angle * 0.5f);
        return set(sin, 0, 0, cos);
    }
    public Quaternionf rotationY(float angle) {
        float sin = Math.sin(angle * 0.5f);
        float cos = Math.cosFromSin(sin, angle * 0.5f);
        return set(0, sin, 0, cos);
    }
    public Quaternionf rotationZ(float angle) {
        float sin = Math.sin(angle * 0.5f);
        float cos = Math.cosFromSin(sin, angle * 0.5f);
        return set(0, 0, sin, cos);
    }
    private void setFromUnnormalized(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) {
        float nm00 = m00, nm01 = m01, nm02 = m02;
        float nm10 = m10, nm11 = m11, nm12 = m12;
        float nm20 = m20, nm21 = m21, nm22 = m22;
        float lenX = Math.invsqrt(m00 * m00 + m01 * m01 + m02 * m02);
        float lenY = Math.invsqrt(m10 * m10 + m11 * m11 + m12 * m12);
        float lenZ = Math.invsqrt(m20 * m20 + m21 * m21 + m22 * m22);
        nm00 *= lenX; nm01 *= lenX; nm02 *= lenX;
        nm10 *= lenY; nm11 *= lenY; nm12 *= lenY;
        nm20 *= lenZ; nm21 *= lenZ; nm22 *= lenZ;
        setFromNormalized(nm00, nm01, nm02, nm10, nm11, nm12, nm20, nm21, nm22);
    }
    private void setFromNormalized(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) {
        float t;
        float tr = m00 + m11 + m22;
        if (tr >= 0.0f) {
            t = Math.sqrt(tr + 1.0f);
            w = t * 0.5f;
            t = 0.5f / t;
            x = (m12 - m21) * t;
            y = (m20 - m02) * t;
            z = (m01 - m10) * t;
        } else {
            if (m00 >= m11 && m00 >= m22) {
                t = Math.sqrt(m00 - (m11 + m22) + 1.0f);
                x = t * 0.5f;
                t = 0.5f / t;
                y = (m10 + m01) * t;
                z = (m02 + m20) * t;
                w = (m12 - m21) * t;
            } else if (m11 > m22) {
                t = Math.sqrt(m11 - (m22 + m00) + 1.0f);
                y = t * 0.5f;
                t = 0.5f / t;
                z = (m21 + m12) * t;
                x = (m10 + m01) * t;
                w = (m20 - m02) * t;
            } else {
                t = Math.sqrt(m22 - (m00 + m11) + 1.0f);
                z = t * 0.5f;
                t = 0.5f / t;
                x = (m02 + m20) * t;
                y = (m21 + m12) * t;
                w = (m01 - m10) * t;
            }
        }
    }
    private void setFromUnnormalized(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22) {
        double nm00 = m00, nm01 = m01, nm02 = m02;
        double nm10 = m10, nm11 = m11, nm12 = m12;
        double nm20 = m20, nm21 = m21, nm22 = m22;
        double lenX = Math.invsqrt(m00 * m00 + m01 * m01 + m02 * m02);
        double lenY = Math.invsqrt(m10 * m10 + m11 * m11 + m12 * m12);
        double lenZ = Math.invsqrt(m20 * m20 + m21 * m21 + m22 * m22);
        nm00 *= lenX; nm01 *= lenX; nm02 *= lenX;
        nm10 *= lenY; nm11 *= lenY; nm12 *= lenY;
        nm20 *= lenZ; nm21 *= lenZ; nm22 *= lenZ;
        setFromNormalized(nm00, nm01, nm02, nm10, nm11, nm12, nm20, nm21, nm22);
    }
    private void setFromNormalized(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22) {
        double t;
        double tr = m00 + m11 + m22;
        if (tr >= 0.0) {
            t = Math.sqrt(tr + 1.0);
            w = (float) (t * 0.5);
            t = 0.5 / t;
            x = (float) ((m12 - m21) * t);
            y = (float) ((m20 - m02) * t);
            z = (float) ((m01 - m10) * t);
        } else {
            if (m00 >= m11 && m00 >= m22) {
                t = Math.sqrt(m00 - (m11 + m22) + 1.0);
                x = (float) (t * 0.5);
                t = 0.5 / t;
                y = (float) ((m10 + m01) * t);
                z = (float) ((m02 + m20) * t);
                w = (float) ((m12 - m21) * t);
            } else if (m11 > m22) {
                t = Math.sqrt(m11 - (m22 + m00) + 1.0);
                y = (float) (t * 0.5);
                t = 0.5 / t;
                z = (float) ((m21 + m12) * t);
                x = (float) ((m10 + m01) * t);
                w = (float) ((m20 - m02) * t);
            } else {
                t = Math.sqrt(m22 - (m00 + m11) + 1.0);
                z = (float) (t * 0.5);
                t = 0.5 / t;
                x = (float) ((m02 + m20) * t);
                y = (float) ((m21 + m12) * t);
                w = (float) ((m01 - m10) * t);
            }
        }
    }
    public Quaternionf setFromUnnormalized(Matrix4fc mat) {
        setFromUnnormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromUnnormalized(Matrix4x3fc mat) {
        setFromUnnormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromUnnormalized(Matrix4x3dc mat) {
        setFromUnnormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromNormalized(Matrix4fc mat) {
        setFromNormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromNormalized(Matrix4x3fc mat) {
        setFromNormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromNormalized(Matrix4x3dc mat) {
        setFromNormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromUnnormalized(Matrix4dc mat) {
        setFromUnnormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromNormalized(Matrix4dc mat) {
        setFromNormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromUnnormalized(Matrix3fc mat) {
        setFromUnnormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromNormalized(Matrix3fc mat) {
        setFromNormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromUnnormalized(Matrix3dc mat) {
        setFromUnnormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf setFromNormalized(Matrix3dc mat) {
        setFromNormalized(mat.m00(), mat.m01(), mat.m02(), mat.m10(), mat.m11(), mat.m12(), mat.m20(), mat.m21(), mat.m22());
        return this;
    }
    public Quaternionf fromAxisAngleRad(Vector3fc axis, float angle) {
        return fromAxisAngleRad(axis.x(), axis.y(), axis.z(), angle);
    }
    public Quaternionf fromAxisAngleRad(float axisX, float axisY, float axisZ, float angle) {
        float hangle = angle / 2.0f;
        float sinAngle = Math.sin(hangle);
        float invVLength = 1.0f / Math.sqrt(axisX * axisX + axisY * axisY + axisZ * axisZ);
        float invVLengthTimesSinAngle = invVLength * sinAngle;
        x = axisX * invVLengthTimesSinAngle;
        y = axisY * invVLengthTimesSinAngle;
        z = axisZ * invVLengthTimesSinAngle;
        w = Math.cosFromSin(sinAngle, hangle);
        return this;
    }
    public Quaternionf fromAxisAngleDeg(Vector3fc axis, float angle) {
        return fromAxisAngleRad(axis.x(), axis.y(), axis.z(), Math.toRadians(angle));
    }
    public Quaternionf fromAxisAngleDeg(float axisX, float axisY, float axisZ, float angle) {
        return fromAxisAngleRad(axisX, axisY, axisZ, Math.toRadians(angle));
    }
    public Quaternionf mul(Quaternionfc q) {
        return mul(q, this);
    }
    public Quaternionf mul(Quaternionfc q, Quaternionf dest) {
        if (JvmciCode.canUseJvmci && q instanceof Quaternionf) {
            JvmciCode.__Quaternionf_mul(this, (Quaternionf) q, dest);
            return dest;
        }
        return dest.set(Math.fma(w, q.x(), Math.fma(x, q.w(), Math.fma(y, q.z(), -z * q.y()))),
                        Math.fma(w, q.y(), Math.fma(-x, q.z(), Math.fma(y, q.w(), z * q.x()))),
                        Math.fma(w, q.z(), Math.fma(x, q.y(), Math.fma(-y, q.x(), z * q.w()))),
                        Math.fma(w, q.w(), Math.fma(-x, q.x(), Math.fma(-y, q.y(), -z * q.z()))));
    }
    public Quaternionf mul(float qx, float qy, float qz, float qw) {
        return mul(qx, qy, qz, qw, this);
    }
    public Quaternionf mul(float qx, float qy, float qz, float qw, Quaternionf dest) {
        return dest.set(Math.fma(w, qx, Math.fma(x, qw, Math.fma(y, qz, -z * qy))),
                        Math.fma(w, qy, Math.fma(-x, qz, Math.fma(y, qw, z * qx))),
                        Math.fma(w, qz, Math.fma(x, qy, Math.fma(-y, qx, z * qw))),
                        Math.fma(w, qw, Math.fma(-x, qx, Math.fma(-y, qy, -z * qz))));
    }
    public Quaternionf mul(float f) {
        return mul(f, this);
    }
    public Quaternionf mul(float f, Quaternionf dest) {
        dest.x = x * f;
        dest.y = y * f;
        dest.z = z * f;
        dest.w = w * f;
        return dest;
    }
    public Quaternionf premul(Quaternionfc q) {
        return premul(q, this);
    }
    public Quaternionf premul(Quaternionfc q, Quaternionf dest) {
        return dest.set(Math.fma(q.w(), x, Math.fma(q.x(), w, Math.fma(q.y(), z, -q.z() * y))),
                        Math.fma(q.w(), y, Math.fma(-q.x(), z, Math.fma(q.y(), w, q.z() * x))),
                        Math.fma(q.w(), z, Math.fma(q.x(), y, Math.fma(-q.y(), x, q.z() * w))),
                        Math.fma(q.w(), w, Math.fma(-q.x(), x, Math.fma(-q.y(), y, -q.z() * z))));
    }
    public Quaternionf premul(float qx, float qy, float qz, float qw) {
        return premul(qx, qy, qz, qw, this);
    }
    public Quaternionf premul(float qx, float qy, float qz, float qw, Quaternionf dest) {
        return dest.set(Math.fma(qw, x, Math.fma(qx, w, Math.fma(qy, z, -qz * y))),
                        Math.fma(qw, y, Math.fma(-qx, z, Math.fma(qy, w, qz * x))),
                        Math.fma(qw, z, Math.fma(qx, y, Math.fma(-qy, x, qz * w))),
                        Math.fma(qw, w, Math.fma(-qx, x, Math.fma(-qy, y, -qz * z))));
    }
    public Vector3f transform(Vector3f vec){
        return transform(vec.x, vec.y, vec.z, vec);
    }
    public Vector3f transformInverse(Vector3f vec){
        return transformInverse(vec.x, vec.y, vec.z, vec);
    }
    public Vector3f transformPositiveX(Vector3f dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float xz = x * z;
        float yw = y * w;
        dest.x = ww + xx - zz - yy;
        dest.y = xy + zw + zw + xy;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector4f transformPositiveX(Vector4f dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float xz = x * z;
        float yw = y * w;
        dest.x = ww + xx - zz - yy;
        dest.y = xy + zw + zw + xy;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector3f transformUnitPositiveX(Vector3f dest) {
        float xy = x * y, xz = x * z, yy = y * y;
        float yw = y * w, zz = z * z, zw = z * w;
        dest.x = 1 - yy - zz - yy - zz;
        dest.y = xy + zw + xy + zw;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector4f transformUnitPositiveX(Vector4f dest) {
        float yy = y * y, zz = z * z, xy = x * y;
        float xz = x * z, yw = y * w, zw = z * w;
        dest.x = 1 - yy - yy - zz - zz;
        dest.y = xy + zw + xy + zw;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector3f transformPositiveY(Vector3f dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float yz = y * z;
        float xw = x * w;
        dest.x = -zw + xy - zw + xy;
        dest.y = yy - zz + ww - xx;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector4f transformPositiveY(Vector4f dest) {
        float ww = w * w, xx = x * x, yy = y * y;
        float zz = z * z, zw = z * w, xy = x * y;
        float yz = y * z, xw = x * w;
        dest.x = -zw + xy - zw + xy;
        dest.y = yy - zz + ww - xx;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector4f transformUnitPositiveY(Vector4f dest) {
        float xx = x * x, zz = z * z, xy = x * y;
        float yz = y * z, xw = x * w, zw = z * w;
        dest.x = xy - zw + xy - zw;
        dest.y = 1 - xx - xx - zz - zz;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector3f transformUnitPositiveY(Vector3f dest) {
        float xx = x * x, zz = z * z, xy = x * y;
        float yz = y * z, xw = x * w, zw = z * w;
        dest.x = xy - zw + xy - zw;
        dest.y = 1 - xx - xx - zz - zz;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector3f transformPositiveZ(Vector3f dest) {
        float ww = w * w, xx = x * x, yy = y * y;
        float zz = z * z, xz = x * z, yw = y * w;
        float yz = y * z, xw = x * w;
        dest.x = yw + xz + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = zz - yy - xx + ww;
        return dest;
    }
    public Vector4f transformPositiveZ(Vector4f dest) {
        float ww = w * w, xx = x * x, yy = y * y;
        float zz = z * z, xz = x * z, yw = y * w;
        float yz = y * z, xw = x * w;
        dest.x = yw + xz + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = zz - yy - xx + ww;
        return dest;
    }
    public Vector4f transformUnitPositiveZ(Vector4f dest) {
        float xx = x * x, yy = y * y, xz = x * z;
        float yz = y * z, xw = x * w, yw = y * w;
        dest.x = xz + yw + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = 1 - xx - xx - yy - yy;
        return dest;
    }
    public Vector3f transformUnitPositiveZ(Vector3f dest) {
        float xx = x * x, yy = y * y, xz = x * z;
        float yz = y * z, xw = x * w, yw = y * w;
        dest.x = xz + yw + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = 1.0f - xx - xx - yy - yy;
        return dest;
    }
    public Vector4f transform(Vector4f vec){
        return transform(vec, vec);
    }
    public Vector4f transformInverse(Vector4f vec){
        return transformInverse(vec, vec);
    }
    public Vector3f transform(Vector3fc vec, Vector3f dest) {
        return transform(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3f transformInverse(Vector3fc vec, Vector3f dest) {
        return transformInverse(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3f transform(float x, float y, float z, Vector3f dest) {
        float xx = this.x * this.x, yy = this.y * this.y, zz = this.z * this.z, ww = this.w * this.w;
        float xy = this.x * this.y, xz = this.x * this.z, yz = this.y * this.z, xw = this.x * this.w;
        float zw = this.z * this.w, yw = this.y * this.w, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy - zw) * k, y, (2 * (xz + yw) * k) * z)),
                        Math.fma(2 * (xy + zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz - xw) * k) * z)),
                        Math.fma(2 * (xz - yw) * k, x, Math.fma(2 * (yz + xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector3f transformInverse(float x, float y, float z, Vector3f dest) {
        float n = 1.0f / Math.fma(this.x, this.x, Math.fma(this.y, this.y, Math.fma(this.z, this.z, this.w * this.w)));
        float qx = this.x * n, qy = this.y * n, qz = this.z * n, qw = this.w * n;
        float xx = qx * qx, yy = qy * qy, zz = qz * qz, ww = qw * qw;
        float xy = qx * qy, xz = qx * qz, yz = qy * qz, xw = qx * qw;
        float zw = qz * qw, yw = qy * qw, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy + zw) * k, y, (2 * (xz - yw) * k) * z)),
                        Math.fma(2 * (xy - zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz + xw) * k) * z)),
                        Math.fma(2 * (xz + yw) * k, x, Math.fma(2 * (yz - xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector3f transformUnit(Vector3f vec) {
        return transformUnit(vec.x, vec.y, vec.z, vec);
    }
    public Vector3f transformInverseUnit(Vector3f vec) {
        return transformInverseUnit(vec.x, vec.y, vec.z, vec);
    }
    public Vector3f transformUnit(Vector3fc vec, Vector3f dest) {
        return transformUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3f transformInverseUnit(Vector3fc vec, Vector3f dest) {
        return transformInverseUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3f transformUnit(float x, float y, float z, Vector3f dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy - zw), y, (2 * (xz + yw)) * z)),
                        Math.fma(2 * (xy + zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz - xw)) * z)),
                        Math.fma(2 * (xz - yw), x, Math.fma(2 * (yz + xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector3f transformInverseUnit(float x, float y, float z, Vector3f dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy + zw), y, (2 * (xz - yw)) * z)),
                        Math.fma(2 * (xy - zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz + xw)) * z)),
                        Math.fma(2 * (xz + yw), x, Math.fma(2 * (yz - xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector4f transform(Vector4fc vec, Vector4f dest) {
        return transform(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4f transformInverse(Vector4fc vec, Vector4f dest) {
        return transformInverse(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4f transform(float x, float y, float z, Vector4f dest) {
        float xx = this.x * this.x, yy = this.y * this.y, zz = this.z * this.z, ww = this.w * this.w;
        float xy = this.x * this.y, xz = this.x * this.z, yz = this.y * this.z, xw = this.x * this.w;
        float zw = this.z * this.w, yw = this.y * this.w, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy - zw) * k, y, (2 * (xz + yw) * k) * z)),
                        Math.fma(2 * (xy + zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz - xw) * k) * z)),
                        Math.fma(2 * (xz - yw) * k, x, Math.fma(2 * (yz + xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector4f transformInverse(float x, float y, float z, Vector4f dest) {
        float n = 1.0f / Math.fma(this.x, this.x, Math.fma(this.y, this.y, Math.fma(this.z, this.z, this.w * this.w)));
        float qx = this.x * n, qy = this.y * n, qz = this.z * n, qw = this.w * n;
        float xx = qx * qx, yy = qy * qy, zz = qz * qz, ww = qw * qw;
        float xy = qx * qy, xz = qx * qz, yz = qy * qz, xw = qx * qw;
        float zw = qz * qw, yw = qy * qw, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy + zw) * k, y, (2 * (xz - yw) * k) * z)),
                        Math.fma(2 * (xy - zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz + xw) * k) * z)),
                        Math.fma(2 * (xz + yw) * k, x, Math.fma(2 * (yz - xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector3d transform(Vector3d vec){
        return transform(vec.x, vec.y, vec.z, vec);
    }
    public Vector3d transformInverse(Vector3d vec){
        return transformInverse(vec.x, vec.y, vec.z, vec);
    }
    public Vector4f transformUnit(Vector4f vec) {
        return transformUnit(vec.x, vec.y, vec.z, vec);
    }
    public Vector4f transformInverseUnit(Vector4f vec) {
        return transformInverseUnit(vec.x, vec.y, vec.z, vec);
    }
    public Vector4f transformUnit(Vector4fc vec, Vector4f dest) {
        return transformUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4f transformInverseUnit(Vector4fc vec, Vector4f dest) {
        return transformInverseUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4f transformUnit(float x, float y, float z, Vector4f dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy - zw), y, (2 * (xz + yw)) * z)),
                        Math.fma(2 * (xy + zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz - xw)) * z)),
                        Math.fma(2 * (xz - yw), x, Math.fma(2 * (yz + xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector4f transformInverseUnit(float x, float y, float z, Vector4f dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy + zw), y, (2 * (xz - yw)) * z)),
                        Math.fma(2 * (xy - zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz + xw)) * z)),
                        Math.fma(2 * (xz + yw), x, Math.fma(2 * (yz - xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector3d transformPositiveX(Vector3d dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float xz = x * z;
        float yw = y * w;
        dest.x = ww + xx - zz - yy;
        dest.y = xy + zw + zw + xy;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector4d transformPositiveX(Vector4d dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float xz = x * z;
        float yw = y * w;
        dest.x = ww + xx - zz - yy;
        dest.y = xy + zw + zw + xy;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector3d transformUnitPositiveX(Vector3d dest) {
        float yy = y * y;
        float zz = z * z;
        float xy = x * y;
        float xz = x * z;
        float yw = y * w;
        float zw = z * w;
        dest.x = 1 - yy - yy - zz - zz;
        dest.y = xy + zw + xy + zw;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector4d transformUnitPositiveX(Vector4d dest) {
        float yy = y * y;
        float zz = z * z;
        float xy = x * y;
        float xz = x * z;
        float yw = y * w;
        float zw = z * w;
        dest.x = 1 - yy - yy - zz - zz;
        dest.y = xy + zw + xy + zw;
        dest.z = xz - yw + xz - yw;
        return dest;
    }
    public Vector3d transformPositiveY(Vector3d dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float yz = y * z;
        float xw = x * w;
        dest.x = -zw + xy - zw + xy;
        dest.y = yy - zz + ww - xx;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector4d transformPositiveY(Vector4d dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float zw = z * w;
        float xy = x * y;
        float yz = y * z;
        float xw = x * w;
        dest.x = -zw + xy - zw + xy;
        dest.y = yy - zz + ww - xx;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector4d transformUnitPositiveY(Vector4d dest) {
        float xx = x * x;
        float zz = z * z;
        float xy = x * y;
        float yz = y * z;
        float xw = x * w;
        float zw = z * w;
        dest.x = xy - zw + xy - zw;
        dest.y = 1 - xx - xx - zz - zz;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector3d transformUnitPositiveY(Vector3d dest) {
        float xx = x * x;
        float zz = z * z;
        float xy = x * y;
        float yz = y * z;
        float xw = x * w;
        float zw = z * w;
        dest.x = xy - zw + xy - zw;
        dest.y = 1 - xx - xx - zz - zz;
        dest.z = yz + yz + xw + xw;
        return dest;
    }
    public Vector3d transformPositiveZ(Vector3d dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float xz = x * z;
        float yw = y * w;
        float yz = y * z;
        float xw = x * w;
        dest.x = yw + xz + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = zz - yy - xx + ww;
        return dest;
    }
    public Vector4d transformPositiveZ(Vector4d dest) {
        float ww = w * w;
        float xx = x * x;
        float yy = y * y;
        float zz = z * z;
        float xz = x * z;
        float yw = y * w;
        float yz = y * z;
        float xw = x * w;
        dest.x = yw + xz + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = zz - yy - xx + ww;
        return dest;
    }
    public Vector4d transformUnitPositiveZ(Vector4d dest) {
        float xx = x * x;
        float yy = y * y;
        float xz = x * z;
        float yz = y * z;
        float xw = x * w;
        float yw = y * w;
        dest.x = xz + yw + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = 1 - xx - xx - yy - yy;
        return dest;
    }
    public Vector3d transformUnitPositiveZ(Vector3d dest) {
        float xx = x * x;
        float yy = y * y;
        float xz = x * z;
        float yz = y * z;
        float xw = x * w;
        float yw = y * w;
        dest.x = xz + yw + xz + yw;
        dest.y = yz + yz - xw - xw;
        dest.z = 1 - xx - xx - yy - yy;
        return dest;
    }
    public Vector4d transform(Vector4d vec){
        return transform(vec, vec);
    }
    public Vector4d transformInverse(Vector4d vec){
        return transformInverse(vec, vec);
    }
    public Vector3d transform(Vector3dc vec, Vector3d dest) {
        return transform(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3d transformInverse(Vector3dc vec, Vector3d dest) {
        return transformInverse(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3d transform(float x, float y, float z, Vector3d dest) {
        return transform((double) x, (double) y, (double) z, dest);
    }
    public Vector3d transformInverse(float x, float y, float z, Vector3d dest) {
        return transformInverse((double) x, (double) y, (double) z, dest);
    }
    public Vector3d transform(double x, double y, double z, Vector3d dest) {
        float xx = this.x * this.x, yy = this.y * this.y, zz = this.z * this.z, ww = this.w * this.w;
        float xy = this.x * this.y, xz = this.x * this.z, yz = this.y * this.z, xw = this.x * this.w;
        float zw = this.z * this.w, yw = this.y * this.w, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy - zw) * k, y, (2 * (xz + yw) * k) * z)),
                        Math.fma(2 * (xy + zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz - xw) * k) * z)),
                        Math.fma(2 * (xz - yw) * k, x, Math.fma(2 * (yz + xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector3d transformInverse(double x, double y, double z, Vector3d dest) {
        float n = 1.0f / Math.fma(this.x, this.x, Math.fma(this.y, this.y, Math.fma(this.z, this.z, this.w * this.w)));
        float qx = this.x * n, qy = this.y * n, qz = this.z * n, qw = this.w * n;
        float xx = qx * qx, yy = qy * qy, zz = qz * qz, ww = qw * qw;
        float xy = qx * qy, xz = qx * qz, yz = qy * qz, xw = qx * qw;
        float zw = qz * qw, yw = qy * qw, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy + zw) * k, y, (2 * (xz - yw) * k) * z)),
                        Math.fma(2 * (xy - zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz + xw) * k) * z)),
                        Math.fma(2 * (xz + yw) * k, x, Math.fma(2 * (yz - xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector4d transform(Vector4dc vec, Vector4d dest) {
        return transform(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4d transformInverse(Vector4dc vec, Vector4d dest) {
        return transformInverse(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4d transform(double x, double y, double z, Vector4d dest) {
        float xx = this.x * this.x, yy = this.y * this.y, zz = this.z * this.z, ww = this.w * this.w;
        float xy = this.x * this.y, xz = this.x * this.z, yz = this.y * this.z, xw = this.x * this.w;
        float zw = this.z * this.w, yw = this.y * this.w, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy - zw) * k, y, (2 * (xz + yw) * k) * z)),
                        Math.fma(2 * (xy + zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz - xw) * k) * z)),
                        Math.fma(2 * (xz - yw) * k, x, Math.fma(2 * (yz + xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector4d transformInverse(double x, double y, double z, Vector4d dest) {
        float n = 1.0f / Math.fma(this.x, this.x, Math.fma(this.y, this.y, Math.fma(this.z, this.z, this.w * this.w)));
        float qx = this.x * n, qy = this.y * n, qz = this.z * n, qw = this.w * n;
        float xx = qx * qx, yy = qy * qy, zz = qz * qz, ww = qw * qw;
        float xy = qx * qy, xz = qx * qz, yz = qy * qz, xw = qx * qw;
        float zw = qz * qw, yw = qy * qw, k = 1 / (xx + yy + zz + ww);
        return dest.set(Math.fma((xx - yy - zz + ww) * k, x, Math.fma(2 * (xy + zw) * k, y, (2 * (xz - yw) * k) * z)),
                        Math.fma(2 * (xy - zw) * k, x, Math.fma((yy - xx - zz + ww) * k, y, (2 * (yz + xw) * k) * z)),
                        Math.fma(2 * (xz + yw) * k, x, Math.fma(2 * (yz - xw) * k, y, ((zz - xx - yy + ww) * k) * z)));
    }
    public Vector4d transformUnit(Vector4d vec){
        return transformUnit(vec, vec);
    }
    public Vector4d transformInverseUnit(Vector4d vec){
        return transformInverseUnit(vec, vec);
    }
    public Vector3d transformUnit(Vector3dc vec, Vector3d dest) {
        return transformUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3d transformInverseUnit(Vector3dc vec, Vector3d dest) {
        return transformInverseUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector3d transformUnit(float x, float y, float z, Vector3d dest) {
        return transformUnit((double) x, (double) y, (double) z, dest);
    }
    public Vector3d transformInverseUnit(float x, float y, float z, Vector3d dest) {
        return transformInverseUnit((double) x, (double) y, (double) z, dest);
    }
    public Vector3d transformUnit(double x, double y, double z, Vector3d dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy - zw), y, (2 * (xz + yw)) * z)),
                        Math.fma(2 * (xy + zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz - xw)) * z)),
                        Math.fma(2 * (xz - yw), x, Math.fma(2 * (yz + xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector3d transformInverseUnit(double x, double y, double z, Vector3d dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy + zw), y, (2 * (xz - yw)) * z)),
                        Math.fma(2 * (xy - zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz + xw)) * z)),
                        Math.fma(2 * (xz + yw), x, Math.fma(2 * (yz - xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector4d transformUnit(Vector4dc vec, Vector4d dest) {
        return transformUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4d transformInverseUnit(Vector4dc vec, Vector4d dest) {
        return transformInverseUnit(vec.x(), vec.y(), vec.z(), dest);
    }
    public Vector4d transformUnit(double x, double y, double z, Vector4d dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy - zw), y, (2 * (xz + yw)) * z)),
                        Math.fma(2 * (xy + zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz - xw)) * z)),
                        Math.fma(2 * (xz - yw), x, Math.fma(2 * (yz + xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Vector4d transformInverseUnit(double x, double y, double z, Vector4d dest) {
        float xx = this.x * this.x, xy = this.x * this.y, xz = this.x * this.z;
        float xw = this.x * this.w, yy = this.y * this.y, yz = this.y * this.z;
        float yw = this.y * this.w, zz = this.z * this.z, zw = this.z * this.w;
        return dest.set(Math.fma(Math.fma(-2, yy + zz, 1), x, Math.fma(2 * (xy + zw), y, (2 * (xz - yw)) * z)),
                        Math.fma(2 * (xy - zw), x, Math.fma(Math.fma(-2, xx + zz, 1), y, (2 * (yz + xw)) * z)),
                        Math.fma(2 * (xz + yw), x, Math.fma(2 * (yz - xw), y, Math.fma(-2, xx + yy, 1) * z)));
    }
    public Quaternionf invert(Quaternionf dest) {
        float invNorm = 1.0f / Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
        dest.x = -x * invNorm;
        dest.y = -y * invNorm;
        dest.z = -z * invNorm;
        dest.w = w * invNorm;
        return dest;
    }
    public Quaternionf invert() {
        return invert(this);
    }
    public Quaternionf div(Quaternionfc b, Quaternionf dest) {
        float invNorm = 1.0f / Math.fma(b.x(), b.x(), Math.fma(b.y(), b.y(), Math.fma(b.z(), b.z(), b.w() * b.w())));
        float x = -b.x() * invNorm;
        float y = -b.y() * invNorm;
        float z = -b.z() * invNorm;
        float w = b.w() * invNorm;
        return dest.set(Math.fma(this.w, x, Math.fma(this.x, w, Math.fma(this.y, z, -this.z * y))),
                        Math.fma(this.w, y, Math.fma(-this.x, z, Math.fma(this.y, w, this.z * x))),
                        Math.fma(this.w, z, Math.fma(this.x, y, Math.fma(-this.y, x, this.z * w))),
                        Math.fma(this.w, w, Math.fma(-this.x, x, Math.fma(-this.y, y, -this.z * z))));
    }
    public Quaternionf div(Quaternionfc b) {
        return div(b, this);
    }
    public Quaternionf div(float f, Quaternionf dest) {
        dest.x = x / f;
        dest.y = y / f;
        dest.z = z / f;
        dest.w = w / f;
        return this;
    }
    public Quaternionf div(float f) {
        return div(f, this);
    }
    public Quaternionf conjugate() {
        return conjugate(this);
    }
    public Quaternionf conjugate(Quaternionf dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        dest.w = w;
        return dest;
    }
    public Quaternionf identity() {
        x = 0;
        y = 0;
        z = 0;
        w = 1;
        return this;
    }
    public Quaternionf rotateXYZ(float angleX, float angleY, float angleZ) {
        return rotateXYZ(angleX, angleY, angleZ, this);
    }
    public Quaternionf rotateXYZ(float angleX, float angleY, float angleZ, Quaternionf dest) {
        float sx = Math.sin(angleX * 0.5f);
        float cx = Math.cosFromSin(sx, angleX * 0.5f);
        float sy = Math.sin(angleY * 0.5f);
        float cy = Math.cosFromSin(sy, angleY * 0.5f);
        float sz = Math.sin(angleZ * 0.5f);
        float cz = Math.cosFromSin(sz, angleZ * 0.5f);
        float cycz = cy * cz;
        float sysz = sy * sz;
        float sycz = sy * cz;
        float cysz = cy * sz;
        float w = cx*cycz - sx*sysz;
        float x = sx*cycz + cx*sysz;
        float y = cx*sycz - sx*cysz;
        float z = cx*cysz + sx*sycz;
        return dest.set(Math.fma(this.w, x, Math.fma(this.x, w, Math.fma(this.y, z, -this.z * y))),
                        Math.fma(this.w, y, Math.fma(-this.x, z, Math.fma(this.y, w, this.z * x))),
                        Math.fma(this.w, z, Math.fma(this.x, y, Math.fma(-this.y, x, this.z * w))),
                        Math.fma(this.w, w, Math.fma(-this.x, x, Math.fma(-this.y, y, -this.z * z))));
    }
    public Quaternionf rotateZYX(float angleZ, float angleY, float angleX) {
        return rotateZYX(angleZ, angleY, angleX, this);
    }
    public Quaternionf rotateZYX(float angleZ, float angleY, float angleX, Quaternionf dest) {
        float sx = Math.sin(angleX * 0.5f);
        float cx = Math.cosFromSin(sx, angleX * 0.5f);
        float sy = Math.sin(angleY * 0.5f);
        float cy = Math.cosFromSin(sy, angleY * 0.5f);
        float sz = Math.sin(angleZ * 0.5f);
        float cz = Math.cosFromSin(sz, angleZ * 0.5f);
        float cycz = cy * cz;
        float sysz = sy * sz;
        float sycz = sy * cz;
        float cysz = cy * sz;
        float w = cx*cycz + sx*sysz;
        float x = sx*cycz - cx*sysz;
        float y = cx*sycz + sx*cysz;
        float z = cx*cysz - sx*sycz;
        return dest.set(Math.fma(this.w, x, Math.fma(this.x, w, Math.fma(this.y, z, -this.z * y))),
                        Math.fma(this.w, y, Math.fma(-this.x, z, Math.fma(this.y, w, this.z * x))),
                        Math.fma(this.w, z, Math.fma(this.x, y, Math.fma(-this.y, x, this.z * w))),
                        Math.fma(this.w, w, Math.fma(-this.x, x, Math.fma(-this.y, y, -this.z * z))));
    }
    public Quaternionf rotateYXZ(float angleY, float angleX, float angleZ) {
        return rotateYXZ(angleY, angleX, angleZ, this);
    }
    public Quaternionf rotateYXZ(float angleY, float angleX, float angleZ, Quaternionf dest) {
        float sx = Math.sin(angleX * 0.5f);
        float cx = Math.cosFromSin(sx, angleX * 0.5f);
        float sy = Math.sin(angleY * 0.5f);
        float cy = Math.cosFromSin(sy, angleY * 0.5f);
        float sz = Math.sin(angleZ * 0.5f);
        float cz = Math.cosFromSin(sz, angleZ * 0.5f);
        float yx = cy * sx;
        float yy = sy * cx;
        float yz = sy * sx;
        float yw = cy * cx;
        float x = yx * cz + yy * sz;
        float y = yy * cz - yx * sz;
        float z = yw * sz - yz * cz;
        float w = yw * cz + yz * sz;
        return dest.set(Math.fma(this.w, x, Math.fma(this.x, w, Math.fma(this.y, z, -this.z * y))),
                        Math.fma(this.w, y, Math.fma(-this.x, z, Math.fma(this.y, w, this.z * x))),
                        Math.fma(this.w, z, Math.fma(this.x, y, Math.fma(-this.y, x, this.z * w))),
                        Math.fma(this.w, w, Math.fma(-this.x, x, Math.fma(-this.y, y, -this.z * z))));
    }
    public Vector3f getEulerAnglesXYZ(Vector3f eulerAngles) {
        eulerAngles.x = Math.atan2(x * w - y * z, 0.5f - x * x - y * y);
        eulerAngles.y = Math.safeAsin(2.0f * (x * z + y * w));
        eulerAngles.z = Math.atan2(z * w - x * y, 0.5f - y * y - z * z);
        return eulerAngles;
    }
    public Vector3f getEulerAnglesZYX(Vector3f eulerAngles) {
        eulerAngles.x = Math.atan2(y * z + w * x, 0.5f - x * x - y * y);
        eulerAngles.y = Math.safeAsin(-2.0f * (x * z - w * y));
        eulerAngles.z = Math.atan2(x * y + w * z, 0.5f - y * y - z * z);
        return eulerAngles;
    }
    public Vector3f getEulerAnglesZXY(Vector3f eulerAngles) {
        eulerAngles.x = Math.safeAsin(2.0f * (w * x + y * z));
        eulerAngles.y = Math.atan2(w * y - x * z, 0.5f - y * y - x * x);
        eulerAngles.z = Math.atan2(w * z - x * y, 0.5f - z * z - x * x);
        return eulerAngles;
    }
    public Vector3f getEulerAnglesYXZ(Vector3f eulerAngles) {
        eulerAngles.x = Math.safeAsin(-2.0f * (y * z - w * x));
        eulerAngles.y = Math.atan2(x * z + y * w, 0.5f - y * y - x * x);
        eulerAngles.z = Math.atan2(y * x + w * z, 0.5f - x * x - z * z);
        return eulerAngles;
    }
    public float lengthSquared() {
        return Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
    }
    public Quaternionf rotationXYZ(float angleX, float angleY, float angleZ) {
        float sx = Math.sin(angleX * 0.5f);
        float cx = Math.cosFromSin(sx, angleX * 0.5f);
        float sy = Math.sin(angleY * 0.5f);
        float cy = Math.cosFromSin(sy, angleY * 0.5f);
        float sz = Math.sin(angleZ * 0.5f);
        float cz = Math.cosFromSin(sz, angleZ * 0.5f);
        float cycz = cy * cz;
        float sysz = sy * sz;
        float sycz = sy * cz;
        float cysz = cy * sz;
        w = cx*cycz - sx*sysz;
        x = sx*cycz + cx*sysz;
        y = cx*sycz - sx*cysz;
        z = cx*cysz + sx*sycz;
        return this;
    }
    public Quaternionf rotationZYX(float angleZ, float angleY, float angleX) {
        float sx = Math.sin(angleX * 0.5f);
        float cx = Math.cosFromSin(sx, angleX * 0.5f);
        float sy = Math.sin(angleY * 0.5f);
        float cy = Math.cosFromSin(sy, angleY * 0.5f);
        float sz = Math.sin(angleZ * 0.5f);
        float cz = Math.cosFromSin(sz, angleZ * 0.5f);
        float cycz = cy * cz;
        float sysz = sy * sz;
        float sycz = sy * cz;
        float cysz = cy * sz;
        w = cx*cycz + sx*sysz;
        x = sx*cycz - cx*sysz;
        y = cx*sycz + sx*cysz;
        z = cx*cysz - sx*sycz;
        return this;
    }
    public Quaternionf rotationYXZ(float angleY, float angleX, float angleZ) {
        float sx = Math.sin(angleX * 0.5f);
        float cx = Math.cosFromSin(sx, angleX * 0.5f);
        float sy = Math.sin(angleY * 0.5f);
        float cy = Math.cosFromSin(sy, angleY * 0.5f);
        float sz = Math.sin(angleZ * 0.5f);
        float cz = Math.cosFromSin(sz, angleZ * 0.5f);
        float x = cy * sx;
        float y = sy * cx;
        float z = sy * sx;
        float w = cy * cx;
        this.x = x * cz + y * sz;
        this.y = y * cz - x * sz;
        this.z = w * sz - z * cz;
        this.w = w * cz + z * sz;
        return this;
    }
    public Quaternionf slerp(Quaternionfc target, float alpha) {
        return slerp(target, alpha, this);
    }
    public Quaternionf slerp(Quaternionfc target, float alpha, Quaternionf dest) {
        float cosom = Math.fma(x, target.x(), Math.fma(y, target.y(), Math.fma(z, target.z(), w * target.w())));
        float absCosom = Math.abs(cosom);
        float scale0, scale1;
        if (1.0f - absCosom > 1E-6f) {
            float sinSqr = 1.0f - absCosom * absCosom;
            float sinom = Math.invsqrt(sinSqr);
            float omega = Math.atan2(sinSqr * sinom, absCosom);
            scale0 = Math.sin((1.0f - alpha) * omega) * sinom;
            scale1 = Math.sin(alpha * omega) * sinom;
        } else {
            scale0 = 1.0f - alpha;
            scale1 = alpha;
        }
        scale1 = cosom >= 0.0f ? scale1 : -scale1;
        dest.x = Math.fma(scale0, x, scale1 * target.x());
        dest.y = Math.fma(scale0, y, scale1 * target.y());
        dest.z = Math.fma(scale0, z, scale1 * target.z());
        dest.w = Math.fma(scale0, w, scale1 * target.w());
        return dest;
    }
    public static Quaternionfc slerp(Quaternionf[] qs, float[] weights, Quaternionf dest) {
        dest.set(qs[0]);
        float w = weights[0];
        for (int i = 1; i < qs.length; i++) {
            float w0 = w;
            float w1 = weights[i];
            float rw1 = w1 / (w0 + w1);
            w += w1;
            dest.slerp(qs[i], rw1);
        }
        return dest;
    }
    public Quaternionf scale(float factor) {
        return scale(factor, this);
    }
    public Quaternionf scale(float factor, Quaternionf dest) {
        float sqrt = Math.sqrt(factor);
        dest.x = sqrt * x;
        dest.y = sqrt * y;
        dest.z = sqrt * z;
        dest.w = sqrt * w;
        return dest;
    }
    public Quaternionf scaling(float factor) {
        float sqrt = Math.sqrt(factor);
        this.x = 0.0f;
        this.y = 0.0f;
        this.z = 0.0f;
        this.w = sqrt;
        return this;
    }
    public Quaternionf integrate(float dt, float vx, float vy, float vz) {
        return integrate(dt, vx, vy, vz, this);
    }
    public Quaternionf integrate(float dt, float vx, float vy, float vz, Quaternionf dest) {
        float thetaX = dt * vx * 0.5f;
        float thetaY = dt * vy * 0.5f;
        float thetaZ = dt * vz * 0.5f;
        float thetaMagSq = thetaX * thetaX + thetaY * thetaY + thetaZ * thetaZ;
        float s;
        float dqX, dqY, dqZ, dqW;
        if (thetaMagSq * thetaMagSq / 24.0f < 1E-8f) {
            dqW = 1.0f - thetaMagSq * 0.5f;
            s = 1.0f - thetaMagSq / 6.0f;
        } else {
            float thetaMag = Math.sqrt(thetaMagSq);
            float sin = Math.sin(thetaMag);
            s = sin / thetaMag;
            dqW = Math.cosFromSin(sin, thetaMag);
        }
        dqX = thetaX * s;
        dqY = thetaY * s;
        dqZ = thetaZ * s;
        return dest.set(Math.fma(dqW, x, Math.fma(dqX, w, Math.fma(dqY, z, -dqZ * y))),
                        Math.fma(dqW, y, Math.fma(-dqX, z, Math.fma(dqY, w, dqZ * x))),
                        Math.fma(dqW, z, Math.fma(dqX, y, Math.fma(-dqY, x, dqZ * w))),
                        Math.fma(dqW, w, Math.fma(-dqX, x, Math.fma(-dqY, y, -dqZ * z))));
    }
    public Quaternionf nlerp(Quaternionfc q, float factor) {
        return nlerp(q, factor, this);
    }
    public Quaternionf nlerp(Quaternionfc q, float factor, Quaternionf dest) {
        float cosom = Math.fma(x, q.x(), Math.fma(y, q.y(), Math.fma(z, q.z(), w * q.w())));
        float scale0 = 1.0f - factor;
        float scale1 = (cosom >= 0.0f) ? factor : -factor;
        dest.x = Math.fma(scale0, x, scale1 * q.x());
        dest.y = Math.fma(scale0, y, scale1 * q.y());
        dest.z = Math.fma(scale0, z, scale1 * q.z());
        dest.w = Math.fma(scale0, w, scale1 * q.w());
        float s = Math.invsqrt(Math.fma(dest.x, dest.x, Math.fma(dest.y, dest.y, Math.fma(dest.z, dest.z, dest.w * dest.w))));
        dest.x *= s;
        dest.y *= s;
        dest.z *= s;
        dest.w *= s;
        return dest;
    }
    public static Quaternionfc nlerp(Quaternionfc[] qs, float[] weights, Quaternionf dest) {
        dest.set(qs[0]);
        float w = weights[0];
        for (int i = 1; i < qs.length; i++) {
            float w0 = w;
            float w1 = weights[i];
            float rw1 = w1 / (w0 + w1);
            w += w1;
            dest.nlerp(qs[i], rw1);
        }
        return dest;
    }
    public Quaternionf nlerpIterative(Quaternionfc q, float alpha, float dotThreshold, Quaternionf dest) {
        float q1x = x, q1y = y, q1z = z, q1w = w;
        float q2x = q.x(), q2y = q.y(), q2z = q.z(), q2w = q.w();
        float dot = Math.fma(q1x, q2x, Math.fma(q1y, q2y, Math.fma(q1z, q2z, q1w * q2w)));
        float absDot = Math.abs(dot);
        if (1.0f - 1E-6f < absDot) {
            return dest.set(this);
        }
        float alphaN = alpha;
        while (absDot < dotThreshold) {
            float scale0 = 0.5f;
            float scale1 = dot >= 0.0f ? 0.5f : -0.5f;
            if (alphaN < 0.5f) {
                q2x = Math.fma(scale0, q2x, scale1 * q1x);
                q2y = Math.fma(scale0, q2y, scale1 * q1y);
                q2z = Math.fma(scale0, q2z, scale1 * q1z);
                q2w = Math.fma(scale0, q2w, scale1 * q1w);
                float s = Math.invsqrt(Math.fma(q2x, q2x, Math.fma(q2y, q2y, Math.fma(q2z, q2z, q2w * q2w))));
                q2x *= s;
                q2y *= s;
                q2z *= s;
                q2w *= s;
                alphaN = alphaN + alphaN;
            } else {
                q1x = Math.fma(scale0, q1x, scale1 * q2x);
                q1y = Math.fma(scale0, q1y, scale1 * q2y);
                q1z = Math.fma(scale0, q1z, scale1 * q2z);
                q1w = Math.fma(scale0, q1w, scale1 * q2w);
                float s = Math.invsqrt(Math.fma(q1x, q1x, Math.fma(q1y, q1y, Math.fma(q1z, q1z, q1w * q1w))));
                q1x *= s;
                q1y *= s;
                q1z *= s;
                q1w *= s;
                alphaN = alphaN + alphaN - 1.0f;
            }
            dot = Math.fma(q1x, q2x, Math.fma(q1y, q2y, Math.fma(q1z, q2z, q1w * q2w)));
            absDot = Math.abs(dot);
        }
        float scale0 = 1.0f - alphaN;
        float scale1 = dot >= 0.0f ? alphaN : -alphaN;
        float resX = Math.fma(scale0, q1x, scale1 * q2x);
        float resY = Math.fma(scale0, q1y, scale1 * q2y);
        float resZ = Math.fma(scale0, q1z, scale1 * q2z);
        float resW = Math.fma(scale0, q1w, scale1 * q2w);
        float s = Math.invsqrt(Math.fma(resX, resX, Math.fma(resY, resY, Math.fma(resZ, resZ, resW * resW))));
        dest.x = resX * s;
        dest.y = resY * s;
        dest.z = resZ * s;
        dest.w = resW * s;
        return dest;
    }
    public Quaternionf nlerpIterative(Quaternionfc q, float alpha, float dotThreshold) {
        return nlerpIterative(q, alpha, dotThreshold, this);
    }
    public static Quaternionfc nlerpIterative(Quaternionf[] qs, float[] weights, float dotThreshold, Quaternionf dest) {
        dest.set(qs[0]);
        float w = weights[0];
        for (int i = 1; i < qs.length; i++) {
            float w0 = w;
            float w1 = weights[i];
            float rw1 = w1 / (w0 + w1);
            w += w1;
            dest.nlerpIterative(qs[i], rw1, dotThreshold);
        }
        return dest;
    }
    public Quaternionf lookAlong(Vector3fc dir, Vector3fc up) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Quaternionf lookAlong(Vector3fc dir, Vector3fc up, Quaternionf dest) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Quaternionf lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        return lookAlong(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Quaternionf lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Quaternionf dest) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float dirnX = -dirX * invDirLength;
        float dirnY = -dirY * invDirLength;
        float dirnZ = -dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirnZ - upZ * dirnY;
        leftY = upZ * dirnX - upX * dirnZ;
        leftZ = upX * dirnY - upY * dirnX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirnY * leftZ - dirnZ * leftY;
        float upnY = dirnZ * leftX - dirnX * leftZ;
        float upnZ = dirnX * leftY - dirnY * leftX;
        float x, y, z, w;
        double t;
        double tr = leftX + upnY + dirnZ;
        if (tr >= 0.0) {
            t = Math.sqrt(tr + 1.0);
            w = (float) (t * 0.5);
            t = 0.5 / t;
            x = (float) ((dirnY - upnZ) * t);
            y = (float) ((leftZ - dirnX) * t);
            z = (float) ((upnX - leftY) * t);
        } else {
            if (leftX > upnY && leftX > dirnZ) {
                t = Math.sqrt(1.0 + leftX - upnY - dirnZ);
                x = (float) (t * 0.5);
                t = 0.5 / t;
                y = (float) ((leftY + upnX) * t);
                z = (float) ((dirnX + leftZ) * t);
                w = (float) ((dirnY - upnZ) * t);
            } else if (upnY > dirnZ) {
                t = Math.sqrt(1.0 + upnY - leftX - dirnZ);
                y = (float) (t * 0.5);
                t = 0.5 / t;
                x = (float) ((leftY + upnX) * t);
                z = (float) ((upnZ + dirnY) * t);
                w = (float) ((leftZ - dirnX) * t);
            } else {
                t = Math.sqrt(1.0 + dirnZ - leftX - upnY);
                z = (float) (t * 0.5);
                t = 0.5 / t;
                x = (float) ((dirnX + leftZ) * t);
                y = (float) ((upnZ + dirnY) * t);
                w = (float) ((upnX - leftY) * t);
            }
        }
        return dest.set(Math.fma(this.w, x, Math.fma(this.x, w, Math.fma(this.y, z, -this.z * y))),
                        Math.fma(this.w, y, Math.fma(-this.x, z, Math.fma(this.y, w, this.z * x))),
                        Math.fma(this.w, z, Math.fma(this.x, y, Math.fma(-this.y, x, this.z * w))),
                        Math.fma(this.w, w, Math.fma(-this.x, x, Math.fma(-this.y, y, -this.z * z))));
    }
    public Quaternionf rotationTo(float fromDirX, float fromDirY, float fromDirZ, float toDirX, float toDirY, float toDirZ) {
        float fn = Math.invsqrt(Math.fma(fromDirX, fromDirX, Math.fma(fromDirY, fromDirY, fromDirZ * fromDirZ)));
        float tn = Math.invsqrt(Math.fma(toDirX, toDirX, Math.fma(toDirY, toDirY, toDirZ * toDirZ)));
        float fx = fromDirX * fn, fy = fromDirY * fn, fz = fromDirZ * fn;
        float tx = toDirX * tn, ty = toDirY * tn, tz = toDirZ * tn;
        float dot = fx * tx + fy * ty + fz * tz;
        float x, y, z, w;
        if (dot < -1.0f + 1E-6f) {
            x = fy;
            y = -fx;
            z = 0.0f;
            w = 0.0f;
            if (x * x + y * y == 0.0f) {
                x = 0.0f;
                y = fz;
                z = -fy;
                w = 0.0f;
            }
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = 0;
        } else {
            float sd2 = Math.sqrt((1.0f + dot) * 2.0f);
            float isd2 = 1.0f / sd2;
            float cx = fy * tz - fz * ty;
            float cy = fz * tx - fx * tz;
            float cz = fx * ty - fy * tx;
            x = cx * isd2;
            y = cy * isd2;
            z = cz * isd2;
            w = sd2 * 0.5f;
            float n2 = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
            this.x = x * n2;
            this.y = y * n2;
            this.z = z * n2;
            this.w = w * n2;
        }
        return this;
    }
    public Quaternionf rotationTo(Vector3fc fromDir, Vector3fc toDir) {
        return rotationTo(fromDir.x(), fromDir.y(), fromDir.z(), toDir.x(), toDir.y(), toDir.z());
    }
    public Quaternionf rotateTo(float fromDirX, float fromDirY, float fromDirZ, float toDirX, float toDirY, float toDirZ, Quaternionf dest) {
        float fn = Math.invsqrt(Math.fma(fromDirX, fromDirX, Math.fma(fromDirY, fromDirY, fromDirZ * fromDirZ)));
        float tn = Math.invsqrt(Math.fma(toDirX, toDirX, Math.fma(toDirY, toDirY, toDirZ * toDirZ)));
        float fx = fromDirX * fn, fy = fromDirY * fn, fz = fromDirZ * fn;
        float tx = toDirX * tn, ty = toDirY * tn, tz = toDirZ * tn;
        float dot = fx * tx + fy * ty + fz * tz;
        float x, y, z, w;
        if (dot < -1.0f + 1E-6f) {
            x = fy;
            y = -fx;
            z = 0.0f;
            w = 0.0f;
            if (x * x + y * y == 0.0f) {
                x = 0.0f;
                y = fz;
                z = -fy;
                w = 0.0f;
            }
        } else {
            float sd2 = Math.sqrt((1.0f + dot) * 2.0f);
            float isd2 = 1.0f / sd2;
            float cx = fy * tz - fz * ty;
            float cy = fz * tx - fx * tz;
            float cz = fx * ty - fy * tx;
            x = cx * isd2;
            y = cy * isd2;
            z = cz * isd2;
            w = sd2 * 0.5f;
            float n2 = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
            x *= n2;
            y *= n2;
            z *= n2;
            w *= n2;
        }
        return dest.set(Math.fma(this.w, x, Math.fma(this.x, w, Math.fma(this.y, z, -this.z * y))),
                        Math.fma(this.w, y, Math.fma(-this.x, z, Math.fma(this.y, w, this.z * x))),
                        Math.fma(this.w, z, Math.fma(this.x, y, Math.fma(-this.y, x, this.z * w))),
                        Math.fma(this.w, w, Math.fma(-this.x, x, Math.fma(-this.y, y, -this.z * z))));
    }
    public Quaternionf rotateTo(float fromDirX, float fromDirY, float fromDirZ, float toDirX, float toDirY, float toDirZ) {
        return rotateTo(fromDirX, fromDirY, fromDirZ, toDirX, toDirY, toDirZ, this);
    }
    public Quaternionf rotateTo(Vector3fc fromDir, Vector3fc toDir, Quaternionf dest) {
        return rotateTo(fromDir.x(), fromDir.y(), fromDir.z(), toDir.x(), toDir.y(), toDir.z(), dest);
    }
    public Quaternionf rotateTo(Vector3fc fromDir, Vector3fc toDir) {
        return rotateTo(fromDir.x(), fromDir.y(), fromDir.z(), toDir.x(), toDir.y(), toDir.z(), this);
    }
    public Quaternionf rotateX(float angle) {
        return rotateX(angle, this);
    }
    public Quaternionf rotateX(float angle, Quaternionf dest) {
        float sin = Math.sin(angle * 0.5f);
        float cos = Math.cosFromSin(sin, angle * 0.5f);
        return dest.set(w * sin + x * cos,
                        y * cos + z * sin,
                        z * cos - y * sin,
                        w * cos - x * sin);
    }
    public Quaternionf rotateY(float angle) {
        return rotateY(angle, this);
    }
    public Quaternionf rotateY(float angle, Quaternionf dest) {
        float sin = Math.sin(angle * 0.5f);
        float cos = Math.cosFromSin(sin, angle * 0.5f);
        return dest.set(x * cos - z * sin,
                        w * sin + y * cos,
                        x * sin + z * cos,
                        w * cos - y * sin);
    }
    public Quaternionf rotateZ(float angle) {
        return rotateZ(angle, this);
    }
    public Quaternionf rotateZ(float angle, Quaternionf dest) {
        float sin = Math.sin(angle * 0.5f);
        float cos = Math.cosFromSin(sin, angle * 0.5f);
        return dest.set(x * cos + y * sin,
                        y * cos - x * sin,
                        w * sin + z * cos,
                        w * cos - z * sin);
    }
    public Quaternionf rotateLocalX(float angle) {
        return rotateLocalX(angle, this);
    }
    public Quaternionf rotateLocalX(float angle, Quaternionf dest) {
        float hangle = angle * 0.5f;
        float s = Math.sin(hangle);
        float c = Math.cosFromSin(s, hangle);
        dest.set(c * x + s * w,
                 c * y - s * z,
                 c * z + s * y,
                 c * w - s * x);
        return dest;
    }
    public Quaternionf rotateLocalY(float angle) {
        return rotateLocalY(angle, this);
    }
    public Quaternionf rotateLocalY(float angle, Quaternionf dest) {
        float hangle = angle * 0.5f;
        float s = Math.sin(hangle);
        float c = Math.cosFromSin(s, hangle);
        dest.set(c * x + s * z,
                 c * y + s * w,
                 c * z - s * x,
                 c * w - s * y);
        return dest;
    }
    public Quaternionf rotateLocalZ(float angle) {
        return rotateLocalZ(angle, this);
    }
    public Quaternionf rotateLocalZ(float angle, Quaternionf dest) {
        float hangle = angle * 0.5f;
        float s = Math.sin(hangle);
        float c = Math.cosFromSin(s, hangle);
        dest.set(c * x - s * y,
                 c * y + s * x,
                 c * z + s * w,
                 c * w - s * z);
        return dest;
    }
    public Quaternionf rotateAxis(float angle, float axisX, float axisY, float axisZ, Quaternionf dest) {
        float hangle = angle / 2.0f;
        float sinAngle = Math.sin(hangle);
        float invVLength = Math.invsqrt(Math.fma(axisX, axisX, Math.fma(axisY, axisY, axisZ * axisZ)));
        float rx = axisX * invVLength * sinAngle;
        float ry = axisY * invVLength * sinAngle;
        float rz = axisZ * invVLength * sinAngle;
        float rw = Math.cosFromSin(sinAngle, hangle);
        return dest.set(Math.fma(this.w, rx, Math.fma(this.x, rw, Math.fma(this.y, rz, -this.z * ry))),
                        Math.fma(this.w, ry, Math.fma(-this.x, rz, Math.fma(this.y, rw, this.z * rx))),
                        Math.fma(this.w, rz, Math.fma(this.x, ry, Math.fma(-this.y, rx, this.z * rw))),
                        Math.fma(this.w, rw, Math.fma(-this.x, rx, Math.fma(-this.y, ry, -this.z * rz))));
    }
    public Quaternionf rotateAxis(float angle, Vector3fc axis, Quaternionf dest) {
        return rotateAxis(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Quaternionf rotateAxis(float angle, Vector3fc axis) {
        return rotateAxis(angle, axis.x(), axis.y(), axis.z(), this);
    }
    public Quaternionf rotateAxis(float angle, float axisX, float axisY, float axisZ) {
        return rotateAxis(angle, axisX, axisY, axisZ, this);
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + " " + Runtime.format(z, formatter) + " " + Runtime.format(w, formatter) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(x);
        out.writeFloat(y);
        out.writeFloat(z);
        out.writeFloat(w);
    }
    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        x = in.readFloat();
        y = in.readFloat();
        z = in.readFloat();
        w = in.readFloat();
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(w);
        result = prime * result + Float.floatToIntBits(x);
        result = prime * result + Float.floatToIntBits(y);
        result = prime * result + Float.floatToIntBits(z);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Quaternionf other = (Quaternionf) obj;
        if (Float.floatToIntBits(w) != Float.floatToIntBits(other.w))
            return false;
        if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))
            return false;
        if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))
            return false;
        if (Float.floatToIntBits(z) != Float.floatToIntBits(other.z))
            return false;
        return true;
    }
    public Quaternionf difference(Quaternionf other) {
        return difference(other, this);
    }
    public Quaternionf difference(Quaternionfc other, Quaternionf dest) {
        float invNorm = 1.0f / lengthSquared();
        float x = -this.x * invNorm;
        float y = -this.y * invNorm;
        float z = -this.z * invNorm;
        float w = this.w * invNorm;
        dest.set(Math.fma(w, other.x(), Math.fma(x, other.w(), Math.fma(y, other.z(), -z * other.y()))),
                 Math.fma(w, other.y(), Math.fma(-x, other.z(), Math.fma(y, other.w(), z * other.x()))),
                 Math.fma(w, other.z(), Math.fma(x, other.y(), Math.fma(-y, other.x(), z * other.w()))),
                 Math.fma(w, other.w(), Math.fma(-x, other.x(), Math.fma(-y, other.y(), -z * other.z()))));
        return dest;
    }
    public Vector3f positiveX(Vector3f dir) {
        float invNorm = 1.0f / lengthSquared();
        float nx = -x * invNorm;
        float ny = -y * invNorm;
        float nz = -z * invNorm;
        float nw =  w * invNorm;
        float dy = ny + ny;
        float dz = nz + nz;
        dir.x = -ny * dy - nz * dz + 1.0f;
        dir.y =  nx * dy + nw * dz;
        dir.z =  nx * dz - nw * dy;
        return dir;
    }
    public Vector3f normalizedPositiveX(Vector3f dir) {
        float dy = y + y;
        float dz = z + z;
        dir.x = -y * dy - z * dz + 1.0f;
        dir.y =  x * dy - w * dz;
        dir.z =  x * dz + w * dy;
        return dir;
    }
    public Vector3f positiveY(Vector3f dir) {
        float invNorm = 1.0f / lengthSquared();
        float nx = -x * invNorm;
        float ny = -y * invNorm;
        float nz = -z * invNorm;
        float nw =  w * invNorm;
        float dx = nx + nx;
        float dy = ny + ny;
        float dz = nz + nz;
        dir.x =  nx * dy - nw * dz;
        dir.y = -nx * dx - nz * dz + 1.0f;
        dir.z =  ny * dz + nw * dx;
        return dir;
    }
    public Vector3f normalizedPositiveY(Vector3f dir) {
        float dx = x + x;
        float dy = y + y;
        float dz = z + z;
        dir.x =  x * dy + w * dz;
        dir.y = -x * dx - z * dz + 1.0f;
        dir.z =  y * dz - w * dx;
        return dir;
    }
    public Vector3f positiveZ(Vector3f dir) {
        float invNorm = 1.0f / lengthSquared();
        float nx = -x * invNorm;
        float ny = -y * invNorm;
        float nz = -z * invNorm;
        float nw =  w * invNorm;
        float dx = nx + nx;
        float dy = ny + ny;
        float dz = nz + nz;
        dir.x =  nx * dz + nw * dy;
        dir.y =  ny * dz - nw * dx;
        dir.z = -nx * dx - ny * dy + 1.0f;
        return dir;
    }
    public Vector3f normalizedPositiveZ(Vector3f dir) {
        float dx = x + x;
        float dy = y + y;
        float dz = z + z;
        dir.x =  x * dz - w * dy;
        dir.y =  y * dz + w * dx;
        dir.z = -x * dx - y * dy + 1.0f;
        return dir;
    }
    public Quaternionf conjugateBy(Quaternionfc q) {
        return conjugateBy(q, this);
    }
    public Quaternionf conjugateBy(Quaternionfc q, Quaternionf dest) {
        float invNorm = 1.0f / q.lengthSquared();
        float qix = -q.x() * invNorm, qiy = -q.y() * invNorm, qiz = -q.z() * invNorm, qiw = q.w() * invNorm;
        float qpx = Math.fma(q.w(), x, Math.fma(q.x(), w, Math.fma(q.y(), z, -q.z() * y)));
        float qpy = Math.fma(q.w(), y, Math.fma(-q.x(), z, Math.fma(q.y(), w, q.z() * x)));
        float qpz = Math.fma(q.w(), z, Math.fma(q.x(), y, Math.fma(-q.y(), x, q.z() * w)));
        float qpw = Math.fma(q.w(), w, Math.fma(-q.x(), x, Math.fma(-q.y(), y, -q.z() * z)));
        return dest.set(Math.fma(qpw, qix, Math.fma(qpx, qiw, Math.fma(qpy, qiz, -qpz * qiy))),
                        Math.fma(qpw, qiy, Math.fma(-qpx, qiz, Math.fma(qpy, qiw, qpz * qix))),
                        Math.fma(qpw, qiz, Math.fma(qpx, qiy, Math.fma(-qpy, qix, qpz * qiw))),
                        Math.fma(qpw, qiw, Math.fma(-qpx, qix, Math.fma(-qpy, qiy, -qpz * qiz))));
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y) && Math.isFinite(z) && Math.isFinite(w);
    }
    public boolean equals(Quaternionfc q, float delta) {
        if (this == q)
            return true;
        if (q == null)
            return false;
        if (getClass() != q.getClass())
            return false;
        if (!Runtime.equals(x, q.x(), delta))
            return false;
        if (!Runtime.equals(y, q.y(), delta))
            return false;
        if (!Runtime.equals(z, q.z(), delta))
            return false;
        if (!Runtime.equals(w, q.w(), delta))
            return false;
        return true;
    }
    public boolean equals(float x, float y, float z, float w) {
        if (Float.floatToIntBits(this.x) != Float.floatToIntBits(x))
            return false;
        if (Float.floatToIntBits(this.y) != Float.floatToIntBits(y))
            return false;
        if (Float.floatToIntBits(this.z) != Float.floatToIntBits(z))
            return false;
        if (Float.floatToIntBits(this.w) != Float.floatToIntBits(w))
            return false;
        return true;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import org.intellij.lang.annotations.MagicConstant;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix4x3f implements Externalizable, Cloneable, Matrix4x3fc {
    private static final long serialVersionUID = 1L;
    float m00, m01, m02;
    float m10, m11, m12;
    float m20, m21, m22;
    float m30, m31, m32;
    int properties;
    public Matrix4x3f() {
        m00 = 1.0f;
        m11 = 1.0f;
        m22 = 1.0f;
        properties = PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
    }
    public Matrix4x3f(Matrix3fc mat) {
        set(mat);
    }
    public Matrix4x3f(Matrix4x3fc mat) {
        set(mat);
    }
    public Matrix4x3f(float m00, float m01, float m02, 
                      float m10, float m11, float m12, 
                      float m20, float m21, float m22,
                      float m30, float m31, float m32) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        determineProperties();
    }
    public Matrix4x3f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        determineProperties();
    }
    public Matrix4x3f(Vector3fc col0, Vector3fc col1, Vector3fc col2, Vector3fc col3) {
        set(col0, col1, col2, col3).
        determineProperties();
    }
    public Matrix4x3f assume(@MagicConstant(intValues = {PROPERTY_UNKNOWN, PROPERTY_IDENTITY, PROPERTY_TRANSLATION, PROPERTY_ORTHONORMAL}) int properties) {
        this.properties = properties;
        return this;
    }
    public Matrix4x3f determineProperties() {
        int properties = PROPERTY_UNKNOWN;
        if (m00 == 1.0f && m01 == 0.0f && m02 == 0.0f && m10 == 0.0f && m11 == 1.0f && m12 == 0.0f
                && m20 == 0.0f && m21 == 0.0f && m22 == 1.0f) {
            properties |= PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
            if (m30 == 0.0f && m31 == 0.0f && m32 == 0.0f)
                properties |= PROPERTY_IDENTITY;
        }
        this.properties = properties;
        return this;
    }
    @MagicConstant(intValues = {PROPERTY_UNKNOWN, PROPERTY_IDENTITY, PROPERTY_TRANSLATION, PROPERTY_ORTHONORMAL})
    public int properties() {
        return properties;
    }
    public float m00() {
        return m00;
    }
    public float m01() {
        return m01;
    }
    public float m02() {
        return m02;
    }
    public float m10() {
        return m10;
    }
    public float m11() {
        return m11;
    }
    public float m12() {
        return m12;
    }
    public float m20() {
        return m20;
    }
    public float m21() {
        return m21;
    }
    public float m22() {
        return m22;
    }
    public float m30() {
        return m30;
    }
    public float m31() {
        return m31;
    }
    public float m32() {
        return m32;
    }
    public Matrix4x3f m00(float m00) {
        this.m00 = m00;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m00 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m01(float m01) {
        this.m01 = m01;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m01 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m02(float m02) {
        this.m02 = m02;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m02 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m10(float m10) {
        this.m10 = m10;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m10 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m11(float m11) {
        this.m11 = m11;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m11 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m12(float m12) {
        this.m12 = m12;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m12 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m20(float m20) {
        this.m20 = m20;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m20 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m21(float m21) {
        this.m21 = m21;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m21 != 0.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m22(float m22) {
        this.m22 = m22;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m22 != 1.0f)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f m30(float m30) {
        this.m30 = m30;
        if (m30 != 0.0f)
            properties &= ~PROPERTY_IDENTITY;
        return this;
    }
    public Matrix4x3f m31(float m31) {
        this.m31 = m31;
        if (m31 != 0.0f)
            properties &= ~PROPERTY_IDENTITY;
        return this;
    }
    public Matrix4x3f m32(float m32) {
        this.m32 = m32;
        if (m32 != 0.0f)
            properties &= ~PROPERTY_IDENTITY;
        return this;
    }
    Matrix4x3f _properties(int properties) {
        this.properties = properties;
        return this;
    }
    Matrix4x3f _m00(float m00) {
        this.m00 = m00;
        return this;
    }
    Matrix4x3f _m01(float m01) {
        this.m01 = m01;
        return this;
    }
    Matrix4x3f _m02(float m02) {
        this.m02 = m02;
        return this;
    }
    Matrix4x3f _m10(float m10) {
        this.m10 = m10;
        return this;
    }
    Matrix4x3f _m11(float m11) {
        this.m11 = m11;
        return this;
    }
    Matrix4x3f _m12(float m12) {
        this.m12 = m12;
        return this;
    }
    Matrix4x3f _m20(float m20) {
        this.m20 = m20;
        return this;
    }
    Matrix4x3f _m21(float m21) {
        this.m21 = m21;
        return this;
    }
    Matrix4x3f _m22(float m22) {
        this.m22 = m22;
        return this;
    }
    Matrix4x3f _m30(float m30) {
        this.m30 = m30;
        return this;
    }
    Matrix4x3f _m31(float m31) {
        this.m31 = m31;
        return this;
    }
    Matrix4x3f _m32(float m32) {
        this.m32 = m32;
        return this;
    }
    public Matrix4x3f identity() {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return this;
        MemUtil.INSTANCE.identity(this);
        properties = PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f set(Matrix4x3fc m) {
        if (m == this)
            return this;
        m00 = m.m00();
        m01 = m.m01();
        m02 = m.m02();
        m10 = m.m10();
        m11 = m.m11();
        m12 = m.m12();
        m20 = m.m20();
        m21 = m.m21();
        m22 = m.m22();
        m30 = m.m30();
        m31 = m.m31();
        m32 = m.m32();
        properties = m.properties();
        return this;
    }
    public Matrix4x3f set(Matrix4fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m02 = m.m02();
        m10 = m.m10();
        m11 = m.m11();
        m12 = m.m12();
        m20 = m.m20();
        m21 = m.m21();
        m22 = m.m22();
        m30 = m.m30();
        m31 = m.m31();
        m32 = m.m32();
        properties = m.properties() & (PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4f get(Matrix4f dest) {
        return dest.set4x3(this);
    }
    public Matrix4d get(Matrix4d dest) {
        return dest.set4x3(this);
    }
    public Matrix4x3f set(Matrix3fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = mat.m02();
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = mat.m12();
        m20 = mat.m20();
        m21 = mat.m21();
        m22 = mat.m22();
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        return determineProperties();
    }
    public Matrix4x3f set(AxisAngle4f axisAngle) {
        float x = axisAngle.x;
        float y = axisAngle.y;
        float z = axisAngle.z;
        float angle = axisAngle.angle;
        float n = Math.sqrt(x*x + y*y + z*z);
        n = 1/n;
        x *= n;
        y *= n;
        z *= n;
        float s = Math.sin(angle);
        float c = Math.cosFromSin(s, angle);
        float omc = 1.0f - c;
        m00 = (float)(c + x*x*omc);
        m11 = (float)(c + y*y*omc);
        m22 = (float)(c + z*z*omc);
        float tmp1 = x*y*omc;
        float tmp2 = z*s;
        m10 = (float)(tmp1 - tmp2);
        m01 = (float)(tmp1 + tmp2);
        tmp1 = x*z*omc;
        tmp2 = y*s;
        m20 = (float)(tmp1 + tmp2);
        m02 = (float)(tmp1 - tmp2);
        tmp1 = y*z*omc;
        tmp2 = x*s;
        m21 = (float)(tmp1 - tmp2);
        m12 = (float)(tmp1 + tmp2);
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f set(AxisAngle4d axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double n = Math.sqrt(x*x + y*y + z*z);
        n = 1/n;
        x *= n;
        y *= n;
        z *= n;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0 - c;
        m00 = (float)(c + x*x*omc);
        m11 = (float)(c + y*y*omc);
        m22 = (float)(c + z*z*omc);
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        m10 = (float)(tmp1 - tmp2);
        m01 = (float)(tmp1 + tmp2);
        tmp1 = x*z*omc;
        tmp2 = y*s;
        m20 = (float)(tmp1 + tmp2);
        m02 = (float)(tmp1 - tmp2);
        tmp1 = y*z*omc;
        tmp2 = x*s;
        m21 = (float)(tmp1 - tmp2);
        m12 = (float)(tmp1 + tmp2);
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f set(Quaternionfc q) {
        return rotation(q);
    }
    public Matrix4x3f set(Quaterniondc q) {
        double w2 = q.w() * q.w();
        double x2 = q.x() * q.x();
        double y2 = q.y() * q.y();
        double z2 = q.z() * q.z();
        double zw = q.z() * q.w();
        double xy = q.x() * q.y();
        double xz = q.x() * q.z();
        double yw = q.y() * q.w();
        double yz = q.y() * q.z();
        double xw = q.x() * q.w();
        m00 = (float) (w2 + x2 - z2 - y2);
        m01 = (float) (xy + zw + zw + xy);
        m02 = (float) (xz - yw + xz - yw);
        m10 = (float) (-zw + xy - zw + xy);
        m11 = (float) (y2 - z2 + w2 - x2);
        m12 = (float) (yz + yz + xw + xw);
        m20 = (float) (yw + xz + xz + yw);
        m21 = (float) (yz + yz - xw - xw);
        m22 = (float) (z2 - y2 - x2 + w2);
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f set(Vector3fc col0, Vector3fc col1, Vector3fc col2, Vector3fc col3) {
        this.m00 = col0.x();
        this.m01 = col0.y();
        this.m02 = col0.z();
        this.m10 = col1.x();
        this.m11 = col1.y();
        this.m12 = col1.z();
        this.m20 = col2.x();
        this.m21 = col2.y();
        this.m22 = col2.z();
        this.m30 = col3.x();
        this.m31 = col3.y();
        this.m32 = col3.z();
        return determineProperties();
    }
    public Matrix4x3f set3x3(Matrix4x3fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = mat.m02();
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = mat.m12();
        m20 = mat.m20();
        m21 = mat.m21();
        m22 = mat.m22();
        properties &= mat.properties();
        return this;
    }
    public Matrix4x3f mul(Matrix4x3fc right) {
       return mul(right, this);
    }
    public Matrix4x3f mul(Matrix4x3fc right, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return mulTranslation(right, dest);
        return mulGeneric(right, dest);
    }
    private Matrix4x3f mulGeneric(Matrix4x3fc right, Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        float m20 = this.m20, m21 = this.m21, m22 = this.m22;
        float rm00 = right.m00(), rm01 = right.m01(), rm02 = right.m02();
        float rm10 = right.m10(), rm11 = right.m11(), rm12 = right.m12();
        float rm20 = right.m20(), rm21 = right.m21(), rm22 = right.m22();
        float rm30 = right.m30(), rm31 = right.m31(), rm32 = right.m32();
        return dest
        ._m00(Math.fma(m00, rm00, Math.fma(m10, rm01, m20 * rm02)))
        ._m01(Math.fma(m01, rm00, Math.fma(m11, rm01, m21 * rm02)))
        ._m02(Math.fma(m02, rm00, Math.fma(m12, rm01, m22 * rm02)))
        ._m10(Math.fma(m00, rm10, Math.fma(m10, rm11, m20 * rm12)))
        ._m11(Math.fma(m01, rm10, Math.fma(m11, rm11, m21 * rm12)))
        ._m12(Math.fma(m02, rm10, Math.fma(m12, rm11, m22 * rm12)))
        ._m20(Math.fma(m00, rm20, Math.fma(m10, rm21, m20 * rm22)))
        ._m21(Math.fma(m01, rm20, Math.fma(m11, rm21, m21 * rm22)))
        ._m22(Math.fma(m02, rm20, Math.fma(m12, rm21, m22 * rm22)))
        ._m30(Math.fma(m00, rm30, Math.fma(m10, rm31, Math.fma(m20, rm32, m30))))
        ._m31(Math.fma(m01, rm30, Math.fma(m11, rm31, Math.fma(m21, rm32, m31))))
        ._m32(Math.fma(m02, rm30, Math.fma(m12, rm31, Math.fma(m22, rm32, m32))))
        ._properties(properties & right.properties() & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mulTranslation(Matrix4x3fc right, Matrix4x3f dest) {
        return dest
        ._m00(right.m00())
        ._m01(right.m01())
        ._m02(right.m02())
        ._m10(right.m10())
        ._m11(right.m11())
        ._m12(right.m12())
        ._m20(right.m20())
        ._m21(right.m21())
        ._m22(right.m22())
        ._m30(right.m30() + m30)
        ._m31(right.m31() + m31)
        ._m32(right.m32() + m32)
        ._properties(right.properties() & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mulOrtho(Matrix4x3fc view) {
        return mulOrtho(view, this);
    }
    public Matrix4x3f mulOrtho(Matrix4x3fc view, Matrix4x3f dest) {
        float nm00 = m00 * view.m00();
        float nm01 = m11 * view.m01();
        float nm02 = m22 * view.m02();
        float nm10 = m00 * view.m10();
        float nm11 = m11 * view.m11();
        float nm12 = m22 * view.m12();
        float nm20 = m00 * view.m20();
        float nm21 = m11 * view.m21();
        float nm22 = m22 * view.m22();
        float nm30 = m00 * view.m30() + m30;
        float nm31 = m11 * view.m31() + m31;
        float nm32 = m22 * view.m32() + m32;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = nm30;
        dest.m31 = nm31;
        dest.m32 = nm32;
        dest.properties = (this.properties & view.properties() & PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f mul3x3(
            float rm00, float rm01, float rm02,
            float rm10, float rm11, float rm12,
            float rm20, float rm21, float rm22) {
        return mul3x3(rm00, rm01, rm02, rm10, rm11, rm12, rm20, rm21, rm22, this);
    }
    public Matrix4x3f mul3x3(
            float rm00, float rm01, float rm02,
            float rm10, float rm11, float rm12,
            float rm20, float rm21, float rm22,
            Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        float m20 = this.m20, m21 = this.m21, m22 = this.m22;
        return dest
        ._m00(Math.fma(m00, rm00, Math.fma(m10, rm01, m20 * rm02)))
        ._m01(Math.fma(m01, rm00, Math.fma(m11, rm01, m21 * rm02)))
        ._m02(Math.fma(m02, rm00, Math.fma(m12, rm01, m22 * rm02)))
        ._m10(Math.fma(m00, rm10, Math.fma(m10, rm11, m20 * rm12)))
        ._m11(Math.fma(m01, rm10, Math.fma(m11, rm11, m21 * rm12)))
        ._m12(Math.fma(m02, rm10, Math.fma(m12, rm11, m22 * rm12)))
        ._m20(Math.fma(m00, rm20, Math.fma(m10, rm21, m20 * rm22)))
        ._m21(Math.fma(m01, rm20, Math.fma(m11, rm21, m21 * rm22)))
        ._m22(Math.fma(m02, rm20, Math.fma(m12, rm21, m22 * rm22)))
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4x3f fma(Matrix4x3fc other, float otherFactor) {
        return fma(other, otherFactor, this);
    }
    public Matrix4x3f fma(Matrix4x3fc other, float otherFactor, Matrix4x3f dest) {
        dest
        ._m00(Math.fma(other.m00(), otherFactor, m00))
        ._m01(Math.fma(other.m01(), otherFactor, m01))
        ._m02(Math.fma(other.m02(), otherFactor, m02))
        ._m10(Math.fma(other.m10(), otherFactor, m10))
        ._m11(Math.fma(other.m11(), otherFactor, m11))
        ._m12(Math.fma(other.m12(), otherFactor, m12))
        ._m20(Math.fma(other.m20(), otherFactor, m20))
        ._m21(Math.fma(other.m21(), otherFactor, m21))
        ._m22(Math.fma(other.m22(), otherFactor, m22))
        ._m30(Math.fma(other.m30(), otherFactor, m30))
        ._m31(Math.fma(other.m31(), otherFactor, m31))
        ._m32(Math.fma(other.m32(), otherFactor, m32))
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4x3f add(Matrix4x3fc other) {
        return add(other, this);
    }
    public Matrix4x3f add(Matrix4x3fc other, Matrix4x3f dest) {
        dest.m00 = m00 + other.m00();
        dest.m01 = m01 + other.m01();
        dest.m02 = m02 + other.m02();
        dest.m10 = m10 + other.m10();
        dest.m11 = m11 + other.m11();
        dest.m12 = m12 + other.m12();
        dest.m20 = m20 + other.m20();
        dest.m21 = m21 + other.m21();
        dest.m22 = m22 + other.m22();
        dest.m30 = m30 + other.m30();
        dest.m31 = m31 + other.m31();
        dest.m32 = m32 + other.m32();
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    public Matrix4x3f sub(Matrix4x3fc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix4x3f sub(Matrix4x3fc subtrahend, Matrix4x3f dest) {
        dest.m00 = m00 - subtrahend.m00();
        dest.m01 = m01 - subtrahend.m01();
        dest.m02 = m02 - subtrahend.m02();
        dest.m10 = m10 - subtrahend.m10();
        dest.m11 = m11 - subtrahend.m11();
        dest.m12 = m12 - subtrahend.m12();
        dest.m20 = m20 - subtrahend.m20();
        dest.m21 = m21 - subtrahend.m21();
        dest.m22 = m22 - subtrahend.m22();
        dest.m30 = m30 - subtrahend.m30();
        dest.m31 = m31 - subtrahend.m31();
        dest.m32 = m32 - subtrahend.m32();
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    public Matrix4x3f mulComponentWise(Matrix4x3fc other) {
        return mulComponentWise(other, this);
    }
    public Matrix4x3f mulComponentWise(Matrix4x3fc other, Matrix4x3f dest) {
        dest.m00 = m00 * other.m00();
        dest.m01 = m01 * other.m01();
        dest.m02 = m02 * other.m02();
        dest.m10 = m10 * other.m10();
        dest.m11 = m11 * other.m11();
        dest.m12 = m12 * other.m12();
        dest.m20 = m20 * other.m20();
        dest.m21 = m21 * other.m21();
        dest.m22 = m22 * other.m22();
        dest.m30 = m30 * other.m30();
        dest.m31 = m31 * other.m31();
        dest.m32 = m32 * other.m32();
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    public Matrix4x3f set(float m00, float m01, float m02,
                          float m10, float m11, float m12,
                          float m20, float m21, float m22, 
                          float m30, float m31, float m32) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        return determineProperties();
    }
    public Matrix4x3f set(float m[], int off) {
        MemUtil.INSTANCE.copy(m, off, this);
        return determineProperties();
    }
    public Matrix4x3f set(float m[]) {
        return set(m, 0);
    }
    public Matrix4x3f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4x3f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4x3f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return determineProperties();
    }
    public Matrix4x3f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return determineProperties();
    }
    public Matrix4x3f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return determineProperties();
    }
    public Matrix4x3f setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return determineProperties();
    }
    public float determinant() {
        return (m00 * m11 - m01 * m10) * m22
             + (m02 * m10 - m00 * m12) * m21
             + (m01 * m12 - m02 * m11) * m20;
    }
    public Matrix4x3f invert(Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return invertOrthonormal(dest);
        return invertGeneric(dest);
    }
    private Matrix4x3f invertGeneric(Matrix4x3f dest) {
        float m11m00 = m00 * m11, m10m01 = m01 * m10, m10m02 = m02 * m10;
        float m12m00 = m00 * m12, m12m01 = m01 * m12, m11m02 = m02 * m11;
        float s = 1.0f / ((m11m00 - m10m01) * m22 + (m10m02 - m12m00) * m21 + (m12m01 - m11m02) * m20);
        float m10m22 = m10 * m22, m10m21 = m10 * m21, m11m22 = m11 * m22;
        float m11m20 = m11 * m20, m12m21 = m12 * m21, m12m20 = m12 * m20;
        float m20m02 = m20 * m02, m20m01 = m20 * m01, m21m02 = m21 * m02;
        float m21m00 = m21 * m00, m22m01 = m22 * m01, m22m00 = m22 * m00;
        float nm00 = (m11m22 - m12m21) * s;
        float nm01 = (m21m02 - m22m01) * s;
        float nm02 = (m12m01 - m11m02) * s;
        float nm10 = (m12m20 - m10m22) * s;
        float nm11 = (m22m00 - m20m02) * s;
        float nm12 = (m10m02 - m12m00) * s;
        float nm20 = (m10m21 - m11m20) * s;
        float nm21 = (m20m01 - m21m00) * s;
        float nm22 = (m11m00 - m10m01) * s;
        float nm30 = (m10m22 * m31 - m10m21 * m32 + m11m20 * m32 - m11m22 * m30 + m12m21 * m30 - m12m20 * m31) * s;
        float nm31 = (m20m02 * m31 - m20m01 * m32 + m21m00 * m32 - m21m02 * m30 + m22m01 * m30 - m22m00 * m31) * s;
        float nm32 = (m11m02 * m30 - m12m01 * m30 + m12m00 * m31 - m10m02 * m31 + m10m01 * m32 - m11m00 * m32) * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = nm30;
        dest.m31 = nm31;
        dest.m32 = nm32;
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    private Matrix4x3f invertOrthonormal(Matrix4x3f dest) {
        float nm30 = -(m00 * m30 + m01 * m31 + m02 * m32);
        float nm31 = -(m10 * m30 + m11 * m31 + m12 * m32);
        float nm32 = -(m20 * m30 + m21 * m31 + m22 * m32);
        float m01 = this.m01;
        float m02 = this.m02;
        float m12 = this.m12;
        dest.m00 = m00;
        dest.m01 = m10;
        dest.m02 = m20;
        dest.m10 = m01;
        dest.m11 = m11;
        dest.m12 = m21;
        dest.m20 = m02;
        dest.m21 = m12;
        dest.m22 = m22;
        dest.m30 = nm30;
        dest.m31 = nm31;
        dest.m32 = nm32;
        dest.properties = PROPERTY_ORTHONORMAL;
        return dest;
    }
    public Matrix4f invert(Matrix4f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return invertOrthonormal(dest);
        return invertGeneric(dest);
    }
    private Matrix4f invertGeneric(Matrix4f dest) {
        float m11m00 = m00 * m11, m10m01 = m01 * m10, m10m02 = m02 * m10;
        float m12m00 = m00 * m12, m12m01 = m01 * m12, m11m02 = m02 * m11;
        float s = 1.0f / ((m11m00 - m10m01) * m22 + (m10m02 - m12m00) * m21 + (m12m01 - m11m02) * m20);
        float m10m22 = m10 * m22, m10m21 = m10 * m21, m11m22 = m11 * m22;
        float m11m20 = m11 * m20, m12m21 = m12 * m21, m12m20 = m12 * m20;
        float m20m02 = m20 * m02, m20m01 = m20 * m01, m21m02 = m21 * m02;
        float m21m00 = m21 * m00, m22m01 = m22 * m01, m22m00 = m22 * m00;
        float nm00 = (m11m22 - m12m21) * s;
        float nm01 = (m21m02 - m22m01) * s;
        float nm02 = (m12m01 - m11m02) * s;
        float nm10 = (m12m20 - m10m22) * s;
        float nm11 = (m22m00 - m20m02) * s;
        float nm12 = (m10m02 - m12m00) * s;
        float nm20 = (m10m21 - m11m20) * s;
        float nm21 = (m20m01 - m21m00) * s;
        float nm22 = (m11m00 - m10m01) * s;
        float nm30 = (m10m22 * m31 - m10m21 * m32 + m11m20 * m32 - m11m22 * m30 + m12m21 * m30 - m12m20 * m31) * s;
        float nm31 = (m20m02 * m31 - m20m01 * m32 + m21m00 * m32 - m21m02 * m30 + m22m01 * m30 - m22m00 * m31) * s;
        float nm32 = (m11m02 * m30 - m12m01 * m30 + m12m00 * m31 - m10m02 * m31 + m10m01 * m32 - m11m00 * m32) * s;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0f)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0f)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0f)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0f)
        ._properties(PROPERTY_UNKNOWN);
    }
    private Matrix4f invertOrthonormal(Matrix4f dest) {
        float nm30 = -(m00 * m30 + m01 * m31 + m02 * m32);
        float nm31 = -(m10 * m30 + m11 * m31 + m12 * m32);
        float nm32 = -(m20 * m30 + m21 * m31 + m22 * m32);
        float m01 = this.m01;
        float m02 = this.m02;
        float m12 = this.m12;
        return dest
        ._m00(m00)
        ._m01(m10)
        ._m02(m20)
        ._m03(0.0f)
        ._m10(m01)
        ._m11(m11)
        ._m12(m21)
        ._m13(0.0f)
        ._m20(m02)
        ._m21(m12)
        ._m22(m22)
        ._m23(0.0f)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0f)
        ._properties(PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f invert() {
        return invert(this);
    }
    public Matrix4x3f invertOrtho(Matrix4x3f dest) {
        float invM00 = 1.0f / m00;
        float invM11 = 1.0f / m11;
        float invM22 = 1.0f / m22;
        dest.set(invM00, 0, 0,
                 0, invM11, 0,
                 0, 0, invM22,
                 -m30 * invM00, -m31 * invM11, -m32 * invM22);
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    public Matrix4x3f invertOrtho() {
        return invertOrtho(this);
    }
    public Matrix4x3f transpose3x3() {
        return transpose3x3(this);
    }
    public Matrix4x3f transpose3x3(Matrix4x3f dest) {
        float nm00 = m00;
        float nm01 = m10;
        float nm02 = m20;
        float nm10 = m01;
        float nm11 = m11;
        float nm12 = m21;
        float nm20 = m02;
        float nm21 = m12;
        float nm22 = m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.properties = properties;
        return dest;
    }
    public Matrix3f transpose3x3(Matrix3f dest) {
        dest.m00(m00);
        dest.m01(m10);
        dest.m02(m20);
        dest.m10(m01);
        dest.m11(m11);
        dest.m12(m21);
        dest.m20(m02);
        dest.m21(m12);
        dest.m22(m22);
        return dest;
    }
    public Matrix4x3f translation(float x, float y, float z) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        m30 = x;
        m31 = y;
        m32 = z;
        properties = PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f translation(Vector3fc offset) {
        return translation(offset.x(), offset.y(), offset.z());
    }
    public Matrix4x3f setTranslation(float x, float y, float z) {
        m30 = x;
        m31 = y;
        m32 = z;
        properties &= ~(PROPERTY_IDENTITY);
        return this;
    }
    public Matrix4x3f setTranslation(Vector3fc xyz) {
        return setTranslation(xyz.x(), xyz.y(), xyz.z());
    }
    public Vector3f getTranslation(Vector3f dest) {
        dest.x = m30;
        dest.y = m31;
        dest.z = m32;
        return dest;
    }
    public Vector3f getScale(Vector3f dest) {
        dest.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
        dest.y = Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
        dest.z = Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
        return dest;
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + " " + Runtime.format(m20, formatter) + " " + Runtime.format(m30, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + " " + Runtime.format(m21, formatter) + " " + Runtime.format(m31, formatter) + "\n"
             + Runtime.format(m02, formatter) + " " + Runtime.format(m12, formatter) + " " + Runtime.format(m22, formatter) + " " + Runtime.format(m32, formatter) + "\n";
    }
    public Matrix4x3f get(Matrix4x3f dest) {
        return dest.set(this);
    }
    public Matrix4x3d get(Matrix4x3d dest) {
        return dest.set(this);
    }
    public AxisAngle4f getRotation(AxisAngle4f dest) {
        return dest.set(this);
    }
    public AxisAngle4d getRotation(AxisAngle4d dest) {
        return dest.set(this);
    }
    public Quaternionf getUnnormalizedRotation(Quaternionf dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaternionf getNormalizedRotation(Quaternionf dest) {
        return dest.setFromNormalized(this);
    }
    public Quaterniond getUnnormalizedRotation(Quaterniond dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaterniond getNormalizedRotation(Quaterniond dest) {
        return dest.setFromNormalized(this);
    }
    public FloatBuffer get(FloatBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Matrix4x3fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix4x3fc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public float[] get(float[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public float[] get(float[] arr) {
        return get(arr, 0);
    }
    public float[] get4x4(float[] arr, int offset) {
        MemUtil.INSTANCE.copy4x4(this, arr, offset);
        return arr;
    }
    public float[] get4x4(float[] arr) {
        return get4x4(arr, 0);
    }
    public FloatBuffer get4x4(FloatBuffer buffer) {
        return get4x4(buffer.position(), buffer);
    }
    public FloatBuffer get4x4(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get4x4(ByteBuffer buffer) {
        return get4x4(buffer.position(), buffer);
    }
    public ByteBuffer get4x4(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get3x4(FloatBuffer buffer) {
        return get3x4(buffer.position(), buffer);
    }
    public FloatBuffer get3x4(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get3x4(ByteBuffer buffer) {
        return get3x4(buffer.position(), buffer);
    }
    public ByteBuffer get3x4(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public float[] getTransposed(float[] arr, int offset) {
        arr[offset+0]  = m00;
        arr[offset+1]  = m10;
        arr[offset+2]  = m20;
        arr[offset+3]  = m30;
        arr[offset+4]  = m01;
        arr[offset+5]  = m11;
        arr[offset+6]  = m21;
        arr[offset+7]  = m31;
        arr[offset+8]  = m02;
        arr[offset+9]  = m12;
        arr[offset+10] = m22;
        arr[offset+11] = m32;
        return arr;
    }
    public float[] getTransposed(float[] arr) {
        return getTransposed(arr, 0);
    }
    public Matrix4x3f zero() {
        MemUtil.INSTANCE.zero(this);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f scaling(float factor) {
        return scaling(factor, factor, factor);
    }
    public Matrix4x3f scaling(float x, float y, float z) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            MemUtil.INSTANCE.identity(this);
        m00 = x;
        m11 = y;
        m22 = z;
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        properties = one ? PROPERTY_ORTHONORMAL : 0;
        return this;
    }
    public Matrix4x3f scaling(Vector3fc xyz) {
        return scaling(xyz.x(), xyz.y(), xyz.z());
    }
    public Matrix4x3f rotation(float angle, Vector3fc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4x3f rotation(AxisAngle4f axisAngle) {
        return rotation(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix4x3f rotation(float angle, float x, float y, float z) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotationX(x * angle);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotationY(y * angle);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotationZ(z * angle);
        return rotationInternal(angle, x, y, z);
    }
    private Matrix4x3f rotationInternal(float angle, float x, float y, float z) {
        float sin = Math.sin(angle);
        float cos = Math.cosFromSin(sin, angle);
        float C = 1.0f - cos;
        float xy = x * y, xz = x * z, yz = y * z;
        m00 = cos + x * x * C;
        m01 = xy * C + z * sin;
        m02 = xz * C - y * sin;
        m10 = xy * C - z * sin;
        m11 = cos + y * y * C;
        m12 = yz * C + x * sin;
        m20 = xz * C + y * sin;
        m21 = yz * C - x * sin;
        m22 = cos + z * z * C;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotationX(float ang) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = 1.0f;
        m01 = 0.0f;
        m02 = 0.0f;
        m10 = 0.0f;
        m11 = cos;
        m12 = sin;
        m20 = 0.0f;
        m21 = -sin;
        m22 = cos;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotationY(float ang) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = cos;
        m01 = 0.0f;
        m02 = -sin;
        m10 = 0.0f;
        m11 = 1.0f;
        m12 = 0.0f;
        m20 = sin;
        m21 = 0.0f;
        m22 = cos;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotationZ(float ang) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = cos;
        m01 = sin;
        m02 = 0.0f;
        m10 = -sin;
        m11 = cos;
        m12 = 0.0f;
        m20 = 0.0f;
        m21 = 0.0f;
        m22 = 1.0f;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotationXYZ(float angleX, float angleY, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm11 = cosX;
        float nm12 = sinX;
        float nm21 = m_sinX;
        float nm22 = cosX;
        float nm00 = cosY;
        float nm01 = nm21 * m_sinY;
        float nm02 = nm22 * m_sinY;
        m20 = sinY;
        m21 = nm21 * cosY;
        m22 = nm22 * cosY;
        m00 = nm00 * cosZ;
        m01 = nm01 * cosZ + nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ;
        m11 = nm01 * m_sinZ + nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotationZYX(float angleZ, float angleY, float angleX) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = cosZ;
        float nm01 = sinZ;
        float nm10 = m_sinZ;
        float nm11 = cosZ;
        float nm20 = nm00 * sinY;
        float nm21 = nm01 * sinY;
        float nm22 = cosY;
        m00 = nm00 * cosY;
        m01 = nm01 * cosY;
        m02 = m_sinY;
        m10 = nm10 * cosX + nm20 * sinX;
        m11 = nm11 * cosX + nm21 * sinX;
        m12 = nm22 * sinX;
        m20 = nm10 * m_sinX + nm20 * cosX;
        m21 = nm11 * m_sinX + nm21 * cosX;
        m22 = nm22 * cosX;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotationYXZ(float angleY, float angleX, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm00 = cosY;
        float nm02 = m_sinY;
        float nm20 = sinY;
        float nm22 = cosY;
        float nm10 = nm20 * sinX;
        float nm11 = cosX;
        float nm12 = nm22 * sinX;
        m20 = nm20 * cosX;
        m21 = m_sinX;
        m22 = nm22 * cosX;
        m00 = nm00 * cosZ + nm10 * sinZ;
        m01 = nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ + nm10 * cosZ;
        m11 = nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f setRotationXYZ(float angleX, float angleY, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm11 = cosX;
        float nm12 = sinX;
        float nm21 = m_sinX;
        float nm22 = cosX;
        float nm00 = cosY;
        float nm01 = nm21 * m_sinY;
        float nm02 = nm22 * m_sinY;
        m20 = sinY;
        m21 = nm21 * cosY;
        m22 = nm22 * cosY;
        m00 = nm00 * cosZ;
        m01 = nm01 * cosZ + nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ;
        m11 = nm01 * m_sinZ + nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f setRotationZYX(float angleZ, float angleY, float angleX) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = cosZ;
        float nm01 = sinZ;
        float nm10 = m_sinZ;
        float nm11 = cosZ;
        float nm20 = nm00 * sinY;
        float nm21 = nm01 * sinY;
        float nm22 = cosY;
        m00 = nm00 * cosY;
        m01 = nm01 * cosY;
        m02 = m_sinY;
        m10 = nm10 * cosX + nm20 * sinX;
        m11 = nm11 * cosX + nm21 * sinX;
        m12 = nm22 * sinX;
        m20 = nm10 * m_sinX + nm20 * cosX;
        m21 = nm11 * m_sinX + nm21 * cosX;
        m22 = nm22 * cosX;
        properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f setRotationYXZ(float angleY, float angleX, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm00 = cosY;
        float nm02 = m_sinY;
        float nm20 = sinY;
        float nm22 = cosY;
        float nm10 = nm20 * sinX;
        float nm11 = cosX;
        float nm12 = nm22 * sinX;
        m20 = nm20 * cosX;
        m21 = m_sinX;
        m22 = nm22 * cosX;
        m00 = nm00 * cosZ + nm10 * sinZ;
        m01 = nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ + nm10 * cosZ;
        m11 = nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4x3f rotation(Quaternionfc quat) {
        float w2 = quat.w() * quat.w();
        float x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y();
        float z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw;
        float xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz;
        float yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz;
        float xw = quat.x() * quat.w(), dxw = xw + xw;
        _m00(w2 + x2 - z2 - y2);
        _m01(dxy + dzw);
        _m02(dxz - dyw);
        _m10(dxy - dzw);
        _m11(y2 - z2 + w2 - x2);
        _m12(dyz + dxw);
        _m20(dyw + dxz);
        _m21(dyz - dxw);
        _m22(z2 - y2 - x2 + w2);
        _m30(0.0f);
        _m31(0.0f);
        _m32(0.0f);
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f translationRotateScale(float tx, float ty, float tz, 
                                             float qx, float qy, float qz, float qw, 
                                             float sx, float sy, float sz) {
        float dqx = qx + qx;
        float dqy = qy + qy;
        float dqz = qz + qz;
        float q00 = dqx * qx;
        float q11 = dqy * qy;
        float q22 = dqz * qz;
        float q01 = dqx * qy;
        float q02 = dqx * qz;
        float q03 = dqx * qw;
        float q12 = dqy * qz;
        float q13 = dqy * qw;
        float q23 = dqz * qw;
        m00 = sx - (q11 + q22) * sx;
        m01 = (q01 + q23) * sx;
        m02 = (q02 - q13) * sx;
        m10 = (q01 - q23) * sy;
        m11 = sy - (q22 + q00) * sy;
        m12 = (q12 + q03) * sy;
        m20 = (q02 + q13) * sz;
        m21 = (q12 - q03) * sz;
        m22 = sz - (q11 + q00) * sz;
        m30 = tx;
        m31 = ty;
        m32 = tz;
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f translationRotateScale(Vector3fc translation, 
                                           Quaternionfc quat, 
                                           Vector3fc scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4x3f translationRotateScaleMul(float tx, float ty, float tz, 
                                                float qx, float qy, float qz, float qw, 
                                                float sx, float sy, float sz,
                                                Matrix4x3f m) {
        float dqx = qx + qx;
        float dqy = qy + qy;
        float dqz = qz + qz;
        float q00 = dqx * qx;
        float q11 = dqy * qy;
        float q22 = dqz * qz;
        float q01 = dqx * qy;
        float q02 = dqx * qz;
        float q03 = dqx * qw;
        float q12 = dqy * qz;
        float q13 = dqy * qw;
        float q23 = dqz * qw;
        float nm00 = sx - (q11 + q22) * sx;
        float nm01 = (q01 + q23) * sx;
        float nm02 = (q02 - q13) * sx;
        float nm10 = (q01 - q23) * sy;
        float nm11 = sy - (q22 + q00) * sy;
        float nm12 = (q12 + q03) * sy;
        float nm20 = (q02 + q13) * sz;
        float nm21 = (q12 - q03) * sz;
        float nm22 = sz - (q11 + q00) * sz;
        float m00 = nm00 * m.m00 + nm10 * m.m01 + nm20 * m.m02;
        float m01 = nm01 * m.m00 + nm11 * m.m01 + nm21 * m.m02;
        m02 = nm02 * m.m00 + nm12 * m.m01 + nm22 * m.m02;
        this.m00 = m00;
        this.m01 = m01;
        float m10 = nm00 * m.m10 + nm10 * m.m11 + nm20 * m.m12;
        float m11 = nm01 * m.m10 + nm11 * m.m11 + nm21 * m.m12;
        m12 = nm02 * m.m10 + nm12 * m.m11 + nm22 * m.m12;
        this.m10 = m10;
        this.m11 = m11;
        float m20 = nm00 * m.m20 + nm10 * m.m21 + nm20 * m.m22;
        float m21 = nm01 * m.m20 + nm11 * m.m21 + nm21 * m.m22;
        m22 = nm02 * m.m20 + nm12 * m.m21 + nm22 * m.m22;
        this.m20 = m20;
        this.m21 = m21;
        float m30 = nm00 * m.m30 + nm10 * m.m31 + nm20 * m.m32 + tx;
        float m31 = nm01 * m.m30 + nm11 * m.m31 + nm21 * m.m32 + ty;
        m32 = nm02 * m.m30 + nm12 * m.m31 + nm22 * m.m32 + tz;
        this.m30 = m30;
        this.m31 = m31;
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f translationRotateScaleMul(Vector3fc translation, Quaternionfc quat, Vector3fc scale, Matrix4x3f m) {
        return translationRotateScaleMul(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z(), m);
    }
    public Matrix4x3f translationRotate(float tx, float ty, float tz, Quaternionfc quat) {
        float dqx = quat.x() + quat.x();
        float dqy = quat.y() + quat.y();
        float dqz = quat.z() + quat.z();
        float q00 = dqx * quat.x();
        float q11 = dqy * quat.y();
        float q22 = dqz * quat.z();
        float q01 = dqx * quat.y();
        float q02 = dqx * quat.z();
        float q03 = dqx * quat.w();
        float q12 = dqy * quat.z();
        float q13 = dqy * quat.w();
        float q23 = dqz * quat.w();
        m00 = 1.0f - (q11 + q22);
        m01 = q01 + q23;
        m02 = q02 - q13;
        m10 = q01 - q23;
        m11 = 1.0f - (q22 + q00);
        m12 = q12 + q03;
        m20 = q02 + q13;
        m21 = q12 - q03;
        m22 = 1.0f - (q11 + q00);
        m30 = tx;
        m31 = ty;
        m32 = tz;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f translationRotate(float tx, float ty, float tz, float qx, float qy, float qz, float qw) {
        float w2 = qw * qw;
        float x2 = qx * qx;
        float y2 = qy * qy;
        float z2 = qz * qz;
        float zw = qz * qw;
        float xy = qx * qy;
        float xz = qx * qz;
        float yw = qy * qw;
        float yz = qy * qz;
        float xw = qx * qw;
        this.m00 = w2 + x2 - z2 - y2;
        this.m01 = xy + zw + zw + xy;
        this.m02 = xz - yw + xz - yw;
        this.m10 = -zw + xy - zw + xy;
        this.m11 = y2 - z2 + w2 - x2;
        this.m12 = yz + yz + xw + xw;
        this.m20 = yw + xz + xz + yw;
        this.m21 = yz + yz - xw - xw;
        this.m22 = z2 - y2 - x2 + w2;
        this.m30 = tx;
        this.m31 = ty;
        this.m32 = tz;
        this.properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f translationRotate(Vector3fc translation, 
                                        Quaternionfc quat) {
        return translationRotate(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4x3f translationRotateMul(float tx, float ty, float tz, Quaternionfc quat, Matrix4x3fc mat) {
        return translationRotateMul(tx, ty, tz, quat.x(), quat.y(), quat.z(), quat.w(), mat);
    }
    public Matrix4x3f translationRotateMul(float tx, float ty, float tz, float qx, float qy, float qz, float qw, Matrix4x3fc mat) {
        float w2 = qw * qw;
        float x2 = qx * qx;
        float y2 = qy * qy;
        float z2 = qz * qz;
        float zw = qz * qw;
        float xy = qx * qy;
        float xz = qx * qz;
        float yw = qy * qw;
        float yz = qy * qz;
        float xw = qx * qw;
        float nm00 = w2 + x2 - z2 - y2;
        float nm01 = xy + zw + zw + xy;
        float nm02 = xz - yw + xz - yw;
        float nm10 = -zw + xy - zw + xy;
        float nm11 = y2 - z2 + w2 - x2;
        float nm12 = yz + yz + xw + xw;
        float nm20 = yw + xz + xz + yw;
        float nm21 = yz + yz - xw - xw;
        float nm22 = z2 - y2 - x2 + w2;
        m00 = nm00 * mat.m00() + nm10 * mat.m01() + nm20 * mat.m02();
        m01 = nm01 * mat.m00() + nm11 * mat.m01() + nm21 * mat.m02();
        m02 = nm02 * mat.m00() + nm12 * mat.m01() + nm22 * mat.m02();
        m10 = nm00 * mat.m10() + nm10 * mat.m11() + nm20 * mat.m12();
        m11 = nm01 * mat.m10() + nm11 * mat.m11() + nm21 * mat.m12();
        m12 = nm02 * mat.m10() + nm12 * mat.m11() + nm22 * mat.m12();
        m20 = nm00 * mat.m20() + nm10 * mat.m21() + nm20 * mat.m22();
        m21 = nm01 * mat.m20() + nm11 * mat.m21() + nm21 * mat.m22();
        m22 = nm02 * mat.m20() + nm12 * mat.m21() + nm22 * mat.m22();
        m30 = nm00 * mat.m30() + nm10 * mat.m31() + nm20 * mat.m32() + tx;
        m31 = nm01 * mat.m30() + nm11 * mat.m31() + nm21 * mat.m32() + ty;
        m32 = nm02 * mat.m30() + nm12 * mat.m31() + nm22 * mat.m32() + tz;
        this.properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f translationRotateInvert(float tx, float ty, float tz, float qx, float qy, float qz, float qw) {
        float nqx = -qx, nqy = -qy, nqz = -qz;
        float dqx = nqx + nqx;
        float dqy = nqy + nqy;
        float dqz = nqz + nqz;
        float q00 = dqx * nqx;
        float q11 = dqy * nqy;
        float q22 = dqz * nqz;
        float q01 = dqx * nqy;
        float q02 = dqx * nqz;
        float q03 = dqx * qw;
        float q12 = dqy * nqz;
        float q13 = dqy * qw;
        float q23 = dqz * qw;
        return this
        ._m00(1.0f - q11 - q22)
        ._m01(q01 + q23)
        ._m02(q02 - q13)
        ._m10(q01 - q23)
        ._m11(1.0f - q22 - q00)
        ._m12(q12 + q03)
        ._m20(q02 + q13)
        ._m21(q12 - q03)
        ._m22(1.0f - q11 - q00)
        ._m30(-m00 * tx - m10 * ty - m20 * tz)
        ._m31(-m01 * tx - m11 * ty - m21 * tz)
        ._m32(-m02 * tx - m12 * ty - m22 * tz)
        ._properties(PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f translationRotateInvert(Vector3fc translation, 
                                              Quaternionfc quat) {
        return translationRotateInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4x3f set3x3(Matrix3fc mat) {
        MemUtil.INSTANCE.copy3x3(mat, this);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Vector4f transform(Vector4f v) {
        return v.mul(this);
    }
    public Vector4f transform(Vector4fc v, Vector4f dest) {
        return v.mul(this, dest);
    }
    public Vector3f transformPosition(Vector3f v) {
        v.set(m00 * v.x + m10 * v.y + m20 * v.z + m30,
              m01 * v.x + m11 * v.y + m21 * v.z + m31,
              m02 * v.x + m12 * v.y + m22 * v.z + m32);
        return v;
    }
    public Vector3f transformPosition(Vector3fc v, Vector3f dest) {
        dest.set(m00 * v.x() + m10 * v.y() + m20 * v.z() + m30,
                 m01 * v.x() + m11 * v.y() + m21 * v.z() + m31,
                 m02 * v.x() + m12 * v.y() + m22 * v.z() + m32);
        return dest;
    }
    public Vector3f transformDirection(Vector3f v) {
        v.set(m00 * v.x + m10 * v.y + m20 * v.z,
              m01 * v.x + m11 * v.y + m21 * v.z,
              m02 * v.x + m12 * v.y + m22 * v.z);
        return v;
    }
    public Vector3f transformDirection(Vector3fc v, Vector3f dest) {
        dest.set(m00 * v.x() + m10 * v.y() + m20 * v.z(),
                 m01 * v.x() + m11 * v.y() + m21 * v.z(),
                 m02 * v.x() + m12 * v.y() + m22 * v.z());
        return dest;
    }
    public Matrix4x3f scale(Vector3fc xyz, Matrix4x3f dest) {
        return scale(xyz.x(), xyz.y(), xyz.z(), dest);
    }
    public Matrix4x3f scale(Vector3fc xyz) {
        return scale(xyz.x(), xyz.y(), xyz.z(), this);
    }
    public Matrix4x3f scale(float xyz, Matrix4x3f dest) {
        return scale(xyz, xyz, xyz, dest);
    }
    public Matrix4x3f scale(float xyz) {
        return scale(xyz, xyz, xyz);
    }
    public Matrix4x3f scaleXY(float x, float y, Matrix4x3f dest) {
        return scale(x, y, 1.0f, dest);
    }
    public Matrix4x3f scaleXY(float x, float y) {
        return scale(x, y, 1.0f);
    }
    public Matrix4x3f scale(float x, float y, float z, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.scaling(x, y, z);
        return scaleGeneric(x, y, z, dest);
    }
    private Matrix4x3f scaleGeneric(float x, float y, float z, Matrix4x3f dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m02 = m02 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        dest.m12 = m12 * y;
        dest.m20 = m20 * z;
        dest.m21 = m21 * z;
        dest.m22 = m22 * z;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f scale(float x, float y, float z) {
        return scale(x, y, z, this);
    }
    public Matrix4x3f scaleLocal(float x, float y, float z, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.scaling(x, y, z);
        float nm00 = x * m00;
        float nm01 = y * m01;
        float nm02 = z * m02;
        float nm10 = x * m10;
        float nm11 = y * m11;
        float nm12 = z * m12;
        float nm20 = x * m20;
        float nm21 = y * m21;
        float nm22 = z * m22;
        float nm30 = x * m30;
        float nm31 = y * m31;
        float nm32 = z * m32;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = nm30;
        dest.m31 = nm31;
        dest.m32 = nm32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f scaleAround(float sx, float sy, float sz, float ox, float oy, float oz, Matrix4x3f dest) {
        float nm30 = m00 * ox + m10 * oy + m20 * oz + m30;
        float nm31 = m01 * ox + m11 * oy + m21 * oz + m31;
        float nm32 = m02 * ox + m12 * oy + m22 * oz + m32;
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        return dest
        ._m00(m00 * sx)
        ._m01(m01 * sx)
        ._m02(m02 * sx)
        ._m10(m10 * sy)
        ._m11(m11 * sy)
        ._m12(m12 * sy)
        ._m20(m20 * sz)
        ._m21(m21 * sz)
        ._m22(m22 * sz)
        ._m30(-dest.m00 * ox - dest.m10 * oy - dest.m20 * oz + nm30)
        ._m31(-dest.m01 * ox - dest.m11 * oy - dest.m21 * oz + nm31)
        ._m32(-dest.m02 * ox - dest.m12 * oy - dest.m22 * oz + nm32)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | (one ? 0 : PROPERTY_ORTHONORMAL)));
    }
    public Matrix4x3f scaleAround(float sx, float sy, float sz, float ox, float oy, float oz) {
        return scaleAround(sx, sy, sz, ox, oy, oz, this);
    }
    public Matrix4x3f scaleAround(float factor, float ox, float oy, float oz) {
        return scaleAround(factor, factor, factor, ox, oy, oz, this);
    }
    public Matrix4x3f scaleAround(float factor, float ox, float oy, float oz, Matrix4x3f dest) {
        return scaleAround(factor, factor, factor, ox, oy, oz, dest);
    }
    public Matrix4x3f scaleLocal(float x, float y, float z) {
        return scaleLocal(x, y, z, this);
    }
    public Matrix4x3f rotateX(float ang, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationX(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float x = m30, y = m31, z = m32;
            return dest.rotationX(ang).setTranslation(x, y, z);
        }
        return rotateXInternal(ang, dest);
    }
    private Matrix4x3f rotateXInternal(float ang, Matrix4x3f dest) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        float rm11 = cos;
        float rm12 = sin;
        float rm21 = -sin;
        float rm22 = cos;
        float nm10 = m10 * rm11 + m20 * rm12;
        float nm11 = m11 * rm11 + m21 * rm12;
        float nm12 = m12 * rm11 + m22 * rm12;
        dest.m20 = m10 * rm21 + m20 * rm22;
        dest.m21 = m11 * rm21 + m21 * rm22;
        dest.m22 = m12 * rm21 + m22 * rm22;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateX(float ang) {
        return rotateX(ang, this);
    }
    public Matrix4x3f rotateY(float ang, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationY(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float x = m30, y = m31, z = m32;
            return dest.rotationY(ang).setTranslation(x, y, z);
        }
        return rotateYInternal(ang, dest);
    }
    private Matrix4x3f rotateYInternal(float ang, Matrix4x3f dest) {
        float cos, sin;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        float rm00 = cos;
        float rm02 = -sin;
        float rm20 = sin;
        float rm22 = cos;
        float nm00 = m00 * rm00 + m20 * rm02;
        float nm01 = m01 * rm00 + m21 * rm02;
        float nm02 = m02 * rm00 + m22 * rm02;
        dest.m20 = m00 * rm20 + m20 * rm22;
        dest.m21 = m01 * rm20 + m21 * rm22;
        dest.m22 = m02 * rm20 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateY(float ang) {
        return rotateY(ang, this);
    }
    public Matrix4x3f rotateZ(float ang, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationZ(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float x = m30, y = m31, z = m32;
            return dest.rotationZ(ang).setTranslation(x, y, z);
        }
        return rotateZInternal(ang, dest);
    }
    private Matrix4x3f rotateZInternal(float ang, Matrix4x3f dest) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        float rm00 = cos;
        float rm01 = sin;
        float rm10 = -sin;
        float rm11 = cos;
        float nm00 = m00 * rm00 + m10 * rm01;
        float nm01 = m01 * rm00 + m11 * rm01;
        float nm02 = m02 * rm00 + m12 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m12 = m02 * rm10 + m12 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m20 = m20;
        dest.m21 = m21;
        dest.m22 = m22;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateZ(float ang) {
        return rotateZ(ang, this);
    }
    public Matrix4x3f rotateXYZ(Vector3f angles) {
        return rotateXYZ(angles.x, angles.y, angles.z);
    }
    public Matrix4x3f rotateXYZ(float angleX, float angleY, float angleZ) {
        return rotateXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix4x3f rotateXYZ(float angleX, float angleY, float angleZ, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationXYZ(angleX, angleY, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30, ty = m31, tz = m32;
            return dest.rotationXYZ(angleX, angleY, angleZ).setTranslation(tx, ty, tz);
        }
        return rotateXYZInternal(angleX, angleY, angleZ, dest);
    }
    private Matrix4x3f rotateXYZInternal(float angleX, float angleY, float angleZ, Matrix4x3f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm10 = m10 * cosX + m20 * sinX;
        float nm11 = m11 * cosX + m21 * sinX;
        float nm12 = m12 * cosX + m22 * sinX;
        float nm20 = m10 * m_sinX + m20 * cosX;
        float nm21 = m11 * m_sinX + m21 * cosX;
        float nm22 = m12 * m_sinX + m22 * cosX;
        float nm00 = m00 * cosY + nm20 * m_sinY;
        float nm01 = m01 * cosY + nm21 * m_sinY;
        float nm02 = m02 * cosY + nm22 * m_sinY;
        dest.m20 = m00 * sinY + nm20 * cosY;
        dest.m21 = m01 * sinY + nm21 * cosY;
        dest.m22 = m02 * sinY + nm22 * cosY;
        dest.m00 = nm00 * cosZ + nm10 * sinZ;
        dest.m01 = nm01 * cosZ + nm11 * sinZ;
        dest.m02 = nm02 * cosZ + nm12 * sinZ;
        dest.m10 = nm00 * m_sinZ + nm10 * cosZ;
        dest.m11 = nm01 * m_sinZ + nm11 * cosZ;
        dest.m12 = nm02 * m_sinZ + nm12 * cosZ;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateZYX(Vector3f angles) {
        return rotateZYX(angles.z, angles.y, angles.x);
    }
    public Matrix4x3f rotateZYX(float angleZ, float angleY, float angleX) {
        return rotateZYX(angleZ, angleY, angleX, this);
    }
    public Matrix4x3f rotateZYX(float angleZ, float angleY, float angleX, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationZYX(angleZ, angleY, angleX);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30, ty = m31, tz = m32;
            return dest.rotationZYX(angleZ, angleY, angleX).setTranslation(tx, ty, tz);
        }
        return rotateZYXInternal(angleZ, angleY, angleX, dest);
    }
    private Matrix4x3f rotateZYXInternal(float angleZ, float angleY, float angleX, Matrix4x3f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = m00 * cosZ + m10 * sinZ;
        float nm01 = m01 * cosZ + m11 * sinZ;
        float nm02 = m02 * cosZ + m12 * sinZ;
        float nm10 = m00 * m_sinZ + m10 * cosZ;
        float nm11 = m01 * m_sinZ + m11 * cosZ;
        float nm12 = m02 * m_sinZ + m12 * cosZ;
        float nm20 = nm00 * sinY + m20 * cosY;
        float nm21 = nm01 * sinY + m21 * cosY;
        float nm22 = nm02 * sinY + m22 * cosY;
        dest.m00 = nm00 * cosY + m20 * m_sinY;
        dest.m01 = nm01 * cosY + m21 * m_sinY;
        dest.m02 = nm02 * cosY + m22 * m_sinY;
        dest.m10 = nm10 * cosX + nm20 * sinX;
        dest.m11 = nm11 * cosX + nm21 * sinX;
        dest.m12 = nm12 * cosX + nm22 * sinX;
        dest.m20 = nm10 * m_sinX + nm20 * cosX;
        dest.m21 = nm11 * m_sinX + nm21 * cosX;
        dest.m22 = nm12 * m_sinX + nm22 * cosX;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateYXZ(Vector3f angles) {
        return rotateYXZ(angles.y, angles.x, angles.z);
    }
    public Matrix4x3f rotateYXZ(float angleY, float angleX, float angleZ) {
        return rotateYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix4x3f rotateYXZ(float angleY, float angleX, float angleZ, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationYXZ(angleY, angleX, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            float tx = m30, ty = m31, tz = m32;
            return dest.rotationYXZ(angleY, angleX, angleZ).setTranslation(tx, ty, tz);
        }
        return rotateYXZInternal(angleY, angleX, angleZ, dest);
    }
    private Matrix4x3f rotateYXZInternal(float angleY, float angleX, float angleZ, Matrix4x3f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm20 = m00 * sinY + m20 * cosY;
        float nm21 = m01 * sinY + m21 * cosY;
        float nm22 = m02 * sinY + m22 * cosY;
        float nm00 = m00 * cosY + m20 * m_sinY;
        float nm01 = m01 * cosY + m21 * m_sinY;
        float nm02 = m02 * cosY + m22 * m_sinY;
        float nm10 = m10 * cosX + nm20 * sinX;
        float nm11 = m11 * cosX + nm21 * sinX;
        float nm12 = m12 * cosX + nm22 * sinX;
        dest.m20 = m10 * m_sinX + nm20 * cosX;
        dest.m21 = m11 * m_sinX + nm21 * cosX;
        dest.m22 = m12 * m_sinX + nm22 * cosX;
        dest.m00 = nm00 * cosZ + nm10 * sinZ;
        dest.m01 = nm01 * cosZ + nm11 * sinZ;
        dest.m02 = nm02 * cosZ + nm12 * sinZ;
        dest.m10 = nm00 * m_sinZ + nm10 * cosZ;
        dest.m11 = nm01 * m_sinZ + nm11 * cosZ;
        dest.m12 = nm02 * m_sinZ + nm12 * cosZ;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotate(float ang, float x, float y, float z, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(ang, x, y, z);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(ang, x, y, z, dest);
        return rotateGeneric(ang, x, y, z, dest);
    }
    private Matrix4x3f rotateGeneric(float ang, float x, float y, float z, Matrix4x3f dest) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotateX(x * ang, dest);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotateY(y * ang, dest);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotateZ(z * ang, dest);
        return rotateGenericInternal(ang, x, y, z, dest);
    }
    private Matrix4x3f rotateGenericInternal(float ang, float x, float y, float z, Matrix4x3f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float rm00 = xx * C + c;
        float rm01 = xy * C + z * s;
        float rm02 = xz * C - y * s;
        float rm10 = xy * C - z * s;
        float rm11 = yy * C + c;
        float rm12 = yz * C + x * s;
        float rm20 = xz * C + y * s;
        float rm21 = yz * C - x * s;
        float rm22 = zz * C + c;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotate(float ang, float x, float y, float z) {
        return rotate(ang, x, y, z, this);
    }
    public Matrix4x3f rotateTranslation(float ang, float x, float y, float z, Matrix4x3f dest) {
        float tx = m30, ty = m31, tz = m32;
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return dest.rotationX(x * ang).setTranslation(tx, ty, tz);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return dest.rotationY(y * ang).setTranslation(tx, ty, tz);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return dest.rotationZ(z * ang).setTranslation(tx, ty, tz);
        return rotateTranslationInternal(ang, x, y, z, dest);
    }
    private Matrix4x3f rotateTranslationInternal(float ang, float x, float y, float z, Matrix4x3f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float rm00 = xx * C + c;
        float rm01 = xy * C + z * s;
        float rm02 = xz * C - y * s;
        float rm10 = xy * C - z * s;
        float rm11 = yy * C + c;
        float rm12 = yz * C + x * s;
        float rm20 = xz * C + y * s;
        float rm21 = yz * C - x * s;
        float rm22 = zz * C + c;
        dest.m20 = rm20;
        dest.m21 = rm21;
        dest.m22 = rm22;
        dest.m00 = rm00;
        dest.m01 = rm01;
        dest.m02 = rm02;
        dest.m10 = rm10;
        dest.m11 = rm11;
        dest.m12 = rm12;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateAround(Quaternionfc quat, float ox, float oy, float oz) {
        return rotateAround(quat, ox, oy, oz, this);
    }
    private Matrix4x3f rotateAroundAffine(Quaternionfc quat, float ox, float oy, float oz, Matrix4x3f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = dxy - dzw;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float tm30 = m00 * ox + m10 * oy + m20 * oz + m30;
        float tm31 = m01 * ox + m11 * oy + m21 * oz + m31;
        float tm32 = m02 * ox + m12 * oy + m22 * oz + m32;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m30(-nm00 * ox - nm10 * oy - m20 * oz + tm30)
        ._m31(-nm01 * ox - nm11 * oy - m21 * oz + tm31)
        ._m32(-nm02 * ox - nm12 * oy - m22 * oz + tm32)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4x3f rotateAround(Quaternionfc quat, float ox, float oy, float oz, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return rotationAround(quat, ox, oy, oz);
        return rotateAroundAffine(quat, ox, oy, oz, dest);
    }
    public Matrix4x3f rotationAround(Quaternionfc quat, float ox, float oy, float oz) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        this._m20(dyw + dxz);
        this._m21(dyz - dxw);
        this._m22(z2 - y2 - x2 + w2);
        this._m00(w2 + x2 - z2 - y2);
        this._m01(dxy + dzw);
        this._m02(dxz - dyw);
        this._m10(dxy - dzw);
        this._m11(y2 - z2 + w2 - x2);
        this._m12(dyz + dxw);
        this._m30(-m00 * ox - m10 * oy - m20 * oz + ox);
        this._m31(-m01 * ox - m11 * oy - m21 * oz + oy);
        this._m32(-m02 * ox - m12 * oy - m22 * oz + oz);
        this.properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f rotateLocal(float ang, float x, float y, float z, Matrix4x3f dest) {
        if (y == 0.0f && z == 0.0f && Math.absEqualsOne(x))
            return rotateLocalX(x * ang, dest);
        else if (x == 0.0f && z == 0.0f && Math.absEqualsOne(y))
            return rotateLocalY(y * ang, dest);
        else if (x == 0.0f && y == 0.0f && Math.absEqualsOne(z))
            return rotateLocalZ(z * ang, dest);
        return rotateLocalInternal(ang, x, y, z, dest);
    }
    private Matrix4x3f rotateLocalInternal(float ang, float x, float y, float z, Matrix4x3f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float lm00 = xx * C + c;
        float lm01 = xy * C + z * s;
        float lm02 = xz * C - y * s;
        float lm10 = xy * C - z * s;
        float lm11 = yy * C + c;
        float lm12 = yz * C + x * s;
        float lm20 = xz * C + y * s;
        float lm21 = yz * C - x * s;
        float lm22 = zz * C + c;
        float nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        float nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        float nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        float nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        float nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        float nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        float nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        float nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        float nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        float nm30 = lm00 * m30 + lm10 * m31 + lm20 * m32;
        float nm31 = lm01 * m30 + lm11 * m31 + lm21 * m32;
        float nm32 = lm02 * m30 + lm12 * m31 + lm22 * m32;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = nm30;
        dest.m31 = nm31;
        dest.m32 = nm32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateLocal(float ang, float x, float y, float z) {
        return rotateLocal(ang, x, y, z, this);
    }
    public Matrix4x3f rotateLocalX(float ang, Matrix4x3f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm01 = cos * m01 - sin * m02;
        float nm02 = sin * m01 + cos * m02;
        float nm11 = cos * m11 - sin * m12;
        float nm12 = sin * m11 + cos * m12;
        float nm21 = cos * m21 - sin * m22;
        float nm22 = sin * m21 + cos * m22;
        float nm31 = cos * m31 - sin * m32;
        float nm32 = sin * m31 + cos * m32;
        dest
        ._m00(m00)
        ._m01(nm01)
        ._m02(nm02)
        ._m10(m10)
        ._m11(nm11)
        ._m12(nm12)
        ._m20(m20)
        ._m21(nm21)
        ._m22(nm22)
        ._m30(m30)
        ._m31(nm31)
        ._m32(nm32)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4x3f rotateLocalX(float ang) {
        return rotateLocalX(ang, this);
    }
    public Matrix4x3f rotateLocalY(float ang, Matrix4x3f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm00 =  cos * m00 + sin * m02;
        float nm02 = -sin * m00 + cos * m02;
        float nm10 =  cos * m10 + sin * m12;
        float nm12 = -sin * m10 + cos * m12;
        float nm20 =  cos * m20 + sin * m22;
        float nm22 = -sin * m20 + cos * m22;
        float nm30 =  cos * m30 + sin * m32;
        float nm32 = -sin * m30 + cos * m32;
        dest
        ._m00(nm00)
        ._m01(m01)
        ._m02(nm02)
        ._m10(nm10)
        ._m11(m11)
        ._m12(nm12)
        ._m20(nm20)
        ._m21(m21)
        ._m22(nm22)
        ._m30(nm30)
        ._m31(m31)
        ._m32(nm32)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4x3f rotateLocalY(float ang) {
        return rotateLocalY(ang, this);
    }
    public Matrix4x3f rotateLocalZ(float ang, Matrix4x3f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm00 = cos * m00 - sin * m01;
        float nm01 = sin * m00 + cos * m01;
        float nm10 = cos * m10 - sin * m11;
        float nm11 = sin * m10 + cos * m11;
        float nm20 = cos * m20 - sin * m21;
        float nm21 = sin * m20 + cos * m21;
        float nm30 = cos * m30 - sin * m31;
        float nm31 = sin * m30 + cos * m31;
        dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(m02)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(m12)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(m22)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(m32)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4x3f rotateLocalZ(float ang) {
        return rotateLocalZ(ang, this);
    }
    public Matrix4x3f translate(Vector3fc offset) {
        return translate(offset.x(), offset.y(), offset.z());
    }
    public Matrix4x3f translate(Vector3fc offset, Matrix4x3f dest) {
        return translate(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4x3f translate(float x, float y, float z, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.translation(x, y, z);
        return translateGeneric(x, y, z, dest);
    }
    private Matrix4x3f translateGeneric(float x, float y, float z, Matrix4x3f dest) {
        MemUtil.INSTANCE.copy(this, dest);
        dest.m30 = m00 * x + m10 * y + m20 * z + m30;
        dest.m31 = m01 * x + m11 * y + m21 * z + m31;
        dest.m32 = m02 * x + m12 * y + m22 * z + m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY);
        return dest;
    }
    public Matrix4x3f translate(float x, float y, float z) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return translation(x, y, z);
        Matrix4x3f c = this;
        c.m30 = c.m00 * x + c.m10 * y + c.m20 * z + c.m30;
        c.m31 = c.m01 * x + c.m11 * y + c.m21 * z + c.m31;
        c.m32 = c.m02 * x + c.m12 * y + c.m22 * z + c.m32;
        c.properties &= ~(PROPERTY_IDENTITY);
        return this;
    }
    public Matrix4x3f translateLocal(Vector3fc offset) {
        return translateLocal(offset.x(), offset.y(), offset.z());
    }
    public Matrix4x3f translateLocal(Vector3fc offset, Matrix4x3f dest) {
        return translateLocal(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4x3f translateLocal(float x, float y, float z, Matrix4x3f dest) {
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        dest.m20 = m20;
        dest.m21 = m21;
        dest.m22 = m22;
        dest.m30 = m30 + x;
        dest.m31 = m31 + y;
        dest.m32 = m32 + z;
        dest.properties = properties & ~(PROPERTY_IDENTITY);
        return dest;
    }
    public Matrix4x3f translateLocal(float x, float y, float z) {
        return translateLocal(x, y, z, this);
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(m00);
        out.writeFloat(m01);
        out.writeFloat(m02);
        out.writeFloat(m10);
        out.writeFloat(m11);
        out.writeFloat(m12);
        out.writeFloat(m20);
        out.writeFloat(m21);
        out.writeFloat(m22);
        out.writeFloat(m30);
        out.writeFloat(m31);
        out.writeFloat(m32);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readFloat();
        m01 = in.readFloat();
        m02 = in.readFloat();
        m10 = in.readFloat();
        m11 = in.readFloat();
        m12 = in.readFloat();
        m20 = in.readFloat();
        m21 = in.readFloat();
        m22 = in.readFloat();
        m30 = in.readFloat();
        m31 = in.readFloat();
        m32 = in.readFloat();
        determineProperties();
    }
    public Matrix4x3f ortho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar);
        float rm30 = (left + right) / (left - right);
        float rm31 = (top + bottom) / (bottom - top);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest.m30 = m00 * rm30 + m10 * rm31 + m20 * rm32 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m21 * rm32 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m22 * rm32 + m32;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m02 = m02 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        dest.m12 = m12 * rm11;
        dest.m20 = m20 * rm22;
        dest.m21 = m21 * rm22;
        dest.m22 = m22 * rm22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f ortho(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4x3f dest) {
        return ortho(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4x3f ortho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        return ortho(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4x3f ortho(float left, float right, float bottom, float top, float zNear, float zFar) {
        return ortho(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4x3f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear);
        float rm30 = (left + right) / (left - right);
        float rm31 = (top + bottom) / (bottom - top);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest.m30 = m00 * rm30 + m10 * rm31 + m20 * rm32 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m21 * rm32 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m22 * rm32 + m32;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m02 = m02 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        dest.m12 = m12 * rm11;
        dest.m20 = m20 * rm22;
        dest.m21 = m21 * rm22;
        dest.m22 = m22 * rm22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, Matrix4x3f dest) {
        return orthoLH(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4x3f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        return orthoLH(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4x3f orthoLH(float left, float right, float bottom, float top, float zNear, float zFar) {
        return orthoLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4x3f setOrtho(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.identity(this);
        m00 = 2.0f / (right - left);
        m11 = 2.0f / (top - bottom);
        m22 = (zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar);
        m30 = (right + left) / (left - right);
        m31 = (top + bottom) / (bottom - top);
        m32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f setOrtho(float left, float right, float bottom, float top, float zNear, float zFar) {
        return setOrtho(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4x3f setOrthoLH(float left, float right, float bottom, float top, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.identity(this);
        m00 = 2.0f / (right - left);
        m11 = 2.0f / (top - bottom);
        m22 = (zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear);
        m30 = (right + left) / (left - right);
        m31 = (top + bottom) / (bottom - top);
        m32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f setOrthoLH(float left, float right, float bottom, float top, float zNear, float zFar) {
        return setOrthoLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4x3f orthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest) {
        float rm00 = 2.0f / width;
        float rm11 = 2.0f / height;
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest.m30 = m20 * rm32 + m30;
        dest.m31 = m21 * rm32 + m31;
        dest.m32 = m22 * rm32 + m32;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m02 = m02 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        dest.m12 = m12 * rm11;
        dest.m20 = m20 * rm22;
        dest.m21 = m21 * rm22;
        dest.m22 = m22 * rm22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f orthoSymmetric(float width, float height, float zNear, float zFar, Matrix4x3f dest) {
        return orthoSymmetric(width, height, zNear, zFar, false, dest);
    }
    public Matrix4x3f orthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        return orthoSymmetric(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4x3f orthoSymmetric(float width, float height, float zNear, float zFar) {
        return orthoSymmetric(width, height, zNear, zFar, false, this);
    }
    public Matrix4x3f orthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne, Matrix4x3f dest) {
        float rm00 = 2.0f / width;
        float rm11 = 2.0f / height;
        float rm22 = (zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear);
        float rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest.m30 = m20 * rm32 + m30;
        dest.m31 = m21 * rm32 + m31;
        dest.m32 = m22 * rm32 + m32;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m02 = m02 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        dest.m12 = m12 * rm11;
        dest.m20 = m20 * rm22;
        dest.m21 = m21 * rm22;
        dest.m22 = m22 * rm22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f orthoSymmetricLH(float width, float height, float zNear, float zFar, Matrix4x3f dest) {
        return orthoSymmetricLH(width, height, zNear, zFar, false, dest);
    }
    public Matrix4x3f orthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        return orthoSymmetricLH(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4x3f orthoSymmetricLH(float width, float height, float zNear, float zFar) {
        return orthoSymmetricLH(width, height, zNear, zFar, false, this);
    }
    public Matrix4x3f setOrthoSymmetric(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.identity(this);
        m00 = 2.0f / width;
        m11 = 2.0f / height;
        m22 = (zZeroToOne ? 1.0f : 2.0f) / (zNear - zFar);
        m32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f setOrthoSymmetric(float width, float height, float zNear, float zFar) {
        return setOrthoSymmetric(width, height, zNear, zFar, false);
    }
    public Matrix4x3f setOrthoSymmetricLH(float width, float height, float zNear, float zFar, boolean zZeroToOne) {
        MemUtil.INSTANCE.identity(this);
        m00 = 2.0f / width;
        m11 = 2.0f / height;
        m22 = (zZeroToOne ? 1.0f : 2.0f) / (zFar - zNear);
        m32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f setOrthoSymmetricLH(float width, float height, float zNear, float zFar) {
        return setOrthoSymmetricLH(width, height, zNear, zFar, false);
    }
    public Matrix4x3f ortho2D(float left, float right, float bottom, float top, Matrix4x3f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm30 = -(right + left) / (right - left);
        float rm31 = -(top + bottom) / (top - bottom);
        dest.m30 = m00 * rm30 + m10 * rm31 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m32;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m02 = m02 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        dest.m12 = m12 * rm11;
        dest.m20 = -m20;
        dest.m21 = -m21;
        dest.m22 = -m22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f ortho2D(float left, float right, float bottom, float top) {
        return ortho2D(left, right, bottom, top, this);
    }
    public Matrix4x3f ortho2DLH(float left, float right, float bottom, float top, Matrix4x3f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm30 = -(right + left) / (right - left);
        float rm31 = -(top + bottom) / (top - bottom);
        dest.m30 = m00 * rm30 + m10 * rm31 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m32;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m02 = m02 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        dest.m12 = m12 * rm11;
        dest.m20 = m20;
        dest.m21 = m21;
        dest.m22 = m22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f ortho2DLH(float left, float right, float bottom, float top) {
        return ortho2DLH(left, right, bottom, top, this);
    }
    public Matrix4x3f setOrtho2D(float left, float right, float bottom, float top) {
        MemUtil.INSTANCE.identity(this);
        m00 = 2.0f / (right - left);
        m11 = 2.0f / (top - bottom);
        m22 = -1.0f;
        m30 = -(right + left) / (right - left);
        m31 = -(top + bottom) / (top - bottom);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f setOrtho2DLH(float left, float right, float bottom, float top) {
        MemUtil.INSTANCE.identity(this);
        m00 = 2.0f / (right - left);
        m11 = 2.0f / (top - bottom);
        m22 = 1.0f;
        m30 = -(right + left) / (right - left);
        m31 = -(top + bottom) / (top - bottom);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f lookAlong(Vector3fc dir, Vector3fc up) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4x3f lookAlong(Vector3fc dir, Vector3fc up, Matrix4x3f dest) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4x3f lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return setLookAlong(dirX, dirY, dirZ, upX, upY, upZ);
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm00 = leftX;
        float rm01 = upnX;
        float rm02 = dirX;
        float rm10 = leftY;
        float rm11 = upnY;
        float rm12 = dirY;
        float rm20 = leftZ;
        float rm21 = upnZ;
        float rm22 = dirZ;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f lookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        return lookAlong(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix4x3f setLookAlong(Vector3fc dir, Vector3fc up) {
        return setLookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4x3f setLookAlong(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        m00 = leftX;
        m01 = upnX;
        m02 = dirX;
        m10 = leftY;
        m11 = upnY;
        m12 = dirY;
        m20 = leftZ;
        m21 = upnZ;
        m22 = dirZ;
        m30 = 0.0f;
        m31 = 0.0f;
        m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f setLookAt(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return setLookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z());
    }
    public Matrix4x3f setLookAt(float eyeX, float eyeY, float eyeZ,
                                float centerX, float centerY, float centerZ,
                                float upX, float upY, float upZ) {
        float dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        m00 = leftX;
        m01 = upnX;
        m02 = dirX;
        m10 = leftY;
        m11 = upnY;
        m12 = dirY;
        m20 = leftZ;
        m21 = upnZ;
        m22 = dirZ;
        m30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        m31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        m32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f lookAt(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4x3f dest) {
        return lookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4x3f lookAt(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return lookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4x3f lookAt(float eyeX, float eyeY, float eyeZ,
                             float centerX, float centerY, float centerZ,
                             float upX, float upY, float upZ, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        return lookAtGeneric(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
    }
    private Matrix4x3f lookAtGeneric(float eyeX, float eyeY, float eyeZ,
                                     float centerX, float centerY, float centerZ,
                                     float upX, float upY, float upZ, Matrix4x3f dest) {
        float dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm00 = leftX;
        float rm01 = upnX;
        float rm02 = dirX;
        float rm10 = leftY;
        float rm11 = upnY;
        float rm12 = dirY;
        float rm20 = leftZ;
        float rm21 = upnZ;
        float rm22 = dirZ;
        float rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        float rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        float rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        dest.m30 = m00 * rm30 + m10 * rm31 + m20 * rm32 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m21 * rm32 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m22 * rm32 + m32;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f lookAt(float eyeX, float eyeY, float eyeZ,
                             float centerX, float centerY, float centerZ,
                             float upX, float upY, float upZ) {
        return lookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, this);
    }
    public Matrix4x3f setLookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return setLookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z());
    }
    public Matrix4x3f setLookAtLH(float eyeX, float eyeY, float eyeZ,
                                  float centerX, float centerY, float centerZ,
                                  float upX, float upY, float upZ) {
        float dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        m00 = leftX;
        m01 = upnX;
        m02 = dirX;
        m10 = leftY;
        m11 = upnY;
        m12 = dirY;
        m20 = leftZ;
        m21 = upnZ;
        m22 = dirZ;
        m30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        m31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        m32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f lookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up, Matrix4x3f dest) {
        return lookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4x3f lookAtLH(Vector3fc eye, Vector3fc center, Vector3fc up) {
        return lookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4x3f lookAtLH(float eyeX, float eyeY, float eyeZ,
                               float centerX, float centerY, float centerZ,
                               float upX, float upY, float upZ, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAtLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        return lookAtLHGeneric(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
    }
    private Matrix4x3f lookAtLHGeneric(float eyeX, float eyeY, float eyeZ,
                                       float centerX, float centerY, float centerZ,
                                       float upX, float upY, float upZ, Matrix4x3f dest) {
        float dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm00 = leftX;
        float rm01 = upnX;
        float rm02 = dirX;
        float rm10 = leftY;
        float rm11 = upnY;
        float rm12 = dirY;
        float rm20 = leftZ;
        float rm21 = upnZ;
        float rm22 = dirZ;
        float rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        float rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        float rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        dest.m30 = m00 * rm30 + m10 * rm31 + m20 * rm32 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m21 * rm32 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m22 * rm32 + m32;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f lookAtLH(float eyeX, float eyeY, float eyeZ,
                               float centerX, float centerY, float centerZ,
                               float upX, float upY, float upZ) {
        return lookAtLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, this);
    }
    public Matrix4x3f rotate(Quaternionfc quat, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(quat);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(quat, dest);
        return rotateGeneric(quat, dest);
    }
    private Matrix4x3f rotateGeneric(Quaternionfc quat, Matrix4x3f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = dxy - dzw;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotate(Quaternionfc quat) {
        return rotate(quat, this);
    }
    public Matrix4x3f rotateTranslation(Quaternionfc quat, Matrix4x3f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = dxy - dzw;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        dest.m20 = rm20;
        dest.m21 = rm21;
        dest.m22 = rm22;
        dest.m00 = rm00;
        dest.m01 = rm01;
        dest.m02 = rm02;
        dest.m10 = rm10;
        dest.m11 = rm11;
        dest.m12 = rm12;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateLocal(Quaternionfc quat, Matrix4x3f dest) {
        float w2 = quat.w() * quat.w();
        float x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y();
        float z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w();
        float xy = quat.x() * quat.y();
        float xz = quat.x() * quat.z();
        float yw = quat.y() * quat.w();
        float yz = quat.y() * quat.z();
        float xw = quat.x() * quat.w();
        float lm00 = w2 + x2 - z2 - y2;
        float lm01 = xy + zw + zw + xy;
        float lm02 = xz - yw + xz - yw;
        float lm10 = -zw + xy - zw + xy;
        float lm11 = y2 - z2 + w2 - x2;
        float lm12 = yz + yz + xw + xw;
        float lm20 = yw + xz + xz + yw;
        float lm21 = yz + yz - xw - xw;
        float lm22 = z2 - y2 - x2 + w2;
        float nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        float nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        float nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        float nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        float nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        float nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        float nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        float nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        float nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        float nm30 = lm00 * m30 + lm10 * m31 + lm20 * m32;
        float nm31 = lm01 * m30 + lm11 * m31 + lm21 * m32;
        float nm32 = lm02 * m30 + lm12 * m31 + lm22 * m32;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = nm30;
        dest.m31 = nm31;
        dest.m32 = nm32;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotateLocal(Quaternionfc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix4x3f rotate(AxisAngle4f axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix4x3f rotate(AxisAngle4f axisAngle, Matrix4x3f dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix4x3f rotate(float angle, Vector3fc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4x3f rotate(float angle, Vector3fc axis, Matrix4x3f dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Matrix4x3f reflect(float a, float b, float c, float d, Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.reflection(a, b, c, d);
        float da = a + a, db = b + b, dc = c + c, dd = d + d;
        float rm00 = 1.0f - da * a;
        float rm01 = -da * b;
        float rm02 = -da * c;
        float rm10 = -db * a;
        float rm11 = 1.0f - db * b;
        float rm12 = -db * c;
        float rm20 = -dc * a;
        float rm21 = -dc * b;
        float rm22 = 1.0f - dc * c;
        float rm30 = -dd * a;
        float rm31 = -dd * b;
        float rm32 = -dd * c;
        dest.m30 = m00 * rm30 + m10 * rm31 + m20 * rm32 + m30;
        dest.m31 = m01 * rm30 + m11 * rm31 + m21 * rm32 + m31;
        dest.m32 = m02 * rm30 + m12 * rm31 + m22 * rm32 + m32;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f reflect(float a, float b, float c, float d) {
        return reflect(a, b, c, d, this);
    }
    public Matrix4x3f reflect(float nx, float ny, float nz, float px, float py, float pz) {
        return reflect(nx, ny, nz, px, py, pz, this);
    }
    public Matrix4x3f reflect(float nx, float ny, float nz, float px, float py, float pz, Matrix4x3f dest) {
        float invLength = Math.invsqrt(nx * nx + ny * ny + nz * nz);
        float nnx = nx * invLength;
        float nny = ny * invLength;
        float nnz = nz * invLength;
        return reflect(nnx, nny, nnz, -nnx * px - nny * py - nnz * pz, dest);
    }
    public Matrix4x3f reflect(Vector3fc normal, Vector3fc point) {
        return reflect(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z());
    }
    public Matrix4x3f reflect(Quaternionfc orientation, Vector3fc point) {
        return reflect(orientation, point, this);
    }
    public Matrix4x3f reflect(Quaternionfc orientation, Vector3fc point, Matrix4x3f dest) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        float normalX = (float) (orientation.x() * num3 + orientation.w() * num2);
        float normalY = (float) (orientation.y() * num3 - orientation.w() * num1);
        float normalZ = (float) (1.0 - (orientation.x() * num1 + orientation.y() * num2));
        return reflect(normalX, normalY, normalZ, point.x(), point.y(), point.z(), dest);
    }
    public Matrix4x3f reflect(Vector3fc normal, Vector3fc point, Matrix4x3f dest) {
        return reflect(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z(), dest);
    }
    public Matrix4x3f reflection(float a, float b, float c, float d) {
        float da = a + a, db = b + b, dc = c + c, dd = d + d;
        m00 = 1.0f - da * a;
        m01 = -da * b;
        m02 = -da * c;
        m10 = -db * a;
        m11 = 1.0f - db * b;
        m12 = -db * c;
        m20 = -dc * a;
        m21 = -dc * b;
        m22 = 1.0f - dc * c;
        m30 = -dd * a;
        m31 = -dd * b;
        m32 = -dd * c;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f reflection(float nx, float ny, float nz, float px, float py, float pz) {
        float invLength = Math.invsqrt(nx * nx + ny * ny + nz * nz);
        float nnx = nx * invLength;
        float nny = ny * invLength;
        float nnz = nz * invLength;
        return reflection(nnx, nny, nnz, -nnx * px - nny * py - nnz * pz);
    }
    public Matrix4x3f reflection(Vector3fc normal, Vector3fc point) {
        return reflection(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z());
    }
    public Matrix4x3f reflection(Quaternionfc orientation, Vector3fc point) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        float normalX = (float) (orientation.x() * num3 + orientation.w() * num2);
        float normalY = (float) (orientation.y() * num3 - orientation.w() * num1);
        float normalZ = (float) (1.0 - (orientation.x() * num1 + orientation.y() * num2));
        return reflection(normalX, normalY, normalZ, point.x(), point.y(), point.z());
    }
    public Vector4f getRow(int row, Vector4f dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            dest.x = m00;
            dest.y = m10;
            dest.z = m20;
            dest.w = m30;
            break;
        case 1:
            dest.x = m01;
            dest.y = m11;
            dest.z = m21;
            dest.w = m31;
            break;
        case 2:
            dest.x = m02;
            dest.y = m12;
            dest.z = m22;
            dest.w = m32;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix4x3f setRow(int row, Vector4fc src) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            this.m00 = src.x();
            this.m10 = src.y();
            this.m20 = src.z();
            this.m30 = src.w();
            break;
        case 1:
            this.m01 = src.x();
            this.m11 = src.y();
            this.m21 = src.z();
            this.m31 = src.w();
            break;
        case 2:
            this.m02 = src.x();
            this.m12 = src.y();
            this.m22 = src.z();
            this.m32 = src.w();
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Vector3f getColumn(int column, Vector3f dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            dest.x = m00;
            dest.y = m01;
            dest.z = m02;
            break;
        case 1:
            dest.x = m10;
            dest.y = m11;
            dest.z = m12;
            break;
        case 2:
            dest.x = m20;
            dest.y = m21;
            dest.z = m22;
            break;
        case 3:
            dest.x = m30;
            dest.y = m31;
            dest.z = m32;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix4x3f setColumn(int column, Vector3fc src) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            this.m00 = src.x();
            this.m01 = src.y();
            this.m02 = src.z();
            break;
        case 1:
            this.m10 = src.x();
            this.m11 = src.y();
            this.m12 = src.z();
            break;
        case 2:
            this.m20 = src.x();
            this.m21 = src.y();
            this.m22 = src.z();
            break;
        case 3:
            this.m30 = src.x();
            this.m31 = src.y();
            this.m32 = src.z();
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f normal() {
        return normal(this);
    }
    public Matrix4x3f normal(Matrix4x3f dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalOrthonormal(dest);
        return normalGeneric(dest);
    }
    private Matrix4x3f normalOrthonormal(Matrix4x3f dest) {
        dest.set(this);
        return dest._properties(PROPERTY_ORTHONORMAL);
    }
    private Matrix4x3f normalGeneric(Matrix4x3f dest) {
        float m00m11 = m00 * m11;
        float m01m10 = m01 * m10;
        float m02m10 = m02 * m10;
        float m00m12 = m00 * m12;
        float m01m12 = m01 * m12;
        float m02m11 = m02 * m11;
        float det = (m00m11 - m01m10) * m22 + (m02m10 - m00m12) * m21 + (m01m12 - m02m11) * m20;
        float s = 1.0f / det;
        float nm00 = (m11 * m22 - m21 * m12) * s;
        float nm01 = (m20 * m12 - m10 * m22) * s;
        float nm02 = (m10 * m21 - m20 * m11) * s;
        float nm10 = (m21 * m02 - m01 * m22) * s;
        float nm11 = (m00 * m22 - m20 * m02) * s;
        float nm12 = (m20 * m01 - m00 * m21) * s;
        float nm20 = (m01m12 - m02m11) * s;
        float nm21 = (m02m10 - m00m12) * s;
        float nm22 = (m00m11 - m01m10) * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = 0.0f;
        dest.m31 = 0.0f;
        dest.m32 = 0.0f;
        dest.properties = properties & ~PROPERTY_TRANSLATION;
        return dest;
    }
    public Matrix3f normal(Matrix3f dest) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalOrthonormal(dest);
        return normalGeneric(dest);
    }
    private Matrix3f normalOrthonormal(Matrix3f dest) {
        return dest.set(this);
    }
    private Matrix3f normalGeneric(Matrix3f dest) {
        float m00m11 = m00 * m11;
        float m01m10 = m01 * m10;
        float m02m10 = m02 * m10;
        float m00m12 = m00 * m12;
        float m01m12 = m01 * m12;
        float m02m11 = m02 * m11;
        float det = (m00m11 - m01m10) * m22 + (m02m10 - m00m12) * m21 + (m01m12 - m02m11) * m20;
        float s = 1.0f / det;
        dest.m00((m11 * m22 - m21 * m12) * s);
        dest.m01((m20 * m12 - m10 * m22) * s);
        dest.m02((m10 * m21 - m20 * m11) * s);
        dest.m10((m21 * m02 - m01 * m22) * s);
        dest.m11((m00 * m22 - m20 * m02) * s);
        dest.m12((m20 * m01 - m00 * m21) * s);
        dest.m20((m01m12 - m02m11) * s);
        dest.m21((m02m10 - m00m12) * s);
        dest.m22((m00m11 - m01m10) * s);
        return dest;
    }
    public Matrix4x3f cofactor3x3() {
        return cofactor3x3(this);
    }
    public Matrix3f cofactor3x3(Matrix3f dest) {
        dest.m00 = m11 * m22 - m21 * m12;
        dest.m01 = m20 * m12 - m10 * m22;
        dest.m02 = m10 * m21 - m20 * m11;
        dest.m10 = m21 * m02 - m01 * m22;
        dest.m11 = m00 * m22 - m20 * m02;
        dest.m12 = m20 * m01 - m00 * m21;
        dest.m20 = m01 * m12 - m02 * m11;
        dest.m21 = m02 * m10 - m00 * m12;
        dest.m22 = m00 * m11 - m01 * m10;
        return dest;
    }
    public Matrix4x3f cofactor3x3(Matrix4x3f dest) {
        float nm00 = m11 * m22 - m21 * m12;
        float nm01 = m20 * m12 - m10 * m22;
        float nm02 = m10 * m21 - m20 * m11;
        float nm10 = m21 * m02 - m01 * m22;
        float nm11 = m00 * m22 - m20 * m02;
        float nm12 = m20 * m01 - m00 * m21;
        float nm20 = m01 * m12 - m11 * m02;
        float nm21 = m02 * m10 - m12 * m00;
        float nm22 = m00 * m11 - m10 * m01;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m30 = 0.0f;
        dest.m31 = 0.0f;
        dest.m32 = 0.0f;
        dest.properties = properties & ~PROPERTY_TRANSLATION;
        return dest;
    }
    public Matrix4x3f normalize3x3() {
        return normalize3x3(this);
    }
    public Matrix4x3f normalize3x3(Matrix4x3f dest) {
        float invXlen = Math.invsqrt(m00 * m00 + m01 * m01 + m02 * m02);
        float invYlen = Math.invsqrt(m10 * m10 + m11 * m11 + m12 * m12);
        float invZlen = Math.invsqrt(m20 * m20 + m21 * m21 + m22 * m22);
        dest.m00 = m00 * invXlen; dest.m01 = m01 * invXlen; dest.m02 = m02 * invXlen;
        dest.m10 = m10 * invYlen; dest.m11 = m11 * invYlen; dest.m12 = m12 * invYlen;
        dest.m20 = m20 * invZlen; dest.m21 = m21 * invZlen; dest.m22 = m22 * invZlen;
        dest.properties = properties;
        return dest;
    }
    public Matrix3f normalize3x3(Matrix3f dest) {
        float invXlen = Math.invsqrt(m00 * m00 + m01 * m01 + m02 * m02);
        float invYlen = Math.invsqrt(m10 * m10 + m11 * m11 + m12 * m12);
        float invZlen = Math.invsqrt(m20 * m20 + m21 * m21 + m22 * m22);
        dest.m00(m00 * invXlen); dest.m01(m01 * invXlen); dest.m02(m02 * invXlen);
        dest.m10(m10 * invYlen); dest.m11(m11 * invYlen); dest.m12(m12 * invYlen);
        dest.m20(m20 * invZlen); dest.m21(m21 * invZlen); dest.m22(m22 * invZlen);
        return dest;
    }
    public Vector4f frustumPlane(int which, Vector4f dest) {
        switch (which) {
        case PLANE_NX:
            dest.set(m00, m10, m20, 1.0f + m30).normalize();
            break;
        case PLANE_PX:
            dest.set(-m00, -m10, -m20, 1.0f - m30).normalize();
            break;
        case PLANE_NY:
            dest.set(m01, m11, m21, 1.0f + m31).normalize();
            break;
        case PLANE_PY:
            dest.set(-m01, -m11, -m21, 1.0f - m31).normalize();
            break;
        case PLANE_NZ:
            dest.set(m02, m12, m22, 1.0f + m32).normalize();
            break;
        case PLANE_PZ:
            dest.set(-m02, -m12, -m22, 1.0f - m32).normalize();
            break;
        default:
            throw new IllegalArgumentException("which"); 
        }
        return dest;
    }
    public Vector3f positiveZ(Vector3f dir) {
        dir.x = m10 * m21 - m11 * m20;
        dir.y = m20 * m01 - m21 * m00;
        dir.z = m00 * m11 - m01 * m10;
        return dir.normalize(dir);
    }
    public Vector3f normalizedPositiveZ(Vector3f dir) {
        dir.x = m02;
        dir.y = m12;
        dir.z = m22;
        return dir;
    }
    public Vector3f positiveX(Vector3f dir) {
        dir.x = m11 * m22 - m12 * m21;
        dir.y = m02 * m21 - m01 * m22;
        dir.z = m01 * m12 - m02 * m11;
        return dir.normalize(dir);
    }
    public Vector3f normalizedPositiveX(Vector3f dir) {
        dir.x = m00;
        dir.y = m10;
        dir.z = m20;
        return dir;
    }
    public Vector3f positiveY(Vector3f dir) {
        dir.x = m12 * m20 - m10 * m22;
        dir.y = m00 * m22 - m02 * m20;
        dir.z = m02 * m10 - m00 * m12;
        return dir.normalize(dir);
    }
    public Vector3f normalizedPositiveY(Vector3f dir) {
        dir.x = m01;
        dir.y = m11;
        dir.z = m21;
        return dir;
    }
    public Vector3f origin(Vector3f origin) {
        float a = m00 * m11 - m01 * m10;
        float b = m00 * m12 - m02 * m10;
        float d = m01 * m12 - m02 * m11;
        float g = m20 * m31 - m21 * m30;
        float h = m20 * m32 - m22 * m30;
        float j = m21 * m32 - m22 * m31;
        origin.x = -m10 * j + m11 * h - m12 * g;
        origin.y =  m00 * j - m01 * h + m02 * g;
        origin.z = -m30 * d + m31 * b - m32 * a;
        return origin;
    }
    public Matrix4x3f shadow(Vector4fc light, float a, float b, float c, float d) {
        return shadow(light.x(), light.y(), light.z(), light.w(), a, b, c, d, this);
    }
    public Matrix4x3f shadow(Vector4fc light, float a, float b, float c, float d, Matrix4x3f dest) {
        return shadow(light.x(), light.y(), light.z(), light.w(), a, b, c, d, dest);
    }
    public Matrix4x3f shadow(float lightX, float lightY, float lightZ, float lightW, float a, float b, float c, float d) {
        return shadow(lightX, lightY, lightZ, lightW, a, b, c, d, this);
    }
    public Matrix4x3f shadow(float lightX, float lightY, float lightZ, float lightW, float a, float b, float c, float d, Matrix4x3f dest) {
        float invPlaneLen = Math.invsqrt(a*a + b*b + c*c);
        float an = a * invPlaneLen;
        float bn = b * invPlaneLen;
        float cn = c * invPlaneLen;
        float dn = d * invPlaneLen;
        float dot = an * lightX + bn * lightY + cn * lightZ + dn * lightW;
        float rm00 = dot - an * lightX;
        float rm01 = -an * lightY;
        float rm02 = -an * lightZ;
        float rm03 = -an * lightW;
        float rm10 = -bn * lightX;
        float rm11 = dot - bn * lightY;
        float rm12 = -bn * lightZ;
        float rm13 = -bn * lightW;
        float rm20 = -cn * lightX;
        float rm21 = -cn * lightY;
        float rm22 = dot - cn * lightZ;
        float rm23 = -cn * lightW;
        float rm30 = -dn * lightX;
        float rm31 = -dn * lightY;
        float rm32 = -dn * lightZ;
        float rm33 = dot - dn * lightW;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02 + m30 * rm03;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02 + m31 * rm03;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02 + m32 * rm03;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12 + m30 * rm13;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12 + m31 * rm13;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12 + m32 * rm13;
        float nm20 = m00 * rm20 + m10 * rm21 + m20 * rm22 + m30 * rm23;
        float nm21 = m01 * rm20 + m11 * rm21 + m21 * rm22 + m31 * rm23;
        float nm22 = m02 * rm20 + m12 * rm21 + m22 * rm22 + m32 * rm23;
        dest.m30 = m00 * rm30 + m10 * rm31 + m20 * rm32 + m30 * rm33;
        dest.m31 = m01 * rm30 + m11 * rm31 + m21 * rm32 + m31 * rm33;
        dest.m32 = m02 * rm30 + m12 * rm31 + m22 * rm32 + m32 * rm33;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    public Matrix4x3f shadow(Vector4fc light, Matrix4x3fc planeTransform, Matrix4x3f dest) {
        float a = planeTransform.m10();
        float b = planeTransform.m11();
        float c = planeTransform.m12();
        float d = -a * planeTransform.m30() - b * planeTransform.m31() - c * planeTransform.m32();
        return shadow(light.x(), light.y(), light.z(), light.w(), a, b, c, d, dest);
    }
    public Matrix4x3f shadow(Vector4fc light, Matrix4x3fc planeTransform) {
        return shadow(light, planeTransform, this);
    }
    public Matrix4x3f shadow(float lightX, float lightY, float lightZ, float lightW, Matrix4x3fc planeTransform, Matrix4x3f dest) {
        float a = planeTransform.m10();
        float b = planeTransform.m11();
        float c = planeTransform.m12();
        float d = -a * planeTransform.m30() - b * planeTransform.m31() - c * planeTransform.m32();
        return shadow(lightX, lightY, lightZ, lightW, a, b, c, d, dest);
    }
    public Matrix4x3f shadow(float lightX, float lightY, float lightZ, float lightW, Matrix4x3f planeTransform) {
        return shadow(lightX, lightY, lightZ, lightW, planeTransform, this);
    }
    public Matrix4x3f billboardCylindrical(Vector3fc objPos, Vector3fc targetPos, Vector3fc up) {
        float dirX = targetPos.x() - objPos.x();
        float dirY = targetPos.y() - objPos.y();
        float dirZ = targetPos.z() - objPos.z();
        float leftX = up.y() * dirZ - up.z() * dirY;
        float leftY = up.z() * dirX - up.x() * dirZ;
        float leftZ = up.x() * dirY - up.y() * dirX;
        float invLeftLen = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLen;
        leftY *= invLeftLen;
        leftZ *= invLeftLen;
        dirX = leftY * up.z() - leftZ * up.y();
        dirY = leftZ * up.x() - leftX * up.z();
        dirZ = leftX * up.y() - leftY * up.x();
        float invDirLen = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLen;
        dirY *= invDirLen;
        dirZ *= invDirLen;
        m00 = leftX;
        m01 = leftY;
        m02 = leftZ;
        m10 = up.x();
        m11 = up.y();
        m12 = up.z();
        m20 = dirX;
        m21 = dirY;
        m22 = dirZ;
        m30 = objPos.x();
        m31 = objPos.y();
        m32 = objPos.z();
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f billboardSpherical(Vector3fc objPos, Vector3fc targetPos, Vector3fc up) {
        float dirX = targetPos.x() - objPos.x();
        float dirY = targetPos.y() - objPos.y();
        float dirZ = targetPos.z() - objPos.z();
        float invDirLen = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLen;
        dirY *= invDirLen;
        dirZ *= invDirLen;
        float leftX = up.y() * dirZ - up.z() * dirY;
        float leftY = up.z() * dirX - up.x() * dirZ;
        float leftZ = up.x() * dirY - up.y() * dirX;
        float invLeftLen = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLen;
        leftY *= invLeftLen;
        leftZ *= invLeftLen;
        float upX = dirY * leftZ - dirZ * leftY;
        float upY = dirZ * leftX - dirX * leftZ;
        float upZ = dirX * leftY - dirY * leftX;
        m00 = leftX;
        m01 = leftY;
        m02 = leftZ;
        m10 = upX;
        m11 = upY;
        m12 = upZ;
        m20 = dirX;
        m21 = dirY;
        m22 = dirZ;
        m30 = objPos.x();
        m31 = objPos.y();
        m32 = objPos.z();
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f billboardSpherical(Vector3fc objPos, Vector3fc targetPos) {
        float toDirX = targetPos.x() - objPos.x();
        float toDirY = targetPos.y() - objPos.y();
        float toDirZ = targetPos.z() - objPos.z();
        float x = -toDirY;
        float y = toDirX;
        float w = Math.sqrt(toDirX * toDirX + toDirY * toDirY + toDirZ * toDirZ) + toDirZ;
        float invNorm = Math.invsqrt(x * x + y * y + w * w);
        x *= invNorm;
        y *= invNorm;
        w *= invNorm;
        float q00 = (x + x) * x;
        float q11 = (y + y) * y;
        float q01 = (x + x) * y;
        float q03 = (x + x) * w;
        float q13 = (y + y) * w;
        m00 = 1.0f - q11;
        m01 = q01;
        m02 = -q13;
        m10 = q01;
        m11 = 1.0f - q00;
        m12 = q03;
        m20 = q13;
        m21 = -q03;
        m22 = 1.0f - q11 - q00;
        m30 = objPos.x();
        m31 = objPos.y();
        m32 = objPos.z();
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(m00);
        result = prime * result + Float.floatToIntBits(m01);
        result = prime * result + Float.floatToIntBits(m02);
        result = prime * result + Float.floatToIntBits(m10);
        result = prime * result + Float.floatToIntBits(m11);
        result = prime * result + Float.floatToIntBits(m12);
        result = prime * result + Float.floatToIntBits(m20);
        result = prime * result + Float.floatToIntBits(m21);
        result = prime * result + Float.floatToIntBits(m22);
        result = prime * result + Float.floatToIntBits(m30);
        result = prime * result + Float.floatToIntBits(m31);
        result = prime * result + Float.floatToIntBits(m32);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix4x3f))
            return false;
        Matrix4x3f other = (Matrix4x3f) obj;
        if (Float.floatToIntBits(m00) != Float.floatToIntBits(other.m00))
            return false;
        if (Float.floatToIntBits(m01) != Float.floatToIntBits(other.m01))
            return false;
        if (Float.floatToIntBits(m02) != Float.floatToIntBits(other.m02))
            return false;
        if (Float.floatToIntBits(m10) != Float.floatToIntBits(other.m10))
            return false;
        if (Float.floatToIntBits(m11) != Float.floatToIntBits(other.m11))
            return false;
        if (Float.floatToIntBits(m12) != Float.floatToIntBits(other.m12))
            return false;
        if (Float.floatToIntBits(m20) != Float.floatToIntBits(other.m20))
            return false;
        if (Float.floatToIntBits(m21) != Float.floatToIntBits(other.m21))
            return false;
        if (Float.floatToIntBits(m22) != Float.floatToIntBits(other.m22))
            return false;
        if (Float.floatToIntBits(m30) != Float.floatToIntBits(other.m30))
            return false;
        if (Float.floatToIntBits(m31) != Float.floatToIntBits(other.m31))
            return false;
        if (Float.floatToIntBits(m32) != Float.floatToIntBits(other.m32))
            return false;
        return true;
    }
    public boolean equals(Matrix4x3fc m, float delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m02, m.m02(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        if (!Runtime.equals(m12, m.m12(), delta))
            return false;
        if (!Runtime.equals(m20, m.m20(), delta))
            return false;
        if (!Runtime.equals(m21, m.m21(), delta))
            return false;
        if (!Runtime.equals(m22, m.m22(), delta))
            return false;
        if (!Runtime.equals(m30, m.m30(), delta))
            return false;
        if (!Runtime.equals(m31, m.m31(), delta))
            return false;
        if (!Runtime.equals(m32, m.m32(), delta))
            return false;
        return true;
    }
    public Matrix4x3f pick(float x, float y, float width, float height, int[] viewport, Matrix4x3f dest) {
        float sx = viewport[2] / width;
        float sy = viewport[3] / height;
        float tx = (viewport[2] + 2.0f * (viewport[0] - x)) / width;
        float ty = (viewport[3] + 2.0f * (viewport[1] - y)) / height;
        dest.m30 = m00 * tx + m10 * ty + m30;
        dest.m31 = m01 * tx + m11 * ty + m31;
        dest.m32 = m02 * tx + m12 * ty + m32;
        dest.m00 = m00 * sx;
        dest.m01 = m01 * sx;
        dest.m02 = m02 * sx;
        dest.m10 = m10 * sy;
        dest.m11 = m11 * sy;
        dest.m12 = m12 * sy;
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    public Matrix4x3f pick(float x, float y, float width, float height, int[] viewport) {
        return pick(x, y, width, height, viewport, this);
    }
    public Matrix4x3f swap(Matrix4x3f other) {
        MemUtil.INSTANCE.swap(this, other);
        int props = properties;
        this.properties = other.properties;
        other.properties = props;
        return this;
    }
    public Matrix4x3f arcball(float radius, float centerX, float centerY, float centerZ, float angleX, float angleY, Matrix4x3f dest) {
        float m30 = m20 * -radius + this.m30;
        float m31 = m21 * -radius + this.m31;
        float m32 = m22 * -radius + this.m32;
        float sin = Math.sin(angleX);
        float cos = Math.cosFromSin(sin, angleX);
        float nm10 = m10 * cos + m20 * sin;
        float nm11 = m11 * cos + m21 * sin;
        float nm12 = m12 * cos + m22 * sin;
        float m20 = this.m20 * cos - m10 * sin;
        float m21 = this.m21 * cos - m11 * sin;
        float m22 = this.m22 * cos - m12 * sin;
        sin = Math.sin(angleY);
        cos = Math.cosFromSin(sin, angleY);
        float nm00 = m00 * cos - m20 * sin;
        float nm01 = m01 * cos - m21 * sin;
        float nm02 = m02 * cos - m22 * sin;
        float nm20 = m00 * sin + m20 * cos;
        float nm21 = m01 * sin + m21 * cos;
        float nm22 = m02 * sin + m22 * cos;
        dest.m30 = -nm00 * centerX - nm10 * centerY - nm20 * centerZ + m30;
        dest.m31 = -nm01 * centerX - nm11 * centerY - nm21 * centerZ + m31;
        dest.m32 = -nm02 * centerX - nm12 * centerY - nm22 * centerZ + m32;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f arcball(float radius, Vector3fc center, float angleX, float angleY, Matrix4x3f dest) {
        return arcball(radius, center.x(), center.y(), center.z(), angleX, angleY, dest);
    }
    public Matrix4x3f arcball(float radius, float centerX, float centerY, float centerZ, float angleX, float angleY) {
        return arcball(radius, centerX, centerY, centerZ, angleX, angleY, this);
    }
    public Matrix4x3f arcball(float radius, Vector3fc center, float angleX, float angleY) {
        return arcball(radius, center.x(), center.y(), center.z(), angleX, angleY, this);
    }
    public Matrix4x3f transformAab(float minX, float minY, float minZ, float maxX, float maxY, float maxZ, Vector3f outMin, Vector3f outMax) {
        float xax = m00 * minX, xay = m01 * minX, xaz = m02 * minX;
        float xbx = m00 * maxX, xby = m01 * maxX, xbz = m02 * maxX;
        float yax = m10 * minY, yay = m11 * minY, yaz = m12 * minY;
        float ybx = m10 * maxY, yby = m11 * maxY, ybz = m12 * maxY;
        float zax = m20 * minZ, zay = m21 * minZ, zaz = m22 * minZ;
        float zbx = m20 * maxZ, zby = m21 * maxZ, zbz = m22 * maxZ;
        float xminx, xminy, xminz, yminx, yminy, yminz, zminx, zminy, zminz;
        float xmaxx, xmaxy, xmaxz, ymaxx, ymaxy, ymaxz, zmaxx, zmaxy, zmaxz;
        if (xax < xbx) {
            xminx = xax;
            xmaxx = xbx;
        } else {
            xminx = xbx;
            xmaxx = xax;
        }
        if (xay < xby) {
            xminy = xay;
            xmaxy = xby;
        } else {
            xminy = xby;
            xmaxy = xay;
        }
        if (xaz < xbz) {
            xminz = xaz;
            xmaxz = xbz;
        } else {
            xminz = xbz;
            xmaxz = xaz;
        }
        if (yax < ybx) {
            yminx = yax;
            ymaxx = ybx;
        } else {
            yminx = ybx;
            ymaxx = yax;
        }
        if (yay < yby) {
            yminy = yay;
            ymaxy = yby;
        } else {
            yminy = yby;
            ymaxy = yay;
        }
        if (yaz < ybz) {
            yminz = yaz;
            ymaxz = ybz;
        } else {
            yminz = ybz;
            ymaxz = yaz;
        }
        if (zax < zbx) {
            zminx = zax;
            zmaxx = zbx;
        } else {
            zminx = zbx;
            zmaxx = zax;
        }
        if (zay < zby) {
            zminy = zay;
            zmaxy = zby;
        } else {
            zminy = zby;
            zmaxy = zay;
        }
        if (zaz < zbz) {
            zminz = zaz;
            zmaxz = zbz;
        } else {
            zminz = zbz;
            zmaxz = zaz;
        }
        outMin.x = xminx + yminx + zminx + m30;
        outMin.y = xminy + yminy + zminy + m31;
        outMin.z = xminz + yminz + zminz + m32;
        outMax.x = xmaxx + ymaxx + zmaxx + m30;
        outMax.y = xmaxy + ymaxy + zmaxy + m31;
        outMax.z = xmaxz + ymaxz + zmaxz + m32;
        return this;
    }
    public Matrix4x3f transformAab(Vector3fc min, Vector3fc max, Vector3f outMin, Vector3f outMax) {
        return transformAab(min.x(), min.y(), min.z(), max.x(), max.y(), max.z(), outMin, outMax);
    }
    public Matrix4x3f lerp(Matrix4x3fc other, float t) {
        return lerp(other, t, this);
    }
    public Matrix4x3f lerp(Matrix4x3fc other, float t, Matrix4x3f dest) {
        dest.m00 = Math.fma(other.m00() - m00, t, m00);
        dest.m01 = Math.fma(other.m01() - m01, t, m01);
        dest.m02 = Math.fma(other.m02() - m02, t, m02);
        dest.m10 = Math.fma(other.m10() - m10, t, m10);
        dest.m11 = Math.fma(other.m11() - m11, t, m11);
        dest.m12 = Math.fma(other.m12() - m12, t, m12);
        dest.m20 = Math.fma(other.m20() - m20, t, m20);
        dest.m21 = Math.fma(other.m21() - m21, t, m21);
        dest.m22 = Math.fma(other.m22() - m22, t, m22);
        dest.m30 = Math.fma(other.m30() - m30, t, m30);
        dest.m31 = Math.fma(other.m31() - m31, t, m31);
        dest.m32 = Math.fma(other.m32() - m32, t, m32);
        dest.properties = properties & other.properties();
        return dest;
    }
    public Matrix4x3f rotateTowards(Vector3fc dir, Vector3fc up, Matrix4x3f dest) {
        return rotateTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4x3f rotateTowards(Vector3fc dir, Vector3fc up) {
        return rotateTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4x3f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        return rotateTowards(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix4x3f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix4x3f dest) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        float rm00 = leftX;
        float rm01 = leftY;
        float rm02 = leftZ;
        float rm10 = upnX;
        float rm11 = upnY;
        float rm12 = upnZ;
        float rm20 = ndirX;
        float rm21 = ndirY;
        float rm22 = ndirZ;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f rotationTowards(Vector3fc dir, Vector3fc up) {
        return rotationTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4x3f rotationTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        this.m00 = leftX;
        this.m01 = leftY;
        this.m02 = leftZ;
        this.m10 = upnX;
        this.m11 = upnY;
        this.m12 = upnZ;
        this.m20 = ndirX;
        this.m21 = ndirY;
        this.m22 = ndirZ;
        this.m30 = 0.0f;
        this.m31 = 0.0f;
        this.m32 = 0.0f;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4x3f translationRotateTowards(Vector3fc pos, Vector3fc dir, Vector3fc up) {
        return translationRotateTowards(pos.x(), pos.y(), pos.z(), dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4x3f translationRotateTowards(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        this.m00 = leftX;
        this.m01 = leftY;
        this.m02 = leftZ;
        this.m10 = upnX;
        this.m11 = upnY;
        this.m12 = upnZ;
        this.m20 = ndirX;
        this.m21 = ndirY;
        this.m22 = ndirZ;
        this.m30 = posX;
        this.m31 = posY;
        this.m32 = posZ;
        properties = PROPERTY_ORTHONORMAL;
        return this;
    }
    public Vector3f getEulerAnglesZYX(Vector3f dest) {
        dest.x = Math.atan2(m12, m22);
        dest.y = Math.atan2(-m02, Math.sqrt(1.0f - m02 * m02));
        dest.z = Math.atan2(m01, m00);
        return dest;
    }
    public Vector3f getEulerAnglesXYZ(Vector3f dest) {
        dest.x = Math.atan2(-m21, m22);
        dest.y = Math.atan2(m20, Math.sqrt(1.0f - m20 * m20));
        dest.z = Math.atan2(-m10, m00);
        return dest;
    }
    public Vector3f getEulerAnglesYXZ(Vector3f dest) {
        dest.x = Math.atan2(-m21, Math.sqrt(1.0f - m21 * m21));
        dest.y = Math.atan2(m20, m22);
        dest.z = Math.atan2(m01, m11);
        return dest;
    }
    public Matrix4x3f obliqueZ(float a, float b) {
        this.m20 = m00 * a + m10 * b + m20;
        this.m21 = m01 * a + m11 * b + m21;
        this.m22 = m02 * a + m12 * b + m22;
        this.properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4x3f obliqueZ(float a, float b, Matrix4x3f dest) {
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        dest.m20 = m00 * a + m10 * b + m20;
        dest.m21 = m01 * a + m11 * b + m21;
        dest.m22 = m02 * a + m12 * b + m22;
        dest.m30 = m30;
        dest.m31 = m31;
        dest.m32 = m32;
        dest.properties = PROPERTY_UNKNOWN;
        return dest;
    }
    public Matrix4x3f withLookAtUp(Vector3fc up) {
        return withLookAtUp(up.x(), up.y(), up.z(), this);
    }
    public Matrix4x3f withLookAtUp(Vector3fc up, Matrix4x3f dest) {
        return withLookAtUp(up.x(), up.y(), up.z());
    }
    public Matrix4x3f withLookAtUp(float upX, float upY, float upZ) {
        return withLookAtUp(upX, upY, upZ, this);
    }
    public Matrix4x3f withLookAtUp(float upX, float upY, float upZ, Matrix4x3f dest) {
        float y = (upY * m21 - upZ * m11) * m02 +
                  (upZ * m01 - upX * m21) * m12 +
                  (upX * m11 - upY * m01) * m22;
        float x = upX * m01 + upY * m11 + upZ * m21;
        if ((properties & PROPERTY_ORTHONORMAL) == 0)
            x *= Math.sqrt(m01 * m01 + m11 * m11 + m21 * m21);
        float invsqrt = Math.invsqrt(y * y + x * x);
        float c = x * invsqrt, s = y * invsqrt;
        float nm00 = c * m00 - s * m01, nm10 = c * m10 - s * m11, nm20 = c * m20 - s * m21, nm31 = s * m30 + c * m31;
        float nm01 = s * m00 + c * m01, nm11 = s * m10 + c * m11, nm21 = s * m20 + c * m21, nm30 = c * m30 - s * m31;
        dest
        ._m00(nm00)._m10(nm10)._m20(nm20)._m30(nm30)
        ._m01(nm01)._m11(nm11)._m21(nm21)._m31(nm31);
        if (dest != this) {
            dest
            ._m02(m02)._m12(m12)._m22(m22)._m32(m32);
        }
        dest.properties = properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return dest;
    }
    public Matrix4x3f mapXZY() {
        return mapXZY(this);
    }
    public Matrix4x3f mapXZY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m20)._m11(m21)._m12(m22)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapXZnY() {
        return mapXZnY(this);
    }
    public Matrix4x3f mapXZnY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m20)._m11(m21)._m12(m22)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapXnYnZ() {
        return mapXnYnZ(this);
    }
    public Matrix4x3f mapXnYnZ(Matrix4x3f dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapXnZY() {
        return mapXnZY(this);
    }
    public Matrix4x3f mapXnZY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapXnZnY() {
        return mapXnZnY(this);
    }
    public Matrix4x3f mapXnZnY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYXZ() {
        return mapYXZ(this);
    }
    public Matrix4x3f mapYXZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m00)._m11(m01)._m12(m02)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYXnZ() {
        return mapYXnZ(this);
    }
    public Matrix4x3f mapYXnZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m00)._m11(m01)._m12(m02)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYZX() {
        return mapYZX(this);
    }
    public Matrix4x3f mapYZX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m20)._m11(m21)._m12(m22)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYZnX() {
        return mapYZnX(this);
    }
    public Matrix4x3f mapYZnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m20)._m11(m21)._m12(m22)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYnXZ() {
        return mapYnXZ(this);
    }
    public Matrix4x3f mapYnXZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYnXnZ() {
        return mapYnXnZ(this);
    }
    public Matrix4x3f mapYnXnZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYnZX() {
        return mapYnZX(this);
    }
    public Matrix4x3f mapYnZX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapYnZnX() {
        return mapYnZnX(this);
    }
    public Matrix4x3f mapYnZnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZXY() {
        return mapZXY(this);
    }
    public Matrix4x3f mapZXY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m00)._m11(m01)._m12(m02)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZXnY() {
        return mapZXnY(this);
    }
    public Matrix4x3f mapZXnY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m00)._m11(m01)._m12(m02)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZYX() {
        return mapZYX(this);
    }
    public Matrix4x3f mapZYX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m10)._m11(m11)._m12(m12)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZYnX() {
        return mapZYnX(this);
    }
    public Matrix4x3f mapZYnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m10)._m11(m11)._m12(m12)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZnXY() {
        return mapZnXY(this);
    }
    public Matrix4x3f mapZnXY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZnXnY() {
        return mapZnXnY(this);
    }
    public Matrix4x3f mapZnXnY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZnYX() {
        return mapZnYX(this);
    }
    public Matrix4x3f mapZnYX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapZnYnX() {
        return mapZnYnX(this);
    }
    public Matrix4x3f mapZnYnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXYnZ() {
        return mapnXYnZ(this);
    }
    public Matrix4x3f mapnXYnZ(Matrix4x3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m10)._m11(m11)._m12(m12)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXZY() {
        return mapnXZY(this);
    }
    public Matrix4x3f mapnXZY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m20)._m11(m21)._m12(m22)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXZnY() {
        return mapnXZnY(this);
    }
    public Matrix4x3f mapnXZnY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m20)._m11(m21)._m12(m22)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXnYZ() {
        return mapnXnYZ(this);
    }
    public Matrix4x3f mapnXnYZ(Matrix4x3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXnYnZ() {
        return mapnXnYnZ(this);
    }
    public Matrix4x3f mapnXnYnZ(Matrix4x3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXnZY() {
        return mapnXnZY(this);
    }
    public Matrix4x3f mapnXnZY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnXnZnY() {
        return mapnXnZnY(this);
    }
    public Matrix4x3f mapnXnZnY(Matrix4x3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYXZ() {
        return mapnYXZ(this);
    }
    public Matrix4x3f mapnYXZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m00)._m11(m01)._m12(m02)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYXnZ() {
        return mapnYXnZ(this);
    }
    public Matrix4x3f mapnYXnZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m00)._m11(m01)._m12(m02)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYZX() {
        return mapnYZX(this);
    }
    public Matrix4x3f mapnYZX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m20)._m11(m21)._m12(m22)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYZnX() {
        return mapnYZnX(this);
    }
    public Matrix4x3f mapnYZnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m20)._m11(m21)._m12(m22)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYnXZ() {
        return mapnYnXZ(this);
    }
    public Matrix4x3f mapnYnXZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYnXnZ() {
        return mapnYnXnZ(this);
    }
    public Matrix4x3f mapnYnXnZ(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYnZX() {
        return mapnYnZX(this);
    }
    public Matrix4x3f mapnYnZX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnYnZnX() {
        return mapnYnZnX(this);
    }
    public Matrix4x3f mapnYnZnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZXY() {
        return mapnZXY(this);
    }
    public Matrix4x3f mapnZXY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m00)._m11(m01)._m12(m02)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZXnY() {
        return mapnZXnY(this);
    }
    public Matrix4x3f mapnZXnY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m00)._m11(m01)._m12(m02)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZYX() {
        return mapnZYX(this);
    }
    public Matrix4x3f mapnZYX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m10)._m11(m11)._m12(m12)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZYnX() {
        return mapnZYnX(this);
    }
    public Matrix4x3f mapnZYnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m10)._m11(m11)._m12(m12)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZnXY() {
        return mapnZnXY(this);
    }
    public Matrix4x3f mapnZnXY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m10)._m21(m11)._m22(m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZnXnY() {
        return mapnZnXnY(this);
    }
    public Matrix4x3f mapnZnXnY(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m10)._m21(-m11)._m22(-m12)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZnYX() {
        return mapnZnYX(this);
    }
    public Matrix4x3f mapnZnYX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m00)._m21(m01)._m22(m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f mapnZnYnX() {
        return mapnZnYnX(this);
    }
    public Matrix4x3f mapnZnYnX(Matrix4x3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m00)._m21(-m01)._m22(-m02)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f negateX() {
        return _m00(-m00)._m01(-m01)._m02(-m02)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f negateX(Matrix4x3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m10)._m11(m11)._m12(m12)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f negateY() {
        return _m10(-m10)._m11(-m11)._m12(-m12)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f negateY(Matrix4x3f dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m20)._m21(m21)._m22(m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f negateZ() {
        return _m20(-m20)._m21(-m21)._m22(-m22)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public Matrix4x3f negateZ(Matrix4x3f dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m10)._m11(m11)._m12(m12)._m20(-m20)._m21(-m21)._m22(-m22)._m30(m30)._m31(m31)._m32(m32)._properties(properties & PROPERTY_ORTHONORMAL);
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) && Math.isFinite(m02) &&
               Math.isFinite(m10) && Math.isFinite(m11) && Math.isFinite(m12) &&
               Math.isFinite(m20) && Math.isFinite(m21) && Math.isFinite(m22) &&
               Math.isFinite(m30) && Math.isFinite(m31) && Math.isFinite(m32);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix3f implements Externalizable, Cloneable, Matrix3fc {
    private static final long serialVersionUID = 1L;
    public float m00, m01, m02;
    public float m10, m11, m12;
    public float m20, m21, m22;
    public Matrix3f() {
        m00 = 1.0f;
        m11 = 1.0f;
        m22 = 1.0f;
    }
    public Matrix3f(Matrix2fc mat) {
        set(mat);
    }
    public Matrix3f(Matrix3fc mat) {
        set(mat);
    }
    public Matrix3f(Matrix4fc mat) {
        set(mat);
    }
    public Matrix3f(float m00, float m01, float m02,
                    float m10, float m11, float m12, 
                    float m20, float m21, float m22) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
    }
    public Matrix3f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Matrix3f(Vector3fc col0, Vector3fc col1, Vector3fc col2) {
        set(col0, col1, col2);
    }
    public float m00() {
        return m00;
    }
    public float m01() {
        return m01;
    }
    public float m02() {
        return m02;
    }
    public float m10() {
        return m10;
    }
    public float m11() {
        return m11;
    }
    public float m12() {
        return m12;
    }
    public float m20() {
        return m20;
    }
    public float m21() {
        return m21;
    }
    public float m22() {
        return m22;
    }
    public Matrix3f m00(float m00) {
        this.m00 = m00;
        return this;
    }
    public Matrix3f m01(float m01) {
        this.m01 = m01;
        return this;
    }
    public Matrix3f m02(float m02) {
        this.m02 = m02;
        return this;
    }
    public Matrix3f m10(float m10) {
        this.m10 = m10;
        return this;
    }
    public Matrix3f m11(float m11) {
        this.m11 = m11;
        return this;
    }
    public Matrix3f m12(float m12) {
        this.m12 = m12;
        return this;
    }
    public Matrix3f m20(float m20) {
        this.m20 = m20;
        return this;
    }
    public Matrix3f m21(float m21) {
        this.m21 = m21;
        return this;
    }
    public Matrix3f m22(float m22) {
        this.m22 = m22;
        return this;
    }
    Matrix3f _m00(float m00) {
        this.m00 = m00;
        return this;
    }
    Matrix3f _m01(float m01) {
        this.m01 = m01;
        return this;
    }
    Matrix3f _m02(float m02) {
        this.m02 = m02;
        return this;
    }
    Matrix3f _m10(float m10) {
        this.m10 = m10;
        return this;
    }
    Matrix3f _m11(float m11) {
        this.m11 = m11;
        return this;
    }
    Matrix3f _m12(float m12) {
        this.m12 = m12;
        return this;
    }
    Matrix3f _m20(float m20) {
        this.m20 = m20;
        return this;
    }
    Matrix3f _m21(float m21) {
        this.m21 = m21;
        return this;
    }
    Matrix3f _m22(float m22) {
        this.m22 = m22;
        return this;
    }
    public Matrix3f set(Matrix3fc m) {
        if (m == this)
            return this;
        return 
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22());
    }
    public Matrix3f setTransposed(Matrix3fc m) {
        float nm10 = m.m01(), nm12 = m.m21();
        float nm20 = m.m02(), nm21 = m.m12();
        return this
        ._m00(m.m00())._m01(m.m10())._m02(m.m20())
        ._m10(nm10)._m11(m.m11())._m12(nm12)
        ._m20(nm20)._m21(nm21)._m22(m.m22());
    }
    public Matrix3f set(Matrix4x3fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m02 = m.m02();
        m10 = m.m10();
        m11 = m.m11();
        m12 = m.m12();
        m20 = m.m20();
        m21 = m.m21();
        m22 = m.m22();
        return this;
    }
    public Matrix3f set(Matrix4fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = mat.m02();
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = mat.m12();
        m20 = mat.m20();
        m21 = mat.m21();
        m22 = mat.m22();
        return this;
    }
    public Matrix3f set(Matrix2fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = 0.0f;
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = 0.0f;
        m20 = 0.0f;
        m21 = 0.0f;
        m22 = 1.0f;
        return this;
    }
    public Matrix3f set(AxisAngle4f axisAngle) {
        float x = axisAngle.x;
        float y = axisAngle.y;
        float z = axisAngle.z;
        float angle = axisAngle.angle;
        float invLength = Math.invsqrt(x*x + y*y + z*z);
        x *= invLength;
        y *= invLength;
        z *= invLength;
        float s = Math.sin(angle);
        float c = Math.cosFromSin(s, angle);
        float omc = 1.0f - c;
        m00 = c + x*x*omc;
        m11 = c + y*y*omc;
        m22 = c + z*z*omc;
        float tmp1 = x*y*omc;
        float tmp2 = z*s;
        m10 = tmp1 - tmp2;
        m01 = tmp1 + tmp2;
        tmp1 = x*z*omc;
        tmp2 = y*s;
        m20 = tmp1 + tmp2;
        m02 = tmp1 - tmp2;
        tmp1 = y*z*omc;
        tmp2 = x*s;
        m21 = tmp1 - tmp2;
        m12 = tmp1 + tmp2;
        return this;
    }
    public Matrix3f set(AxisAngle4d axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double invLength = Math.invsqrt(x*x + y*y + z*z);
        x *= invLength;
        y *= invLength;
        z *= invLength;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0f - c;
        m00 = (float)(c + x*x*omc);
        m11 = (float)(c + y*y*omc);
        m22 = (float)(c + z*z*omc);
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        m10 = (float)(tmp1 - tmp2);
        m01 = (float)(tmp1 + tmp2);
        tmp1 = x*z*omc;
        tmp2 = y*s;
        m20 = (float)(tmp1 + tmp2);
        m02 = (float)(tmp1 - tmp2);
        tmp1 = y*z*omc;
        tmp2 = x*s;
        m21 = (float)(tmp1 - tmp2);
        m12 = (float)(tmp1 + tmp2);
        return this;
    }
    public Matrix3f set(Quaternionfc q) {
        return rotation(q);
    }
    public Matrix3f set(Quaterniondc q) {
        double w2 = q.w() * q.w();
        double x2 = q.x() * q.x();
        double y2 = q.y() * q.y();
        double z2 = q.z() * q.z();
        double zw = q.z() * q.w();
        double xy = q.x() * q.y();
        double xz = q.x() * q.z();
        double yw = q.y() * q.w();
        double yz = q.y() * q.z();
        double xw = q.x() * q.w();
        m00 = (float) (w2 + x2 - z2 - y2);
        m01 = (float) (xy + zw + zw + xy);
        m02 = (float) (xz - yw + xz - yw);
        m10 = (float) (-zw + xy - zw + xy);
        m11 = (float) (y2 - z2 + w2 - x2);
        m12 = (float) (yz + yz + xw + xw);
        m20 = (float) (yw + xz + xz + yw);
        m21 = (float) (yz + yz - xw - xw);
        m22 = (float) (z2 - y2 - x2 + w2);
        return this;
    }
    public Matrix3f mul(Matrix3fc right) {
        return mul(right, this);
    }
    public Matrix3f mul(Matrix3fc right, Matrix3f dest) {
        float nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), m20 * right.m02()));
        float nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), m21 * right.m02()));
        float nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), m22 * right.m02()));
        float nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), m20 * right.m12()));
        float nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), m21 * right.m12()));
        float nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), m22 * right.m12()));
        float nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), m20 * right.m22()));
        float nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), m21 * right.m22()));
        float nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), m22 * right.m22()));
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f mulLocal(Matrix3fc left) {
       return mulLocal(left, this);
    }
    public Matrix3f mulLocal(Matrix3fc left, Matrix3f dest) {
        float nm00 = left.m00() * m00 + left.m10() * m01 + left.m20() * m02;
        float nm01 = left.m01() * m00 + left.m11() * m01 + left.m21() * m02;
        float nm02 = left.m02() * m00 + left.m12() * m01 + left.m22() * m02;
        float nm10 = left.m00() * m10 + left.m10() * m11 + left.m20() * m12;
        float nm11 = left.m01() * m10 + left.m11() * m11 + left.m21() * m12;
        float nm12 = left.m02() * m10 + left.m12() * m11 + left.m22() * m12;
        float nm20 = left.m00() * m20 + left.m10() * m21 + left.m20() * m22;
        float nm21 = left.m01() * m20 + left.m11() * m21 + left.m21() * m22;
        float nm22 = left.m02() * m20 + left.m12() * m21 + left.m22() * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f set(float m00, float m01, float m02,
                        float m10, float m11, float m12, 
                        float m20, float m21, float m22) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        return this;
    }
    public Matrix3f set(float m[]) {
        return set(m, 0);
    }
    public Matrix3f set(float m[], int off) {
        MemUtil.INSTANCE.copy(m, off, this);
        return this;
    }
    public Matrix3f set(Vector3fc col0, Vector3fc col1, Vector3fc col2) {
        this.m00 = col0.x();
        this.m01 = col0.y();
        this.m02 = col0.z();
        this.m10 = col1.x();
        this.m11 = col1.y();
        this.m12 = col1.z();
        this.m20 = col2.x();
        this.m21 = col2.y();
        this.m22 = col2.z();
        return this;
    }
    public float determinant() {
        return (m00 * m11 - m01 * m10) * m22
             + (m02 * m10 - m00 * m12) * m21
             + (m01 * m12 - m02 * m11) * m20;
    }
    public Matrix3f invert() {
        return invert(this);
    }
    public Matrix3f invert(Matrix3f dest) {
        float a = Math.fma(m00, m11, -m01 * m10);
        float b = Math.fma(m02, m10, -m00 * m12);
        float c = Math.fma(m01, m12, -m02 * m11);
        float d = Math.fma(a, m22, Math.fma(b, m21, c * m20));
        float s = 1.0f / d;
        float nm00 = Math.fma(m11, m22, -m21 * m12) * s;
        float nm01 = Math.fma(m21, m02, -m01 * m22) * s;
        float nm02 = c * s;
        float nm10 = Math.fma(m20, m12, -m10 * m22) * s;
        float nm11 = Math.fma(m00, m22, -m20 * m02) * s;
        float nm12 = b * s;
        float nm20 = Math.fma(m10, m21, -m20 * m11) * s;
        float nm21 = Math.fma(m20, m01, -m00 * m21) * s;
        float nm22 = a * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f transpose() {
        return transpose(this);
    }
    public Matrix3f transpose(Matrix3f dest) {
        return dest.set(m00, m10, m20,
                        m01, m11, m21,
                        m02, m12, m22);
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + " " + Runtime.format(m20, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + " " + Runtime.format(m21, formatter) + "\n"
             + Runtime.format(m02, formatter) + " " + Runtime.format(m12, formatter) + " " + Runtime.format(m22, formatter) + "\n";
    }
    public Matrix3f get(Matrix3f dest) {
        return dest.set(this);
    }
    public Matrix4f get(Matrix4f dest) {
        return dest.set(this);
    }
    public AxisAngle4f getRotation(AxisAngle4f dest) {
        return dest.set(this);
    }
    public Quaternionf getUnnormalizedRotation(Quaternionf dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaternionf getNormalizedRotation(Quaternionf dest) {
        return dest.setFromNormalized(this);
    }
    public Quaterniond getUnnormalizedRotation(Quaterniond dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaterniond getNormalizedRotation(Quaterniond dest) {
        return dest.setFromNormalized(this);
    }
    public FloatBuffer get(FloatBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get3x4(FloatBuffer buffer) {
        return get3x4(buffer.position(), buffer);
    }
    public FloatBuffer get3x4(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get3x4(ByteBuffer buffer) {
        return get3x4(buffer.position(), buffer);
    }
    public ByteBuffer get3x4(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x4(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public Matrix3fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix3fc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public float[] get(float[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public float[] get(float[] arr) {
        return get(arr, 0);
    }
    public Matrix3f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Matrix3f setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return this;
    }
    public Matrix3f zero() {
        MemUtil.INSTANCE.zero(this);
        return this;
    }
    public Matrix3f identity() {
        MemUtil.INSTANCE.identity(this);
        return this;
    }
    public Matrix3f scale(Vector3fc xyz, Matrix3f dest) {
        return scale(xyz.x(), xyz.y(), xyz.z(), dest);
    }
    public Matrix3f scale(Vector3fc xyz) {
        return scale(xyz.x(), xyz.y(), xyz.z(), this);
    }
    public Matrix3f scale(float x, float y, float z, Matrix3f dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m02 = m02 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        dest.m12 = m12 * y;
        dest.m20 = m20 * z;
        dest.m21 = m21 * z;
        dest.m22 = m22 * z;
        return dest;
    }
    public Matrix3f scale(float x, float y, float z) {
        return scale(x, y, z, this);
    }
    public Matrix3f scale(float xyz, Matrix3f dest) {
        return scale(xyz, xyz, xyz, dest);
    }
    public Matrix3f scale(float xyz) {
        return scale(xyz, xyz, xyz);
    }
    public Matrix3f scaleLocal(float x, float y, float z, Matrix3f dest) {
        float nm00 = x * m00;
        float nm01 = y * m01;
        float nm02 = z * m02;
        float nm10 = x * m10;
        float nm11 = y * m11;
        float nm12 = z * m12;
        float nm20 = x * m20;
        float nm21 = y * m21;
        float nm22 = z * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f scaleLocal(float x, float y, float z) {
        return scaleLocal(x, y, z, this);
    }
    public Matrix3f scaling(float factor) {
        MemUtil.INSTANCE.zero(this);
        m00 = factor;
        m11 = factor;
        m22 = factor;
        return this;
    }
    public Matrix3f scaling(float x, float y, float z) {
        MemUtil.INSTANCE.zero(this);
        m00 = x;
        m11 = y;
        m22 = z;
        return this;
    }
    public Matrix3f scaling(Vector3fc xyz) {
        return scaling(xyz.x(), xyz.y(), xyz.z());
    }
    public Matrix3f rotation(float angle, Vector3fc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix3f rotation(AxisAngle4f axisAngle) {
        return rotation(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix3f rotation(float angle, float x, float y, float z) {
        float sin = Math.sin(angle);
        float cos = Math.cosFromSin(sin, angle);
        float C = 1.0f - cos;
        float xy = x * y, xz = x * z, yz = y * z;
        m00 = cos + x * x * C;
        m10 = xy * C - z * sin;
        m20 = xz * C + y * sin;
        m01 = xy * C + z * sin;
        m11 = cos + y * y * C;
        m21 = yz * C - x * sin;
        m02 = xz * C - y * sin;
        m12 = yz * C + x * sin;
        m22 = cos + z * z * C;
        return this;
    }
    public Matrix3f rotationX(float ang) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = 1.0f;
        m01 = 0.0f;
        m02 = 0.0f;
        m10 = 0.0f;
        m11 = cos;
        m12 = sin;
        m20 = 0.0f;
        m21 = -sin;
        m22 = cos;
        return this;
    }
    public Matrix3f rotationY(float ang) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = cos;
        m01 = 0.0f;
        m02 = -sin;
        m10 = 0.0f;
        m11 = 1.0f;
        m12 = 0.0f;
        m20 = sin;
        m21 = 0.0f;
        m22 = cos;
        return this;
    }
    public Matrix3f rotationZ(float ang) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = cos;
        m01 = sin;
        m02 = 0.0f;
        m10 = -sin;
        m11 = cos;
        m12 = 0.0f;
        m20 = 0.0f;
        m21 = 0.0f;
        m22 = 1.0f;
        return this;
    }
    public Matrix3f rotationXYZ(float angleX, float angleY, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm11 = cosX;
        float nm12 = sinX;
        float nm21 = m_sinX;
        float nm22 = cosX;
        float nm00 = cosY;
        float nm01 = nm21 * m_sinY;
        float nm02 = nm22 * m_sinY;
        m20 = sinY;
        m21 = nm21 * cosY;
        m22 = nm22 * cosY;
        m00 = nm00 * cosZ;
        m01 = nm01 * cosZ + nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ;
        m11 = nm01 * m_sinZ + nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        return this;
    }
    public Matrix3f rotationZYX(float angleZ, float angleY, float angleX) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = cosZ;
        float nm01 = sinZ;
        float nm10 = m_sinZ;
        float nm11 = cosZ;
        float nm20 = nm00 * sinY;
        float nm21 = nm01 * sinY;
        float nm22 = cosY;
        m00 = nm00 * cosY;
        m01 = nm01 * cosY;
        m02 = m_sinY;
        m10 = nm10 * cosX + nm20 * sinX;
        m11 = nm11 * cosX + nm21 * sinX;
        m12 = nm22 * sinX;
        m20 = nm10 * m_sinX + nm20 * cosX;
        m21 = nm11 * m_sinX + nm21 * cosX;
        m22 = nm22 * cosX;
        return this;
    }
    public Matrix3f rotationYXZ(float angleY, float angleX, float angleZ) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm00 = cosY;
        float nm02 = m_sinY;
        float nm20 = sinY;
        float nm22 = cosY;
        float nm10 = nm20 * sinX;
        float nm11 = cosX;
        float nm12 = nm22 * sinX;
        m20 = nm20 * cosX;
        m21 = m_sinX;
        m22 = nm22 * cosX;
        m00 = nm00 * cosZ + nm10 * sinZ;
        m01 = nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ + nm10 * cosZ;
        m11 = nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        return this;
    }
    public Matrix3f rotation(Quaternionfc quat) {
        float w2 = quat.w() * quat.w();
        float x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y();
        float z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw;
        float xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz;
        float yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz;
        float xw = quat.x() * quat.w(), dxw = xw + xw;
        m00 = w2 + x2 - z2 - y2;
        m01 = dxy + dzw;
        m02 = dxz - dyw;
        m10 = -dzw + dxy;
        m11 = y2 - z2 + w2 - x2;
        m12 = dyz + dxw;
        m20 = dyw + dxz;
        m21 = dyz - dxw;
        m22 = z2 - y2 - x2 + w2;
        return this;
    }
    public Vector3f transform(Vector3f v) {
        return v.mul(this);
    }
    public Vector3f transform(Vector3fc v, Vector3f dest) {
        return v.mul(this, dest);
    }
    public Vector3f transform(float x, float y, float z, Vector3f dest) {
        return dest.set(Math.fma(m00, x, Math.fma(m10, y, m20 * z)),
                        Math.fma(m01, x, Math.fma(m11, y, m21 * z)),
                        Math.fma(m02, x, Math.fma(m12, y, m22 * z)));
    }
    public Vector3f transformTranspose(Vector3f v) {
        return v.mulTranspose(this);
    }
    public Vector3f transformTranspose(Vector3fc v, Vector3f dest) {
        return v.mulTranspose(this, dest);
    }
    public Vector3f transformTranspose(float x, float y, float z, Vector3f dest) {
        return dest.set(Math.fma(m00, x, Math.fma(m01, y, m02 * z)),
                        Math.fma(m10, x, Math.fma(m11, y, m12 * z)),
                        Math.fma(m20, x, Math.fma(m21, y, m22 * z)));
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(m00);
        out.writeFloat(m01);
        out.writeFloat(m02);
        out.writeFloat(m10);
        out.writeFloat(m11);
        out.writeFloat(m12);
        out.writeFloat(m20);
        out.writeFloat(m21);
        out.writeFloat(m22);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readFloat();
        m01 = in.readFloat();
        m02 = in.readFloat();
        m10 = in.readFloat();
        m11 = in.readFloat();
        m12 = in.readFloat();
        m20 = in.readFloat();
        m21 = in.readFloat();
        m22 = in.readFloat();
    }
    public Matrix3f rotateX(float ang, Matrix3f dest) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        float rm11 = cos;
        float rm21 = -sin;
        float rm12 = sin;
        float rm22 = cos;
        float nm10 = m10 * rm11 + m20 * rm12;
        float nm11 = m11 * rm11 + m21 * rm12;
        float nm12 = m12 * rm11 + m22 * rm12;
        dest.m20 = m10 * rm21 + m20 * rm22;
        dest.m21 = m11 * rm21 + m21 * rm22;
        dest.m22 = m12 * rm21 + m22 * rm22;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        return dest;
    }
    public Matrix3f rotateX(float ang) {
        return rotateX(ang, this);
    }
    public Matrix3f rotateY(float ang, Matrix3f dest) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        float rm00 = cos;
        float rm20 = sin;
        float rm02 = -sin;
        float rm22 = cos;
        float nm00 = m00 * rm00 + m20 * rm02;
        float nm01 = m01 * rm00 + m21 * rm02;
        float nm02 = m02 * rm00 + m22 * rm02;
        dest.m20 = m00 * rm20 + m20 * rm22;
        dest.m21 = m01 * rm20 + m21 * rm22;
        dest.m22 = m02 * rm20 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        return dest;
    }
    public Matrix3f rotateY(float ang) {
        return rotateY(ang, this);
    }
    public Matrix3f rotateZ(float ang, Matrix3f dest) {
        float sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        float rm00 = cos;
        float rm10 = -sin;
        float rm01 = sin;
        float rm11 = cos;
        float nm00 = m00 * rm00 + m10 * rm01;
        float nm01 = m01 * rm00 + m11 * rm01;
        float nm02 = m02 * rm00 + m12 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m12 = m02 * rm10 + m12 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m20 = m20;
        dest.m21 = m21;
        dest.m22 = m22;
        return dest;
    }
    public Matrix3f rotateZ(float ang) {
        return rotateZ(ang, this);
    }
    public Matrix3f rotateXYZ(Vector3f angles) {
        return rotateXYZ(angles.x, angles.y, angles.z);
    }
    public Matrix3f rotateXYZ(float angleX, float angleY, float angleZ) {
        return rotateXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix3f rotateXYZ(float angleX, float angleY, float angleZ, Matrix3f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinX = -sinX;
        float m_sinY = -sinY;
        float m_sinZ = -sinZ;
        float nm10 = m10 * cosX + m20 * sinX;
        float nm11 = m11 * cosX + m21 * sinX;
        float nm12 = m12 * cosX + m22 * sinX;
        float nm20 = m10 * m_sinX + m20 * cosX;
        float nm21 = m11 * m_sinX + m21 * cosX;
        float nm22 = m12 * m_sinX + m22 * cosX;
        float nm00 = m00 * cosY + nm20 * m_sinY;
        float nm01 = m01 * cosY + nm21 * m_sinY;
        float nm02 = m02 * cosY + nm22 * m_sinY;
        dest.m20 = m00 * sinY + nm20 * cosY;
        dest.m21 = m01 * sinY + nm21 * cosY;
        dest.m22 = m02 * sinY + nm22 * cosY;
        dest.m00 = nm00 * cosZ + nm10 * sinZ;
        dest.m01 = nm01 * cosZ + nm11 * sinZ;
        dest.m02 = nm02 * cosZ + nm12 * sinZ;
        dest.m10 = nm00 * m_sinZ + nm10 * cosZ;
        dest.m11 = nm01 * m_sinZ + nm11 * cosZ;
        dest.m12 = nm02 * m_sinZ + nm12 * cosZ;
        return dest;
    }
    public Matrix3f rotateZYX(Vector3f angles) {
        return rotateZYX(angles.z, angles.y, angles.x);
    }
    public Matrix3f rotateZYX(float angleZ, float angleY, float angleX) {
        return rotateZYX(angleZ, angleY, angleX, this);
    }
    public Matrix3f rotateZYX(float angleZ, float angleY, float angleX, Matrix3f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinZ = -sinZ;
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float nm00 = m00 * cosZ + m10 * sinZ;
        float nm01 = m01 * cosZ + m11 * sinZ;
        float nm02 = m02 * cosZ + m12 * sinZ;
        float nm10 = m00 * m_sinZ + m10 * cosZ;
        float nm11 = m01 * m_sinZ + m11 * cosZ;
        float nm12 = m02 * m_sinZ + m12 * cosZ;
        float nm20 = nm00 * sinY + m20 * cosY;
        float nm21 = nm01 * sinY + m21 * cosY;
        float nm22 = nm02 * sinY + m22 * cosY;
        dest.m00 = nm00 * cosY + m20 * m_sinY;
        dest.m01 = nm01 * cosY + m21 * m_sinY;
        dest.m02 = nm02 * cosY + m22 * m_sinY;
        dest.m10 = nm10 * cosX + nm20 * sinX;
        dest.m11 = nm11 * cosX + nm21 * sinX;
        dest.m12 = nm12 * cosX + nm22 * sinX;
        dest.m20 = nm10 * m_sinX + nm20 * cosX;
        dest.m21 = nm11 * m_sinX + nm21 * cosX;
        dest.m22 = nm12 * m_sinX + nm22 * cosX;
        return dest;
    }
    public Matrix3f rotateYXZ(Vector3f angles) {
        return rotateYXZ(angles.y, angles.x, angles.z);
    }
    public Matrix3f rotateYXZ(float angleY, float angleX, float angleZ) {
        return rotateYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix3f rotateYXZ(float angleY, float angleX, float angleZ, Matrix3f dest) {
        float sinX = Math.sin(angleX);
        float cosX = Math.cosFromSin(sinX, angleX);
        float sinY = Math.sin(angleY);
        float cosY = Math.cosFromSin(sinY, angleY);
        float sinZ = Math.sin(angleZ);
        float cosZ = Math.cosFromSin(sinZ, angleZ);
        float m_sinY = -sinY;
        float m_sinX = -sinX;
        float m_sinZ = -sinZ;
        float nm20 = m00 * sinY + m20 * cosY;
        float nm21 = m01 * sinY + m21 * cosY;
        float nm22 = m02 * sinY + m22 * cosY;
        float nm00 = m00 * cosY + m20 * m_sinY;
        float nm01 = m01 * cosY + m21 * m_sinY;
        float nm02 = m02 * cosY + m22 * m_sinY;
        float nm10 = m10 * cosX + nm20 * sinX;
        float nm11 = m11 * cosX + nm21 * sinX;
        float nm12 = m12 * cosX + nm22 * sinX;
        dest.m20 = m10 * m_sinX + nm20 * cosX;
        dest.m21 = m11 * m_sinX + nm21 * cosX;
        dest.m22 = m12 * m_sinX + nm22 * cosX;
        dest.m00 = nm00 * cosZ + nm10 * sinZ;
        dest.m01 = nm01 * cosZ + nm11 * sinZ;
        dest.m02 = nm02 * cosZ + nm12 * sinZ;
        dest.m10 = nm00 * m_sinZ + nm10 * cosZ;
        dest.m11 = nm01 * m_sinZ + nm11 * cosZ;
        dest.m12 = nm02 * m_sinZ + nm12 * cosZ;
        return dest;
    }
    public Matrix3f rotate(float ang, float x, float y, float z) {
        return rotate(ang, x, y, z, this);
    }
    public Matrix3f rotate(float ang, float x, float y, float z, Matrix3f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float rm00 = xx * C + c;
        float rm01 = xy * C + z * s;
        float rm02 = xz * C - y * s;
        float rm10 = xy * C - z * s;
        float rm11 = yy * C + c;
        float rm12 = yz * C + x * s;
        float rm20 = xz * C + y * s;
        float rm21 = yz * C - x * s;
        float rm22 = zz * C + c;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3f rotateLocal(float ang, float x, float y, float z, Matrix3f dest) {
        float s = Math.sin(ang);
        float c = Math.cosFromSin(s, ang);
        float C = 1.0f - c;
        float xx = x * x, xy = x * y, xz = x * z;
        float yy = y * y, yz = y * z;
        float zz = z * z;
        float lm00 = xx * C + c;
        float lm01 = xy * C + z * s;
        float lm02 = xz * C - y * s;
        float lm10 = xy * C - z * s;
        float lm11 = yy * C + c;
        float lm12 = yz * C + x * s;
        float lm20 = xz * C + y * s;
        float lm21 = yz * C - x * s;
        float lm22 = zz * C + c;
        float nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        float nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        float nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        float nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        float nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        float nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        float nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        float nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        float nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f rotateLocal(float ang, float x, float y, float z) {
        return rotateLocal(ang, x, y, z, this);
    }
    public Matrix3f rotateLocalX(float ang, Matrix3f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm01 = cos * m01 - sin * m02;
        float nm02 = sin * m01 + cos * m02;
        float nm11 = cos * m11 - sin * m12;
        float nm12 = sin * m11 + cos * m12;
        float nm21 = cos * m21 - sin * m22;
        float nm22 = sin * m21 + cos * m22;
        dest.m00 = m00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = m10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = m20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f rotateLocalX(float ang) {
        return rotateLocalX(ang, this);
    }
    public Matrix3f rotateLocalY(float ang, Matrix3f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm00 =  cos * m00 + sin * m02;
        float nm02 = -sin * m00 + cos * m02;
        float nm10 =  cos * m10 + sin * m12;
        float nm12 = -sin * m10 + cos * m12;
        float nm20 =  cos * m20 + sin * m22;
        float nm22 = -sin * m20 + cos * m22;
        dest.m00 = nm00;
        dest.m01 = m01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = m11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = m21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f rotateLocalY(float ang) {
        return rotateLocalY(ang, this);
    }
    public Matrix3f rotateLocalZ(float ang, Matrix3f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm00 = cos * m00 - sin * m01;
        float nm01 = sin * m00 + cos * m01;
        float nm10 = cos * m10 - sin * m11;
        float nm11 = sin * m10 + cos * m11;
        float nm20 = cos * m20 - sin * m21;
        float nm21 = sin * m20 + cos * m21;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = m02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = m12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = m22;
        return dest;
    }
    public Matrix3f rotateLocalZ(float ang) {
        return rotateLocalZ(ang, this);
    }
    public Matrix3f rotate(Quaternionfc quat) {
        return rotate(quat, this);
    }
    public Matrix3f rotate(Quaternionfc quat, Matrix3f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float rm00 = w2 + x2 - z2 - y2;
        float rm01 = dxy + dzw;
        float rm02 = dxz - dyw;
        float rm10 = dxy - dzw;
        float rm11 = y2 - z2 + w2 - x2;
        float rm12 = dyz + dxw;
        float rm20 = dyw + dxz;
        float rm21 = dyz - dxw;
        float rm22 = z2 - y2 - x2 + w2;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3f rotateLocal(Quaternionfc quat, Matrix3f dest) {
        float w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        float y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        float zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        float xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        float yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        float lm00 = w2 + x2 - z2 - y2;
        float lm01 = dxy + dzw;
        float lm02 = dxz - dyw;
        float lm10 = dxy - dzw;
        float lm11 = y2 - z2 + w2 - x2;
        float lm12 = dyz + dxw;
        float lm20 = dyw + dxz;
        float lm21 = dyz - dxw;
        float lm22 = z2 - y2 - x2 + w2;
        float nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        float nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        float nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        float nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        float nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        float nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        float nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        float nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        float nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f rotateLocal(Quaternionfc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix3f rotate(AxisAngle4f axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix3f rotate(AxisAngle4f axisAngle, Matrix3f dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix3f rotate(float angle, Vector3fc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix3f rotate(float angle, Vector3fc axis, Matrix3f dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Matrix3f lookAlong(Vector3fc dir, Vector3fc up) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix3f lookAlong(Vector3fc dir, Vector3fc up, Matrix3f dest) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix3f lookAlong(float dirX, float dirY, float dirZ,
                              float upX, float upY, float upZ, Matrix3f dest) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        float rm00 = leftX;
        float rm01 = upnX;
        float rm02 = dirX;
        float rm10 = leftY;
        float rm11 = upnY;
        float rm12 = dirY;
        float rm20 = leftZ;
        float rm21 = upnZ;
        float rm22 = dirZ;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3f lookAlong(float dirX, float dirY, float dirZ,
                              float upX, float upY, float upZ) {
        return lookAlong(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix3f setLookAlong(Vector3fc dir, Vector3fc up) {
        return setLookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix3f setLookAlong(float dirX, float dirY, float dirZ,
                                 float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = dirY * leftZ - dirZ * leftY;
        float upnY = dirZ * leftX - dirX * leftZ;
        float upnZ = dirX * leftY - dirY * leftX;
        m00 = leftX;
        m01 = upnX;
        m02 = dirX;
        m10 = leftY;
        m11 = upnY;
        m12 = dirY;
        m20 = leftZ;
        m21 = upnZ;
        m22 = dirZ;
        return this;
    }
    public Vector3f getRow(int row, Vector3f dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            return dest.set(m00, m10, m20);
        case 1:
            return dest.set(m01, m11, m21);
        case 2:
            return dest.set(m02, m12, m22);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Matrix3f setRow(int row, Vector3fc src) throws IndexOutOfBoundsException {
        return setRow(row, src.x(), src.y(), src.z());
    }
    public Matrix3f setRow(int row, float x, float y, float z) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            this.m00 = x;
            this.m10 = y;
            this.m20 = z;
            break;
        case 1:
            this.m01 = x;
            this.m11 = y;
            this.m21 = z;
            break;
        case 2:
            this.m02 = x;
            this.m12 = y;
            this.m22 = z;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public Vector3f getColumn(int column, Vector3f dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            return dest.set(m00, m01, m02);
        case 1:
            return dest.set(m10, m11, m12);
        case 2:
            return dest.set(m20, m21, m22);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Matrix3f setColumn(int column, Vector3fc src) throws IndexOutOfBoundsException {
        return setColumn(column, src.x(), src.y(), src.z());
    }
    public Matrix3f setColumn(int column, float x, float y, float z) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            this.m00 = x;
            this.m01 = y;
            this.m02 = z;
            break;
        case 1:
            this.m10 = x;
            this.m11 = y;
            this.m12 = z;
            break;
        case 2:
            this.m20 = x;
            this.m21 = y;
            this.m22 = z;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public float get(int column, int row) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix3f set(int column, int row, float value) {
        return MemUtil.INSTANCE.set(this, column, row, value);
    }
    public float getRowColumn(int row, int column) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix3f setRowColumn(int row, int column, float value) {
        return MemUtil.INSTANCE.set(this, column, row, value);
    }
    public Matrix3f normal() {
        return normal(this);
    }
    public Matrix3f normal(Matrix3f dest) {
        float m00m11 = m00 * m11;
        float m01m10 = m01 * m10;
        float m02m10 = m02 * m10;
        float m00m12 = m00 * m12;
        float m01m12 = m01 * m12;
        float m02m11 = m02 * m11;
        float det = (m00m11 - m01m10) * m22 + (m02m10 - m00m12) * m21 + (m01m12 - m02m11) * m20;
        float s = 1.0f / det;
        float nm00 = (m11 * m22 - m21 * m12) * s;
        float nm01 = (m20 * m12 - m10 * m22) * s;
        float nm02 = (m10 * m21 - m20 * m11) * s;
        float nm10 = (m21 * m02 - m01 * m22) * s;
        float nm11 = (m00 * m22 - m20 * m02) * s;
        float nm12 = (m20 * m01 - m00 * m21) * s;
        float nm20 = (m01m12 - m02m11) * s;
        float nm21 = (m02m10 - m00m12) * s;
        float nm22 = (m00m11 - m01m10) * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3f cofactor() {
        return cofactor(this);
    }
    public Matrix3f cofactor(Matrix3f dest) {
        float nm00 = m11 * m22 - m21 * m12;
        float nm01 = m20 * m12 - m10 * m22;
        float nm02 = m10 * m21 - m20 * m11;
        float nm10 = m21 * m02 - m01 * m22;
        float nm11 = m00 * m22 - m20 * m02;
        float nm12 = m20 * m01 - m00 * m21;
        float nm20 = m01 * m12 - m11 * m02;
        float nm21 = m02 * m10 - m12 * m00;
        float nm22 = m00 * m11 - m10 * m01;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Vector3f getScale(Vector3f dest) {
        return dest.set(Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02),
                        Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12),
                        Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22));
    }
    public Vector3f positiveZ(Vector3f dir) {
        dir.x = m10 * m21 - m11 * m20;
        dir.y = m20 * m01 - m21 * m00;
        dir.z = m00 * m11 - m01 * m10;
        return dir.normalize(dir);
    }
    public Vector3f normalizedPositiveZ(Vector3f dir) {
        dir.x = m02;
        dir.y = m12;
        dir.z = m22;
        return dir;
    }
    public Vector3f positiveX(Vector3f dir) {
        dir.x = m11 * m22 - m12 * m21;
        dir.y = m02 * m21 - m01 * m22;
        dir.z = m01 * m12 - m02 * m11;
        return dir.normalize(dir);
    }
    public Vector3f normalizedPositiveX(Vector3f dir) {
        dir.x = m00;
        dir.y = m10;
        dir.z = m20;
        return dir;
    }
    public Vector3f positiveY(Vector3f dir) {
        dir.x = m12 * m20 - m10 * m22;
        dir.y = m00 * m22 - m02 * m20;
        dir.z = m02 * m10 - m00 * m12;
        return dir.normalize(dir);
    }
    public Vector3f normalizedPositiveY(Vector3f dir) {
        dir.x = m01;
        dir.y = m11;
        dir.z = m21;
        return dir;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(m00);
        result = prime * result + Float.floatToIntBits(m01);
        result = prime * result + Float.floatToIntBits(m02);
        result = prime * result + Float.floatToIntBits(m10);
        result = prime * result + Float.floatToIntBits(m11);
        result = prime * result + Float.floatToIntBits(m12);
        result = prime * result + Float.floatToIntBits(m20);
        result = prime * result + Float.floatToIntBits(m21);
        result = prime * result + Float.floatToIntBits(m22);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix3f))
            return false;
        Matrix3f other = (Matrix3f) obj;
        if (Float.floatToIntBits(m00) != Float.floatToIntBits(other.m00))
            return false;
        if (Float.floatToIntBits(m01) != Float.floatToIntBits(other.m01))
            return false;
        if (Float.floatToIntBits(m02) != Float.floatToIntBits(other.m02))
            return false;
        if (Float.floatToIntBits(m10) != Float.floatToIntBits(other.m10))
            return false;
        if (Float.floatToIntBits(m11) != Float.floatToIntBits(other.m11))
            return false;
        if (Float.floatToIntBits(m12) != Float.floatToIntBits(other.m12))
            return false;
        if (Float.floatToIntBits(m20) != Float.floatToIntBits(other.m20))
            return false;
        if (Float.floatToIntBits(m21) != Float.floatToIntBits(other.m21))
            return false;
        if (Float.floatToIntBits(m22) != Float.floatToIntBits(other.m22))
            return false;
        return true;
    }
    public boolean equals(Matrix3fc m, float delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m02, m.m02(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        if (!Runtime.equals(m12, m.m12(), delta))
            return false;
        if (!Runtime.equals(m20, m.m20(), delta))
            return false;
        if (!Runtime.equals(m21, m.m21(), delta))
            return false;
        if (!Runtime.equals(m22, m.m22(), delta))
            return false;
        return true;
    }
    public Matrix3f swap(Matrix3f other) {
        MemUtil.INSTANCE.swap(this, other);
        return this;
    }
    public Matrix3f add(Matrix3fc other) {
        return add(other, this);
    }
    public Matrix3f add(Matrix3fc other, Matrix3f dest) {
        dest.m00 = m00 + other.m00();
        dest.m01 = m01 + other.m01();
        dest.m02 = m02 + other.m02();
        dest.m10 = m10 + other.m10();
        dest.m11 = m11 + other.m11();
        dest.m12 = m12 + other.m12();
        dest.m20 = m20 + other.m20();
        dest.m21 = m21 + other.m21();
        dest.m22 = m22 + other.m22();
        return dest;
    }
    public Matrix3f sub(Matrix3fc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix3f sub(Matrix3fc subtrahend, Matrix3f dest) {
        dest.m00 = m00 - subtrahend.m00();
        dest.m01 = m01 - subtrahend.m01();
        dest.m02 = m02 - subtrahend.m02();
        dest.m10 = m10 - subtrahend.m10();
        dest.m11 = m11 - subtrahend.m11();
        dest.m12 = m12 - subtrahend.m12();
        dest.m20 = m20 - subtrahend.m20();
        dest.m21 = m21 - subtrahend.m21();
        dest.m22 = m22 - subtrahend.m22();
        return dest;
    }
    public Matrix3f mulComponentWise(Matrix3fc other) {
        return mulComponentWise(other, this);
    }
    public Matrix3f mulComponentWise(Matrix3fc other, Matrix3f dest) {
        dest.m00 = m00 * other.m00();
        dest.m01 = m01 * other.m01();
        dest.m02 = m02 * other.m02();
        dest.m10 = m10 * other.m10();
        dest.m11 = m11 * other.m11();
        dest.m12 = m12 * other.m12();
        dest.m20 = m20 * other.m20();
        dest.m21 = m21 * other.m21();
        dest.m22 = m22 * other.m22();
        return dest;
    }
    public Matrix3f setSkewSymmetric(float a, float b, float c) {
        m00 = m11 = m22 = 0;
        m01 = -a;
        m02 = b;
        m10 = a;
        m12 = -c;
        m20 = -b;
        m21 = c;
        return this;
    }
    public Matrix3f lerp(Matrix3fc other, float t) {
        return lerp(other, t, this);
    }
    public Matrix3f lerp(Matrix3fc other, float t, Matrix3f dest) {
        dest.m00 = Math.fma(other.m00() - m00, t, m00);
        dest.m01 = Math.fma(other.m01() - m01, t, m01);
        dest.m02 = Math.fma(other.m02() - m02, t, m02);
        dest.m10 = Math.fma(other.m10() - m10, t, m10);
        dest.m11 = Math.fma(other.m11() - m11, t, m11);
        dest.m12 = Math.fma(other.m12() - m12, t, m12);
        dest.m20 = Math.fma(other.m20() - m20, t, m20);
        dest.m21 = Math.fma(other.m21() - m21, t, m21);
        dest.m22 = Math.fma(other.m22() - m22, t, m22);
        return dest;
    }
    public Matrix3f rotateTowards(Vector3fc direction, Vector3fc up, Matrix3f dest) {
        return rotateTowards(direction.x(), direction.y(), direction.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix3f rotateTowards(Vector3fc direction, Vector3fc up) {
        return rotateTowards(direction.x(), direction.y(), direction.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix3f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        return rotateTowards(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix3f rotateTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ, Matrix3f dest) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        float rm00 = leftX;
        float rm01 = leftY;
        float rm02 = leftZ;
        float rm10 = upnX;
        float rm11 = upnY;
        float rm12 = upnZ;
        float rm20 = ndirX;
        float rm21 = ndirY;
        float rm22 = ndirZ;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3f rotationTowards(Vector3fc dir, Vector3fc up) {
        return rotationTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix3f rotationTowards(float dirX, float dirY, float dirZ, float upX, float upY, float upZ) {
        float invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        float ndirX = dirX * invDirLength;
        float ndirY = dirY * invDirLength;
        float ndirZ = dirZ * invDirLength;
        float leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        float invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        float upnX = ndirY * leftZ - ndirZ * leftY;
        float upnY = ndirZ * leftX - ndirX * leftZ;
        float upnZ = ndirX * leftY - ndirY * leftX;
        this.m00 = leftX;
        this.m01 = leftY;
        this.m02 = leftZ;
        this.m10 = upnX;
        this.m11 = upnY;
        this.m12 = upnZ;
        this.m20 = ndirX;
        this.m21 = ndirY;
        this.m22 = ndirZ;
        return this;
    }
    public Vector3f getEulerAnglesZYX(Vector3f dest) {
        dest.x = Math.atan2(m12, m22);
        dest.y = Math.atan2(-m02, Math.sqrt(1.0f - m02 * m02));
        dest.z = Math.atan2(m01, m00);
        return dest;
    }
    public Vector3f getEulerAnglesXYZ(Vector3f dest) {
        dest.x = Math.atan2(-m21, m22);
        dest.y = Math.atan2(m20, Math.sqrt(1.0f - m20 * m20));
        dest.z = Math.atan2(-m10, m00);
        return dest;
    }
    public Vector3f getEulerAnglesYXZ(Vector3f dest) {
        dest.x = Math.atan2(-m21, Math.sqrt(1.0f - m21 * m21));
        dest.y = Math.atan2(m20, m22);
        dest.z = Math.atan2(m01, m11);
        return dest;
    }
    public Matrix3f obliqueZ(float a, float b) {
        this.m20 = m00 * a + m10 * b + m20;
        this.m21 = m01 * a + m11 * b + m21;
        this.m22 = m02 * a + m12 * b + m22;
        return this;
    }
    public Matrix3f obliqueZ(float a, float b, Matrix3f dest) {
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        dest.m20 = m00 * a + m10 * b + m20;
        dest.m21 = m01 * a + m11 * b + m21;
        dest.m22 = m02 * a + m12 * b + m22;
        return dest;
    }
    public Matrix3f reflect(float nx, float ny, float nz, Matrix3f dest) {
        float da = nx + nx, db = ny + ny, dc = nz + nz;
        float rm00 = 1.0f - da * nx;
        float rm01 = -da * ny;
        float rm02 = -da * nz;
        float rm10 = -db * nx;
        float rm11 = 1.0f - db * ny;
        float rm12 = -db * nz;
        float rm20 = -dc * nx;
        float rm21 = -dc * ny;
        float rm22 = 1.0f - dc * nz;
        float nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        float nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        float nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        float nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        float nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        float nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        return dest
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12);
    }
    public Matrix3f reflect(float nx, float ny, float nz) {
        return reflect(nx, ny, nz, this);
    }
    public Matrix3f reflect(Vector3fc normal) {
        return reflect(normal.x(), normal.y(), normal.z());
    }
    public Matrix3f reflect(Quaternionfc orientation) {
        return reflect(orientation, this);
    }
    public Matrix3f reflect(Quaternionfc orientation, Matrix3f dest) {
        float num1 = orientation.x() + orientation.x();
        float num2 = orientation.y() + orientation.y();
        float num3 = orientation.z() + orientation.z();
        float normalX = orientation.x() * num3 + orientation.w() * num2;
        float normalY = orientation.y() * num3 - orientation.w() * num1;
        float normalZ = 1.0f - (orientation.x() * num1 + orientation.y() * num2);
        return reflect(normalX, normalY, normalZ, dest);
    }
    public Matrix3f reflect(Vector3fc normal, Matrix3f dest) {
        return reflect(normal.x(), normal.y(), normal.z(), dest);
    }
    public Matrix3f reflection(float nx, float ny, float nz) {
        float da = nx + nx, db = ny + ny, dc = nz + nz;
        this._m00(1.0f - da * nx);
        this._m01(-da * ny);
        this._m02(-da * nz);
        this._m10(-db * nx);
        this._m11(1.0f - db * ny);
        this._m12(-db * nz);
        this._m20(-dc * nx);
        this._m21(-dc * ny);
        this._m22(1.0f - dc * nz);
        return this;
    }
    public Matrix3f reflection(Vector3fc normal) {
        return reflection(normal.x(), normal.y(), normal.z());
    }
    public Matrix3f reflection(Quaternionfc orientation) {
        float num1 = orientation.x() + orientation.x();
        float num2 = orientation.y() + orientation.y();
        float num3 = orientation.z() + orientation.z();
        float normalX = orientation.x() * num3 + orientation.w() * num2;
        float normalY = orientation.y() * num3 - orientation.w() * num1;
        float normalZ = 1.0f - (orientation.x() * num1 + orientation.y() * num2);
        return reflection(normalX, normalY, normalZ);
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) && Math.isFinite(m02) &&
               Math.isFinite(m10) && Math.isFinite(m11) && Math.isFinite(m12) &&
               Math.isFinite(m20) && Math.isFinite(m21) && Math.isFinite(m22);
    }
    public float quadraticFormProduct(float x, float y, float z) {
        float Axx = m00 * x + m10 * y + m20 * z;
        float Axy = m01 * x + m11 * y + m21 * z;
        float Axz = m02 * x + m12 * y + m22 * z;
        return x * Axx + y * Axy + z * Axz; 
    }
    public float quadraticFormProduct(Vector3fc v) {
        return quadraticFormProduct(v.x(), v.y(), v.z()); 
    }
    public Matrix3f mapXZY() {
        return mapXZY(this);
    }
    public Matrix3f mapXZY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m20)._m11(m21)._m12(m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapXZnY() {
        return mapXZnY(this);
    }
    public Matrix3f mapXZnY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m20)._m11(m21)._m12(m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapXnYnZ() {
        return mapXnYnZ(this);
    }
    public Matrix3f mapXnYnZ(Matrix3f dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapXnZY() {
        return mapXnZY(this);
    }
    public Matrix3f mapXnZY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapXnZnY() {
        return mapXnZnY(this);
    }
    public Matrix3f mapXnZnY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapYXZ() {
        return mapYXZ(this);
    }
    public Matrix3f mapYXZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m00)._m11(m01)._m12(m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f mapYXnZ() {
        return mapYXnZ(this);
    }
    public Matrix3f mapYXnZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m00)._m11(m01)._m12(m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapYZX() {
        return mapYZX(this);
    }
    public Matrix3f mapYZX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m20)._m11(m21)._m12(m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapYZnX() {
        return mapYZnX(this);
    }
    public Matrix3f mapYZnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m20)._m11(m21)._m12(m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapYnXZ() {
        return mapYnXZ(this);
    }
    public Matrix3f mapYnXZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f mapYnXnZ() {
        return mapYnXnZ(this);
    }
    public Matrix3f mapYnXnZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapYnZX() {
        return mapYnZX(this);
    }
    public Matrix3f mapYnZX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapYnZnX() {
        return mapYnZnX(this);
    }
    public Matrix3f mapYnZnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapZXY() {
        return mapZXY(this);
    }
    public Matrix3f mapZXY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m00)._m11(m01)._m12(m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapZXnY() {
        return mapZXnY(this);
    }
    public Matrix3f mapZXnY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m00)._m11(m01)._m12(m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapZYX() {
        return mapZYX(this);
    }
    public Matrix3f mapZYX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m10)._m11(m11)._m12(m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapZYnX() {
        return mapZYnX(this);
    }
    public Matrix3f mapZYnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m10)._m11(m11)._m12(m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapZnXY() {
        return mapZnXY(this);
    }
    public Matrix3f mapZnXY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapZnXnY() {
        return mapZnXnY(this);
    }
    public Matrix3f mapZnXnY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapZnYX() {
        return mapZnYX(this);
    }
    public Matrix3f mapZnYX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapZnYnX() {
        return mapZnYnX(this);
    }
    public Matrix3f mapZnYnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapnXYnZ() {
        return mapnXYnZ(this);
    }
    public Matrix3f mapnXYnZ(Matrix3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m10)._m11(m11)._m12(m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapnXZY() {
        return mapnXZY(this);
    }
    public Matrix3f mapnXZY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m20)._m11(m21)._m12(m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapnXZnY() {
        return mapnXZnY(this);
    }
    public Matrix3f mapnXZnY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m20)._m11(m21)._m12(m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapnXnYZ() {
        return mapnXnYZ(this);
    }
    public Matrix3f mapnXnYZ(Matrix3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f mapnXnYnZ() {
        return mapnXnYnZ(this);
    }
    public Matrix3f mapnXnYnZ(Matrix3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapnXnZY() {
        return mapnXnZY(this);
    }
    public Matrix3f mapnXnZY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapnXnZnY() {
        return mapnXnZnY(this);
    }
    public Matrix3f mapnXnZnY(Matrix3f dest) {
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapnYXZ() {
        return mapnYXZ(this);
    }
    public Matrix3f mapnYXZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m00)._m11(m01)._m12(m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f mapnYXnZ() {
        return mapnYXnZ(this);
    }
    public Matrix3f mapnYXnZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m00)._m11(m01)._m12(m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapnYZX() {
        return mapnYZX(this);
    }
    public Matrix3f mapnYZX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m20)._m11(m21)._m12(m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapnYZnX() {
        return mapnYZnX(this);
    }
    public Matrix3f mapnYZnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m20)._m11(m21)._m12(m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapnYnXZ() {
        return mapnYnXZ(this);
    }
    public Matrix3f mapnYnXZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f mapnYnXnZ() {
        return mapnYnXnZ(this);
    }
    public Matrix3f mapnYnXnZ(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f mapnYnZX() {
        return mapnYnZX(this);
    }
    public Matrix3f mapnYnZX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapnYnZnX() {
        return mapnYnZnX(this);
    }
    public Matrix3f mapnYnZnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapnZXY() {
        return mapnZXY(this);
    }
    public Matrix3f mapnZXY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m00)._m11(m01)._m12(m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapnZXnY() {
        return mapnZXnY(this);
    }
    public Matrix3f mapnZXnY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m00)._m11(m01)._m12(m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapnZYX() {
        return mapnZYX(this);
    }
    public Matrix3f mapnZYX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m10)._m11(m11)._m12(m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapnZYnX() {
        return mapnZYnX(this);
    }
    public Matrix3f mapnZYnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m10)._m11(m11)._m12(m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f mapnZnXY() {
        return mapnZnXY(this);
    }
    public Matrix3f mapnZnXY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3f mapnZnXnY() {
        return mapnZnXnY(this);
    }
    public Matrix3f mapnZnXnY(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        float m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3f mapnZnYX() {
        return mapnZnYX(this);
    }
    public Matrix3f mapnZnYX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3f mapnZnYnX() {
        return mapnZnYnX(this);
    }
    public Matrix3f mapnZnYnX(Matrix3f dest) {
        float m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3f negateX() {
        return _m00(-m00)._m01(-m01)._m02(-m02);
    }
    public Matrix3f negateX(Matrix3f dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m10)._m11(m11)._m12(m12)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f negateY() {
        return _m10(-m10)._m11(-m11)._m12(-m12);
    }
    public Matrix3f negateY(Matrix3f dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3f negateZ() {
        return _m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3f negateZ(Matrix3f dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m10)._m11(m11)._m12(m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import org.intellij.lang.annotations.MagicConstant;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix4d implements Externalizable, Cloneable, Matrix4dc {
    private static final long serialVersionUID = 1L;
    int properties;
    double m00, m01, m02, m03;
    double m10, m11, m12, m13;
    double m20, m21, m22, m23;
    double m30, m31, m32, m33;
    public Matrix4d() {
        _m00(1.0).
        _m11(1.0).
        _m22(1.0).
        _m33(1.0).
        properties = PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
    }
    public Matrix4d(Matrix4dc mat) {
        set(mat);
    }
    public Matrix4d(Matrix4fc mat) {
        set(mat);
    }
    public Matrix4d(Matrix4x3dc mat) {
        set(mat);
    }
    public Matrix4d(Matrix4x3fc mat) {
        set(mat);
    }
    public Matrix4d(Matrix3dc mat) {
        set(mat);
    }
    public Matrix4d(double m00, double m01, double m02, double m03,
                    double m10, double m11, double m12, double m13, 
                    double m20, double m21, double m22, double m23, 
                    double m30, double m31, double m32, double m33) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
        determineProperties();
    }
    public Matrix4d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        determineProperties();
    }
    public Matrix4d(Vector4d col0, Vector4d col1, Vector4d col2, Vector4d col3) {
        set(col0, col1, col2, col3);
    }
    public Matrix4d assume(@MagicConstant(intValues = {PROPERTY_UNKNOWN, PROPERTY_IDENTITY, PROPERTY_TRANSLATION, PROPERTY_AFFINE, PROPERTY_ORTHONORMAL, PROPERTY_PERSPECTIVE}) int properties) {
        this.properties = (byte) properties;
        return this;
    }
    public Matrix4d determineProperties() {
        int properties = PROPERTY_UNKNOWN;
        if (m03 == 0.0 && m13 == 0.0) {
            if (m23 == 0.0 && m33 == 1.0) {
                properties |= PROPERTY_AFFINE;
                if (m00 == 1.0 && m01 == 0.0 && m02 == 0.0 && m10 == 0.0 && m11 == 1.0 && m12 == 0.0 && m20 == 0.0
                        && m21 == 0.0 && m22 == 1.0) {
                    properties |= PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
                    if (m30 == 0.0 && m31 == 0.0 && m32 == 0.0)
                        properties |= PROPERTY_IDENTITY;
                }
            } else if (m01 == 0.0 && m02 == 0.0 && m10 == 0.0 && m12 == 0.0 && m20 == 0.0 && m21 == 0.0 && m30 == 0.0
                    && m31 == 0.0 && m33 == 0.0) {
                properties |= PROPERTY_PERSPECTIVE;
            }
        }
        this.properties = properties;
        return this;
    }
    @MagicConstant(intValues = {PROPERTY_UNKNOWN, PROPERTY_IDENTITY, PROPERTY_TRANSLATION, PROPERTY_AFFINE, PROPERTY_ORTHONORMAL, PROPERTY_PERSPECTIVE})
    public int properties() {
        return properties;
    }
    public double m00() {
        return m00;
    }
    public double m01() {
        return m01;
    }
    public double m02() {
        return m02;
    }
    public double m03() {
        return m03;
    }
    public double m10() {
        return m10;
    }
    public double m11() {
        return m11;
    }
    public double m12() {
        return m12;
    }
    public double m13() {
        return m13;
    }
    public double m20() {
        return m20;
    }
    public double m21() {
        return m21;
    }
    public double m22() {
        return m22;
    }
    public double m23() {
        return m23;
    }
    public double m30() {
        return m30;
    }
    public double m31() {
        return m31;
    }
    public double m32() {
        return m32;
    }
    public double m33() {
        return m33;
    }
    public Matrix4d m00(double m00) {
        this.m00 = m00;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m00 != 1.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m01(double m01) {
        this.m01 = m01;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m01 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m02(double m02) {
        this.m02 = m02;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m02 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m03(double m03) {
        this.m03 = m03;
        if (m03 != 0.0)
            properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4d m10(double m10) {
        this.m10 = m10;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m10 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m11(double m11) {
        this.m11 = m11;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m11 != 1.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m12(double m12) {
        this.m12 = m12;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m12 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m13(double m13) {
        this.m13 = m13;
        if (m03 != 0.0)
            properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4d m20(double m20) {
        this.m20 = m20;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m20 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m21(double m21) {
        this.m21 = m21;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m21 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m22(double m22) {
        this.m22 = m22;
        properties &= ~PROPERTY_ORTHONORMAL;
        if (m22 != 1.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d m23(double m23) {
        this.m23 = m23;
        if (m23 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4d m30(double m30) {
        this.m30 = m30;
        if (m30 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4d m31(double m31) {
        this.m31 = m31;
        if (m31 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4d m32(double m32) {
        this.m32 = m32;
        if (m32 != 0.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);
        return this;
    }
    public Matrix4d m33(double m33) {
        this.m33 = m33;
        if (m33 != 0.0)
            properties &= ~(PROPERTY_PERSPECTIVE);
        if (m33 != 1.0)
            properties &= ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL | PROPERTY_AFFINE);
        return this;
    }
    Matrix4d _properties(int properties) {
        this.properties = properties;
        return this;
    }
    Matrix4d _m00(double m00) {
        this.m00 = m00;
        return this;
    }
    Matrix4d _m01(double m01) {
        this.m01 = m01;
        return this;
    }
    Matrix4d _m02(double m02) {
        this.m02 = m02;
        return this;
    }
    Matrix4d _m03(double m03) {
        this.m03 = m03;
        return this;
    }
    Matrix4d _m10(double m10) {
        this.m10 = m10;
        return this;
    }
    Matrix4d _m11(double m11) {
        this.m11 = m11;
        return this;
    }
    Matrix4d _m12(double m12) {
        this.m12 = m12;
        return this;
    }
    Matrix4d _m13(double m13) {
        this.m13 = m13;
        return this;
    }
    Matrix4d _m20(double m20) {
        this.m20 = m20;
        return this;
    }
    Matrix4d _m21(double m21) {
        this.m21 = m21;
        return this;
    }
    Matrix4d _m22(double m22) {
        this.m22 = m22;
        return this;
    }
    Matrix4d _m23(double m23) {
        this.m23 = m23;
        return this;
    }
    Matrix4d _m30(double m30) {
        this.m30 = m30;
        return this;
    }
    Matrix4d _m31(double m31) {
        this.m31 = m31;
        return this;
    }
    Matrix4d _m32(double m32) {
        this.m32 = m32;
        return this;
    }
    Matrix4d _m33(double m33) {
        this.m33 = m33;
        return this;
    }
    public Matrix4d identity() {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return this;
        _identity();
        properties = PROPERTY_IDENTITY | PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL;
        return this;
    }
    private void _identity() {
        _m00(1.0).
        _m10(0.0).
        _m20(0.0).
        _m30(0.0).
        _m01(0.0).
        _m11(1.0).
        _m21(0.0).
        _m31(0.0).
        _m02(0.0).
        _m12(0.0).
        _m22(1.0).
        _m32(0.0).
        _m03(0.0).
        _m13(0.0).
        _m23(0.0).
        _m33(1.0);
    }
    public Matrix4d set(Matrix4dc m) {
        if (m == this)
            return this;
        return
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m03(m.m03()).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m13(m.m13()).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22()).
        _m23(m.m23()).
        _m30(m.m30()).
        _m31(m.m31()).
        _m32(m.m32()).
        _m33(m.m33()).
        _properties(m.properties());
    }
    public Matrix4d set(Matrix4fc m) {
        return
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m03(m.m03()).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m13(m.m13()).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22()).
        _m23(m.m23()).
        _m30(m.m30()).
        _m31(m.m31()).
        _m32(m.m32()).
        _m33(m.m33()).
        _properties(m.properties());
    }
    public Matrix4d setTransposed(Matrix4dc m) {
        if ((m.properties() & PROPERTY_IDENTITY) != 0)
            return this.identity();
        return setTransposedInternal(m);
    }
    private Matrix4d setTransposedInternal(Matrix4dc m) {
        double nm10 = m.m01(), nm12 = m.m21(), nm13 = m.m31();
        double nm20 = m.m02(), nm21 = m.m12(), nm30 = m.m03();
        double nm31 = m.m13(), nm32 = m.m23();
        return this
        ._m00(m.m00())._m01(m.m10())._m02(m.m20())._m03(m.m30())
        ._m10(nm10)._m11(m.m11())._m12(nm12)._m13(nm13)
        ._m20(nm20)._m21(nm21)._m22(m.m22())._m23(m.m32())
        ._m30(nm30)._m31(nm31)._m32(nm32)._m33(m.m33())
        ._properties(m.properties() & PROPERTY_IDENTITY);
    }
    public Matrix4d set(Matrix4x3dc m) {
        return
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m03(0.0).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m13(0.0).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22()).
        _m23(0.0).
        _m30(m.m30()).
        _m31(m.m31()).
        _m32(m.m32()).
        _m33(1.0).
        _properties(m.properties() | PROPERTY_AFFINE);
    }
    public Matrix4d set(Matrix4x3fc m) {
        return
        _m00(m.m00()).
        _m01(m.m01()).
        _m02(m.m02()).
        _m03(0.0).
        _m10(m.m10()).
        _m11(m.m11()).
        _m12(m.m12()).
        _m13(0.0).
        _m20(m.m20()).
        _m21(m.m21()).
        _m22(m.m22()).
        _m23(0.0).
        _m30(m.m30()).
        _m31(m.m31()).
        _m32(m.m32()).
        _m33(1.0).
        _properties(m.properties() | PROPERTY_AFFINE);
    }
    public Matrix4d set(Matrix3dc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m03(0.0).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m13(0.0).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _m23(0.0).
        _m30(0.0).
        _m31(0.0).
        _m32(0.0).
        _m33(1.0).
        _properties(PROPERTY_AFFINE);
    }
    public Matrix4d set3x3(Matrix4dc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4d set4x3(Matrix4x3dc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _m30(mat.m30()).
        _m31(mat.m31()).
        _m32(mat.m32()).
        _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4d set4x3(Matrix4x3fc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _m30(mat.m30()).
        _m31(mat.m31()).
        _m32(mat.m32()).
        _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4d set4x3(Matrix4dc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _m30(mat.m30()).
        _m31(mat.m31()).
        _m32(mat.m32()).
        _properties(properties & mat.properties() & ~(PROPERTY_PERSPECTIVE));
    }
    public Matrix4d set(AxisAngle4f axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double invLength = Math.invsqrt(x*x + y*y + z*z);
        x *= invLength;
        y *= invLength;
        z *= invLength;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0 - c;
        _m00(c + x*x*omc).
        _m11(c + y*y*omc).
        _m22(c + z*z*omc);
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        _m10(tmp1 - tmp2).
        _m01(tmp1 + tmp2);
        tmp1 = x*z*omc;
        tmp2 = y*s;
        _m20(tmp1 + tmp2).
        _m02(tmp1 - tmp2);
        tmp1 = y*z*omc;
        tmp2 = x*s;
        _m21(tmp1 - tmp2).
        _m12(tmp1 + tmp2).
        _m03(0.0).
        _m13(0.0).
        _m23(0.0).
        _m30(0.0).
        _m31(0.0).
        _m32(0.0).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d set(AxisAngle4d axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double invLength = Math.invsqrt(x*x + y*y + z*z);
        x *= invLength;
        y *= invLength;
        z *= invLength;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0 - c;
        _m00(c + x*x*omc).
        _m11(c + y*y*omc).
        _m22(c + z*z*omc);
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        _m10(tmp1 - tmp2).
        _m01(tmp1 + tmp2);
        tmp1 = x*z*omc;
        tmp2 = y*s;
        _m20(tmp1 + tmp2).
        _m02(tmp1 - tmp2);
        tmp1 = y*z*omc;
        tmp2 = x*s;
        _m21(tmp1 - tmp2).
        _m12(tmp1 + tmp2).
        _m03(0.0).
        _m13(0.0).
        _m23(0.0).
        _m30(0.0).
        _m31(0.0).
        _m32(0.0).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d set(Quaternionfc q) {
        return rotation(q);
    }
    public Matrix4d set(Quaterniondc q) {
        return rotation(q);
    }
    public Matrix4d mul(Matrix4dc right) {
        return mul(right, this);
    }
    public Matrix4d mul(Matrix4dc right, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if (JvmciCode.canUseJvmci && right instanceof Matrix4d) {
            Matrix4d mright = (Matrix4d) right;
            JvmciCode.__Matrix4d_mul(this, mright, dest);
            dest.properties = properties & mright.properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
            return dest;
        }
        else if ((properties & PROPERTY_TRANSLATION) != 0 && (right.properties() & PROPERTY_AFFINE) != 0)
            return mulTranslationAffine(right, dest);
        else if ((properties & PROPERTY_AFFINE) != 0 && (right.properties() & PROPERTY_AFFINE) != 0)
            return mulAffine(right, dest);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0 && (right.properties() & PROPERTY_AFFINE) != 0)
            return mulPerspectiveAffine(right, dest);
        else if ((right.properties() & PROPERTY_AFFINE) != 0)
            return mulAffineR(right, dest);
        return mul0(right, dest);
    }
    public Matrix4d mul0(Matrix4dc right) {
       return mul0(right, this);
    }
    public Matrix4d mul0(Matrix4dc right, Matrix4d dest) {
        double nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), Math.fma(m20, right.m02(), m30 * right.m03())));
        double nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), Math.fma(m21, right.m02(), m31 * right.m03())));
        double nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), Math.fma(m22, right.m02(), m32 * right.m03())));
        double nm03 = Math.fma(m03, right.m00(), Math.fma(m13, right.m01(), Math.fma(m23, right.m02(), m33 * right.m03())));
        double nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), Math.fma(m20, right.m12(), m30 * right.m13())));
        double nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), Math.fma(m21, right.m12(), m31 * right.m13())));
        double nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), Math.fma(m22, right.m12(), m32 * right.m13())));
        double nm13 = Math.fma(m03, right.m10(), Math.fma(m13, right.m11(), Math.fma(m23, right.m12(), m33 * right.m13())));
        double nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), Math.fma(m20, right.m22(), m30 * right.m23())));
        double nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), Math.fma(m21, right.m22(), m31 * right.m23())));
        double nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), Math.fma(m22, right.m22(), m32 * right.m23())));
        double nm23 = Math.fma(m03, right.m20(), Math.fma(m13, right.m21(), Math.fma(m23, right.m22(), m33 * right.m23())));
        double nm30 = Math.fma(m00, right.m30(), Math.fma(m10, right.m31(), Math.fma(m20, right.m32(), m30 * right.m33())));
        double nm31 = Math.fma(m01, right.m30(), Math.fma(m11, right.m31(), Math.fma(m21, right.m32(), m31 * right.m33())));
        double nm32 = Math.fma(m02, right.m30(), Math.fma(m12, right.m31(), Math.fma(m22, right.m32(), m32 * right.m33())));
        double nm33 = Math.fma(m03, right.m30(), Math.fma(m13, right.m31(), Math.fma(m23, right.m32(), m33 * right.m33())));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d mul(
            double r00, double r01, double r02, double r03,
            double r10, double r11, double r12, double r13,
            double r20, double r21, double r22, double r23,
            double r30, double r31, double r32, double r33) {
        return mul(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33, this);
    }
    public Matrix4d mul(
            double r00, double r01, double r02, double r03,
            double r10, double r11, double r12, double r13,
            double r20, double r21, double r22, double r23,
            double r30, double r31, double r32, double r33, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return mulAffineL(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33, dest);
        return mulGeneric(r00, r01, r02, r03, r10, r11, r12, r13, r20, r21, r22, r23, r30, r31, r32, r33, dest);
    }
    private Matrix4d mulAffineL(
            double r00, double r01, double r02, double r03,
            double r10, double r11, double r12, double r13,
            double r20, double r21, double r22, double r23,
            double r30, double r31, double r32, double r33, Matrix4d dest) {
        double nm00 = Math.fma(m00, r00, Math.fma(m10, r01, Math.fma(m20, r02, m30 * r03)));
        double nm01 = Math.fma(m01, r00, Math.fma(m11, r01, Math.fma(m21, r02, m31 * r03)));
        double nm02 = Math.fma(m02, r00, Math.fma(m12, r01, Math.fma(m22, r02, m32 * r03)));
        double nm03 = r03;
        double nm10 = Math.fma(m00, r10, Math.fma(m10, r11, Math.fma(m20, r12, m30 * r13)));
        double nm11 = Math.fma(m01, r10, Math.fma(m11, r11, Math.fma(m21, r12, m31 * r13)));
        double nm12 = Math.fma(m02, r10, Math.fma(m12, r11, Math.fma(m22, r12, m32 * r13)));
        double nm13 = r13;
        double nm20 = Math.fma(m00, r20, Math.fma(m10, r21, Math.fma(m20, r22, m30 * r23)));
        double nm21 = Math.fma(m01, r20, Math.fma(m11, r21, Math.fma(m21, r22, m31 * r23)));
        double nm22 = Math.fma(m02, r20, Math.fma(m12, r21, Math.fma(m22, r22, m32 * r23)));
        double nm23 = r23;
        double nm30 = Math.fma(m00, r30, Math.fma(m10, r31, Math.fma(m20, r32, m30 * r33)));
        double nm31 = Math.fma(m01, r30, Math.fma(m11, r31, Math.fma(m21, r32, m31 * r33)));
        double nm32 = Math.fma(m02, r30, Math.fma(m12, r31, Math.fma(m22, r32, m32 * r33)));
        double nm33 = r33;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_AFFINE);
    }
    private Matrix4d mulGeneric(
            double r00, double r01, double r02, double r03,
            double r10, double r11, double r12, double r13,
            double r20, double r21, double r22, double r23,
            double r30, double r31, double r32, double r33, Matrix4d dest) {
        double nm00 = Math.fma(m00, r00, Math.fma(m10, r01, Math.fma(m20, r02, m30 * r03)));
        double nm01 = Math.fma(m01, r00, Math.fma(m11, r01, Math.fma(m21, r02, m31 * r03)));
        double nm02 = Math.fma(m02, r00, Math.fma(m12, r01, Math.fma(m22, r02, m32 * r03)));
        double nm03 = Math.fma(m03, r00, Math.fma(m13, r01, Math.fma(m23, r02, m33 * r03)));
        double nm10 = Math.fma(m00, r10, Math.fma(m10, r11, Math.fma(m20, r12, m30 * r13)));
        double nm11 = Math.fma(m01, r10, Math.fma(m11, r11, Math.fma(m21, r12, m31 * r13)));
        double nm12 = Math.fma(m02, r10, Math.fma(m12, r11, Math.fma(m22, r12, m32 * r13)));
        double nm13 = Math.fma(m03, r10, Math.fma(m13, r11, Math.fma(m23, r12, m33 * r13)));
        double nm20 = Math.fma(m00, r20, Math.fma(m10, r21, Math.fma(m20, r22, m30 * r23)));
        double nm21 = Math.fma(m01, r20, Math.fma(m11, r21, Math.fma(m21, r22, m31 * r23)));
        double nm22 = Math.fma(m02, r20, Math.fma(m12, r21, Math.fma(m22, r22, m32 * r23)));
        double nm23 = Math.fma(m03, r20, Math.fma(m13, r21, Math.fma(m23, r22, m33 * r23)));
        double nm30 = Math.fma(m00, r30, Math.fma(m10, r31, Math.fma(m20, r32, m30 * r33)));
        double nm31 = Math.fma(m01, r30, Math.fma(m11, r31, Math.fma(m21, r32, m31 * r33)));
        double nm32 = Math.fma(m02, r30, Math.fma(m12, r31, Math.fma(m22, r32, m32 * r33)));
        double nm33 = Math.fma(m03, r30, Math.fma(m13, r31, Math.fma(m23, r32, m33 * r33)));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d mul3x3(
            double r00, double r01, double r02,
            double r10, double r11, double r12,
            double r20, double r21, double r22) {
        return mul3x3(r00, r01, r02, r10, r11, r12, r20, r21, r22, this);
    }
    public Matrix4d mul3x3(
            double r00, double r01, double r02,
            double r10, double r11, double r12,
            double r20, double r21, double r22, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(r00, r01, r02, 0, r10, r11, r12, 0, r20, r21, r22, 0, 0, 0, 0, 1);
        return mulGeneric3x3(r00, r01, r02, r10, r11, r12, r20, r21, r22, dest);
    }
    private Matrix4d mulGeneric3x3(
            double r00, double r01, double r02,
            double r10, double r11, double r12,
            double r20, double r21, double r22, Matrix4d dest) {
        double nm00 = Math.fma(m00, r00, Math.fma(m10, r01, m20 * r02));
        double nm01 = Math.fma(m01, r00, Math.fma(m11, r01, m21 * r02));
        double nm02 = Math.fma(m02, r00, Math.fma(m12, r01, m22 * r02));
        double nm03 = Math.fma(m03, r00, Math.fma(m13, r01, m23 * r02));
        double nm10 = Math.fma(m00, r10, Math.fma(m10, r11, m20 * r12));
        double nm11 = Math.fma(m01, r10, Math.fma(m11, r11, m21 * r12));
        double nm12 = Math.fma(m02, r10, Math.fma(m12, r11, m22 * r12));
        double nm13 = Math.fma(m03, r10, Math.fma(m13, r11, m23 * r12));
        double nm20 = Math.fma(m00, r20, Math.fma(m10, r21, m20 * r22));
        double nm21 = Math.fma(m01, r20, Math.fma(m11, r21, m21 * r22));
        double nm22 = Math.fma(m02, r20, Math.fma(m12, r21, m22 * r22));
        double nm23 = Math.fma(m03, r20, Math.fma(m13, r21, m23 * r22));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(this.properties & PROPERTY_AFFINE);
    }
    public Matrix4d mulLocal(Matrix4dc left) {
       return mulLocal(left, this);
    }
    public Matrix4d mulLocal(Matrix4dc left, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(left);
        else if ((left.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if ((properties & PROPERTY_AFFINE) != 0 && (left.properties() & PROPERTY_AFFINE) != 0)
            return mulLocalAffine(left, dest);
        return mulLocalGeneric(left, dest);
    }
    private Matrix4d mulLocalGeneric(Matrix4dc left, Matrix4d dest) {
        double nm00 = Math.fma(left.m00(), m00, Math.fma(left.m10(), m01, Math.fma(left.m20(), m02, left.m30() * m03)));
        double nm01 = Math.fma(left.m01(), m00, Math.fma(left.m11(), m01, Math.fma(left.m21(), m02, left.m31() * m03)));
        double nm02 = Math.fma(left.m02(), m00, Math.fma(left.m12(), m01, Math.fma(left.m22(), m02, left.m32() * m03)));
        double nm03 = Math.fma(left.m03(), m00, Math.fma(left.m13(), m01, Math.fma(left.m23(), m02, left.m33() * m03)));
        double nm10 = Math.fma(left.m00(), m10, Math.fma(left.m10(), m11, Math.fma(left.m20(), m12, left.m30() * m13)));
        double nm11 = Math.fma(left.m01(), m10, Math.fma(left.m11(), m11, Math.fma(left.m21(), m12, left.m31() * m13)));
        double nm12 = Math.fma(left.m02(), m10, Math.fma(left.m12(), m11, Math.fma(left.m22(), m12, left.m32() * m13)));
        double nm13 = Math.fma(left.m03(), m10, Math.fma(left.m13(), m11, Math.fma(left.m23(), m12, left.m33() * m13)));
        double nm20 = Math.fma(left.m00(), m20, Math.fma(left.m10(), m21, Math.fma(left.m20(), m22, left.m30() * m23)));
        double nm21 = Math.fma(left.m01(), m20, Math.fma(left.m11(), m21, Math.fma(left.m21(), m22, left.m31() * m23)));
        double nm22 = Math.fma(left.m02(), m20, Math.fma(left.m12(), m21, Math.fma(left.m22(), m22, left.m32() * m23)));
        double nm23 = Math.fma(left.m03(), m20, Math.fma(left.m13(), m21, Math.fma(left.m23(), m22, left.m33() * m23)));
        double nm30 = Math.fma(left.m00(), m30, Math.fma(left.m10(), m31, Math.fma(left.m20(), m32, left.m30() * m33)));
        double nm31 = Math.fma(left.m01(), m30, Math.fma(left.m11(), m31, Math.fma(left.m21(), m32, left.m31() * m33)));
        double nm32 = Math.fma(left.m02(), m30, Math.fma(left.m12(), m31, Math.fma(left.m22(), m32, left.m32() * m33)));
        double nm33 = Math.fma(left.m03(), m30, Math.fma(left.m13(), m31, Math.fma(left.m23(), m32, left.m33() * m33)));
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d mulLocalAffine(Matrix4dc left) {
       return mulLocalAffine(left, this);
    }
    public Matrix4d mulLocalAffine(Matrix4dc left, Matrix4d dest) {
        double nm00 = left.m00() * m00 + left.m10() * m01 + left.m20() * m02;
        double nm01 = left.m01() * m00 + left.m11() * m01 + left.m21() * m02;
        double nm02 = left.m02() * m00 + left.m12() * m01 + left.m22() * m02;
        double nm03 = left.m03();
        double nm10 = left.m00() * m10 + left.m10() * m11 + left.m20() * m12;
        double nm11 = left.m01() * m10 + left.m11() * m11 + left.m21() * m12;
        double nm12 = left.m02() * m10 + left.m12() * m11 + left.m22() * m12;
        double nm13 = left.m13();
        double nm20 = left.m00() * m20 + left.m10() * m21 + left.m20() * m22;
        double nm21 = left.m01() * m20 + left.m11() * m21 + left.m21() * m22;
        double nm22 = left.m02() * m20 + left.m12() * m21 + left.m22() * m22;
        double nm23 = left.m23();
        double nm30 = left.m00() * m30 + left.m10() * m31 + left.m20() * m32 + left.m30();
        double nm31 = left.m01() * m30 + left.m11() * m31 + left.m21() * m32 + left.m31();
        double nm32 = left.m02() * m30 + left.m12() * m31 + left.m22() * m32 + left.m32();
        double nm33 = left.m33();
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_AFFINE);
        return dest;
    }
    public Matrix4d mul(Matrix4x3dc right) {
        return mul(right, this);
    }
    public Matrix4d mul(Matrix4x3dc right, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return mulTranslation(right, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return mulAffine(right, dest);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return mulPerspectiveAffine(right, dest);
        return mulGeneric(right, dest);
    }
    private Matrix4d mulTranslation(Matrix4x3dc right, Matrix4d dest) {
        return dest
        ._m00(right.m00())
        ._m01(right.m01())
        ._m02(right.m02())
        ._m03(m03)
        ._m10(right.m10())
        ._m11(right.m11())
        ._m12(right.m12())
        ._m13(m13)
        ._m20(right.m20())
        ._m21(right.m21())
        ._m22(right.m22())
        ._m23(m23)
        ._m30(right.m30() + m30)
        ._m31(right.m31() + m31)
        ._m32(right.m32() + m32)
        ._m33(m33)
        ._properties(PROPERTY_AFFINE | (right.properties() & PROPERTY_ORTHONORMAL));
    }
    private Matrix4d mulAffine(Matrix4x3dc right, Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        double m20 = this.m20, m21 = this.m21, m22 = this.m22;
        double rm00 = right.m00(), rm01 = right.m01(), rm02 = right.m02();
        double rm10 = right.m10(), rm11 = right.m11(), rm12 = right.m12();
        double rm20 = right.m20(), rm21 = right.m21(), rm22 = right.m22();
        double rm30 = right.m30(), rm31 = right.m31(), rm32 = right.m32();
        return dest
        ._m00(Math.fma(m00, rm00, Math.fma(m10, rm01, m20 * rm02)))
        ._m01(Math.fma(m01, rm00, Math.fma(m11, rm01, m21 * rm02)))
        ._m02(Math.fma(m02, rm00, Math.fma(m12, rm01, m22 * rm02)))
        ._m03(m03)
        ._m10(Math.fma(m00, rm10, Math.fma(m10, rm11, m20 * rm12)))
        ._m11(Math.fma(m01, rm10, Math.fma(m11, rm11, m21 * rm12)))
        ._m12(Math.fma(m02, rm10, Math.fma(m12, rm11, m22 * rm12)))
        ._m13(m13)
        ._m20(Math.fma(m00, rm20, Math.fma(m10, rm21, m20 * rm22)))
        ._m21(Math.fma(m01, rm20, Math.fma(m11, rm21, m21 * rm22)))
        ._m22(Math.fma(m02, rm20, Math.fma(m12, rm21, m22 * rm22)))
        ._m23(m23)
        ._m30(Math.fma(m00, rm30, Math.fma(m10, rm31, Math.fma(m20, rm32, m30))))
        ._m31(Math.fma(m01, rm30, Math.fma(m11, rm31, Math.fma(m21, rm32, m31))))
        ._m32(Math.fma(m02, rm30, Math.fma(m12, rm31, Math.fma(m22, rm32, m32))))
        ._m33(m33)
        ._properties(PROPERTY_AFFINE | (this.properties & right.properties() & PROPERTY_ORTHONORMAL));
    }
    private Matrix4d mulGeneric(Matrix4x3dc right, Matrix4d dest) {
        double nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), m20 * right.m02()));
        double nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), m21 * right.m02()));
        double nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), m22 * right.m02()));
        double nm03 = Math.fma(m03, right.m00(), Math.fma(m13, right.m01(), m23 * right.m02()));
        double nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), m20 * right.m12()));
        double nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), m21 * right.m12()));
        double nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), m22 * right.m12()));
        double nm13 = Math.fma(m03, right.m10(), Math.fma(m13, right.m11(), m23 * right.m12()));
        double nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), m20 * right.m22()));
        double nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), m21 * right.m22()));
        double nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), m22 * right.m22()));
        double nm23 = Math.fma(m03, right.m20(), Math.fma(m13, right.m21(), m23 * right.m22()));
        double nm30 = Math.fma(m00, right.m30(), Math.fma(m10, right.m31(), Math.fma(m20, right.m32(), m30)));
        double nm31 = Math.fma(m01, right.m30(), Math.fma(m11, right.m31(), Math.fma(m21, right.m32(), m31)));
        double nm32 = Math.fma(m02, right.m30(), Math.fma(m12, right.m31(), Math.fma(m22, right.m32(), m32)));
        double nm33 = Math.fma(m03, right.m30(), Math.fma(m13, right.m31(), Math.fma(m23, right.m32(), m33)));
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d mulPerspectiveAffine(Matrix4x3dc view, Matrix4d dest) {
        double lm00 = m00, lm11 = m11, lm22 = m22, lm23 = m23;
        dest._m00(lm00 * view.m00())._m01(lm11 * view.m01())._m02(lm22 * view.m02())._m03(lm23 * view.m02()).
        _m10(lm00 * view.m10())._m11(lm11 * view.m11())._m12(lm22 * view.m12())._m13(lm23 * view.m12()).
        _m20(lm00 * view.m20())._m21(lm11 * view.m21())._m22(lm22 * view.m22())._m23(lm23 * view.m22()).
        _m30(lm00 * view.m30())._m31(lm11 * view.m31())._m32(lm22 * view.m32() + m32)._m33(lm23 * view.m32())
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d mul(Matrix4x3fc right, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        return mulGeneric(right, dest);
    }
    private Matrix4d mulGeneric(Matrix4x3fc right, Matrix4d dest) {
        double nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), m20 * right.m02()));
        double nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), m21 * right.m02()));
        double nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), m22 * right.m02()));
        double nm03 = Math.fma(m03, right.m00(), Math.fma(m13, right.m01(), m23 * right.m02()));
        double nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), m20 * right.m12()));
        double nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), m21 * right.m12()));
        double nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), m22 * right.m12()));
        double nm13 = Math.fma(m03, right.m10(), Math.fma(m13, right.m11(), m23 * right.m12()));
        double nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), m20 * right.m22()));
        double nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), m21 * right.m22()));
        double nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), m22 * right.m22()));
        double nm23 = Math.fma(m03, right.m20(), Math.fma(m13, right.m21(), m23 * right.m22()));
        double nm30 = Math.fma(m00, right.m30(), Math.fma(m10, right.m31(), Math.fma(m20, right.m32(), m30)));
        double nm31 = Math.fma(m01, right.m30(), Math.fma(m11, right.m31(), Math.fma(m21, right.m32(), m31)));
        double nm32 = Math.fma(m02, right.m30(), Math.fma(m12, right.m31(), Math.fma(m22, right.m32(), m32)));
        double nm33 = Math.fma(m03, right.m30(), Math.fma(m13, right.m31(), Math.fma(m23, right.m32(), m33)));
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d mul(Matrix3x2dc right) {
        return mul(right, this);
    }
    public Matrix4d mul(Matrix3x2dc right, Matrix4d dest) {
        double nm00 = m00 * right.m00() + m10 * right.m01();
        double nm01 = m01 * right.m00() + m11 * right.m01();
        double nm02 = m02 * right.m00() + m12 * right.m01();
        double nm03 = m03 * right.m00() + m13 * right.m01();
        double nm10 = m00 * right.m10() + m10 * right.m11();
        double nm11 = m01 * right.m10() + m11 * right.m11();
        double nm12 = m02 * right.m10() + m12 * right.m11();
        double nm13 = m03 * right.m10() + m13 * right.m11();
        double nm30 = m00 * right.m20() + m10 * right.m21() + m30;
        double nm31 = m01 * right.m20() + m11 * right.m21() + m31;
        double nm32 = m02 * right.m20() + m12 * right.m21() + m32;
        double nm33 = m03 * right.m20() + m13 * right.m21() + m33;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(m20)
        ._m21(m21)
        ._m22(m22)
        ._m23(m23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d mul(Matrix3x2fc right) {
        return mul(right, this);
    }
    public Matrix4d mul(Matrix3x2fc right, Matrix4d dest) {
        double nm00 = m00 * right.m00() + m10 * right.m01();
        double nm01 = m01 * right.m00() + m11 * right.m01();
        double nm02 = m02 * right.m00() + m12 * right.m01();
        double nm03 = m03 * right.m00() + m13 * right.m01();
        double nm10 = m00 * right.m10() + m10 * right.m11();
        double nm11 = m01 * right.m10() + m11 * right.m11();
        double nm12 = m02 * right.m10() + m12 * right.m11();
        double nm13 = m03 * right.m10() + m13 * right.m11();
        double nm30 = m00 * right.m20() + m10 * right.m21() + m30;
        double nm31 = m01 * right.m20() + m11 * right.m21() + m31;
        double nm32 = m02 * right.m20() + m12 * right.m21() + m32;
        double nm33 = m03 * right.m20() + m13 * right.m21() + m33;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(m20)
        ._m21(m21)
        ._m22(m22)
        ._m23(m23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d mul(Matrix4fc right) {
        return mul(right, this);
    }
    public Matrix4d mul(Matrix4fc right, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.set(right);
        else if ((right.properties() & PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        return mulGeneric(right, dest);
    }
    private Matrix4d mulGeneric(Matrix4fc right, Matrix4d dest) {
        double nm00 = m00 * right.m00() + m10 * right.m01() + m20 * right.m02() + m30 * right.m03();
        double nm01 = m01 * right.m00() + m11 * right.m01() + m21 * right.m02() + m31 * right.m03();
        double nm02 = m02 * right.m00() + m12 * right.m01() + m22 * right.m02() + m32 * right.m03();
        double nm03 = m03 * right.m00() + m13 * right.m01() + m23 * right.m02() + m33 * right.m03();
        double nm10 = m00 * right.m10() + m10 * right.m11() + m20 * right.m12() + m30 * right.m13();
        double nm11 = m01 * right.m10() + m11 * right.m11() + m21 * right.m12() + m31 * right.m13();
        double nm12 = m02 * right.m10() + m12 * right.m11() + m22 * right.m12() + m32 * right.m13();
        double nm13 = m03 * right.m10() + m13 * right.m11() + m23 * right.m12() + m33 * right.m13();
        double nm20 = m00 * right.m20() + m10 * right.m21() + m20 * right.m22() + m30 * right.m23();
        double nm21 = m01 * right.m20() + m11 * right.m21() + m21 * right.m22() + m31 * right.m23();
        double nm22 = m02 * right.m20() + m12 * right.m21() + m22 * right.m22() + m32 * right.m23();
        double nm23 = m03 * right.m20() + m13 * right.m21() + m23 * right.m22() + m33 * right.m23();
        double nm30 = m00 * right.m30() + m10 * right.m31() + m20 * right.m32() + m30 * right.m33();
        double nm31 = m01 * right.m30() + m11 * right.m31() + m21 * right.m32() + m31 * right.m33();
        double nm32 = m02 * right.m30() + m12 * right.m31() + m22 * right.m32() + m32 * right.m33();
        double nm33 = m03 * right.m30() + m13 * right.m31() + m23 * right.m32() + m33 * right.m33();
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d mulPerspectiveAffine(Matrix4dc view) {
       return mulPerspectiveAffine(view, this);
    }
    public Matrix4d mulPerspectiveAffine(Matrix4dc view, Matrix4d dest) {
        double nm00 = m00 * view.m00(), nm01 = m11 * view.m01(), nm02 = m22 * view.m02(), nm03 = m23 * view.m02();
        double nm10 = m00 * view.m10(), nm11 = m11 * view.m11(), nm12 = m22 * view.m12(), nm13 = m23 * view.m12();
        double nm20 = m00 * view.m20(), nm21 = m11 * view.m21(), nm22 = m22 * view.m22(), nm23 = m23 * view.m22();
        double nm30 = m00 * view.m30(), nm31 = m11 * view.m31(), nm32 = m22 * view.m32() + m32, nm33 = m23 * view.m32();
        return dest
            ._m00(nm00)._m01(nm01)._m02(nm02)._m03(nm03)
            ._m10(nm10)._m11(nm11)._m12(nm12)._m13(nm13)
            ._m20(nm20)._m21(nm21)._m22(nm22)._m23(nm23)
            ._m30(nm30)._m31(nm31)._m32(nm32)._m33(nm33)
            ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d mulAffineR(Matrix4dc right) {
       return mulAffineR(right, this);
    }
    public Matrix4d mulAffineR(Matrix4dc right, Matrix4d dest) {
        double nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), m20 * right.m02()));
        double nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), m21 * right.m02()));
        double nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), m22 * right.m02()));
        double nm03 = Math.fma(m03, right.m00(), Math.fma(m13, right.m01(), m23 * right.m02()));
        double nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), m20 * right.m12()));
        double nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), m21 * right.m12()));
        double nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), m22 * right.m12()));
        double nm13 = Math.fma(m03, right.m10(), Math.fma(m13, right.m11(), m23 * right.m12()));
        double nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), m20 * right.m22()));
        double nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), m21 * right.m22()));
        double nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), m22 * right.m22()));
        double nm23 = Math.fma(m03, right.m20(), Math.fma(m13, right.m21(), m23 * right.m22()));
        double nm30 = Math.fma(m00, right.m30(), Math.fma(m10, right.m31(), Math.fma(m20, right.m32(), m30)));
        double nm31 = Math.fma(m01, right.m30(), Math.fma(m11, right.m31(), Math.fma(m21, right.m32(), m31)));
        double nm32 = Math.fma(m02, right.m30(), Math.fma(m12, right.m31(), Math.fma(m22, right.m32(), m32)));
        double nm33 = Math.fma(m03, right.m30(), Math.fma(m13, right.m31(), Math.fma(m23, right.m32(), m33)));
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d mulAffine(Matrix4dc right) {
       return mulAffine(right, this);
    }
    public Matrix4d mulAffine(Matrix4dc right, Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        double m20 = this.m20, m21 = this.m21, m22 = this.m22;
        double rm00 = right.m00(), rm01 = right.m01(), rm02 = right.m02();
        double rm10 = right.m10(), rm11 = right.m11(), rm12 = right.m12();
        double rm20 = right.m20(), rm21 = right.m21(), rm22 = right.m22();
        double rm30 = right.m30(), rm31 = right.m31(), rm32 = right.m32();
        return dest
        ._m00(Math.fma(m00, rm00, Math.fma(m10, rm01, m20 * rm02)))
        ._m01(Math.fma(m01, rm00, Math.fma(m11, rm01, m21 * rm02)))
        ._m02(Math.fma(m02, rm00, Math.fma(m12, rm01, m22 * rm02)))
        ._m03(m03)
        ._m10(Math.fma(m00, rm10, Math.fma(m10, rm11, m20 * rm12)))
        ._m11(Math.fma(m01, rm10, Math.fma(m11, rm11, m21 * rm12)))
        ._m12(Math.fma(m02, rm10, Math.fma(m12, rm11, m22 * rm12)))
        ._m13(m13)
        ._m20(Math.fma(m00, rm20, Math.fma(m10, rm21, m20 * rm22)))
        ._m21(Math.fma(m01, rm20, Math.fma(m11, rm21, m21 * rm22)))
        ._m22(Math.fma(m02, rm20, Math.fma(m12, rm21, m22 * rm22)))
        ._m23(m23)
        ._m30(Math.fma(m00, rm30, Math.fma(m10, rm31, Math.fma(m20, rm32, m30))))
        ._m31(Math.fma(m01, rm30, Math.fma(m11, rm31, Math.fma(m21, rm32, m31))))
        ._m32(Math.fma(m02, rm30, Math.fma(m12, rm31, Math.fma(m22, rm32, m32))))
        ._m33(m33)
        ._properties(PROPERTY_AFFINE | (this.properties & right.properties() & PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mulTranslationAffine(Matrix4dc right, Matrix4d dest) {
        return dest
        ._m00(right.m00())
        ._m01(right.m01())
        ._m02(right.m02())
        ._m03(m03)
        ._m10(right.m10())
        ._m11(right.m11())
        ._m12(right.m12())
        ._m13(m13)
        ._m20(right.m20())
        ._m21(right.m21())
        ._m22(right.m22())
        ._m23(m23)
        ._m30(right.m30() + m30)
        ._m31(right.m31() + m31)
        ._m32(right.m32() + m32)
        ._m33(m33)
        ._properties(PROPERTY_AFFINE | (right.properties() & PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mulOrthoAffine(Matrix4dc view) {
        return mulOrthoAffine(view, this);
    }
    public Matrix4d mulOrthoAffine(Matrix4dc view, Matrix4d dest) {
        double nm00 = m00 * view.m00();
        double nm01 = m11 * view.m01();
        double nm02 = m22 * view.m02();
        double nm03 = 0.0;
        double nm10 = m00 * view.m10();
        double nm11 = m11 * view.m11();
        double nm12 = m22 * view.m12();
        double nm13 = 0.0;
        double nm20 = m00 * view.m20();
        double nm21 = m11 * view.m21();
        double nm22 = m22 * view.m22();
        double nm23 = 0.0;
        double nm30 = m00 * view.m30() + m30;
        double nm31 = m11 * view.m31() + m31;
        double nm32 = m22 * view.m32() + m32;
        double nm33 = 1.0;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_AFFINE);
        return dest;
    }
    public Matrix4d fma4x3(Matrix4dc other, double otherFactor) {
        return fma4x3(other, otherFactor, this);
    }
    public Matrix4d fma4x3(Matrix4dc other, double otherFactor, Matrix4d dest) {
        dest._m00(Math.fma(other.m00(), otherFactor, m00))
        ._m01(Math.fma(other.m01(), otherFactor, m01))
        ._m02(Math.fma(other.m02(), otherFactor, m02))
        ._m03(m03)
        ._m10(Math.fma(other.m10(), otherFactor, m10))
        ._m11(Math.fma(other.m11(), otherFactor, m11))
        ._m12(Math.fma(other.m12(), otherFactor, m12))
        ._m13(m13)
        ._m20(Math.fma(other.m20(), otherFactor, m20))
        ._m21(Math.fma(other.m21(), otherFactor, m21))
        ._m22(Math.fma(other.m22(), otherFactor, m22))
        ._m23(m23)
        ._m30(Math.fma(other.m30(), otherFactor, m30))
        ._m31(Math.fma(other.m31(), otherFactor, m31))
        ._m32(Math.fma(other.m32(), otherFactor, m32))
        ._m33(m33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d add(Matrix4dc other) {
        return add(other, this);
    }
    public Matrix4d add(Matrix4dc other, Matrix4d dest) {
        dest._m00(m00 + other.m00())
        ._m01(m01 + other.m01())
        ._m02(m02 + other.m02())
        ._m03(m03 + other.m03())
        ._m10(m10 + other.m10())
        ._m11(m11 + other.m11())
        ._m12(m12 + other.m12())
        ._m13(m13 + other.m13())
        ._m20(m20 + other.m20())
        ._m21(m21 + other.m21())
        ._m22(m22 + other.m22())
        ._m23(m23 + other.m23())
        ._m30(m30 + other.m30())
        ._m31(m31 + other.m31())
        ._m32(m32 + other.m32())
        ._m33(m33 + other.m33())
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d sub(Matrix4dc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix4d sub(Matrix4dc subtrahend, Matrix4d dest) {
        dest._m00(m00 - subtrahend.m00())
        ._m01(m01 - subtrahend.m01())
        ._m02(m02 - subtrahend.m02())
        ._m03(m03 - subtrahend.m03())
        ._m10(m10 - subtrahend.m10())
        ._m11(m11 - subtrahend.m11())
        ._m12(m12 - subtrahend.m12())
        ._m13(m13 - subtrahend.m13())
        ._m20(m20 - subtrahend.m20())
        ._m21(m21 - subtrahend.m21())
        ._m22(m22 - subtrahend.m22())
        ._m23(m23 - subtrahend.m23())
        ._m30(m30 - subtrahend.m30())
        ._m31(m31 - subtrahend.m31())
        ._m32(m32 - subtrahend.m32())
        ._m33(m33 - subtrahend.m33())
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d mulComponentWise(Matrix4dc other) {
        return mulComponentWise(other, this);
    }
    public Matrix4d mulComponentWise(Matrix4dc other, Matrix4d dest) {
        dest._m00(m00 * other.m00())
        ._m01(m01 * other.m01())
        ._m02(m02 * other.m02())
        ._m03(m03 * other.m03())
        ._m10(m10 * other.m10())
        ._m11(m11 * other.m11())
        ._m12(m12 * other.m12())
        ._m13(m13 * other.m13())
        ._m20(m20 * other.m20())
        ._m21(m21 * other.m21())
        ._m22(m22 * other.m22())
        ._m23(m23 * other.m23())
        ._m30(m30 * other.m30())
        ._m31(m31 * other.m31())
        ._m32(m32 * other.m32())
        ._m33(m33 * other.m33())
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d add4x3(Matrix4dc other) {
        return add4x3(other, this);
    }
    public Matrix4d add4x3(Matrix4dc other, Matrix4d dest) {
        dest._m00(m00 + other.m00())
        ._m01(m01 + other.m01())
        ._m02(m02 + other.m02())
        ._m03(m03)
        ._m10(m10 + other.m10())
        ._m11(m11 + other.m11())
        ._m12(m12 + other.m12())
        ._m13(m13)
        ._m20(m20 + other.m20())
        ._m21(m21 + other.m21())
        ._m22(m22 + other.m22())
        ._m23(m23)
        ._m30(m30 + other.m30())
        ._m31(m31 + other.m31())
        ._m32(m32 + other.m32())
        ._m33(m33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d add4x3(Matrix4fc other) {
        return add4x3(other, this);
    }
    public Matrix4d add4x3(Matrix4fc other, Matrix4d dest) {
        dest._m00(m00 + other.m00())
        ._m01(m01 + other.m01())
        ._m02(m02 + other.m02())
        ._m03(m03)
        ._m10(m10 + other.m10())
        ._m11(m11 + other.m11())
        ._m12(m12 + other.m12())
        ._m13(m13)
        ._m20(m20 + other.m20())
        ._m21(m21 + other.m21())
        ._m22(m22 + other.m22())
        ._m23(m23)
        ._m30(m30 + other.m30())
        ._m31(m31 + other.m31())
        ._m32(m32 + other.m32())
        ._m33(m33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d sub4x3(Matrix4dc subtrahend) {
        return sub4x3(subtrahend, this);
    }
    public Matrix4d sub4x3(Matrix4dc subtrahend, Matrix4d dest) {
        dest._m00(m00 - subtrahend.m00())
        ._m01(m01 - subtrahend.m01())
        ._m02(m02 - subtrahend.m02())
        ._m03(m03)
        ._m10(m10 - subtrahend.m10())
        ._m11(m11 - subtrahend.m11())
        ._m12(m12 - subtrahend.m12())
        ._m13(m13)
        ._m20(m20 - subtrahend.m20())
        ._m21(m21 - subtrahend.m21())
        ._m22(m22 - subtrahend.m22())
        ._m23(m23)
        ._m30(m30 - subtrahend.m30())
        ._m31(m31 - subtrahend.m31())
        ._m32(m32 - subtrahend.m32())
        ._m33(m33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d mul4x3ComponentWise(Matrix4dc other) {
        return mul4x3ComponentWise(other, this);
    }
    public Matrix4d mul4x3ComponentWise(Matrix4dc other, Matrix4d dest) {
        dest._m00(m00 * other.m00())
        ._m01(m01 * other.m01())
        ._m02(m02 * other.m02())
        ._m03(m03)
        ._m10(m10 * other.m10())
        ._m11(m11 * other.m11())
        ._m12(m12 * other.m12())
        ._m13(m13)
        ._m20(m20 * other.m20())
        ._m21(m21 * other.m21())
        ._m22(m22 * other.m22())
        ._m23(m23)
        ._m30(m30 * other.m30())
        ._m31(m31 * other.m31())
        ._m32(m32 * other.m32())
        ._m33(m33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d set(double m00, double m01, double m02,double m03,
                        double m10, double m11, double m12, double m13,
                        double m20, double m21, double m22, double m23, 
                        double m30, double m31, double m32, double m33) {
        this.m00 = m00;
        this.m10 = m10;
        this.m20 = m20;
        this.m30 = m30;
        this.m01 = m01;
        this.m11 = m11;
        this.m21 = m21;
        this.m31 = m31;
        this.m02 = m02;
        this.m12 = m12;
        this.m22 = m22;
        this.m32 = m32;
        this.m03 = m03;
        this.m13 = m13;
        this.m23 = m23;
        this.m33 = m33;
        return determineProperties();
    }
    public Matrix4d set(double m[], int off) {
        return
        _m00(m[off+0]).
        _m01(m[off+1]).
        _m02(m[off+2]).
        _m03(m[off+3]).
        _m10(m[off+4]).
        _m11(m[off+5]).
        _m12(m[off+6]).
        _m13(m[off+7]).
        _m20(m[off+8]).
        _m21(m[off+9]).
        _m22(m[off+10]).
        _m23(m[off+11]).
        _m30(m[off+12]).
        _m31(m[off+13]).
        _m32(m[off+14]).
        _m33(m[off+15]).
        determineProperties();
    }
    public Matrix4d set(double m[]) {
        return set(m, 0);
    }
    public Matrix4d set(float m[], int off) {
        return
        _m00(m[off+0]).
        _m01(m[off+1]).
        _m02(m[off+2]).
        _m03(m[off+3]).
        _m10(m[off+4]).
        _m11(m[off+5]).
        _m12(m[off+6]).
        _m13(m[off+7]).
        _m20(m[off+8]).
        _m21(m[off+9]).
        _m22(m[off+10]).
        _m23(m[off+11]).
        _m30(m[off+12]).
        _m31(m[off+13]).
        _m32(m[off+14]).
        _m33(m[off+15]).
        determineProperties();
    }
    public Matrix4d set(float m[]) {
        return set(m, 0);
    }
    public Matrix4d set(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4d set(FloatBuffer buffer) {
        MemUtil.INSTANCE.getf(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4d set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return determineProperties();
    }
    public Matrix4d set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.getf(this, index, buffer);
        return determineProperties();
    }
    public Matrix4d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return determineProperties();
    }
    public Matrix4d setFloats(ByteBuffer buffer) {
        MemUtil.INSTANCE.getf(this, buffer.position(), buffer);
        return determineProperties();
    }
    public Matrix4d setFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.getf(this, index, buffer);
        return determineProperties();
    }
    public Matrix4d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return determineProperties();
    }
    public Matrix4d setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return determineProperties();
    }
    public Matrix4d set(Vector4d col0, Vector4d col1, Vector4d col2, Vector4d col3) {
        return
        _m00(col0.x()).
        _m01(col0.y()).
        _m02(col0.z()).
        _m03(col0.w()).
        _m10(col1.x()).
        _m11(col1.y()).
        _m12(col1.z()).
        _m13(col1.w()).
        _m20(col2.x()).
        _m21(col2.y()).
        _m22(col2.z()).
        _m23(col2.w()).
        _m30(col3.x()).
        _m31(col3.y()).
        _m32(col3.z()).
        _m33(col3.w()).
        determineProperties();
    }
    public double determinant() {
        if ((properties & PROPERTY_AFFINE) != 0)
            return determinantAffine();
        return (m00 * m11 - m01 * m10) * (m22 * m33 - m23 * m32)
             + (m02 * m10 - m00 * m12) * (m21 * m33 - m23 * m31)
             + (m00 * m13 - m03 * m10) * (m21 * m32 - m22 * m31) 
             + (m01 * m12 - m02 * m11) * (m20 * m33 - m23 * m30)
             + (m03 * m11 - m01 * m13) * (m20 * m32 - m22 * m30) 
             + (m02 * m13 - m03 * m12) * (m20 * m31 - m21 * m30);
    }
    public double determinant3x3() {
        return (m00 * m11 - m01 * m10) * m22
             + (m02 * m10 - m00 * m12) * m21
             + (m01 * m12 - m02 * m11) * m20;
    }
    public double determinantAffine() {
        return (m00 * m11 - m01 * m10) * m22
             + (m02 * m10 - m00 * m12) * m21
             + (m01 * m12 - m02 * m11) * m20;
    }
    public Matrix4d invert() {
        return invert(this);
    }
    public Matrix4d invert(Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return invertTranslation(dest);
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return invertOrthonormal(dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return invertAffine(dest);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return invertPerspective(dest);
        return invertGeneric(dest);
    }
    private Matrix4d invertTranslation(Matrix4d dest) {
        if (dest != this)
            dest.set(this);
        dest._m30(-m30)
        ._m31(-m31)
        ._m32(-m32)
        ._properties(PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
        return dest;
    }
    private Matrix4d invertOrthonormal(Matrix4d dest) {
        double nm30 = -(m00 * m30 + m01 * m31 + m02 * m32);
        double nm31 = -(m10 * m30 + m11 * m31 + m12 * m32);
        double nm32 = -(m20 * m30 + m21 * m31 + m22 * m32);
        double m01 = this.m01;
        double m02 = this.m02;
        double m12 = this.m12;
        dest._m00(m00)
        ._m01(m10)
        ._m02(m20)
        ._m03(0.0)
        ._m10(m01)
        ._m11(m11)
        ._m12(m21)
        ._m13(0.0)
        ._m20(m02)
        ._m21(m12)
        ._m22(m22)
        ._m23(0.0)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return dest;
    }
    private Matrix4d invertGeneric(Matrix4d dest) {
        if (this != dest)
            return invertGenericNonThis(dest);
        return invertGenericThis(dest);
    }
    private Matrix4d invertGenericNonThis(Matrix4d dest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double c = m00 * m13 - m03 * m10;
        double d = m01 * m12 - m02 * m11;
        double e = m01 * m13 - m03 * m11;
        double f = m02 * m13 - m03 * m12;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double i = m20 * m33 - m23 * m30;
        double j = m21 * m32 - m22 * m31;
        double k = m21 * m33 - m23 * m31;
        double l = m22 * m33 - m23 * m32;
        double det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0 / det;
        return dest
        ._m00(Math.fma( m11, l, Math.fma(-m12, k,  m13 * j)) * det)
        ._m01(Math.fma(-m01, l, Math.fma( m02, k, -m03 * j)) * det)
        ._m02(Math.fma( m31, f, Math.fma(-m32, e,  m33 * d)) * det)
        ._m03(Math.fma(-m21, f, Math.fma( m22, e, -m23 * d)) * det)
        ._m10(Math.fma(-m10, l, Math.fma( m12, i, -m13 * h)) * det)
        ._m11(Math.fma( m00, l, Math.fma(-m02, i,  m03 * h)) * det)
        ._m12(Math.fma(-m30, f, Math.fma( m32, c, -m33 * b)) * det)
        ._m13(Math.fma( m20, f, Math.fma(-m22, c,  m23 * b)) * det)
        ._m20(Math.fma( m10, k, Math.fma(-m11, i,  m13 * g)) * det)
        ._m21(Math.fma(-m00, k, Math.fma( m01, i, -m03 * g)) * det)
        ._m22(Math.fma( m30, e, Math.fma(-m31, c,  m33 * a)) * det)
        ._m23(Math.fma(-m20, e, Math.fma( m21, c, -m23 * a)) * det)
        ._m30(Math.fma(-m10, j, Math.fma( m11, h, -m12 * g)) * det)
        ._m31(Math.fma( m00, j, Math.fma(-m01, h,  m02 * g)) * det)
        ._m32(Math.fma(-m30, d, Math.fma( m31, b, -m32 * a)) * det)
        ._m33(Math.fma( m20, d, Math.fma(-m21, b,  m22 * a)) * det)
        ._properties(PROPERTY_UNKNOWN);
    }
    private Matrix4d invertGenericThis(Matrix4d dest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double c = m00 * m13 - m03 * m10;
        double d = m01 * m12 - m02 * m11;
        double e = m01 * m13 - m03 * m11;
        double f = m02 * m13 - m03 * m12;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double i = m20 * m33 - m23 * m30;
        double j = m21 * m32 - m22 * m31;
        double k = m21 * m33 - m23 * m31;
        double l = m22 * m33 - m23 * m32;
        double det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0 / det;
        double nm00 = Math.fma( m11, l, Math.fma(-m12, k,  m13 * j)) * det;
        double nm01 = Math.fma(-m01, l, Math.fma( m02, k, -m03 * j)) * det;
        double nm02 = Math.fma( m31, f, Math.fma(-m32, e,  m33 * d)) * det;
        double nm03 = Math.fma(-m21, f, Math.fma( m22, e, -m23 * d)) * det;
        double nm10 = Math.fma(-m10, l, Math.fma( m12, i, -m13 * h)) * det;
        double nm11 = Math.fma( m00, l, Math.fma(-m02, i,  m03 * h)) * det;
        double nm12 = Math.fma(-m30, f, Math.fma( m32, c, -m33 * b)) * det;
        double nm13 = Math.fma( m20, f, Math.fma(-m22, c,  m23 * b)) * det;
        double nm20 = Math.fma( m10, k, Math.fma(-m11, i,  m13 * g)) * det;
        double nm21 = Math.fma(-m00, k, Math.fma( m01, i, -m03 * g)) * det;
        double nm22 = Math.fma( m30, e, Math.fma(-m31, c,  m33 * a)) * det;
        double nm23 = Math.fma(-m20, e, Math.fma( m21, c, -m23 * a)) * det;
        double nm30 = Math.fma(-m10, j, Math.fma( m11, h, -m12 * g)) * det;
        double nm31 = Math.fma( m00, j, Math.fma(-m01, h,  m02 * g)) * det;
        double nm32 = Math.fma(-m30, d, Math.fma( m31, b, -m32 * a)) * det;
        double nm33 = Math.fma( m20, d, Math.fma(-m21, b,  m22 * a)) * det;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d invertPerspective(Matrix4d dest) {
        double a =  1.0 / (m00 * m11);
        double l = -1.0 / (m23 * m32);
        dest.set(m11 * a, 0, 0, 0,
                 0, m00 * a, 0, 0,
                 0, 0, 0, -m23 * l,
                 0, 0, -m32 * l, m22 * l);
        return dest;
    }
    public Matrix4d invertPerspective() {
        return invertPerspective(this);
    }
    public Matrix4d invertFrustum(Matrix4d dest) {
        double invM00 = 1.0 / m00;
        double invM11 = 1.0 / m11;
        double invM23 = 1.0 / m23;
        double invM32 = 1.0 / m32;
        dest.set(invM00, 0, 0, 0,
                 0, invM11, 0, 0,
                 0, 0, 0, invM32,
                 -m20 * invM00 * invM23, -m21 * invM11 * invM23, invM23, -m22 * invM23 * invM32);
        return dest;
    }
    public Matrix4d invertFrustum() {
        return invertFrustum(this);
    }
    public Matrix4d invertOrtho(Matrix4d dest) {
        double invM00 = 1.0 / m00;
        double invM11 = 1.0 / m11;
        double invM22 = 1.0 / m22;
        dest.set(invM00, 0, 0, 0,
                 0, invM11, 0, 0,
                 0, 0, invM22, 0,
                 -m30 * invM00, -m31 * invM11, -m32 * invM22, 1)
        ._properties(PROPERTY_AFFINE | (this.properties & PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d invertOrtho() {
        return invertOrtho(this);
    }
    public Matrix4d invertPerspectiveView(Matrix4dc view, Matrix4d dest) {
        double a =  1.0 / (m00 * m11);
        double l = -1.0 / (m23 * m32);
        double pm00 =  m11 * a;
        double pm11 =  m00 * a;
        double pm23 = -m23 * l;
        double pm32 = -m32 * l;
        double pm33 =  m22 * l;
        double vm30 = -view.m00() * view.m30() - view.m01() * view.m31() - view.m02() * view.m32();
        double vm31 = -view.m10() * view.m30() - view.m11() * view.m31() - view.m12() * view.m32();
        double vm32 = -view.m20() * view.m30() - view.m21() * view.m31() - view.m22() * view.m32();
        double nm10 = view.m01() * pm11;
        double nm30 = view.m02() * pm32 + vm30 * pm33;
        double nm31 = view.m12() * pm32 + vm31 * pm33;
        double nm32 = view.m22() * pm32 + vm32 * pm33;
        return dest
        ._m00(view.m00() * pm00)
        ._m01(view.m10() * pm00)
        ._m02(view.m20() * pm00)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(view.m11() * pm11)
        ._m12(view.m21() * pm11)
        ._m13(0.0)
        ._m20(vm30 * pm23)
        ._m21(vm31 * pm23)
        ._m22(vm32 * pm23)
        ._m23(pm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(pm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d invertPerspectiveView(Matrix4x3dc view, Matrix4d dest) {
        double a =  1.0 / (m00 * m11);
        double l = -1.0 / (m23 * m32);
        double pm00 =  m11 * a;
        double pm11 =  m00 * a;
        double pm23 = -m23 * l;
        double pm32 = -m32 * l;
        double pm33 =  m22 * l;
        double vm30 = -view.m00() * view.m30() - view.m01() * view.m31() - view.m02() * view.m32();
        double vm31 = -view.m10() * view.m30() - view.m11() * view.m31() - view.m12() * view.m32();
        double vm32 = -view.m20() * view.m30() - view.m21() * view.m31() - view.m22() * view.m32();
        return dest
        ._m00(view.m00() * pm00)
        ._m01(view.m10() * pm00)
        ._m02(view.m20() * pm00)
        ._m03(0.0)
        ._m10(view.m01() * pm11)
        ._m11(view.m11() * pm11)
        ._m12(view.m21() * pm11)
        ._m13(0.0)
        ._m20(vm30 * pm23)
        ._m21(vm31 * pm23)
        ._m22(vm32 * pm23)
        ._m23(pm23)
        ._m30(view.m02() * pm32 + vm30 * pm33)
        ._m31(view.m12() * pm32 + vm31 * pm33)
        ._m32(view.m22() * pm32 + vm32 * pm33)
        ._m33(pm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d invertAffine(Matrix4d dest) {
        double m11m00 = m00 * m11, m10m01 = m01 * m10, m10m02 = m02 * m10;
        double m12m00 = m00 * m12, m12m01 = m01 * m12, m11m02 = m02 * m11;
        double s = 1.0 / ((m11m00 - m10m01) * m22 + (m10m02 - m12m00) * m21 + (m12m01 - m11m02) * m20);
        double m10m22 = m10 * m22, m10m21 = m10 * m21, m11m22 = m11 * m22;
        double m11m20 = m11 * m20, m12m21 = m12 * m21, m12m20 = m12 * m20;
        double m20m02 = m20 * m02, m20m01 = m20 * m01, m21m02 = m21 * m02;
        double m21m00 = m21 * m00, m22m01 = m22 * m01, m22m00 = m22 * m00;
        double nm00 = (m11m22 - m12m21) * s;
        double nm01 = (m21m02 - m22m01) * s;
        double nm02 = (m12m01 - m11m02) * s;
        double nm10 = (m12m20 - m10m22) * s;
        double nm11 = (m22m00 - m20m02) * s;
        double nm12 = (m10m02 - m12m00) * s;
        double nm20 = (m10m21 - m11m20) * s;
        double nm21 = (m20m01 - m21m00) * s;
        double nm22 = (m11m00 - m10m01) * s;
        double nm30 = (m10m22 * m31 - m10m21 * m32 + m11m20 * m32 - m11m22 * m30 + m12m21 * m30 - m12m20 * m31) * s;
        double nm31 = (m20m02 * m31 - m20m01 * m32 + m21m00 * m32 - m21m02 * m30 + m22m01 * m30 - m22m00 * m31) * s;
        double nm32 = (m11m02 * m30 - m12m01 * m30 + m12m00 * m31 - m10m02 * m31 + m10m01 * m32 - m11m00 * m32) * s;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(1.0)
        ._properties(PROPERTY_AFFINE);
        return dest;
    }
    public Matrix4d invertAffine() {
        return invertAffine(this);
    }
    public Matrix4d transpose() {
        return transpose(this);
    }
    public Matrix4d transpose(Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if (this != dest)
            return transposeNonThisGeneric(dest);
        return transposeThisGeneric(dest);
    }
    private Matrix4d transposeNonThisGeneric(Matrix4d dest) {
        return dest
        ._m00(m00)
        ._m01(m10)
        ._m02(m20)
        ._m03(m30)
        ._m10(m01)
        ._m11(m11)
        ._m12(m21)
        ._m13(m31)
        ._m20(m02)
        ._m21(m12)
        ._m22(m22)
        ._m23(m32)
        ._m30(m03)
        ._m31(m13)
        ._m32(m23)
        ._m33(m33)
        ._properties(PROPERTY_UNKNOWN);
    }
    private Matrix4d transposeThisGeneric(Matrix4d dest) {
        double nm10 = m01;
        double nm20 = m02;
        double nm21 = m12;
        double nm30 = m03;
        double nm31 = m13;
        double nm32 = m23;
        return dest
        ._m01(m10)
        ._m02(m20)
        ._m03(m30)
        ._m10(nm10)
        ._m12(m21)
        ._m13(m31)
        ._m20(nm20)
        ._m21(nm21)
        ._m23(m32)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d transpose3x3() {
        return transpose3x3(this);
    }
    public Matrix4d transpose3x3(Matrix4d dest) {
        double nm10 = m01, nm20 = m02, nm21 = m12;
        return dest
        ._m00(m00)
        ._m01(m10)
        ._m02(m20)
        ._m10(nm10)
        ._m11(m11)
        ._m12(m21)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(m22)
        ._properties(this.properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix3d transpose3x3(Matrix3d dest) {
        return dest
        ._m00(m00)
        ._m01(m10)
        ._m02(m20)
        ._m10(m01)
        ._m11(m11)
        ._m12(m21)
        ._m20(m02)
        ._m21(m12)
        ._m22(m22);
    }
    public Matrix4d translation(double x, double y, double z) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        return this.
        _m30(x).
        _m31(y).
        _m32(z).
        _m33(1.0).
        _properties(PROPERTY_AFFINE | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL);
    }
    public Matrix4d translation(Vector3fc offset) {
        return translation(offset.x(), offset.y(), offset.z());
    }
    public Matrix4d translation(Vector3dc offset) {
        return translation(offset.x(), offset.y(), offset.z());
    }
    public Matrix4d setTranslation(double x, double y, double z) {
        _m30(x).
        _m31(y).
        _m32(z).
        properties &= ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY);
        return this;
    }
    public Matrix4d setTranslation(Vector3dc xyz) {
        return setTranslation(xyz.x(), xyz.y(), xyz.z());
    }
    public Vector3d getTranslation(Vector3d dest) {
        dest.x = m30;
        dest.y = m31;
        dest.z = m32;
        return dest;
    }
    public Vector3d getScale(Vector3d dest) {
        dest.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
        dest.y = Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
        dest.z = Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
        return dest;
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + " " + Runtime.format(m20, formatter) + " " + Runtime.format(m30, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + " " + Runtime.format(m21, formatter) + " " + Runtime.format(m31, formatter) + "\n"
             + Runtime.format(m02, formatter) + " " + Runtime.format(m12, formatter) + " " + Runtime.format(m22, formatter) + " " + Runtime.format(m32, formatter) + "\n"
             + Runtime.format(m03, formatter) + " " + Runtime.format(m13, formatter) + " " + Runtime.format(m23, formatter) + " " + Runtime.format(m33, formatter) + "\n";
    }
    public Matrix4d get(Matrix4d dest) {
        return dest.set(this);
    }
    public Matrix4x3d get4x3(Matrix4x3d dest) {
        return dest.set(this);
    }
    public Matrix3d get3x3(Matrix3d dest) {
        return dest.set(this);
    }
    public Quaternionf getUnnormalizedRotation(Quaternionf dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaternionf getNormalizedRotation(Quaternionf dest) {
        return dest.setFromNormalized(this);
    }
    public Quaterniond getUnnormalizedRotation(Quaterniond dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaterniond getNormalizedRotation(Quaterniond dest) {
        return dest.setFromNormalized(this);
    }
    public DoubleBuffer get(DoubleBuffer dest) {
        MemUtil.INSTANCE.put(this, dest.position(), dest);
        return dest;
    }
    public DoubleBuffer get(int index, DoubleBuffer dest) {
        MemUtil.INSTANCE.put(this, index, dest);
        return dest;
    }
    public FloatBuffer get(FloatBuffer dest) {
        MemUtil.INSTANCE.putf(this, dest.position(), dest);
        return dest;
    }
    public FloatBuffer get(int index, FloatBuffer dest) {
        MemUtil.INSTANCE.putf(this, index, dest);
        return dest;
    }
    public ByteBuffer get(ByteBuffer dest) {
        MemUtil.INSTANCE.put(this, dest.position(), dest);
        return dest;
    }
    public ByteBuffer get(int index, ByteBuffer dest) {
        MemUtil.INSTANCE.put(this, index, dest);
        return dest;
    }
    public ByteBuffer getFloats(ByteBuffer dest) {
        MemUtil.INSTANCE.putf(this, dest.position(), dest);
        return dest;
    }
    public ByteBuffer getFloats(int index, ByteBuffer dest) {
        MemUtil.INSTANCE.putf(this, index, dest);
        return dest;
    }
    public Matrix4dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix4dc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public double[] get(double[] dest, int offset) {
        dest[offset+0]  = m00;
        dest[offset+1]  = m01;
        dest[offset+2]  = m02;
        dest[offset+3]  = m03;
        dest[offset+4]  = m10;
        dest[offset+5]  = m11;
        dest[offset+6]  = m12;
        dest[offset+7]  = m13;
        dest[offset+8]  = m20;
        dest[offset+9]  = m21;
        dest[offset+10] = m22;
        dest[offset+11] = m23;
        dest[offset+12] = m30;
        dest[offset+13] = m31;
        dest[offset+14] = m32;
        dest[offset+15] = m33;
        return dest;
    }
    public double[] get(double[] dest) {
        return get(dest, 0);
    }
    public float[] get(float[] dest, int offset) {
        dest[offset+0]  = (float)m00;
        dest[offset+1]  = (float)m01;
        dest[offset+2]  = (float)m02;
        dest[offset+3]  = (float)m03;
        dest[offset+4]  = (float)m10;
        dest[offset+5]  = (float)m11;
        dest[offset+6]  = (float)m12;
        dest[offset+7]  = (float)m13;
        dest[offset+8]  = (float)m20;
        dest[offset+9]  = (float)m21;
        dest[offset+10] = (float)m22;
        dest[offset+11] = (float)m23;
        dest[offset+12] = (float)m30;
        dest[offset+13] = (float)m31;
        dest[offset+14] = (float)m32;
        dest[offset+15] = (float)m33;
        return dest;
    }
    public float[] get(float[] dest) {
        return get(dest, 0);
    }
    public DoubleBuffer getTransposed(DoubleBuffer dest) {
        MemUtil.INSTANCE.putTransposed(this, dest.position(), dest);
        return dest;
    }
    public DoubleBuffer getTransposed(int index, DoubleBuffer dest) {
        MemUtil.INSTANCE.putTransposed(this, index, dest);
        return dest;
    }
    public FloatBuffer getTransposed(FloatBuffer dest) {
        MemUtil.INSTANCE.putfTransposed(this, dest.position(), dest);
        return dest;
    }
    public FloatBuffer getTransposed(int index, FloatBuffer dest) {
        MemUtil.INSTANCE.putfTransposed(this, index, dest);
        return dest;
    }
    public ByteBuffer getTransposed(ByteBuffer dest) {
        MemUtil.INSTANCE.putTransposed(this, dest.position(), dest);
        return dest;
    }
    public ByteBuffer getTransposed(int index, ByteBuffer dest) {
        MemUtil.INSTANCE.putTransposed(this, index, dest);
        return dest;
    }
    public DoubleBuffer get4x3Transposed(DoubleBuffer dest) {
        MemUtil.INSTANCE.put4x3Transposed(this, dest.position(), dest);
        return dest;
    }
    public DoubleBuffer get4x3Transposed(int index, DoubleBuffer dest) {
        MemUtil.INSTANCE.put4x3Transposed(this, index, dest);
        return dest;
    }
    public ByteBuffer get4x3Transposed(ByteBuffer dest) {
        MemUtil.INSTANCE.put4x3Transposed(this, dest.position(), dest);
        return dest;
    }
    public ByteBuffer get4x3Transposed(int index, ByteBuffer dest) {
        MemUtil.INSTANCE.put4x3Transposed(this, index, dest);
        return dest;
    }
    public ByteBuffer getTransposedFloats(ByteBuffer buffer) {
        return getTransposedFloats(buffer.position(), buffer);
    }
    public ByteBuffer getTransposedFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public Matrix4d zero() {
        return
        _m00(0.0).
        _m01(0.0).
        _m02(0.0).
        _m03(0.0).
        _m10(0.0).
        _m11(0.0).
        _m12(0.0).
        _m13(0.0).
        _m20(0.0).
        _m21(0.0).
        _m22(0.0).
        _m23(0.0).
        _m30(0.0).
        _m31(0.0).
        _m32(0.0).
        _m33(0.0).
        _properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d scaling(double factor) {
        return scaling(factor, factor, factor);
    }
    public Matrix4d scaling(double x, double y, double z) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            identity();
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        _m00(x).
        _m11(y).
        _m22(z).
        properties = PROPERTY_AFFINE | (one ? PROPERTY_ORTHONORMAL : 0);
        return this;
    }
    public Matrix4d scaling(Vector3dc xyz) {
        return scaling(xyz.x(), xyz.y(), xyz.z());
    }
    public Matrix4d rotation(double angle, double x, double y, double z) {
        if (y == 0.0 && z == 0.0 && Math.absEqualsOne(x))
            return rotationX(x * angle);
        else if (x == 0.0 && z == 0.0 && Math.absEqualsOne(y))
            return rotationY(y * angle);
        else if (x == 0.0 && y == 0.0 && Math.absEqualsOne(z))
            return rotationZ(z * angle);
        return rotationInternal(angle, x, y, z);
    }
    private Matrix4d rotationInternal(double angle, double x, double y, double z) {
        double sin = Math.sin(angle);
        double cos = Math.cosFromSin(sin, angle);
        double C = 1.0 - cos;
        double xy = x * y, xz = x * z, yz = y * z;
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        _m00(cos + x * x * C).
        _m10(xy * C - z * sin).
        _m20(xz * C + y * sin).
        _m01(xy * C + z * sin).
        _m11(cos + y * y * C).
        _m21(yz * C - x * sin).
        _m02(xz * C - y * sin).
        _m12(yz * C + x * sin).
        _m22(cos + z * z * C).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationX(double ang) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        _m11(cos).
        _m12(sin).
        _m21(-sin).
        _m22(cos).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationY(double ang) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        _m00(cos).
        _m02(-sin).
        _m20(sin).
        _m22(cos).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationZ(double ang) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        _m00(cos).
        _m01(sin).
        _m10(-sin).
        _m11(cos).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationTowardsXY(double dirX, double dirY) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        this.m00 = dirY;
        this.m01 = dirX;
        this.m10 = -dirX;
        this.m11 = dirY;
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationXYZ(double angleX, double angleY, double angleZ) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinX = -sinX;
        double m_sinY = -sinY;
        double m_sinZ = -sinZ;
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        double nm11 = cosX;
        double nm12 = sinX;
        double nm21 = m_sinX;
        double nm22 = cosX;
        double nm00 = cosY;
        double nm01 = nm21 * m_sinY;
        double nm02 = nm22 * m_sinY;
        _m20(sinY).
        _m21(nm21 * cosY).
        _m22(nm22 * cosY).
        _m00(nm00 * cosZ).
        _m01(nm01 * cosZ + nm11 * sinZ).
        _m02(nm02 * cosZ + nm12 * sinZ).
        _m10(nm00 * m_sinZ).
        _m11(nm01 * m_sinZ + nm11 * cosZ).
        _m12(nm02 * m_sinZ + nm12 * cosZ).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationZYX(double angleZ, double angleY, double angleX) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinZ = -sinZ;
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        double nm00 = cosZ;
        double nm01 = sinZ;
        double nm10 = m_sinZ;
        double nm11 = cosZ;
        double nm20 = nm00 * sinY;
        double nm21 = nm01 * sinY;
        double nm22 = cosY;
        _m00(nm00 * cosY).
        _m01(nm01 * cosY).
        _m02(m_sinY).
        _m10(nm10 * cosX + nm20 * sinX).
        _m11(nm11 * cosX + nm21 * sinX).
        _m12(nm22 * sinX).
        _m20(nm10 * m_sinX + nm20 * cosX).
        _m21(nm11 * m_sinX + nm21 * cosX).
        _m22(nm22 * cosX).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotationYXZ(double angleY, double angleX, double angleZ) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double m_sinZ = -sinZ;
        double nm00 = cosY;
        double nm02 = m_sinY;
        double nm20 = sinY;
        double nm22 = cosY;
        double nm10 = nm20 * sinX;
        double nm11 = cosX;
        double nm12 = nm22 * sinX;
        _m20(nm20 * cosX).
        _m21(m_sinX).
        _m22(nm22 * cosX).
        _m23(0.0).
        _m00(nm00 * cosZ + nm10 * sinZ).
        _m01(nm11 * sinZ).
        _m02(nm02 * cosZ + nm12 * sinZ).
        _m03(0.0).
        _m10(nm00 * m_sinZ + nm10 * cosZ).
        _m11(nm11 * cosZ).
        _m12(nm02 * m_sinZ + nm12 * cosZ).
        _m13(0.0).
        _m30(0.0).
        _m31(0.0).
        _m32(0.0).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d setRotationXYZ(double angleX, double angleY, double angleZ) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinX = -sinX;
        double m_sinY = -sinY;
        double m_sinZ = -sinZ;
        double nm11 = cosX;
        double nm12 = sinX;
        double nm21 = m_sinX;
        double nm22 = cosX;
        double nm00 = cosY;
        double nm01 = nm21 * m_sinY;
        double nm02 = nm22 * m_sinY;
        _m20(sinY).
        _m21(nm21 * cosY).
        _m22(nm22 * cosY).
        _m00(nm00 * cosZ).
        _m01(nm01 * cosZ + nm11 * sinZ).
        _m02(nm02 * cosZ + nm12 * sinZ).
        _m10(nm00 * m_sinZ).
        _m11(nm01 * m_sinZ + nm11 * cosZ).
        _m12(nm02 * m_sinZ + nm12 * cosZ).
        properties &= ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d setRotationZYX(double angleZ, double angleY, double angleX) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinZ = -sinZ;
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double nm00 = cosZ;
        double nm01 = sinZ;
        double nm10 = m_sinZ;
        double nm11 = cosZ;
        double nm20 = nm00 * sinY;
        double nm21 = nm01 * sinY;
        double nm22 = cosY;
        _m00(nm00 * cosY).
        _m01(nm01 * cosY).
        _m02(m_sinY).
        _m10(nm10 * cosX + nm20 * sinX).
        _m11(nm11 * cosX + nm21 * sinX).
        _m12(nm22 * sinX).
        _m20(nm10 * m_sinX + nm20 * cosX).
        _m21(nm11 * m_sinX + nm21 * cosX).
        _m22(nm22 * cosX).
        properties &= ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d setRotationYXZ(double angleY, double angleX, double angleZ) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double m_sinZ = -sinZ;
        double nm00 = cosY;
        double nm02 = m_sinY;
        double nm20 = sinY;
        double nm22 = cosY;
        double nm10 = nm20 * sinX;
        double nm11 = cosX;
        double nm12 = nm22 * sinX;
        _m20(nm20 * cosX).
        _m21(m_sinX).
        _m22(nm22 * cosX).
        _m00(nm00 * cosZ + nm10 * sinZ).
        _m01(nm11 * sinZ).
        _m02(nm02 * cosZ + nm12 * sinZ).
        _m10(nm00 * m_sinZ + nm10 * cosZ).
        _m11(nm11 * cosZ).
        _m12(nm02 * m_sinZ + nm12 * cosZ).
        properties &= ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION);
        return this;
    }
    public Matrix4d rotation(double angle, Vector3dc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4d rotation(double angle, Vector3fc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Vector4d transform(Vector4d v) {
        return v.mul(this);
    }
    public Vector4d transform(Vector4dc v, Vector4d dest) {
        return v.mul(this, dest);
    }
    public Vector4d transform(double x, double y, double z, double w, Vector4d dest) {
        return dest.set(m00 * x + m10 * y + m20 * z + m30 * w,
                        m01 * x + m11 * y + m21 * z + m31 * w,
                        m02 * x + m12 * y + m22 * z + m32 * w,
                        m03 * x + m13 * y + m23 * z + m33 * w);
    }
    public Vector4d transformTranspose(Vector4d v) {
        return v.mulTranspose(this);
    }
    public Vector4d transformTranspose(Vector4dc v, Vector4d dest) {
        return v.mulTranspose(this, dest);
    }
    public Vector4d transformTranspose(double x, double y, double z, double w, Vector4d dest) {
       return dest.set(x, y, z, w).mulTranspose(this);
    }
    public Vector4d transformProject(Vector4d v) {
        return v.mulProject(this);
    }
    public Vector4d transformProject(Vector4dc v, Vector4d dest) {
        return v.mulProject(this, dest);
    }
    public Vector4d transformProject(double x, double y, double z, double w, Vector4d dest) {
        double invW = 1.0 / (m03 * x + m13 * y + m23 * z + m33 * w);
        return dest.set((m00 * x + m10 * y + m20 * z + m30 * w) * invW,
                        (m01 * x + m11 * y + m21 * z + m31 * w) * invW,
                        (m02 * x + m12 * y + m22 * z + m32 * w) * invW,
                        1.0);
    }
    public Vector3d transformProject(Vector3d v) {
        return v.mulProject(this);
    }
    public Vector3d transformProject(Vector3dc v, Vector3d dest) {
        return v.mulProject(this, dest);
    }
    public Vector3d transformProject(double x, double y, double z, Vector3d dest) {
        double invW = 1.0 / (m03 * x + m13 * y + m23 * z + m33);
        return dest.set((m00 * x + m10 * y + m20 * z + m30) * invW,
                        (m01 * x + m11 * y + m21 * z + m31) * invW,
                        (m02 * x + m12 * y + m22 * z + m32) * invW);
    }
    public Vector3d transformProject(Vector4dc v, Vector3d dest) {
        return v.mulProject(this, dest);
    }
    public Vector3d transformProject(double x, double y, double z, double w, Vector3d dest) {
        dest.x = x;
        dest.y = y;
        dest.z = z;
        return dest.mulProject(this, w, dest);
    }
    public Vector3d transformPosition(Vector3d dest) {
        return dest.set(m00 * dest.x + m10 * dest.y + m20 * dest.z + m30,
                        m01 * dest.x + m11 * dest.y + m21 * dest.z + m31,
                        m02 * dest.x + m12 * dest.y + m22 * dest.z + m32);
    }
    public Vector3d transformPosition(Vector3dc v, Vector3d dest) {
        return transformPosition(v.x(), v.y(), v.z(), dest);
    }
    public Vector3d transformPosition(double x, double y, double z, Vector3d dest) {
        return dest.set(m00 * x + m10 * y + m20 * z + m30,
                        m01 * x + m11 * y + m21 * z + m31,
                        m02 * x + m12 * y + m22 * z + m32);
    }
    public Vector3d transformDirection(Vector3d dest) {
        return dest.set(m00 * dest.x + m10 * dest.y + m20 * dest.z,
                        m01 * dest.x + m11 * dest.y + m21 * dest.z,
                        m02 * dest.x + m12 * dest.y + m22 * dest.z);
    }
    public Vector3d transformDirection(Vector3dc v, Vector3d dest) {
        return dest.set(m00 * v.x() + m10 * v.y() + m20 * v.z(),
                        m01 * v.x() + m11 * v.y() + m21 * v.z(),
                        m02 * v.x() + m12 * v.y() + m22 * v.z());
    }
    public Vector3d transformDirection(double x, double y, double z, Vector3d dest) {
        return dest.set(m00 * x + m10 * y + m20 * z,
                        m01 * x + m11 * y + m21 * z,
                        m02 * x + m12 * y + m22 * z);
    }
    public Vector3f transformDirection(Vector3f dest) {
        return dest.mulDirection(this);
    }
    public Vector3f transformDirection(Vector3fc v, Vector3f dest) {
        return v.mulDirection(this, dest);
    }
    public Vector3f transformDirection(double x, double y, double z, Vector3f dest) {
        float rx = (float)(m00 * x + m10 * y + m20 * z);
        float ry = (float)(m01 * x + m11 * y + m21 * z);
        float rz = (float)(m02 * x + m12 * y + m22 * z);
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4d transformAffine(Vector4d dest) {
        return dest.mulAffine(this, dest);
    }
    public Vector4d transformAffine(Vector4dc v, Vector4d dest) {
        return transformAffine(v.x(), v.y(), v.z(), v.w(), dest);
    }
    public Vector4d transformAffine(double x, double y, double z, double w, Vector4d dest) {
        double rx = m00 * x + m10 * y + m20 * z + m30 * w;
        double ry = m01 * x + m11 * y + m21 * z + m31 * w;
        double rz = m02 * x + m12 * y + m22 * z + m32 * w;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = w;
        return dest;
    }
    public Matrix4d set3x3(Matrix3dc mat) {
        return
        _m00(mat.m00()).
        _m01(mat.m01()).
        _m02(mat.m02()).
        _m10(mat.m10()).
        _m11(mat.m11()).
        _m12(mat.m12()).
        _m20(mat.m20()).
        _m21(mat.m21()).
        _m22(mat.m22()).
        _properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d scale(Vector3dc xyz, Matrix4d dest) {
        return scale(xyz.x(), xyz.y(), xyz.z(), dest);
    }
    public Matrix4d scale(Vector3dc xyz) {
        return scale(xyz.x(), xyz.y(), xyz.z(), this);
    }
    public Matrix4d scale(double x, double y, double z, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.scaling(x, y, z);
        return scaleGeneric(x, y, z, dest);
    }
    private Matrix4d scaleGeneric(double x, double y, double z, Matrix4d dest) {
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        dest._m00(m00 * x)
        ._m01(m01 * x)
        ._m02(m02 * x)
        ._m03(m03 * x)
        ._m10(m10 * y)
        ._m11(m11 * y)
        ._m12(m12 * y)
        ._m13(m13 * y)
        ._m20(m20 * z)
        ._m21(m21 * z)
        ._m22(m22 * z)
        ._m23(m23 * z)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties
                & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | (one ? 0 : PROPERTY_ORTHONORMAL)));
        return dest;
    }
    public Matrix4d scale(double x, double y, double z) {
        return scale(x, y, z, this);
    }
    public Matrix4d scale(double xyz, Matrix4d dest) {
        return scale(xyz, xyz, xyz, dest);
    }
    public Matrix4d scale(double xyz) {
        return scale(xyz, xyz, xyz);
    }
    public Matrix4d scaleXY(double x, double y, Matrix4d dest) {
        return scale(x, y, 1.0, dest);
    }
    public Matrix4d scaleXY(double x, double y) {
        return scale(x, y, 1.0);
    }
    public Matrix4d scaleAround(double sx, double sy, double sz, double ox, double oy, double oz, Matrix4d dest) {
        double nm30 = m00 * ox + m10 * oy + m20 * oz + m30;
        double nm31 = m01 * ox + m11 * oy + m21 * oz + m31;
        double nm32 = m02 * ox + m12 * oy + m22 * oz + m32;
        double nm33 = m03 * ox + m13 * oy + m23 * oz + m33;
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        return dest
        ._m00(m00 * sx)
        ._m01(m01 * sx)
        ._m02(m02 * sx)
        ._m03(m03 * sx)
        ._m10(m10 * sy)
        ._m11(m11 * sy)
        ._m12(m12 * sy)
        ._m13(m13 * sy)
        ._m20(m20 * sz)
        ._m21(m21 * sz)
        ._m22(m22 * sz)
        ._m23(m23 * sz)
        ._m30(-dest.m00 * ox - dest.m10 * oy - dest.m20 * oz + nm30)
        ._m31(-dest.m01 * ox - dest.m11 * oy - dest.m21 * oz + nm31)
        ._m32(-dest.m02 * ox - dest.m12 * oy - dest.m22 * oz + nm32)
        ._m33(-dest.m03 * ox - dest.m13 * oy - dest.m23 * oz + nm33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
            | (one ? 0 : PROPERTY_ORTHONORMAL)));
    }
    public Matrix4d scaleAround(double sx, double sy, double sz, double ox, double oy, double oz) {
        return scaleAround(sx, sy, sz, ox, oy, oz, this);
    }
    public Matrix4d scaleAround(double factor, double ox, double oy, double oz) {
        return scaleAround(factor, factor, factor, ox, oy, oz, this);
    }
    public Matrix4d scaleAround(double factor, double ox, double oy, double oz, Matrix4d dest) {
        return scaleAround(factor, factor, factor, ox, oy, oz, dest);
    }
    public Matrix4d scaleLocal(double x, double y, double z, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.scaling(x, y, z);
        return scaleLocalGeneric(x, y, z, dest);
    }
    private Matrix4d scaleLocalGeneric(double x, double y, double z, Matrix4d dest) {
        double nm00 = x * m00;
        double nm01 = y * m01;
        double nm02 = z * m02;
        double nm10 = x * m10;
        double nm11 = y * m11;
        double nm12 = z * m12;
        double nm20 = x * m20;
        double nm21 = y * m21;
        double nm22 = z * m22;
        double nm30 = x * m30;
        double nm31 = y * m31;
        double nm32 = z * m32;
        boolean one = Math.absEqualsOne(x) && Math.absEqualsOne(y) && Math.absEqualsOne(z);
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
                | (one ? 0 : PROPERTY_ORTHONORMAL)));
        return dest;
    }
    public Matrix4d scaleLocal(double xyz, Matrix4d dest) {
        return scaleLocal(xyz, xyz, xyz, dest);
    }
    public Matrix4d scaleLocal(double xyz) {
        return scaleLocal(xyz, this);
    }
    public Matrix4d scaleLocal(double x, double y, double z) {
        return scaleLocal(x, y, z, this);
    }
    public Matrix4d scaleAroundLocal(double sx, double sy, double sz, double ox, double oy, double oz, Matrix4d dest) {
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        dest._m00(sx * (m00 - ox * m03) + ox * m03)
        ._m01(sy * (m01 - oy * m03) + oy * m03)
        ._m02(sz * (m02 - oz * m03) + oz * m03)
        ._m03(m03)
        ._m10(sx * (m10 - ox * m13) + ox * m13)
        ._m11(sy * (m11 - oy * m13) + oy * m13)
        ._m12(sz * (m12 - oz * m13) + oz * m13)
        ._m13(m13)
        ._m20(sx * (m20 - ox * m23) + ox * m23)
        ._m21(sy * (m21 - oy * m23) + oy * m23)
        ._m22(sz * (m22 - oz * m23) + oz * m23)
        ._m23(m23)
        ._m30(sx * (m30 - ox * m33) + ox * m33)
        ._m31(sy * (m31 - oy * m33) + oy * m33)
        ._m32(sz * (m32 - oz * m33) + oz * m33)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
                | (one ? 0 : PROPERTY_ORTHONORMAL)));
        return dest;
    }
    public Matrix4d scaleAroundLocal(double sx, double sy, double sz, double ox, double oy, double oz) {
        return scaleAroundLocal(sx, sy, sz, ox, oy, oz, this);
    }
    public Matrix4d scaleAroundLocal(double factor, double ox, double oy, double oz) {
        return scaleAroundLocal(factor, factor, factor, ox, oy, oz, this);
    }
    public Matrix4d scaleAroundLocal(double factor, double ox, double oy, double oz, Matrix4d dest) {
        return scaleAroundLocal(factor, factor, factor, ox, oy, oz, dest);
    }
    public Matrix4d rotate(double ang, double x, double y, double z, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(ang, x, y, z);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(ang, x, y, z, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffine(ang, x, y, z, dest);
        return rotateGeneric(ang, x, y, z, dest);
    }
    private Matrix4d rotateGeneric(double ang, double x, double y, double z, Matrix4d dest) {
        if (y == 0.0 && z == 0.0 && Math.absEqualsOne(x))
            return rotateX(x * ang, dest);
        else if (x == 0.0 && z == 0.0 && Math.absEqualsOne(y))
            return rotateY(y * ang, dest);
        else if (x == 0.0 && y == 0.0 && Math.absEqualsOne(z))
            return rotateZ(z * ang, dest);
        return rotateGenericInternal(ang, x, y, z, dest);
    }
    private Matrix4d rotateGenericInternal(double ang, double x, double y, double z, Matrix4d dest) {
        double s = Math.sin(ang);
        double c = Math.cosFromSin(s, ang);
        double C = 1.0 - c;
        double xx = x * x, xy = x * y, xz = x * z;
        double yy = y * y, yz = y * z;
        double zz = z * z;
        double rm00 = xx * C + c;
        double rm01 = xy * C + z * s;
        double rm02 = xz * C - y * s;
        double rm10 = xy * C - z * s;
        double rm11 = yy * C + c;
        double rm12 = yz * C + x * s;
        double rm20 = xz * C + y * s;
        double rm21 = yz * C - x * s;
        double rm22 = zz * C + c;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotate(double ang, double x, double y, double z) {
        return rotate(ang, x, y, z, this);
    }
    public Matrix4d rotateTranslation(double ang, double x, double y, double z, Matrix4d dest) {
        double tx = m30, ty = m31, tz = m32;
        if (y == 0.0 && z == 0.0 && Math.absEqualsOne(x))
            return dest.rotationX(x * ang).setTranslation(tx, ty, tz);
        else if (x == 0.0 && z == 0.0 && Math.absEqualsOne(y))
            return dest.rotationY(y * ang).setTranslation(tx, ty, tz);
        else if (x == 0.0 && y == 0.0 && Math.absEqualsOne(z))
            return dest.rotationZ(z * ang).setTranslation(tx, ty, tz);
        return rotateTranslationInternal(ang, x, y, z, dest);
    }
    private Matrix4d rotateTranslationInternal(double ang, double x, double y, double z, Matrix4d dest) {
        double s = Math.sin(ang);
        double c = Math.cosFromSin(s, ang);
        double C = 1.0 - c;
        double xx = x * x, xy = x * y, xz = x * z;
        double yy = y * y, yz = y * z;
        double zz = z * z;
        double rm00 = xx * C + c;
        double rm01 = xy * C + z * s;
        double rm02 = xz * C - y * s;
        double rm10 = xy * C - z * s;
        double rm11 = yy * C + c;
        double rm12 = yz * C + x * s;
        double rm20 = xz * C + y * s;
        double rm21 = yz * C - x * s;
        double rm22 = zz * C + c;
        return dest
        ._m20(rm20)
        ._m21(rm21)
        ._m22(rm22)
        ._m23(0.0)
        ._m00(rm00)
        ._m01(rm01)
        ._m02(rm02)
        ._m03(0.0)
        ._m10(rm10)
        ._m11(rm11)
        ._m12(rm12)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(1.0)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
    }
    public Matrix4d rotateAffine(double ang, double x, double y, double z, Matrix4d dest) {
        if (y == 0.0 && z == 0.0 && Math.absEqualsOne(x))
            return rotateX(x * ang, dest);
        else if (x == 0.0 && z == 0.0 && Math.absEqualsOne(y))
            return rotateY(y * ang, dest);
        else if (x == 0.0 && y == 0.0 && Math.absEqualsOne(z))
            return rotateZ(z * ang, dest);
        return rotateAffineInternal(ang, x, y, z, dest);
    }
    private Matrix4d rotateAffineInternal(double ang, double x, double y, double z, Matrix4d dest) {
        double s = Math.sin(ang);
        double c = Math.cosFromSin(s, ang);
        double C = 1.0 - c;
        double xx = x * x, xy = x * y, xz = x * z;
        double yy = y * y, yz = y * z;
        double zz = z * z;
        double rm00 = xx * C + c;
        double rm01 = xy * C + z * s;
        double rm02 = xz * C - y * s;
        double rm10 = xy * C - z * s;
        double rm11 = yy * C + c;
        double rm12 = yz * C + x * s;
        double rm20 = xz * C + y * s;
        double rm21 = yz * C - x * s;
        double rm22 = zz * C + c;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(0.0)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAffine(double ang, double x, double y, double z) {
        return rotateAffine(ang, x, y, z, this);
    }
    public Matrix4d rotateAround(Quaterniondc quat, double ox, double oy, double oz) {
        return rotateAround(quat, ox, oy, oz, this);
    }
    public Matrix4d rotateAroundAffine(Quaterniondc quat, double ox, double oy, double oz, Matrix4d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = -dzw + dxy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        double tm30 = m00 * ox + m10 * oy + m20 * oz + m30;
        double tm31 = m01 * ox + m11 * oy + m21 * oz + m31;
        double tm32 = m02 * ox + m12 * oy + m22 * oz + m32;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(0.0)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m30(-nm00 * ox - nm10 * oy - m20 * oz + tm30)
        ._m31(-nm01 * ox - nm11 * oy - m21 * oz + tm31)
        ._m32(-nm02 * ox - nm12 * oy - m22 * oz + tm32)
        ._m33(1.0)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAround(Quaterniondc quat, double ox, double oy, double oz, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return rotationAround(quat, ox, oy, oz);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAroundAffine(quat, ox, oy, oz, this);
        return rotateAroundGeneric(quat, ox, oy, oz, this);
    }
    private Matrix4d rotateAroundGeneric(Quaterniondc quat, double ox, double oy, double oz, Matrix4d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = -dzw + dxy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        double tm30 = m00 * ox + m10 * oy + m20 * oz + m30;
        double tm31 = m01 * ox + m11 * oy + m21 * oz + m31;
        double tm32 = m02 * ox + m12 * oy + m22 * oz + m32;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(-nm00 * ox - nm10 * oy - m20 * oz + tm30)
        ._m31(-nm01 * ox - nm11 * oy - m21 * oz + tm31)
        ._m32(-nm02 * ox - nm12 * oy - m22 * oz + tm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotationAround(Quaterniondc quat, double ox, double oy, double oz) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        this._m20(dyw + dxz);
        this._m21(dyz - dxw);
        this._m22(z2 - y2 - x2 + w2);
        this._m23(0.0);
        this._m00(w2 + x2 - z2 - y2);
        this._m01(dxy + dzw);
        this._m02(dxz - dyw);
        this._m03(0.0);
        this._m10(-dzw + dxy);
        this._m11(y2 - z2 + w2 - x2);
        this._m12(dyz + dxw);
        this._m13(0.0);
        this._m30(-m00 * ox - m10 * oy - m20 * oz + ox);
        this._m31(-m01 * ox - m11 * oy - m21 * oz + oy);
        this._m32(-m02 * ox - m12 * oy - m22 * oz + oz);
        this._m33(1.0);
        this.properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d rotateLocal(double ang, double x, double y, double z, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(ang, x, y, z);
        return rotateLocalGeneric(ang, x, y, z, dest);
    }
    private Matrix4d rotateLocalGeneric(double ang, double x, double y, double z, Matrix4d dest) {
        if (y == 0.0 && z == 0.0 && Math.absEqualsOne(x))
            return rotateLocalX(x * ang, dest);
        else if (x == 0.0 && z == 0.0 && Math.absEqualsOne(y))
            return rotateLocalY(y * ang, dest);
        else if (x == 0.0 && y == 0.0 && Math.absEqualsOne(z))
            return rotateLocalZ(z * ang, dest);
        return rotateLocalGenericInternal(ang, x, y, z, dest);
    }
    private Matrix4d rotateLocalGenericInternal(double ang, double x, double y, double z, Matrix4d dest) {
        double s = Math.sin(ang);
        double c = Math.cosFromSin(s, ang);
        double C = 1.0 - c;
        double xx = x * x, xy = x * y, xz = x * z;
        double yy = y * y, yz = y * z;
        double zz = z * z;
        double lm00 = xx * C + c;
        double lm01 = xy * C + z * s;
        double lm02 = xz * C - y * s;
        double lm10 = xy * C - z * s;
        double lm11 = yy * C + c;
        double lm12 = yz * C + x * s;
        double lm20 = xz * C + y * s;
        double lm21 = yz * C - x * s;
        double lm22 = zz * C + c;
        double nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        double nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        double nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        double nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        double nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        double nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        double nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        double nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        double nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        double nm30 = lm00 * m30 + lm10 * m31 + lm20 * m32;
        double nm31 = lm01 * m30 + lm11 * m31 + lm21 * m32;
        double nm32 = lm02 * m30 + lm12 * m31 + lm22 * m32;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocal(double ang, double x, double y, double z) {
        return rotateLocal(ang, x, y, z, this);
    }
    public Matrix4d rotateAroundLocal(Quaterniondc quat, double ox, double oy, double oz, Matrix4d dest) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w();
        double xy = quat.x() * quat.y();
        double xz = quat.x() * quat.z();
        double yw = quat.y() * quat.w();
        double yz = quat.y() * quat.z();
        double xw = quat.x() * quat.w();
        double lm00 = w2 + x2 - z2 - y2;
        double lm01 = xy + zw + zw + xy;
        double lm02 = xz - yw + xz - yw;
        double lm10 = -zw + xy - zw + xy;
        double lm11 = y2 - z2 + w2 - x2;
        double lm12 = yz + yz + xw + xw;
        double lm20 = yw + xz + xz + yw;
        double lm21 = yz + yz - xw - xw;
        double lm22 = z2 - y2 - x2 + w2;
        double tm00 = m00 - ox * m03;
        double tm01 = m01 - oy * m03;
        double tm02 = m02 - oz * m03;
        double tm10 = m10 - ox * m13;
        double tm11 = m11 - oy * m13;
        double tm12 = m12 - oz * m13;
        double tm20 = m20 - ox * m23;
        double tm21 = m21 - oy * m23;
        double tm22 = m22 - oz * m23;
        double tm30 = m30 - ox * m33;
        double tm31 = m31 - oy * m33;
        double tm32 = m32 - oz * m33;
        dest._m00(lm00 * tm00 + lm10 * tm01 + lm20 * tm02 + ox * m03)
        ._m01(lm01 * tm00 + lm11 * tm01 + lm21 * tm02 + oy * m03)
        ._m02(lm02 * tm00 + lm12 * tm01 + lm22 * tm02 + oz * m03)
        ._m03(m03)
        ._m10(lm00 * tm10 + lm10 * tm11 + lm20 * tm12 + ox * m13)
        ._m11(lm01 * tm10 + lm11 * tm11 + lm21 * tm12 + oy * m13)
        ._m12(lm02 * tm10 + lm12 * tm11 + lm22 * tm12 + oz * m13)
        ._m13(m13)
        ._m20(lm00 * tm20 + lm10 * tm21 + lm20 * tm22 + ox * m23)
        ._m21(lm01 * tm20 + lm11 * tm21 + lm21 * tm22 + oy * m23)
        ._m22(lm02 * tm20 + lm12 * tm21 + lm22 * tm22 + oz * m23)
        ._m23(m23)
        ._m30(lm00 * tm30 + lm10 * tm31 + lm20 * tm32 + ox * m33)
        ._m31(lm01 * tm30 + lm11 * tm31 + lm21 * tm32 + oy * m33)
        ._m32(lm02 * tm30 + lm12 * tm31 + lm22 * tm32 + oz * m33)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAroundLocal(Quaterniondc quat, double ox, double oy, double oz) {
        return rotateAroundLocal(quat, ox, oy, oz, this);
    }
    public Matrix4d translate(Vector3dc offset) {
        return translate(offset.x(), offset.y(), offset.z());
    }
    public Matrix4d translate(Vector3dc offset, Matrix4d dest) {
        return translate(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4d translate(Vector3fc offset) {
        return translate(offset.x(), offset.y(), offset.z());
    }
    public Matrix4d translate(Vector3fc offset, Matrix4d dest) {
        return translate(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4d translate(double x, double y, double z, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.translation(x, y, z);
        return translateGeneric(x, y, z, dest);
    }
    private Matrix4d translateGeneric(double x, double y, double z, Matrix4d dest) {
        dest._m00(m00)
        ._m01(m01)
        ._m02(m02)
        ._m03(m03)
        ._m10(m10)
        ._m11(m11)
        ._m12(m12)
        ._m13(m13)
        ._m20(m20)
        ._m21(m21)
        ._m22(m22)
        ._m23(m23)
        ._m30(Math.fma(m00, x, Math.fma(m10, y, Math.fma(m20, z, m30))))
        ._m31(Math.fma(m01, x, Math.fma(m11, y, Math.fma(m21, z, m31))))
        ._m32(Math.fma(m02, x, Math.fma(m12, y, Math.fma(m22, z, m32))))
        ._m33(Math.fma(m03, x, Math.fma(m13, y, Math.fma(m23, z, m33))))
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY));
        return dest;
    }
    public Matrix4d translate(double x, double y, double z) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return translation(x, y, z);
        this._m30(Math.fma(m00, x, Math.fma(m10, y, Math.fma(m20, z, m30))));
        this._m31(Math.fma(m01, x, Math.fma(m11, y, Math.fma(m21, z, m31))));
        this._m32(Math.fma(m02, x, Math.fma(m12, y, Math.fma(m22, z, m32))));
        this._m33(Math.fma(m03, x, Math.fma(m13, y, Math.fma(m23, z, m33))));
        this.properties &= ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY);
        return this;
    }
    public Matrix4d translateLocal(Vector3fc offset) {
        return translateLocal(offset.x(), offset.y(), offset.z());
    }
    public Matrix4d translateLocal(Vector3fc offset, Matrix4d dest) {
        return translateLocal(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4d translateLocal(Vector3dc offset) {
        return translateLocal(offset.x(), offset.y(), offset.z());
    }
    public Matrix4d translateLocal(Vector3dc offset, Matrix4d dest) {
        return translateLocal(offset.x(), offset.y(), offset.z(), dest);
    }
    public Matrix4d translateLocal(double x, double y, double z, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.translation(x, y, z);
        return translateLocalGeneric(x, y, z, dest);
    }
    private Matrix4d translateLocalGeneric(double x, double y, double z, Matrix4d dest) {
        double nm00 = m00 + x * m03;
        double nm01 = m01 + y * m03;
        double nm02 = m02 + z * m03;
        double nm10 = m10 + x * m13;
        double nm11 = m11 + y * m13;
        double nm12 = m12 + z * m13;
        double nm20 = m20 + x * m23;
        double nm21 = m21 + y * m23;
        double nm22 = m22 + z * m23;
        double nm30 = m30 + x * m33;
        double nm31 = m31 + y * m33;
        double nm32 = m32 + z * m33;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(m03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(m13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(m23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY));
    }
    public Matrix4d translateLocal(double x, double y, double z) {
        return translateLocal(x, y, z, this);
    }
    public Matrix4d rotateLocalX(double ang, Matrix4d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm02 = sin * m01 + cos * m02;
        double nm12 = sin * m11 + cos * m12;
        double nm22 = sin * m21 + cos * m22;
        double nm32 = sin * m31 + cos * m32;
        dest
        ._m00(m00)
        ._m01(cos * m01 - sin * m02)
        ._m02(nm02)
        ._m03(m03)
        ._m10(m10)
        ._m11(cos * m11 - sin * m12)
        ._m12(nm12)
        ._m13(m13)
        ._m20(m20)
        ._m21(cos * m21 - sin * m22)
        ._m22(nm22)
        ._m23(m23)
        ._m30(m30)
        ._m31(cos * m31 - sin * m32)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocalX(double ang) {
        return rotateLocalX(ang, this);
    }
    public Matrix4d rotateLocalY(double ang, Matrix4d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm02 = -sin * m00 + cos * m02;
        double nm12 = -sin * m10 + cos * m12;
        double nm22 = -sin * m20 + cos * m22;
        double nm32 = -sin * m30 + cos * m32;
        dest
        ._m00(cos * m00 + sin * m02)
        ._m01(m01)
        ._m02(nm02)
        ._m03(m03)
        ._m10(cos * m10 + sin * m12)
        ._m11(m11)
        ._m12(nm12)
        ._m13(m13)
        ._m20(cos * m20 + sin * m22)
        ._m21(m21)
        ._m22(nm22)
        ._m23(m23)
        ._m30(cos * m30 + sin * m32)
        ._m31(m31)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocalY(double ang) {
        return rotateLocalY(ang, this);
    }
    public Matrix4d rotateLocalZ(double ang, Matrix4d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm01 = sin * m00 + cos * m01;
        double nm11 = sin * m10 + cos * m11;
        double nm21 = sin * m20 + cos * m21;
        double nm31 = sin * m30 + cos * m31;
        dest
        ._m00(cos * m00 - sin * m01)
        ._m01(nm01)
        ._m02(m02)
        ._m03(m03)
        ._m10(cos * m10 - sin * m11)
        ._m11(nm11)
        ._m12(m12)
        ._m13(m13)
        ._m20(cos * m20 - sin * m21)
        ._m21(nm21)
        ._m22(m22)
        ._m23(m23)
        ._m30(cos * m30 - sin * m31)
        ._m31(nm31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocalZ(double ang) {
        return rotateLocalZ(ang, this);
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(m00);
        out.writeDouble(m01);
        out.writeDouble(m02);
        out.writeDouble(m03);
        out.writeDouble(m10);
        out.writeDouble(m11);
        out.writeDouble(m12);
        out.writeDouble(m13);
        out.writeDouble(m20);
        out.writeDouble(m21);
        out.writeDouble(m22);
        out.writeDouble(m23);
        out.writeDouble(m30);
        out.writeDouble(m31);
        out.writeDouble(m32);
        out.writeDouble(m33);
    }
    public void readExternal(ObjectInput in) throws IOException {
        _m00(in.readDouble()).
        _m01(in.readDouble()).
        _m02(in.readDouble()).
        _m03(in.readDouble()).
        _m10(in.readDouble()).
        _m11(in.readDouble()).
        _m12(in.readDouble()).
        _m13(in.readDouble()).
        _m20(in.readDouble()).
        _m21(in.readDouble()).
        _m22(in.readDouble()).
        _m23(in.readDouble()).
        _m30(in.readDouble()).
        _m31(in.readDouble()).
        _m32(in.readDouble()).
        _m33(in.readDouble()).
        determineProperties();
    }
    public Matrix4d rotateX(double ang, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationX(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double x = m30, y = m31, z = m32;
            return dest.rotationX(ang).setTranslation(x, y, z);
        }
        return rotateXInternal(ang, dest);
    }
    private Matrix4d rotateXInternal(double ang, Matrix4d dest) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        double rm11 = cos;
        double rm12 = sin;
        double rm21 = -sin;
        double rm22 = cos;
        double nm10 = m10 * rm11 + m20 * rm12;
        double nm11 = m11 * rm11 + m21 * rm12;
        double nm12 = m12 * rm11 + m22 * rm12;
        double nm13 = m13 * rm11 + m23 * rm12;
        dest._m20(m10 * rm21 + m20 * rm22)
        ._m21(m11 * rm21 + m21 * rm22)
        ._m22(m12 * rm21 + m22 * rm22)
        ._m23(m13 * rm21 + m23 * rm22)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m00(m00)
        ._m01(m01)
        ._m02(m02)
        ._m03(m03)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateX(double ang) {
        return rotateX(ang, this);
    }
    public Matrix4d rotateY(double ang, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationY(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double x = m30, y = m31, z = m32;
            return dest.rotationY(ang).setTranslation(x, y, z);
        }
        return rotateYInternal(ang, dest);
    }
    private Matrix4d rotateYInternal(double ang, Matrix4d dest) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        double rm00 = cos;
        double rm02 = -sin;
        double rm20 = sin;
        double rm22 = cos;
        double nm00 = m00 * rm00 + m20 * rm02;
        double nm01 = m01 * rm00 + m21 * rm02;
        double nm02 = m02 * rm00 + m22 * rm02;
        double nm03 = m03 * rm00 + m23 * rm02;
        dest._m20(m00 * rm20 + m20 * rm22)
        ._m21(m01 * rm20 + m21 * rm22)
        ._m22(m02 * rm20 + m22 * rm22)
        ._m23(m03 * rm20 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(m10)
        ._m11(m11)
        ._m12(m12)
        ._m13(m13)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateY(double ang) {
        return rotateY(ang, this);
    }
    public Matrix4d rotateZ(double ang, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationZ(ang);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double x = m30, y = m31, z = m32;
            return dest.rotationZ(ang).setTranslation(x, y, z);
        }
        return rotateZInternal(ang, dest);
    }
    private Matrix4d rotateZInternal(double ang, Matrix4d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        return rotateTowardsXY(sin, cos, dest);
    }
    public Matrix4d rotateZ(double ang) {
        return rotateZ(ang, this);
    }
    public Matrix4d rotateTowardsXY(double dirX, double dirY) {
        return rotateTowardsXY(dirX, dirY, this);
    }
    public Matrix4d rotateTowardsXY(double dirX, double dirY, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationTowardsXY(dirX, dirY);
        double rm00 = dirY;
        double rm01 = dirX;
        double rm10 = -dirX;
        double rm11 = dirY;
        double nm00 = m00 * rm00 + m10 * rm01;
        double nm01 = m01 * rm00 + m11 * rm01;
        double nm02 = m02 * rm00 + m12 * rm01;
        double nm03 = m03 * rm00 + m13 * rm01;
        dest._m10(m00 * rm10 + m10 * rm11)
        ._m11(m01 * rm10 + m11 * rm11)
        ._m12(m02 * rm10 + m12 * rm11)
        ._m13(m03 * rm10 + m13 * rm11)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m20(m20)
        ._m21(m21)
        ._m22(m22)
        ._m23(m23)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateXYZ(Vector3d angles) {
        return rotateXYZ(angles.x, angles.y, angles.z);
    }
    public Matrix4d rotateXYZ(double angleX, double angleY, double angleZ) {
        return rotateXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix4d rotateXYZ(double angleX, double angleY, double angleZ, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationXYZ(angleX, angleY, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double tx = m30, ty = m31, tz = m32;
            return dest.rotationXYZ(angleX, angleY, angleZ).setTranslation(tx, ty, tz);
        } else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffineXYZ(angleX, angleY, angleZ, dest);
        return rotateXYZInternal(angleX, angleY, angleZ, dest);
    }
    private Matrix4d rotateXYZInternal(double angleX, double angleY, double angleZ, Matrix4d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinX = -sinX;
        double m_sinY = -sinY;
        double m_sinZ = -sinZ;
        double nm10 = m10 * cosX + m20 * sinX;
        double nm11 = m11 * cosX + m21 * sinX;
        double nm12 = m12 * cosX + m22 * sinX;
        double nm13 = m13 * cosX + m23 * sinX;
        double nm20 = m10 * m_sinX + m20 * cosX;
        double nm21 = m11 * m_sinX + m21 * cosX;
        double nm22 = m12 * m_sinX + m22 * cosX;
        double nm23 = m13 * m_sinX + m23 * cosX;
        double nm00 = m00 * cosY + nm20 * m_sinY;
        double nm01 = m01 * cosY + nm21 * m_sinY;
        double nm02 = m02 * cosY + nm22 * m_sinY;
        double nm03 = m03 * cosY + nm23 * m_sinY;
        dest._m20(m00 * sinY + nm20 * cosY)
        ._m21(m01 * sinY + nm21 * cosY)
        ._m22(m02 * sinY + nm22 * cosY)
        ._m23(m03 * sinY + nm23 * cosY)
        ._m00(nm00 * cosZ + nm10 * sinZ)
        ._m01(nm01 * cosZ + nm11 * sinZ)
        ._m02(nm02 * cosZ + nm12 * sinZ)
        ._m03(nm03 * cosZ + nm13 * sinZ)
        ._m10(nm00 * m_sinZ + nm10 * cosZ)
        ._m11(nm01 * m_sinZ + nm11 * cosZ)
        ._m12(nm02 * m_sinZ + nm12 * cosZ)
        ._m13(nm03 * m_sinZ + nm13 * cosZ)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAffineXYZ(double angleX, double angleY, double angleZ) {
        return rotateAffineXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix4d rotateAffineXYZ(double angleX, double angleY, double angleZ, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationXYZ(angleX, angleY, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double tx = m30, ty = m31, tz = m32;
            return dest.rotationXYZ(angleX, angleY, angleZ).setTranslation(tx, ty, tz);
        }
        return rotateAffineXYZInternal(angleX, angleY, angleZ, dest);
    }
    private Matrix4d rotateAffineXYZInternal(double angleX, double angleY, double angleZ, Matrix4d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinX = -sinX;
        double m_sinY = -sinY;
        double m_sinZ = -sinZ;
        double nm10 = m10 * cosX + m20 * sinX;
        double nm11 = m11 * cosX + m21 * sinX;
        double nm12 = m12 * cosX + m22 * sinX;
        double nm20 = m10 * m_sinX + m20 * cosX;
        double nm21 = m11 * m_sinX + m21 * cosX;
        double nm22 = m12 * m_sinX + m22 * cosX;
        double nm00 = m00 * cosY + nm20 * m_sinY;
        double nm01 = m01 * cosY + nm21 * m_sinY;
        double nm02 = m02 * cosY + nm22 * m_sinY;
        dest._m20(m00 * sinY + nm20 * cosY)
        ._m21(m01 * sinY + nm21 * cosY)
        ._m22(m02 * sinY + nm22 * cosY)
        ._m23(0.0)
        ._m00(nm00 * cosZ + nm10 * sinZ)
        ._m01(nm01 * cosZ + nm11 * sinZ)
        ._m02(nm02 * cosZ + nm12 * sinZ)
        ._m03(0.0)
        ._m10(nm00 * m_sinZ + nm10 * cosZ)
        ._m11(nm01 * m_sinZ + nm11 * cosZ)
        ._m12(nm02 * m_sinZ + nm12 * cosZ)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateZYX(Vector3d angles) {
        return rotateZYX(angles.z, angles.y, angles.x);
    }
    public Matrix4d rotateZYX(double angleZ, double angleY, double angleX) {
        return rotateZYX(angleZ, angleY, angleX, this);
    }
    public Matrix4d rotateZYX(double angleZ, double angleY, double angleX, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationZYX(angleZ, angleY, angleX);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double tx = m30, ty = m31, tz = m32;
            return dest.rotationZYX(angleZ, angleY, angleX).setTranslation(tx, ty, tz);
        } else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffineZYX(angleZ, angleY, angleX, dest);
        return rotateZYXInternal(angleZ, angleY, angleX, dest);
    }
    private Matrix4d rotateZYXInternal(double angleZ, double angleY, double angleX, Matrix4d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinZ = -sinZ;
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double nm00 = m00 * cosZ + m10 * sinZ;
        double nm01 = m01 * cosZ + m11 * sinZ;
        double nm02 = m02 * cosZ + m12 * sinZ;
        double nm03 = m03 * cosZ + m13 * sinZ;
        double nm10 = m00 * m_sinZ + m10 * cosZ;
        double nm11 = m01 * m_sinZ + m11 * cosZ;
        double nm12 = m02 * m_sinZ + m12 * cosZ;
        double nm13 = m03 * m_sinZ + m13 * cosZ;
        double nm20 = nm00 * sinY + m20 * cosY;
        double nm21 = nm01 * sinY + m21 * cosY;
        double nm22 = nm02 * sinY + m22 * cosY;
        double nm23 = nm03 * sinY + m23 * cosY;
        dest._m00(nm00 * cosY + m20 * m_sinY)
        ._m01(nm01 * cosY + m21 * m_sinY)
        ._m02(nm02 * cosY + m22 * m_sinY)
        ._m03(nm03 * cosY + m23 * m_sinY)
        ._m10(nm10 * cosX + nm20 * sinX)
        ._m11(nm11 * cosX + nm21 * sinX)
        ._m12(nm12 * cosX + nm22 * sinX)
        ._m13(nm13 * cosX + nm23 * sinX)
        ._m20(nm10 * m_sinX + nm20 * cosX)
        ._m21(nm11 * m_sinX + nm21 * cosX)
        ._m22(nm12 * m_sinX + nm22 * cosX)
        ._m23(nm13 * m_sinX + nm23 * cosX)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAffineZYX(double angleZ, double angleY, double angleX) {
        return rotateAffineZYX(angleZ, angleY, angleX, this);
    }
    public Matrix4d rotateAffineZYX(double angleZ, double angleY, double angleX, Matrix4d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinZ = -sinZ;
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double nm00 = m00 * cosZ + m10 * sinZ;
        double nm01 = m01 * cosZ + m11 * sinZ;
        double nm02 = m02 * cosZ + m12 * sinZ;
        double nm10 = m00 * m_sinZ + m10 * cosZ;
        double nm11 = m01 * m_sinZ + m11 * cosZ;
        double nm12 = m02 * m_sinZ + m12 * cosZ;
        double nm20 = nm00 * sinY + m20 * cosY;
        double nm21 = nm01 * sinY + m21 * cosY;
        double nm22 = nm02 * sinY + m22 * cosY;
        dest._m00(nm00 * cosY + m20 * m_sinY)
        ._m01(nm01 * cosY + m21 * m_sinY)
        ._m02(nm02 * cosY + m22 * m_sinY)
        ._m03(0.0)
        ._m10(nm10 * cosX + nm20 * sinX)
        ._m11(nm11 * cosX + nm21 * sinX)
        ._m12(nm12 * cosX + nm22 * sinX)
        ._m13(0.0)
        ._m20(nm10 * m_sinX + nm20 * cosX)
        ._m21(nm11 * m_sinX + nm21 * cosX)
        ._m22(nm12 * m_sinX + nm22 * cosX)
        ._m23(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateYXZ(Vector3d angles) {
        return rotateYXZ(angles.y, angles.x, angles.z);
    }
    public Matrix4d rotateYXZ(double angleY, double angleX, double angleZ) {
        return rotateYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix4d rotateYXZ(double angleY, double angleX, double angleZ, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotationYXZ(angleY, angleX, angleZ);
        else if ((properties & PROPERTY_TRANSLATION) != 0) {
            double tx = m30, ty = m31, tz = m32;
            return dest.rotationYXZ(angleY, angleX, angleZ).setTranslation(tx, ty, tz);
        } else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffineYXZ(angleY, angleX, angleZ, dest);
        return rotateYXZInternal(angleY, angleX, angleZ, dest);
    }
    private Matrix4d rotateYXZInternal(double angleY, double angleX, double angleZ, Matrix4d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double m_sinZ = -sinZ;
        double nm20 = m00 * sinY + m20 * cosY;
        double nm21 = m01 * sinY + m21 * cosY;
        double nm22 = m02 * sinY + m22 * cosY;
        double nm23 = m03 * sinY + m23 * cosY;
        double nm00 = m00 * cosY + m20 * m_sinY;
        double nm01 = m01 * cosY + m21 * m_sinY;
        double nm02 = m02 * cosY + m22 * m_sinY;
        double nm03 = m03 * cosY + m23 * m_sinY;
        double nm10 = m10 * cosX + nm20 * sinX;
        double nm11 = m11 * cosX + nm21 * sinX;
        double nm12 = m12 * cosX + nm22 * sinX;
        double nm13 = m13 * cosX + nm23 * sinX;
        dest._m20(m10 * m_sinX + nm20 * cosX)
        ._m21(m11 * m_sinX + nm21 * cosX)
        ._m22(m12 * m_sinX + nm22 * cosX)
        ._m23(m13 * m_sinX + nm23 * cosX)
        ._m00(nm00 * cosZ + nm10 * sinZ)
        ._m01(nm01 * cosZ + nm11 * sinZ)
        ._m02(nm02 * cosZ + nm12 * sinZ)
        ._m03(nm03 * cosZ + nm13 * sinZ)
        ._m10(nm00 * m_sinZ + nm10 * cosZ)
        ._m11(nm01 * m_sinZ + nm11 * cosZ)
        ._m12(nm02 * m_sinZ + nm12 * cosZ)
        ._m13(nm03 * m_sinZ + nm13 * cosZ)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAffineYXZ(double angleY, double angleX, double angleZ) {
        return rotateAffineYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix4d rotateAffineYXZ(double angleY, double angleX, double angleZ, Matrix4d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double m_sinZ = -sinZ;
        double nm20 = m00 * sinY + m20 * cosY;
        double nm21 = m01 * sinY + m21 * cosY;
        double nm22 = m02 * sinY + m22 * cosY;
        double nm00 = m00 * cosY + m20 * m_sinY;
        double nm01 = m01 * cosY + m21 * m_sinY;
        double nm02 = m02 * cosY + m22 * m_sinY;
        double nm10 = m10 * cosX + nm20 * sinX;
        double nm11 = m11 * cosX + nm21 * sinX;
        double nm12 = m12 * cosX + nm22 * sinX;
        dest._m20(m10 * m_sinX + nm20 * cosX)
        ._m21(m11 * m_sinX + nm21 * cosX)
        ._m22(m12 * m_sinX + nm22 * cosX)
        ._m23(0.0)
        ._m00(nm00 * cosZ + nm10 * sinZ)
        ._m01(nm01 * cosZ + nm11 * sinZ)
        ._m02(nm02 * cosZ + nm12 * sinZ)
        ._m03(0.0)
        ._m10(nm00 * m_sinZ + nm10 * cosZ)
        ._m11(nm01 * m_sinZ + nm11 * cosZ)
        ._m12(nm02 * m_sinZ + nm12 * cosZ)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotation(AxisAngle4f angleAxis) {
        return rotation(angleAxis.angle, angleAxis.x, angleAxis.y, angleAxis.z);
    }
    public Matrix4d rotation(AxisAngle4d angleAxis) {
        return rotation(angleAxis.angle, angleAxis.x, angleAxis.y, angleAxis.z);
    }
    public Matrix4d rotation(Quaterniondc quat) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw;
        double xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz;
        double yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz;
        double xw = quat.x() * quat.w(), dxw = xw + xw;
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        _m00(w2 + x2 - z2 - y2).
        _m01(dxy + dzw).
        _m02(dxz - dyw).
        _m10(-dzw + dxy).
        _m11(y2 - z2 + w2 - x2).
        _m12(dyz + dxw).
        _m20(dyw + dxz).
        _m21(dyz - dxw).
        _m22(z2 - y2 - x2 + w2).
        _properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4d rotation(Quaternionfc quat) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw;
        double xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz;
        double yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz;
        double xw = quat.x() * quat.w(), dxw = xw + xw;
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        _m00(w2 + x2 - z2 - y2).
        _m01(dxy + dzw).
        _m02(dxz - dyw).
        _m10(-dzw + dxy).
        _m11(y2 - z2 + w2 - x2).
        _m12(dyz + dxw).
        _m20(dyw + dxz).
        _m21(dyz - dxw).
        _m22(z2 - y2 - x2 + w2).
        _properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
        return this;
    }
    public Matrix4d translationRotateScale(double tx, double ty, double tz, 
                                           double qx, double qy, double qz, double qw, 
                                           double sx, double sy, double sz) {
        double dqx = qx + qx, dqy = qy + qy, dqz = qz + qz;
        double q00 = dqx * qx;
        double q11 = dqy * qy;
        double q22 = dqz * qz;
        double q01 = dqx * qy;
        double q02 = dqx * qz;
        double q03 = dqx * qw;
        double q12 = dqy * qz;
        double q13 = dqy * qw;
        double q23 = dqz * qw;
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        _m00(sx - (q11 + q22) * sx).
        _m01((q01 + q23) * sx).
        _m02((q02 - q13) * sx).
        _m03(0.0).
        _m10((q01 - q23) * sy).
        _m11(sy - (q22 + q00) * sy).
        _m12((q12 + q03) * sy).
        _m13(0.0).
        _m20((q02 + q13) * sz).
        _m21((q12 - q03) * sz).
        _m22(sz - (q11 + q00) * sz).
        _m23(0.0).
        _m30(tx).
        _m31(ty).
        _m32(tz).
        _m33(1.0).
        properties = PROPERTY_AFFINE | (one ? PROPERTY_ORTHONORMAL : 0);
        return this;
    }
    public Matrix4d translationRotateScale(Vector3fc translation, 
                                           Quaternionfc quat, 
                                           Vector3fc scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4d translationRotateScale(Vector3dc translation, 
                                           Quaterniondc quat, 
                                           Vector3dc scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4d translationRotateScale(double tx, double ty, double tz, 
                                           double qx, double qy, double qz, double qw, 
                                           double scale) {
        return translationRotateScale(tx, ty, tz, qx, qy, qz, qw, scale, scale, scale);
    }
    public Matrix4d translationRotateScale(Vector3dc translation, 
                                           Quaterniondc quat, 
                                           double scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale, scale, scale);
    }
    public Matrix4d translationRotateScale(Vector3fc translation, 
                                           Quaternionfc quat, 
                                           double scale) {
        return translationRotateScale(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale, scale, scale);
    }
    public Matrix4d translationRotateScaleInvert(double tx, double ty, double tz, 
                                                 double qx, double qy, double qz, double qw, 
                                                 double sx, double sy, double sz) {
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        if (one)
            return translationRotateInvert(tx, ty, tz, qx, qy, qz, qw);
        double nqx = -qx, nqy = -qy, nqz = -qz;
        double dqx = nqx + nqx;
        double dqy = nqy + nqy;
        double dqz = nqz + nqz;
        double q00 = dqx * nqx;
        double q11 = dqy * nqy;
        double q22 = dqz * nqz;
        double q01 = dqx * nqy;
        double q02 = dqx * nqz;
        double q03 = dqx * qw;
        double q12 = dqy * nqz;
        double q13 = dqy * qw;
        double q23 = dqz * qw;
        double isx = 1/sx, isy = 1/sy, isz = 1/sz;
        _m00(isx * (1.0 - q11 - q22)).
        _m01(isy * (q01 + q23)).
        _m02(isz * (q02 - q13)).
        _m03(0.0).
        _m10(isx * (q01 - q23)).
        _m11(isy * (1.0 - q22 - q00)).
        _m12(isz * (q12 + q03)).
        _m13(0.0).
        _m20(isx * (q02 + q13)).
        _m21(isy * (q12 - q03)).
        _m22(isz * (1.0 - q11 - q00)).
        _m23(0.0).
        _m30(-m00 * tx - m10 * ty - m20 * tz).
        _m31(-m01 * tx - m11 * ty - m21 * tz).
        _m32(-m02 * tx - m12 * ty - m22 * tz).
        _m33(1.0).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d translationRotateScaleInvert(Vector3dc translation, 
                                                 Quaterniondc quat, 
                                                 Vector3dc scale) {
        return translationRotateScaleInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4d translationRotateScaleInvert(Vector3fc translation, 
                                                 Quaternionfc quat, 
                                                 Vector3fc scale) {
        return translationRotateScaleInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z());
    }
    public Matrix4d translationRotateScaleInvert(Vector3dc translation, 
                                                 Quaterniondc quat, 
                                                 double scale) {
        return translationRotateScaleInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale, scale, scale);
    }
    public Matrix4d translationRotateScaleInvert(Vector3fc translation, 
                                                 Quaternionfc quat, 
                                                 double scale) {
        return translationRotateScaleInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale, scale, scale);
    }
    public Matrix4d translationRotateScaleMulAffine(double tx, double ty, double tz, 
                                                    double qx, double qy, double qz, double qw, 
                                                    double sx, double sy, double sz,
                                                    Matrix4d m) {
        double w2 = qw * qw;
        double x2 = qx * qx;
        double y2 = qy * qy;
        double z2 = qz * qz;
        double zw = qz * qw;
        double xy = qx * qy;
        double xz = qx * qz;
        double yw = qy * qw;
        double yz = qy * qz;
        double xw = qx * qw;
        double nm00 = w2 + x2 - z2 - y2;
        double nm01 = xy + zw + zw + xy;
        double nm02 = xz - yw + xz - yw;
        double nm10 = -zw + xy - zw + xy;
        double nm11 = y2 - z2 + w2 - x2;
        double nm12 = yz + yz + xw + xw;
        double nm20 = yw + xz + xz + yw;
        double nm21 = yz + yz - xw - xw;
        double nm22 = z2 - y2 - x2 + w2;
        double m00 = nm00 * m.m00 + nm10 * m.m01 + nm20 * m.m02;
        double m01 = nm01 * m.m00 + nm11 * m.m01 + nm21 * m.m02;
        this.m02 = nm02 * m.m00 + nm12 * m.m01 + nm22 * m.m02;
        this.m00 = m00;
        this.m01 = m01;
        this.m03 = 0.0;
        double m10 = nm00 * m.m10 + nm10 * m.m11 + nm20 * m.m12;
        double m11 = nm01 * m.m10 + nm11 * m.m11 + nm21 * m.m12;
        this.m12 = nm02 * m.m10 + nm12 * m.m11 + nm22 * m.m12;
        this.m10 = m10;
        this.m11 = m11;
        this.m13 = 0.0;
        double m20 = nm00 * m.m20 + nm10 * m.m21 + nm20 * m.m22;
        double m21 = nm01 * m.m20 + nm11 * m.m21 + nm21 * m.m22;
        this.m22 = nm02 * m.m20 + nm12 * m.m21 + nm22 * m.m22;
        this.m20 = m20;
        this.m21 = m21;
        this.m23 = 0.0;
        double m30 = nm00 * m.m30 + nm10 * m.m31 + nm20 * m.m32 + tx;
        double m31 = nm01 * m.m30 + nm11 * m.m31 + nm21 * m.m32 + ty;
        this.m32 = nm02 * m.m30 + nm12 * m.m31 + nm22 * m.m32 + tz;
        this.m30 = m30;
        this.m31 = m31;
        this.m33 = 1.0;
        boolean one = Math.absEqualsOne(sx) && Math.absEqualsOne(sy) && Math.absEqualsOne(sz);
        properties = PROPERTY_AFFINE | (one && (m.properties & PROPERTY_ORTHONORMAL) != 0 ? PROPERTY_ORTHONORMAL : 0);
        return this;
    }
    public Matrix4d translationRotateScaleMulAffine(Vector3fc translation, 
                                                    Quaterniondc quat, 
                                                    Vector3fc scale,
                                                    Matrix4d m) {
        return translationRotateScaleMulAffine(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w(), scale.x(), scale.y(), scale.z(), m);
    }
    public Matrix4d translationRotate(double tx, double ty, double tz, double qx, double qy, double qz, double qw) {
        double w2 = qw * qw;
        double x2 = qx * qx;
        double y2 = qy * qy;
        double z2 = qz * qz;
        double zw = qz * qw;
        double xy = qx * qy;
        double xz = qx * qz;
        double yw = qy * qw;
        double yz = qy * qz;
        double xw = qx * qw;
        this.m00 = w2 + x2 - z2 - y2;
        this.m01 = xy + zw + zw + xy;
        this.m02 = xz - yw + xz - yw;
        this.m10 = -zw + xy - zw + xy;
        this.m11 = y2 - z2 + w2 - x2;
        this.m12 = yz + yz + xw + xw;
        this.m20 = yw + xz + xz + yw;
        this.m21 = yz + yz - xw - xw;
        this.m22 = z2 - y2 - x2 + w2;
        this.m30 = tx;
        this.m31 = ty;
        this.m32 = tz;
        this.m33 = 1.0;
        this.properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d translationRotate(double tx, double ty, double tz, Quaterniondc quat) {
        return translationRotate(tx, ty, tz, quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4d translationRotate(Vector3dc translation, 
                                      Quaterniondc quat) {
        return translationRotate(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4d translationRotateInvert(double tx, double ty, double tz, double qx, double qy, double qz, double qw) {
        double nqx = -qx, nqy = -qy, nqz = -qz;
        double dqx = nqx + nqx;
        double dqy = nqy + nqy;
        double dqz = nqz + nqz;
        double q00 = dqx * nqx;
        double q11 = dqy * nqy;
        double q22 = dqz * nqz;
        double q01 = dqx * nqy;
        double q02 = dqx * nqz;
        double q03 = dqx * qw;
        double q12 = dqy * nqz;
        double q13 = dqy * qw;
        double q23 = dqz * qw;
        return this
        ._m00(1.0 - q11 - q22)
        ._m01(q01 + q23)
        ._m02(q02 - q13)
        ._m03(0.0)
        ._m10(q01 - q23)
        ._m11(1.0 - q22 - q00)
        ._m12(q12 + q03)
        ._m13(0.0)
        ._m20(q02 + q13)
        ._m21(q12 - q03)
        ._m22(1.0 - q11 - q00)
        ._m23(0.0)
        ._m30(-m00 * tx - m10 * ty - m20 * tz)
        ._m31(-m01 * tx - m11 * ty - m21 * tz)
        ._m32(-m02 * tx - m12 * ty - m22 * tz)
        ._m33(1.0)
        ._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4d translationRotateInvert(Vector3fc translation, 
                                            Quaternionfc quat) {
        return translationRotateInvert(translation.x(), translation.y(), translation.z(), quat.x(), quat.y(), quat.z(), quat.w());
    }
    public Matrix4d rotate(Quaterniondc quat, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(quat);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(quat, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffine(quat, dest);
        return rotateGeneric(quat, dest);
    }
    private Matrix4d rotateGeneric(Quaterniondc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = -dzw + dxy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotate(Quaternionfc quat, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.rotation(quat);
        else if ((properties & PROPERTY_TRANSLATION) != 0)
            return rotateTranslation(quat, dest);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return rotateAffine(quat, dest);
        return rotateGeneric(quat, dest);
    }
    private Matrix4d rotateGeneric(Quaternionfc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w();
        double xy = quat.x() * quat.y();
        double xz = quat.x() * quat.z();
        double yw = quat.y() * quat.w();
        double yz = quat.y() * quat.z();
        double xw = quat.x() * quat.w();
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = xy + zw + zw + xy;
        double rm02 = xz - yw + xz - yw;
        double rm10 = -zw + xy - zw + xy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = yz + yz + xw + xw;
        double rm20 = yw + xz + xz + yw;
        double rm21 = yz + yz - xw - xw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotate(Quaterniondc quat) {
        return rotate(quat, this);
    }
    public Matrix4d rotate(Quaternionfc quat) {
        return rotate(quat, this);
    }
    public Matrix4d rotateAffine(Quaterniondc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = -dzw + dxy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(0.0)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAffine(Quaterniondc quat) {
        return rotateAffine(quat, this);
    }
    public Matrix4d rotateTranslation(Quaterniondc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = -dzw + dxy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        dest._m20(rm20)
        ._m21(rm21)
        ._m22(rm22)
        ._m23(0.0)
        ._m00(rm00)
        ._m01(rm01)
        ._m02(rm02)
        ._m03(0.0)
        ._m10(rm10)
        ._m11(rm11)
        ._m12(rm12)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(1.0)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateTranslation(Quaternionfc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w();
        double xy = quat.x() * quat.y();
        double xz = quat.x() * quat.z();
        double yw = quat.y() * quat.w();
        double yz = quat.y() * quat.z();
        double xw = quat.x() * quat.w();
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = xy + zw + zw + xy;
        double rm02 = xz - yw + xz - yw;
        double rm10 = -zw + xy - zw + xy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = yz + yz + xw + xw;
        double rm20 = yw + xz + xz + yw;
        double rm21 = yz + yz - xw - xw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = rm00;
        double nm01 = rm01;
        double nm02 = rm02;
        double nm10 = rm10;
        double nm11 = rm11;
        double nm12 = rm12;
        dest._m20(rm20)
        ._m21(rm21)
        ._m22(rm22)
        ._m23(0.0)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(1.0)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocal(Quaterniondc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double lm00 = w2 + x2 - z2 - y2;
        double lm01 = dxy + dzw;
        double lm02 = dxz - dyw;
        double lm10 = -dzw + dxy;
        double lm11 = y2 - z2 + w2 - x2;
        double lm12 = dyz + dxw;
        double lm20 = dyw + dxz;
        double lm21 = dyz - dxw;
        double lm22 = z2 - y2 - x2 + w2;
        double nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        double nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        double nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        double nm03 = m03;
        double nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        double nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        double nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        double nm13 = m13;
        double nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        double nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        double nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        double nm23 = m23;
        double nm30 = lm00 * m30 + lm10 * m31 + lm20 * m32;
        double nm31 = lm01 * m30 + lm11 * m31 + lm21 * m32;
        double nm32 = lm02 * m30 + lm12 * m31 + lm22 * m32;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocal(Quaterniondc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix4d rotateAffine(Quaternionfc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w();
        double xy = quat.x() * quat.y();
        double xz = quat.x() * quat.z();
        double yw = quat.y() * quat.w();
        double yz = quat.y() * quat.z();
        double xw = quat.x() * quat.w();
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = xy + zw + zw + xy;
        double rm02 = xz - yw + xz - yw;
        double rm10 = -zw + xy - zw + xy;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = yz + yz + xw + xw;
        double rm20 = yw + xz + xz + yw;
        double rm21 = yz + yz - xw - xw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(0.0)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateAffine(Quaternionfc quat) {
        return rotateAffine(quat, this);
    }
    public Matrix4d rotateLocal(Quaternionfc quat, Matrix4d dest) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w();
        double xy = quat.x() * quat.y();
        double xz = quat.x() * quat.z();
        double yw = quat.y() * quat.w();
        double yz = quat.y() * quat.z();
        double xw = quat.x() * quat.w();
        double lm00 = w2 + x2 - z2 - y2;
        double lm01 = xy + zw + zw + xy;
        double lm02 = xz - yw + xz - yw;
        double lm10 = -zw + xy - zw + xy;
        double lm11 = y2 - z2 + w2 - x2;
        double lm12 = yz + yz + xw + xw;
        double lm20 = yw + xz + xz + yw;
        double lm21 = yz + yz - xw - xw;
        double lm22 = z2 - y2 - x2 + w2;
        double nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        double nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        double nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        double nm03 = m03;
        double nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        double nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        double nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        double nm13 = m13;
        double nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        double nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        double nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        double nm23 = m23;
        double nm30 = lm00 * m30 + lm10 * m31 + lm20 * m32;
        double nm31 = lm01 * m30 + lm11 * m31 + lm21 * m32;
        double nm32 = lm02 * m30 + lm12 * m31 + lm22 * m32;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotateLocal(Quaternionfc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix4d rotate(AxisAngle4f axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix4d rotate(AxisAngle4f axisAngle, Matrix4d dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix4d rotate(AxisAngle4d axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix4d rotate(AxisAngle4d axisAngle, Matrix4d dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix4d rotate(double angle, Vector3dc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4d rotate(double angle, Vector3dc axis, Matrix4d dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Matrix4d rotate(double angle, Vector3fc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix4d rotate(double angle, Vector3fc axis, Matrix4d dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Vector4d getRow(int row, Vector4d dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            dest.x = m00;
            dest.y = m10;
            dest.z = m20;
            dest.w = m30;
            break;
        case 1:
            dest.x = m01;
            dest.y = m11;
            dest.z = m21;
            dest.w = m31;
            break;
        case 2:
            dest.x = m02;
            dest.y = m12;
            dest.z = m22;
            dest.w = m32;
            break;
        case 3:
            dest.x = m03;
            dest.y = m13;
            dest.z = m23;
            dest.w = m33;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Vector3d getRow(int row, Vector3d dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            dest.x = m00;
            dest.y = m10;
            dest.z = m20;
            break;
        case 1:
            dest.x = m01;
            dest.y = m11;
            dest.z = m21;
            break;
        case 2:
            dest.x = m02;
            dest.y = m12;
            dest.z = m22;
            break;
        case 3:
            dest.x = m03;
            dest.y = m13;
            dest.z = m23;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix4d setRow(int row, Vector4dc src) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            return _m00(src.x())._m10(src.y())._m20(src.z())._m30(src.w())._properties(PROPERTY_UNKNOWN);
        case 1:
            return _m01(src.x())._m11(src.y())._m21(src.z())._m31(src.w())._properties(PROPERTY_UNKNOWN);
        case 2:
            return _m02(src.x())._m12(src.y())._m22(src.z())._m32(src.w())._properties(PROPERTY_UNKNOWN);
        case 3:
            return _m03(src.x())._m13(src.y())._m23(src.z())._m33(src.w())._properties(PROPERTY_UNKNOWN);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Vector4d getColumn(int column, Vector4d dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            dest.x = m00;
            dest.y = m01;
            dest.z = m02;
            dest.w = m03;
            break;
        case 1:
            dest.x = m10;
            dest.y = m11;
            dest.z = m12;
            dest.w = m13;
            break;
        case 2:
            dest.x = m20;
            dest.y = m21;
            dest.z = m22;
            dest.w = m23;
            break;
        case 3:
            dest.x = m30;
            dest.y = m31;
            dest.z = m32;
            dest.w = m33;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Vector3d getColumn(int column, Vector3d dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            dest.x = m00;
            dest.y = m01;
            dest.z = m02;
            break;
        case 1:
            dest.x = m10;
            dest.y = m11;
            dest.z = m12;
            break;
        case 2:
            dest.x = m20;
            dest.y = m21;
            dest.z = m22;
            break;
        case 3:
            dest.x = m30;
            dest.y = m31;
            dest.z = m32;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix4d setColumn(int column, Vector4dc src) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            return _m00(src.x())._m01(src.y())._m02(src.z())._m03(src.w())._properties(PROPERTY_UNKNOWN);
        case 1:
            return _m10(src.x())._m11(src.y())._m12(src.z())._m13(src.w())._properties(PROPERTY_UNKNOWN);
        case 2:
            return _m20(src.x())._m21(src.y())._m22(src.z())._m23(src.w())._properties(PROPERTY_UNKNOWN);
        case 3:
            return _m30(src.x())._m31(src.y())._m32(src.z())._m33(src.w())._properties(PROPERTY_UNKNOWN);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public double get(int column, int row) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix4d set(int column, int row, double value) {
        return MemUtil.INSTANCE.set(this, column, row, value)._properties(PROPERTY_UNKNOWN);
    }
    public double getRowColumn(int row, int column) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix4d setRowColumn(int row, int column, double value) {
        return MemUtil.INSTANCE.set(this, column, row, value)._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d normal() {
        return normal(this);
    }
    public Matrix4d normal(Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.identity();
        else if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalOrthonormal(dest);
        return normalGeneric(dest);
    }
    private Matrix4d normalOrthonormal(Matrix4d dest) {
        dest.set(this);
        return dest._properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    private Matrix4d normalGeneric(Matrix4d dest) {
        double m00m11 = m00 * m11;
        double m01m10 = m01 * m10;
        double m02m10 = m02 * m10;
        double m00m12 = m00 * m12;
        double m01m12 = m01 * m12;
        double m02m11 = m02 * m11;
        double det = (m00m11 - m01m10) * m22 + (m02m10 - m00m12) * m21 + (m01m12 - m02m11) * m20;
        double s = 1.0 / det;
        double nm00 = (m11 * m22 - m21 * m12) * s;
        double nm01 = (m20 * m12 - m10 * m22) * s;
        double nm02 = (m10 * m21 - m20 * m11) * s;
        double nm10 = (m21 * m02 - m01 * m22) * s;
        double nm11 = (m00 * m22 - m20 * m02) * s;
        double nm12 = (m20 * m01 - m00 * m21) * s;
        double nm20 = (m01m12 - m02m11) * s;
        double nm21 = (m02m10 - m00m12) * s;
        double nm22 = (m00m11 - m01m10) * s;
        return dest
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0)
        ._m30(0.0)
        ._m31(0.0)
        ._m32(0.0)
        ._m33(1.0)
        ._properties((properties | PROPERTY_AFFINE) & ~(PROPERTY_TRANSLATION | PROPERTY_PERSPECTIVE));
    }
    public Matrix3d normal(Matrix3d dest) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalOrthonormal(dest);
        return normalGeneric(dest);
    }
    private Matrix3d normalOrthonormal(Matrix3d dest) {
        dest.set(this);
        return dest;
    }
    private Matrix3d normalGeneric(Matrix3d dest) {
        double m00m11 = m00 * m11;
        double m01m10 = m01 * m10;
        double m02m10 = m02 * m10;
        double m00m12 = m00 * m12;
        double m01m12 = m01 * m12;
        double m02m11 = m02 * m11;
        double det = (m00m11 - m01m10) * m22 + (m02m10 - m00m12) * m21 + (m01m12 - m02m11) * m20;
        double s = 1.0 / det;
        return dest._m00((m11 * m22 - m21 * m12) * s)
        ._m01((m20 * m12 - m10 * m22) * s)
        ._m02((m10 * m21 - m20 * m11) * s)
        ._m10((m21 * m02 - m01 * m22) * s)
        ._m11((m00 * m22 - m20 * m02) * s)
        ._m12((m20 * m01 - m00 * m21) * s)
        ._m20((m01m12 - m02m11) * s)
        ._m21((m02m10 - m00m12) * s)
        ._m22((m00m11 - m01m10) * s);
    }
    public Matrix4d cofactor3x3() {
        return cofactor3x3(this);
    }
    public Matrix3d cofactor3x3(Matrix3d dest) {
        return dest._m00(m11 * m22 - m21 * m12)
        ._m01(m20 * m12 - m10 * m22)
        ._m02(m10 * m21 - m20 * m11)
        ._m10(m21 * m02 - m01 * m22)
        ._m11(m00 * m22 - m20 * m02)
        ._m12(m20 * m01 - m00 * m21)
        ._m20(m01 * m12 - m02 * m11)
        ._m21(m02 * m10 - m00 * m12)
        ._m22(m00 * m11 - m01 * m10);
    }
    public Matrix4d cofactor3x3(Matrix4d dest) {
        double nm10 = m21 * m02 - m01 * m22;
        double nm11 = m00 * m22 - m20 * m02;
        double nm12 = m20 * m01 - m00 * m21;
        double nm20 = m01 * m12 - m11 * m02;
        double nm21 = m02 * m10 - m12 * m00;
        double nm22 = m00 * m11 - m10 * m01;
        return dest
        ._m00(m11 * m22 - m21 * m12)
        ._m01(m20 * m12 - m10 * m22)
        ._m02(m10 * m21 - m20 * m11)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(0.0)
        ._m30(0.0)
        ._m31(0.0)
        ._m32(0.0)
        ._m33(1.0)
        ._properties((properties | PROPERTY_AFFINE) & ~(PROPERTY_TRANSLATION | PROPERTY_PERSPECTIVE));
    }
    public Matrix4d normalize3x3() {
        return normalize3x3(this);
    }
    public Matrix4d normalize3x3(Matrix4d dest) {
        double invXlen = Math.invsqrt(m00 * m00 + m01 * m01 + m02 * m02);
        double invYlen = Math.invsqrt(m10 * m10 + m11 * m11 + m12 * m12);
        double invZlen = Math.invsqrt(m20 * m20 + m21 * m21 + m22 * m22);
        dest._m00(m00 * invXlen)._m01(m01 * invXlen)._m02(m02 * invXlen)
            ._m10(m10 * invYlen)._m11(m11 * invYlen)._m12(m12 * invYlen)
            ._m20(m20 * invZlen)._m21(m21 * invZlen)._m22(m22 * invZlen)
            ._m30(m30)._m31(m31)._m32(m32)._m33(m33)
            ._properties(properties);
        return dest;
    }
    public Matrix3d normalize3x3(Matrix3d dest) {
        double invXlen = Math.invsqrt(m00 * m00 + m01 * m01 + m02 * m02);
        double invYlen = Math.invsqrt(m10 * m10 + m11 * m11 + m12 * m12);
        double invZlen = Math.invsqrt(m20 * m20 + m21 * m21 + m22 * m22);
        dest.m00(m00 * invXlen); dest.m01(m01 * invXlen); dest.m02(m02 * invXlen);
        dest.m10(m10 * invYlen); dest.m11(m11 * invYlen); dest.m12(m12 * invYlen);
        dest.m20(m20 * invZlen); dest.m21(m21 * invZlen); dest.m22(m22 * invZlen);
        return dest;
    }
    public Vector4d unproject(double winX, double winY, double winZ, int[] viewport, Vector4d dest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double c = m00 * m13 - m03 * m10;
        double d = m01 * m12 - m02 * m11;
        double e = m01 * m13 - m03 * m11;
        double f = m02 * m13 - m03 * m12;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double i = m20 * m33 - m23 * m30;
        double j = m21 * m32 - m22 * m31;
        double k = m21 * m33 - m23 * m31;
        double l = m22 * m33 - m23 * m32;
        double det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0 / det;
        double im00 = ( m11 * l - m12 * k + m13 * j) * det;
        double im01 = (-m01 * l + m02 * k - m03 * j) * det;
        double im02 = ( m31 * f - m32 * e + m33 * d) * det;
        double im03 = (-m21 * f + m22 * e - m23 * d) * det;
        double im10 = (-m10 * l + m12 * i - m13 * h) * det;
        double im11 = ( m00 * l - m02 * i + m03 * h) * det;
        double im12 = (-m30 * f + m32 * c - m33 * b) * det;
        double im13 = ( m20 * f - m22 * c + m23 * b) * det;
        double im20 = ( m10 * k - m11 * i + m13 * g) * det;
        double im21 = (-m00 * k + m01 * i - m03 * g) * det;
        double im22 = ( m30 * e - m31 * c + m33 * a) * det;
        double im23 = (-m20 * e + m21 * c - m23 * a) * det;
        double im30 = (-m10 * j + m11 * h - m12 * g) * det;
        double im31 = ( m00 * j - m01 * h + m02 * g) * det;
        double im32 = (-m30 * d + m31 * b - m32 * a) * det;
        double im33 = ( m20 * d - m21 * b + m22 * a) * det;
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        double ndcZ = winZ+winZ-1.0;
        double invW = 1.0 / (im03 * ndcX + im13 * ndcY + im23 * ndcZ + im33);
        dest.x = (im00 * ndcX + im10 * ndcY + im20 * ndcZ + im30) * invW;
        dest.y = (im01 * ndcX + im11 * ndcY + im21 * ndcZ + im31) * invW;
        dest.z = (im02 * ndcX + im12 * ndcY + im22 * ndcZ + im32) * invW;
        dest.w = 1.0;
        return dest;
    }
    public Vector3d unproject(double winX, double winY, double winZ, int[] viewport, Vector3d dest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double c = m00 * m13 - m03 * m10;
        double d = m01 * m12 - m02 * m11;
        double e = m01 * m13 - m03 * m11;
        double f = m02 * m13 - m03 * m12;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double i = m20 * m33 - m23 * m30;
        double j = m21 * m32 - m22 * m31;
        double k = m21 * m33 - m23 * m31;
        double l = m22 * m33 - m23 * m32;
        double det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0 / det;
        double im00 = ( m11 * l - m12 * k + m13 * j) * det;
        double im01 = (-m01 * l + m02 * k - m03 * j) * det;
        double im02 = ( m31 * f - m32 * e + m33 * d) * det;
        double im03 = (-m21 * f + m22 * e - m23 * d) * det;
        double im10 = (-m10 * l + m12 * i - m13 * h) * det;
        double im11 = ( m00 * l - m02 * i + m03 * h) * det;
        double im12 = (-m30 * f + m32 * c - m33 * b) * det;
        double im13 = ( m20 * f - m22 * c + m23 * b) * det;
        double im20 = ( m10 * k - m11 * i + m13 * g) * det;
        double im21 = (-m00 * k + m01 * i - m03 * g) * det;
        double im22 = ( m30 * e - m31 * c + m33 * a) * det;
        double im23 = (-m20 * e + m21 * c - m23 * a) * det;
        double im30 = (-m10 * j + m11 * h - m12 * g) * det;
        double im31 = ( m00 * j - m01 * h + m02 * g) * det;
        double im32 = (-m30 * d + m31 * b - m32 * a) * det;
        double im33 = ( m20 * d - m21 * b + m22 * a) * det;
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        double ndcZ = winZ+winZ-1.0;
        double invW = 1.0 / (im03 * ndcX + im13 * ndcY + im23 * ndcZ + im33);
        dest.x = (im00 * ndcX + im10 * ndcY + im20 * ndcZ + im30) * invW;
        dest.y = (im01 * ndcX + im11 * ndcY + im21 * ndcZ + im31) * invW;
        dest.z = (im02 * ndcX + im12 * ndcY + im22 * ndcZ + im32) * invW;
        return dest;
    }
    public Vector4d unproject(Vector3dc winCoords, int[] viewport, Vector4d dest) {
        return unproject(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Vector3d unproject(Vector3dc winCoords, int[] viewport, Vector3d dest) {
        return unproject(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Matrix4d unprojectRay(double winX, double winY, int[] viewport, Vector3d originDest, Vector3d dirDest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double c = m00 * m13 - m03 * m10;
        double d = m01 * m12 - m02 * m11;
        double e = m01 * m13 - m03 * m11;
        double f = m02 * m13 - m03 * m12;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double i = m20 * m33 - m23 * m30;
        double j = m21 * m32 - m22 * m31;
        double k = m21 * m33 - m23 * m31;
        double l = m22 * m33 - m23 * m32;
        double det = a * l - b * k + c * j + d * i - e * h + f * g;
        det = 1.0 / det;
        double im00 = ( m11 * l - m12 * k + m13 * j) * det;
        double im01 = (-m01 * l + m02 * k - m03 * j) * det;
        double im02 = ( m31 * f - m32 * e + m33 * d) * det;
        double im03 = (-m21 * f + m22 * e - m23 * d) * det;
        double im10 = (-m10 * l + m12 * i - m13 * h) * det;
        double im11 = ( m00 * l - m02 * i + m03 * h) * det;
        double im12 = (-m30 * f + m32 * c - m33 * b) * det;
        double im13 = ( m20 * f - m22 * c + m23 * b) * det;
        double im20 = ( m10 * k - m11 * i + m13 * g) * det;
        double im21 = (-m00 * k + m01 * i - m03 * g) * det;
        double im22 = ( m30 * e - m31 * c + m33 * a) * det;
        double im23 = (-m20 * e + m21 * c - m23 * a) * det;
        double im30 = (-m10 * j + m11 * h - m12 * g) * det;
        double im31 = ( m00 * j - m01 * h + m02 * g) * det;
        double im32 = (-m30 * d + m31 * b - m32 * a) * det;
        double im33 = ( m20 * d - m21 * b + m22 * a) * det;
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        double px = im00 * ndcX + im10 * ndcY + im30;
        double py = im01 * ndcX + im11 * ndcY + im31;
        double pz = im02 * ndcX + im12 * ndcY + im32;
        double invNearW = 1.0 / (im03 * ndcX + im13 * ndcY - im23 + im33);
        double nearX = (px - im20) * invNearW;
        double nearY = (py - im21) * invNearW;
        double nearZ = (pz - im22) * invNearW;
        double invW0 = 1.0 / (im03 * ndcX + im13 * ndcY + im33);
        double x0 = px * invW0;
        double y0 = py * invW0;
        double z0 = pz * invW0;
        originDest.x = nearX; originDest.y = nearY; originDest.z = nearZ;
        dirDest.x = x0 - nearX; dirDest.y = y0 - nearY; dirDest.z = z0 - nearZ;
        return this;
    }
    public Matrix4d unprojectRay(Vector2dc winCoords, int[] viewport, Vector3d originDest, Vector3d dirDest) {
        return unprojectRay(winCoords.x(), winCoords.y(), viewport, originDest, dirDest);
    }
    public Vector4d unprojectInv(Vector3dc winCoords, int[] viewport, Vector4d dest) {
        return unprojectInv(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Vector4d unprojectInv(double winX, double winY, double winZ, int[] viewport, Vector4d dest) {
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        double ndcZ = winZ+winZ-1.0;
        double invW = 1.0 / (m03 * ndcX + m13 * ndcY + m23 * ndcZ + m33);
        dest.x = (m00 * ndcX + m10 * ndcY + m20 * ndcZ + m30) * invW;
        dest.y = (m01 * ndcX + m11 * ndcY + m21 * ndcZ + m31) * invW;
        dest.z = (m02 * ndcX + m12 * ndcY + m22 * ndcZ + m32) * invW;
        dest.w = 1.0;
        return dest;
    }
    public Vector3d unprojectInv(Vector3dc winCoords, int[] viewport, Vector3d dest) {
        return unprojectInv(winCoords.x(), winCoords.y(), winCoords.z(), viewport, dest);
    }
    public Vector3d unprojectInv(double winX, double winY, double winZ, int[] viewport, Vector3d dest) {
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        double ndcZ = winZ+winZ-1.0;
        double invW = 1.0 / (m03 * ndcX + m13 * ndcY + m23 * ndcZ + m33);
        dest.x = (m00 * ndcX + m10 * ndcY + m20 * ndcZ + m30) * invW;
        dest.y = (m01 * ndcX + m11 * ndcY + m21 * ndcZ + m31) * invW;
        dest.z = (m02 * ndcX + m12 * ndcY + m22 * ndcZ + m32) * invW;
        return dest;
    }
    public Matrix4d unprojectInvRay(Vector2dc winCoords, int[] viewport, Vector3d originDest, Vector3d dirDest) {
        return unprojectInvRay(winCoords.x(), winCoords.y(), viewport, originDest, dirDest);
    }
    public Matrix4d unprojectInvRay(double winX, double winY, int[] viewport, Vector3d originDest, Vector3d dirDest) {
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        double px = m00 * ndcX + m10 * ndcY + m30;
        double py = m01 * ndcX + m11 * ndcY + m31;
        double pz = m02 * ndcX + m12 * ndcY + m32;
        double invNearW = 1.0 / (m03 * ndcX + m13 * ndcY - m23 + m33);
        double nearX = (px - m20) * invNearW;
        double nearY = (py - m21) * invNearW;
        double nearZ = (pz - m22) * invNearW;
        double invW0 = 1.0 / (m03 * ndcX + m13 * ndcY + m33);
        double x0 = px * invW0;
        double y0 = py * invW0;
        double z0 = pz * invW0;
        originDest.x = nearX; originDest.y = nearY; originDest.z = nearZ;
        dirDest.x = x0 - nearX; dirDest.y = y0 - nearY; dirDest.z = z0 - nearZ;
        return this;
    }
    public Vector4d project(double x, double y, double z, int[] viewport, Vector4d winCoordsDest) {
        double invW = 1.0 / Math.fma(m03, x, Math.fma(m13, y, Math.fma(m23, z, m33)));
        double nx = Math.fma(m00, x, Math.fma(m10, y, Math.fma(m20, z, m30))) * invW;
        double ny = Math.fma(m01, x, Math.fma(m11, y, Math.fma(m21, z, m31))) * invW;
        double nz = Math.fma(m02, x, Math.fma(m12, y, Math.fma(m22, z, m32))) * invW;
        return winCoordsDest.set(Math.fma(Math.fma(nx, 0.5, 0.5), viewport[2], viewport[0]),
                                 Math.fma(Math.fma(ny, 0.5, 0.5), viewport[3], viewport[1]),
                                 Math.fma(0.5, nz, 0.5),
                                 1.0);
    }
    public Vector3d project(double x, double y, double z, int[] viewport, Vector3d winCoordsDest) {
        double invW = 1.0 / Math.fma(m03, x, Math.fma(m13, y, Math.fma(m23, z, m33)));
        double nx = Math.fma(m00, x, Math.fma(m10, y, Math.fma(m20, z, m30))) * invW;
        double ny = Math.fma(m01, x, Math.fma(m11, y, Math.fma(m21, z, m31))) * invW;
        double nz = Math.fma(m02, x, Math.fma(m12, y, Math.fma(m22, z, m32))) * invW;
        winCoordsDest.x = Math.fma(Math.fma(nx, 0.5, 0.5), viewport[2], viewport[0]);
        winCoordsDest.y = Math.fma(Math.fma(ny, 0.5, 0.5), viewport[3], viewport[1]);
        winCoordsDest.z = Math.fma(0.5, nz, 0.5);
        return winCoordsDest;
    }
    public Vector4d project(Vector3dc position, int[] viewport, Vector4d dest) {
        return project(position.x(), position.y(), position.z(), viewport, dest);
    }
    public Vector3d project(Vector3dc position, int[] viewport, Vector3d dest) {
        return project(position.x(), position.y(), position.z(), viewport, dest);
    }
    public Matrix4d reflect(double a, double b, double c, double d, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.reflection(a, b, c, d);
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.reflection(a, b, c, d);
        else if ((properties & PROPERTY_AFFINE) != 0)
            return reflectAffine(a, b, c, d, dest);
        return reflectGeneric(a, b, c, d, dest);
    }
    private Matrix4d reflectAffine(double a, double b, double c, double d, Matrix4d dest) {
        double da = a + a, db = b + b, dc = c + c, dd = d + d;
        double rm00 = 1.0 - da * a;
        double rm01 = -da * b;
        double rm02 = -da * c;
        double rm10 = -db * a;
        double rm11 = 1.0 - db * b;
        double rm12 = -db * c;
        double rm20 = -dc * a;
        double rm21 = -dc * b;
        double rm22 = 1.0 - dc * c;
        double rm30 = -dd * a;
        double rm31 = -dd * b;
        double rm32 = -dd * c;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32)
        ._m33(m33)
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(0.0)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(0.0)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(0.0)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    private Matrix4d reflectGeneric(double a, double b, double c, double d, Matrix4d dest) {
        double da = a + a, db = b + b, dc = c + c, dd = d + d;
        double rm00 = 1.0 - da * a;
        double rm01 = -da * b;
        double rm02 = -da * c;
        double rm10 = -db * a;
        double rm11 = 1.0 - db * b;
        double rm12 = -db * c;
        double rm20 = -dc * a;
        double rm21 = -dc * b;
        double rm22 = 1.0 - dc * c;
        double rm30 = -dd * a;
        double rm31 = -dd * b;
        double rm32 = -dd * c;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m23 * rm32 + m33)
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d reflect(double a, double b, double c, double d) {
        return reflect(a, b, c, d, this);
    }
    public Matrix4d reflect(double nx, double ny, double nz, double px, double py, double pz) {
        return reflect(nx, ny, nz, px, py, pz, this);
    }
    public Matrix4d reflect(double nx, double ny, double nz, double px, double py, double pz, Matrix4d dest) {
        double invLength = Math.invsqrt(nx * nx + ny * ny + nz * nz);
        double nnx = nx * invLength;
        double nny = ny * invLength;
        double nnz = nz * invLength;
        return reflect(nnx, nny, nnz, -nnx * px - nny * py - nnz * pz, dest);
    }
    public Matrix4d reflect(Vector3dc normal, Vector3dc point) {
        return reflect(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z());
    }
    public Matrix4d reflect(Quaterniondc orientation, Vector3dc point) {
        return reflect(orientation, point, this);
    }
    public Matrix4d reflect(Quaterniondc orientation, Vector3dc point, Matrix4d dest) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        double normalX = orientation.x() * num3 + orientation.w() * num2;
        double normalY = orientation.y() * num3 - orientation.w() * num1;
        double normalZ = 1.0 - (orientation.x() * num1 + orientation.y() * num2);
        return reflect(normalX, normalY, normalZ, point.x(), point.y(), point.z(), dest);
    }
    public Matrix4d reflect(Vector3dc normal, Vector3dc point, Matrix4d dest) {
        return reflect(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z(), dest);
    }
    public Matrix4d reflection(double a, double b, double c, double d) {
        double da = a + a, db = b + b, dc = c + c, dd = d + d;
        _m00(1.0 - da * a).
        _m01(-da * b).
        _m02(-da * c).
        _m03(0.0).
        _m10(-db * a).
        _m11(1.0 - db * b).
        _m12(-db * c).
        _m13(0.0).
        _m20(-dc * a).
        _m21(-dc * b).
        _m22(1.0 - dc * c).
        _m23(0.0).
        _m30(-dd * a).
        _m31(-dd * b).
        _m32(-dd * c).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d reflection(double nx, double ny, double nz, double px, double py, double pz) {
        double invLength = Math.invsqrt(nx * nx + ny * ny + nz * nz);
        double nnx = nx * invLength;
        double nny = ny * invLength;
        double nnz = nz * invLength;
        return reflection(nnx, nny, nnz, -nnx * px - nny * py - nnz * pz);
    }
    public Matrix4d reflection(Vector3dc normal, Vector3dc point) {
        return reflection(normal.x(), normal.y(), normal.z(), point.x(), point.y(), point.z());
    }
    public Matrix4d reflection(Quaterniondc orientation, Vector3dc point) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        double normalX = orientation.x() * num3 + orientation.w() * num2;
        double normalY = orientation.y() * num3 - orientation.w() * num1;
        double normalZ = 1.0 - (orientation.x() * num1 + orientation.y() * num2);
        return reflection(normalX, normalY, normalZ, point.x(), point.y(), point.z());
    }
    public Matrix4d ortho(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrtho(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return orthoGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d orthoGeneric(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = 2.0 / (right - left);
        double rm11 = 2.0 / (top - bottom);
        double rm22 = (zZeroToOne ? 1.0 : 2.0) / (zNear - zFar);
        double rm30 = (left + right) / (left - right);
        double rm31 = (top + bottom) / (bottom - top);
        double rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m23 * rm32 + m33)
        ._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m20(m20 * rm22)
        ._m21(m21 * rm22)
        ._m22(m22 * rm22)
        ._m23(m23 * rm22)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d ortho(double left, double right, double bottom, double top, double zNear, double zFar, Matrix4d dest) {
        return ortho(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4d ortho(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        return ortho(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d ortho(double left, double right, double bottom, double top, double zNear, double zFar) {
        return ortho(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4d orthoLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrthoLH(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return orthoLHGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d orthoLHGeneric(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = 2.0 / (right - left);
        double rm11 = 2.0 / (top - bottom);
        double rm22 = (zZeroToOne ? 1.0 : 2.0) / (zFar - zNear);
        double rm30 = (left + right) / (left - right);
        double rm31 = (top + bottom) / (bottom - top);
        double rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m23 * rm32 + m33)
        ._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m20(m20 * rm22)
        ._m21(m21 * rm22)
        ._m22(m22 * rm22)
        ._m23(m23 * rm22)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d orthoLH(double left, double right, double bottom, double top, double zNear, double zFar, Matrix4d dest) {
        return orthoLH(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4d orthoLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        return orthoLH(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d orthoLH(double left, double right, double bottom, double top, double zNear, double zFar) {
        return orthoLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4d setOrtho(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00(2.0 / (right - left)).
        _m11(2.0 / (top - bottom)).
        _m22((zZeroToOne ? 1.0 : 2.0) / (zNear - zFar)).
        _m30((right + left) / (left - right)).
        _m31((top + bottom) / (bottom - top)).
        _m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar)).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d setOrtho(double left, double right, double bottom, double top, double zNear, double zFar) {
        return setOrtho(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4d setOrthoLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00(2.0 / (right - left)).
        _m11(2.0 / (top - bottom)).
        _m22((zZeroToOne ? 1.0 : 2.0) / (zFar - zNear)).
        _m30((right + left) / (left - right)).
        _m31((top + bottom) / (bottom - top)).
        _m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar)).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d setOrthoLH(double left, double right, double bottom, double top, double zNear, double zFar) {
        return setOrthoLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4d orthoSymmetric(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrthoSymmetric(width, height, zNear, zFar, zZeroToOne);
        return orthoSymmetricGeneric(width, height, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d orthoSymmetricGeneric(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = 2.0 / width;
        double rm11 = 2.0 / height;
        double rm22 = (zZeroToOne ? 1.0 : 2.0) / (zNear - zFar);
        double rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m20 * rm32 + m30)
        ._m31(m21 * rm32 + m31)
        ._m32(m22 * rm32 + m32)
        ._m33(m23 * rm32 + m33)
        ._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m20(m20 * rm22)
        ._m21(m21 * rm22)
        ._m22(m22 * rm22)
        ._m23(m23 * rm22)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d orthoSymmetric(double width, double height, double zNear, double zFar, Matrix4d dest) {
        return orthoSymmetric(width, height, zNear, zFar, false, dest);
    }
    public Matrix4d orthoSymmetric(double width, double height, double zNear, double zFar, boolean zZeroToOne) {
        return orthoSymmetric(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d orthoSymmetric(double width, double height, double zNear, double zFar) {
        return orthoSymmetric(width, height, zNear, zFar, false, this);
    }
    public Matrix4d orthoSymmetricLH(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrthoSymmetricLH(width, height, zNear, zFar, zZeroToOne);
        return orthoSymmetricLHGeneric(width, height, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d orthoSymmetricLHGeneric(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = 2.0 / width;
        double rm11 = 2.0 / height;
        double rm22 = (zZeroToOne ? 1.0 : 2.0) / (zFar - zNear);
        double rm32 = (zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar);
        dest._m30(m20 * rm32 + m30)
        ._m31(m21 * rm32 + m31)
        ._m32(m22 * rm32 + m32)
        ._m33(m23 * rm32 + m33)
        ._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m20(m20 * rm22)
        ._m21(m21 * rm22)
        ._m22(m22 * rm22)
        ._m23(m23 * rm22)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d orthoSymmetricLH(double width, double height, double zNear, double zFar, Matrix4d dest) {
        return orthoSymmetricLH(width, height, zNear, zFar, false, dest);
    }
    public Matrix4d orthoSymmetricLH(double width, double height, double zNear, double zFar, boolean zZeroToOne) {
        return orthoSymmetricLH(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d orthoSymmetricLH(double width, double height, double zNear, double zFar) {
        return orthoSymmetricLH(width, height, zNear, zFar, false, this);
    }
    public Matrix4d setOrthoSymmetric(double width, double height, double zNear, double zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00(2.0 / width).
        _m11(2.0 / height).
        _m22((zZeroToOne ? 1.0 : 2.0) / (zNear - zFar)).
        _m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar)).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d setOrthoSymmetric(double width, double height, double zNear, double zFar) {
        return setOrthoSymmetric(width, height, zNear, zFar, false);
    }
    public Matrix4d setOrthoSymmetricLH(double width, double height, double zNear, double zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00(2.0 / width).
        _m11(2.0 / height).
        _m22((zZeroToOne ? 1.0 : 2.0) / (zFar - zNear)).
        _m32((zZeroToOne ? zNear : (zFar + zNear)) / (zNear - zFar)).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d setOrthoSymmetricLH(double width, double height, double zNear, double zFar) {
        return setOrthoSymmetricLH(width, height, zNear, zFar, false);
    }
    public Matrix4d ortho2D(double left, double right, double bottom, double top, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrtho2D(left, right, bottom, top);
        return ortho2DGeneric(left, right, bottom, top, dest);
    }
    private Matrix4d ortho2DGeneric(double left, double right, double bottom, double top, Matrix4d dest) {
        double rm00 = 2.0 / (right - left);
        double rm11 = 2.0 / (top - bottom);
        double rm30 = (right + left) / (left - right);
        double rm31 = (top + bottom) / (bottom - top);
        dest._m30(m00 * rm30 + m10 * rm31 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m33)
        ._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m20(-m20)
        ._m21(-m21)
        ._m22(-m22)
        ._m23(-m23)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d ortho2D(double left, double right, double bottom, double top) {
        return ortho2D(left, right, bottom, top, this);
    }
    public Matrix4d ortho2DLH(double left, double right, double bottom, double top, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setOrtho2DLH(left, right, bottom, top);
        return ortho2DLHGeneric(left, right, bottom, top, dest);
    }
    private Matrix4d ortho2DLHGeneric(double left, double right, double bottom, double top, Matrix4d dest) {
        double rm00 = 2.0 / (right - left);
        double rm11 = 2.0 / (top - bottom);
        double rm30 = (right + left) / (left - right);
        double rm31 = (top + bottom) / (bottom - top);
        dest._m30(m00 * rm30 + m10 * rm31 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m33)
        ._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m20(m20)
        ._m21(m21)
        ._m22(m22)
        ._m23(m23)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d ortho2DLH(double left, double right, double bottom, double top) {
        return ortho2DLH(left, right, bottom, top, this);
    }
    public Matrix4d setOrtho2D(double left, double right, double bottom, double top) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00(2.0 / (right - left)).
        _m11(2.0 / (top - bottom)).
        _m22(-1.0).
        _m30((right + left) / (left - right)).
        _m31((top + bottom) / (bottom - top)).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d setOrtho2DLH(double left, double right, double bottom, double top) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00(2.0 / (right - left)).
        _m11(2.0 / (top - bottom)).
        _m30((right + left) / (left - right)).
        _m31((top + bottom) / (bottom - top)).
        properties = PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d lookAlong(Vector3dc dir, Vector3dc up) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4d lookAlong(Vector3dc dir, Vector3dc up, Matrix4d dest) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4d lookAlong(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAlong(dirX, dirY, dirZ, upX, upY, upZ);
        return lookAlongGeneric(dirX, dirY, dirZ, upX, upY, upZ, dest);
    }
    private Matrix4d lookAlongGeneric(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix4d dest) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        double rm00 = leftX;
        double rm01 = upnX;
        double rm02 = dirX;
        double rm10 = leftY;
        double rm11 = upnY;
        double rm12 = dirY;
        double rm20 = leftZ;
        double rm21 = upnZ;
        double rm22 = dirZ;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d lookAlong(double dirX, double dirY, double dirZ,
                              double upX, double upY, double upZ) {
        return lookAlong(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix4d setLookAlong(Vector3dc dir, Vector3dc up) {
        return setLookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4d setLookAlong(double dirX, double dirY, double dirZ,
                                 double upX, double upY, double upZ) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        _m00(leftX).
        _m01(upnX).
        _m02(dirX).
        _m03(0.0).
        _m10(leftY).
        _m11(upnY).
        _m12(dirY).
        _m13(0.0).
        _m20(leftZ).
        _m21(upnZ).
        _m22(dirZ).
        _m23(0.0).
        _m30(0.0).
        _m31(0.0).
        _m32(0.0).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d setLookAt(Vector3dc eye, Vector3dc center, Vector3dc up) {
        return setLookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z());
    }
    public Matrix4d setLookAt(double eyeX, double eyeY, double eyeZ,
                              double centerX, double centerY, double centerZ,
                              double upX, double upY, double upZ) {
        double dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        return this.
        _m00(leftX).
        _m01(upnX).
        _m02(dirX).
        _m03(0.0).
        _m10(leftY).
        _m11(upnY).
        _m12(dirY).
        _m13(0.0).
        _m20(leftZ).
        _m21(upnZ).
        _m22(dirZ).
        _m23(0.0).
        _m30(-(leftX * eyeX + leftY * eyeY + leftZ * eyeZ)).
        _m31(-(upnX * eyeX + upnY * eyeY + upnZ * eyeZ)).
        _m32(-(dirX * eyeX + dirY * eyeY + dirZ * eyeZ)).
        _m33(1.0).
        _properties(PROPERTY_AFFINE | PROPERTY_ORTHONORMAL);
    }
    public Matrix4d lookAt(Vector3dc eye, Vector3dc center, Vector3dc up, Matrix4d dest) {
        return lookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4d lookAt(Vector3dc eye, Vector3dc center, Vector3dc up) {
        return lookAt(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4d lookAt(double eyeX, double eyeY, double eyeZ,
                           double centerX, double centerY, double centerZ,
                           double upX, double upY, double upZ, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return lookAtPerspective(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
        return lookAtGeneric(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
    }
    private Matrix4d lookAtGeneric(double eyeX, double eyeY, double eyeZ,
                                   double centerX, double centerY, double centerZ,
                                   double upX, double upY, double upZ, Matrix4d dest) {
        double dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        double rm00 = leftX;
        double rm01 = upnX;
        double rm02 = dirX;
        double rm10 = leftY;
        double rm11 = upnY;
        double rm12 = dirY;
        double rm20 = leftZ;
        double rm21 = upnZ;
        double rm22 = dirZ;
        double rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        double rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        double rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m23 * rm32 + m33)
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d lookAt(double eyeX, double eyeY, double eyeZ,
                           double centerX, double centerY, double centerZ,
                           double upX, double upY, double upZ) {
        return lookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, this);
    }
    public Matrix4d lookAtPerspective(double eyeX, double eyeY, double eyeZ,
            double centerX, double centerY, double centerZ,
            double upX, double upY, double upZ, Matrix4d dest) {
        double dirX, dirY, dirZ;
        dirX = eyeX - centerX;
        dirY = eyeY - centerY;
        dirZ = eyeZ - centerZ;
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        double rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        double rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        double rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        double nm10 = m00 * leftY;
        double nm20 = m00 * leftZ;
        double nm21 = m11 * upnZ;
        double nm30 = m00 * rm30;
        double nm31 = m11 * rm31;
        double nm32 = m22 * rm32 + m32;
        double nm33 = m23 * rm32;
        return dest
        ._m00(m00 * leftX)
        ._m01(m11 * upnX)
        ._m02(m22 * dirX)
        ._m03(m23 * dirX)
        ._m10(nm10)
        ._m11(m11 * upnY)
        ._m12(m22 * dirY)
        ._m13(m23 * dirY)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(m22 * dirZ)
        ._m23(m23 * dirZ)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
    }
    public Matrix4d setLookAtLH(Vector3dc eye, Vector3dc center, Vector3dc up) {
        return setLookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z());
    }
    public Matrix4d setLookAtLH(double eyeX, double eyeY, double eyeZ,
                                double centerX, double centerY, double centerZ,
                                double upX, double upY, double upZ) {
        double dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        _m00(leftX).
        _m01(upnX).
        _m02(dirX).
        _m03(0.0).
        _m10(leftY).
        _m11(upnY).
        _m12(dirY).
        _m13(0.0).
        _m20(leftZ).
        _m21(upnZ).
        _m22(dirZ).
        _m23(0.0).
        _m30(-(leftX * eyeX + leftY * eyeY + leftZ * eyeZ)).
        _m31(-(upnX * eyeX + upnY * eyeY + upnZ * eyeZ)).
        _m32(-(dirX * eyeX + dirY * eyeY + dirZ * eyeZ)).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d lookAtLH(Vector3dc eye, Vector3dc center, Vector3dc up, Matrix4d dest) {
        return lookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4d lookAtLH(Vector3dc eye, Vector3dc center, Vector3dc up) {
        return lookAtLH(eye.x(), eye.y(), eye.z(), center.x(), center.y(), center.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4d lookAtLH(double eyeX, double eyeY, double eyeZ,
                             double centerX, double centerY, double centerZ,
                             double upX, double upY, double upZ, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setLookAtLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        else if ((properties & PROPERTY_PERSPECTIVE) != 0)
            return lookAtPerspectiveLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
        return lookAtLHGeneric(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, dest);
    }
    private Matrix4d lookAtLHGeneric(double eyeX, double eyeY, double eyeZ,
                                     double centerX, double centerY, double centerZ,
                                     double upX, double upY, double upZ, Matrix4d dest) {
        double dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        double rm00 = leftX;
        double rm01 = upnX;
        double rm02 = dirX;
        double rm10 = leftY;
        double rm11 = upnY;
        double rm12 = dirY;
        double rm20 = leftZ;
        double rm21 = upnZ;
        double rm22 = dirZ;
        double rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        double rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        double rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32)
        ._m33(m03 * rm30 + m13 * rm31 + m23 * rm32 + m33)
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d lookAtLH(double eyeX, double eyeY, double eyeZ,
                             double centerX, double centerY, double centerZ,
                             double upX, double upY, double upZ) {
        return lookAtLH(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ, this);
    }
    public Matrix4d lookAtPerspectiveLH(double eyeX, double eyeY, double eyeZ,
            double centerX, double centerY, double centerZ,
            double upX, double upY, double upZ, Matrix4d dest) {
        double dirX, dirY, dirZ;
        dirX = centerX - eyeX;
        dirY = centerY - eyeY;
        dirZ = centerZ - eyeZ;
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLength;
        dirY *= invDirLength;
        dirZ *= invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        double rm00 = leftX;
        double rm01 = upnX;
        double rm02 = dirX;
        double rm10 = leftY;
        double rm11 = upnY;
        double rm12 = dirY;
        double rm20 = leftZ;
        double rm21 = upnZ;
        double rm22 = dirZ;
        double rm30 = -(leftX * eyeX + leftY * eyeY + leftZ * eyeZ);
        double rm31 = -(upnX * eyeX + upnY * eyeY + upnZ * eyeZ);
        double rm32 = -(dirX * eyeX + dirY * eyeY + dirZ * eyeZ);
        double nm00 = m00 * rm00;
        double nm01 = m11 * rm01;
        double nm02 = m22 * rm02;
        double nm03 = m23 * rm02;
        double nm10 = m00 * rm10;
        double nm11 = m11 * rm11;
        double nm12 = m22 * rm12;
        double nm13 = m23 * rm12;
        double nm20 = m00 * rm20;
        double nm21 = m11 * rm21;
        double nm22 = m22 * rm22;
        double nm23 = m23 * rm22;
        double nm30 = m00 * rm30;
        double nm31 = m11 * rm31;
        double nm32 = m22 * rm32 + m32;
        double nm33 = m23 * rm32;
        dest._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m30(nm30)
        ._m31(nm31)
        ._m32(nm32)
        ._m33(nm33)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d tile(int x, int y, int w, int h) {
        return tile(x, y, w, h, this);
    }
    public Matrix4d tile(int x, int y, int w, int h, Matrix4d dest) {
        float tx = w - 1 - (x<<1), ty = h - 1 - (y<<1);
        return dest
        ._m30(Math.fma(m00, tx, Math.fma(m10, ty, m30)))
        ._m31(Math.fma(m01, tx, Math.fma(m11, ty, m31)))
        ._m32(Math.fma(m02, tx, Math.fma(m12, ty, m32)))
        ._m33(Math.fma(m03, tx, Math.fma(m13, ty, m33)))
        ._m00(m00 * w)
        ._m01(m01 * w)
        ._m02(m02 * w)
        ._m03(m03 * w)
        ._m10(m10 * h)
        ._m11(m11 * h)
        ._m12(m12 * h)
        ._m13(m13 * h)
        ._m20(m20)
        ._m21(m21)
        ._m22(m22)
        ._m23(m23)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d perspective(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspective(fovy, aspect, zNear, zFar, zZeroToOne);
        return perspectiveGeneric(fovy, aspect, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d perspectiveGeneric(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double h = Math.tan(fovy * 0.5);
        double rm00 = 1.0 / (h * aspect);
        double rm11 = 1.0 / h;
        double rm22;
        double rm32;
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            rm22 = e - 1.0;
            rm32 = (e - (zZeroToOne ? 1.0 : 2.0)) * zNear;
        } else if (nearInf) {
            double e = 1E-6;
            rm22 = (zZeroToOne ? 0.0 : 1.0) - e;
            rm32 = ((zZeroToOne ? 1.0 : 2.0) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        double nm20 = m20 * rm22 - m30;
        double nm21 = m21 * rm22 - m31;
        double nm22 = m22 * rm22 - m32;
        double nm23 = m23 * rm22 - m33;
        dest._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m30(m20 * rm32)
        ._m31(m21 * rm32)
        ._m32(m22 * rm32)
        ._m33(m23 * rm32)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d perspective(double fovy, double aspect, double zNear, double zFar, Matrix4d dest) {
        return perspective(fovy, aspect, zNear, zFar, false, dest);
    }
    public Matrix4d perspective(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne) {
        return perspective(fovy, aspect, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d perspective(double fovy, double aspect, double zNear, double zFar) {
        return perspective(fovy, aspect, zNear, zFar, this);
    }
    public Matrix4d perspectiveRect(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspectiveRect(width, height, zNear, zFar, zZeroToOne);
        return perspectiveRectGeneric(width, height, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d perspectiveRectGeneric(double width, double height, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = (zNear + zNear) / width;
        double rm11 = (zNear + zNear) / height;
        double rm22, rm32;
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6f;
            rm22 = e - 1.0;
            rm32 = (e - (zZeroToOne ? 1.0 : 2.0)) * zNear;
        } else if (nearInf) {
            double e = 1E-6f;
            rm22 = (zZeroToOne ? 0.0 : 1.0) - e;
            rm32 = ((zZeroToOne ? 1.0 : 2.0) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        double nm20 = m20 * rm22 - m30;
        double nm21 = m21 * rm22 - m31;
        double nm22 = m22 * rm22 - m32;
        double nm23 = m23 * rm22 - m33;
        dest._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m30(m20 * rm32)
        ._m31(m21 * rm32)
        ._m32(m22 * rm32)
        ._m33(m23 * rm32)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d perspectiveRect(double width, double height, double zNear, double zFar, Matrix4d dest) {
        return perspectiveRect(width, height, zNear, zFar, false, dest);
    }
    public Matrix4d perspectiveRect(double width, double height, double zNear, double zFar, boolean zZeroToOne) {
        return perspectiveRect(width, height, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d perspectiveRect(double width, double height, double zNear, double zFar) {
        return perspectiveRect(width, height, zNear, zFar, this);
    }
    public Matrix4d perspectiveOffCenter(double fovy, double offAngleX, double offAngleY, double aspect, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, zZeroToOne);
        return perspectiveOffCenterGeneric(fovy, offAngleX, offAngleY, aspect, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d perspectiveOffCenterGeneric(double fovy, double offAngleX, double offAngleY, double aspect, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double h = Math.tan(fovy * 0.5);
        double xScale = 1.0 / (h * aspect);
        double yScale = 1.0 / h;
        double rm00 = xScale;
        double rm11 = yScale;
        double offX = Math.tan(offAngleX), offY = Math.tan(offAngleY);
        double rm20 = offX * xScale;
        double rm21 = offY * yScale;
        double rm22;
        double rm32;
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            rm22 = e - 1.0;
            rm32 = (e - (zZeroToOne ? 1.0 : 2.0)) * zNear;
        } else if (nearInf) {
            double e = 1E-6;
            rm22 = (zZeroToOne ? 0.0 : 1.0) - e;
            rm32 = ((zZeroToOne ? 1.0 : 2.0) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        double nm20 = m00 * rm20 + m10 * rm21 + m20 * rm22 - m30;
        double nm21 = m01 * rm20 + m11 * rm21 + m21 * rm22 - m31;
        double nm22 = m02 * rm20 + m12 * rm21 + m22 * rm22 - m32;
        double nm23 = m03 * rm20 + m13 * rm21 + m23 * rm22 - m33;
        dest._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m30(m20 * rm32)
        ._m31(m21 * rm32)
        ._m32(m22 * rm32)
        ._m33(m23 * rm32)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION
                | PROPERTY_ORTHONORMAL | (rm20 == 0.0 && rm21 == 0.0 ? 0 : PROPERTY_PERSPECTIVE)));
        return dest;
    }
    public Matrix4d perspectiveOffCenter(double fovy, double offAngleX, double offAngleY, double aspect, double zNear, double zFar, Matrix4d dest) {
        return perspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, false, dest);
    }
    public Matrix4d perspectiveOffCenter(double fovy, double offAngleX, double offAngleY, double aspect, double zNear, double zFar, boolean zZeroToOne) {
        return perspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d perspectiveOffCenter(double fovy, double offAngleX, double offAngleY, double aspect, double zNear, double zFar) {
        return perspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, this);
    }
    public Matrix4d perspectiveOffCenterFov(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, boolean zZeroToOne) {
        return perspectiveOffCenterFov(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d perspectiveOffCenterFov(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        return frustum(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne, dest);
    }
    public Matrix4d perspectiveOffCenterFov(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar) {
        return perspectiveOffCenterFov(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, this);
    }
    public Matrix4d perspectiveOffCenterFov(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, Matrix4d dest) {
        return frustum(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, dest);
    }
    public Matrix4d perspectiveOffCenterFovLH(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, boolean zZeroToOne) {
        return perspectiveOffCenterFovLH(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d perspectiveOffCenterFovLH(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        return frustumLH(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne, dest);
    }
    public Matrix4d perspectiveOffCenterFovLH(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar) {
        return perspectiveOffCenterFovLH(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, this);
    }
    public Matrix4d perspectiveOffCenterFovLH(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, Matrix4d dest) {
        return frustumLH(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, dest);
    }
    public Matrix4d setPerspective(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne) {
        double h = Math.tan(fovy * 0.5);
        _m00(1.0 / (h * aspect)).
        _m01(0.0).
        _m02(0.0).
        _m03(0.0).
        _m10(0.0).
        _m11(1.0 / h).
        _m12(0.0).
        _m13(0.0).
        _m20(0.0).
        _m21(0.0);
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            _m22(e - 1.0).
            _m32((e - (zZeroToOne ? 1.0 : 2.0)) * zNear);
        } else if (nearInf) {
            double e = 1E-6;
            _m22((zZeroToOne ? 0.0 : 1.0) - e).
            _m32(((zZeroToOne ? 1.0 : 2.0) - e) * zFar);
        } else {
            _m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar)).
            _m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        _m23(-1.0).
        _m30(0.0).
        _m31(0.0).
        _m33(0.0).
        properties = PROPERTY_PERSPECTIVE;
        return this;
    }
    public Matrix4d setPerspective(double fovy, double aspect, double zNear, double zFar) {
        return setPerspective(fovy, aspect, zNear, zFar, false);
    }
    public Matrix4d setPerspectiveRect(double width, double height, double zNear, double zFar, boolean zZeroToOne) {
        this.zero();
        this._m00((zNear + zNear) / width);
        this._m11((zNear + zNear) / height);
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            this._m22(e - 1.0);
            this._m32((e - (zZeroToOne ? 1.0 : 2.0)) * zNear);
        } else if (nearInf) {
            double e = 1E-6f;
            this._m22((zZeroToOne ? 0.0 : 1.0) - e);
            this._m32(((zZeroToOne ? 1.0 : 2.0) - e) * zFar);
        } else {
            this._m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar));
            this._m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        this._m23(-1.0);
        properties = PROPERTY_PERSPECTIVE;
        return this;
    }
    public Matrix4d setPerspectiveRect(double width, double height, double zNear, double zFar) {
        return setPerspectiveRect(width, height, zNear, zFar, false);
    }
    public Matrix4d setPerspectiveOffCenter(double fovy, double offAngleX, double offAngleY,
            double aspect, double zNear, double zFar) {
        return setPerspectiveOffCenter(fovy, offAngleX, offAngleY, aspect, zNear, zFar, false);
    }
    public Matrix4d setPerspectiveOffCenter(double fovy, double offAngleX, double offAngleY,
                                            double aspect, double zNear, double zFar, boolean zZeroToOne) {
        this.zero();
        double h = Math.tan(fovy * 0.5);
        double xScale = 1.0 / (h * aspect), yScale = 1.0 / h;
        _m00(xScale).
        _m11(yScale);
        double offX = Math.tan(offAngleX), offY = Math.tan(offAngleY);
        _m20(offX * xScale).
        _m21(offY * yScale);
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            _m22(e - 1.0).
            _m32((e - (zZeroToOne ? 1.0 : 2.0)) * zNear);
        } else if (nearInf) {
            double e = 1E-6;
            _m22((zZeroToOne ? 0.0 : 1.0) - e).
            _m32(((zZeroToOne ? 1.0 : 2.0) - e) * zFar);
        } else {
            _m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar)).
            _m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        _m23(-1.0).
        _m30(0.0).
        _m31(0.0).
        _m33(0.0).
        properties = offAngleX == 0.0 && offAngleY == 0.0 ? PROPERTY_PERSPECTIVE : 0;
        return this;
    }
    public Matrix4d setPerspectiveOffCenterFov(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar) {
        return setPerspectiveOffCenterFov(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, false);
    }
    public Matrix4d setPerspectiveOffCenterFov(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, boolean zZeroToOne) {
        return setFrustum(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne);
    }
    public Matrix4d setPerspectiveOffCenterFovLH(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar) {
        return setPerspectiveOffCenterFovLH(angleLeft, angleRight, angleDown, angleUp, zNear, zFar, false);
    }
    public Matrix4d setPerspectiveOffCenterFovLH(double angleLeft, double angleRight, double angleDown, double angleUp, double zNear, double zFar, boolean zZeroToOne) {
        return setFrustumLH(Math.tan(angleLeft)*zNear, Math.tan(angleRight)*zNear, Math.tan(angleDown)*zNear, Math.tan(angleUp)*zNear, zNear, zFar, zZeroToOne);
    }
    public Matrix4d perspectiveLH(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setPerspectiveLH(fovy, aspect, zNear, zFar, zZeroToOne);
        return perspectiveLHGeneric(fovy, aspect, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d perspectiveLHGeneric(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double h = Math.tan(fovy * 0.5);
        double rm00 = 1.0 / (h * aspect);
        double rm11 = 1.0 / h;
        double rm22;
        double rm32;
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            rm22 = 1.0 - e;
            rm32 = (e - (zZeroToOne ? 1.0 : 2.0)) * zNear;
        } else if (nearInf) {
            double e = 1E-6;
            rm22 = (zZeroToOne ? 0.0 : 1.0) - e;
            rm32 = ((zZeroToOne ? 1.0 : 2.0) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        double nm20 = m20 * rm22 + m30;
        double nm21 = m21 * rm22 + m31;
        double nm22 = m22 * rm22 + m32;
        double nm23 = m23 * rm22 + m33;
        dest._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m30(m20 * rm32)
        ._m31(m21 * rm32)
        ._m32(m22 * rm32)
        ._m33(m23 * rm32)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(properties & ~(PROPERTY_AFFINE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d perspectiveLH(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne) {
        return perspectiveLH(fovy, aspect, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d perspectiveLH(double fovy, double aspect, double zNear, double zFar, Matrix4d dest) {
        return perspectiveLH(fovy, aspect, zNear, zFar, false, dest);
    }
    public Matrix4d perspectiveLH(double fovy, double aspect, double zNear, double zFar) {
        return perspectiveLH(fovy, aspect, zNear, zFar, this);
    }
    public Matrix4d setPerspectiveLH(double fovy, double aspect, double zNear, double zFar, boolean zZeroToOne) {
        double h = Math.tan(fovy * 0.5);
        _m00(1.0 / (h * aspect)).
        _m01(0.0).
        _m02(0.0).
        _m03(0.0).
        _m10(0.0).
        _m11(1.0 / h).
        _m12(0.0).
        _m13(0.0).
        _m20(0.0).
        _m21(0.0);
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            _m22(1.0 - e).
            _m32((e - (zZeroToOne ? 1.0 : 2.0)) * zNear);
        } else if (nearInf) {
            double e = 1E-6;
            _m22((zZeroToOne ? 0.0 : 1.0) - e).
            _m32(((zZeroToOne ? 1.0 : 2.0) - e) * zFar);
        } else {
            _m22((zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear)).
            _m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        _m23(1.0).
        _m30(0.0).
        _m31(0.0).
        _m33(0.0).
        properties = PROPERTY_PERSPECTIVE;
        return this;
    }
    public Matrix4d setPerspectiveLH(double fovy, double aspect, double zNear, double zFar) {
        return setPerspectiveLH(fovy, aspect, zNear, zFar, false);
    }
    public Matrix4d frustum(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setFrustum(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return frustumGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d frustumGeneric(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = (zNear + zNear) / (right - left);
        double rm11 = (zNear + zNear) / (top - bottom);
        double rm20 = (right + left) / (right - left);
        double rm21 = (top + bottom) / (top - bottom);
        double rm22;
        double rm32;
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            rm22 = e - 1.0;
            rm32 = (e - (zZeroToOne ? 1.0 : 2.0)) * zNear;
        } else if (nearInf) {
            double e = 1E-6;
            rm22 = (zZeroToOne ? 0.0 : 1.0) - e;
            rm32 = ((zZeroToOne ? 1.0 : 2.0) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        double nm20 = m00 * rm20 + m10 * rm21 + m20 * rm22 - m30;
        double nm21 = m01 * rm20 + m11 * rm21 + m21 * rm22 - m31;
        double nm22 = m02 * rm20 + m12 * rm21 + m22 * rm22 - m32;
        double nm23 = m03 * rm20 + m13 * rm21 + m23 * rm22 - m33;
        dest._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m30(m20 * rm32)
        ._m31(m21 * rm32)
        ._m32(m22 * rm32)
        ._m33(m23 * rm32)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d frustum(double left, double right, double bottom, double top, double zNear, double zFar, Matrix4d dest) {
        return frustum(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4d frustum(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        return frustum(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d frustum(double left, double right, double bottom, double top, double zNear, double zFar) {
        return frustum(left, right, bottom, top, zNear, zFar, this);
    }
    public Matrix4d setFrustum(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00((zNear + zNear) / (right - left)).
        _m11((zNear + zNear) / (top - bottom)).
        _m20((right + left) / (right - left)).
        _m21((top + bottom) / (top - bottom));
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            _m22(e - 1.0).
            _m32((e - (zZeroToOne ? 1.0 : 2.0)) * zNear);
        } else if (nearInf) {
            double e = 1E-6;
            _m22((zZeroToOne ? 0.0 : 1.0) - e).
            _m32(((zZeroToOne ? 1.0 : 2.0) - e) * zFar);
        } else {
            _m22((zZeroToOne ? zFar : zFar + zNear) / (zNear - zFar)).
            _m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        _m23(-1.0).
        _m33(0.0).
        properties = this.m20 == 0.0 && this.m21 == 0.0 ? PROPERTY_PERSPECTIVE : 0;
        return this;
    }
    public Matrix4d setFrustum(double left, double right, double bottom, double top, double zNear, double zFar) {
        return setFrustum(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4d frustumLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        if ((properties & PROPERTY_IDENTITY) != 0)
            return dest.setFrustumLH(left, right, bottom, top, zNear, zFar, zZeroToOne);
        return frustumLHGeneric(left, right, bottom, top, zNear, zFar, zZeroToOne, dest);
    }
    private Matrix4d frustumLHGeneric(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne, Matrix4d dest) {
        double rm00 = (zNear + zNear) / (right - left);
        double rm11 = (zNear + zNear) / (top - bottom);
        double rm20 = (right + left) / (right - left);
        double rm21 = (top + bottom) / (top - bottom);
        double rm22;
        double rm32;
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            rm22 = 1.0 - e;
            rm32 = (e - (zZeroToOne ? 1.0 : 2.0)) * zNear;
        } else if (nearInf) {
            double e = 1E-6;
            rm22 = (zZeroToOne ? 0.0 : 1.0) - e;
            rm32 = ((zZeroToOne ? 1.0 : 2.0) - e) * zFar;
        } else {
            rm22 = (zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear);
            rm32 = (zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar);
        }
        double nm20 = m00 * rm20 + m10 * rm21 + m20 * rm22 + m30;
        double nm21 = m01 * rm20 + m11 * rm21 + m21 * rm22 + m31;
        double nm22 = m02 * rm20 + m12 * rm21 + m22 * rm22 + m32;
        double nm23 = m03 * rm20 + m13 * rm21 + m23 * rm22 + m33;
        dest._m00(m00 * rm00)
        ._m01(m01 * rm00)
        ._m02(m02 * rm00)
        ._m03(m03 * rm00)
        ._m10(m10 * rm11)
        ._m11(m11 * rm11)
        ._m12(m12 * rm11)
        ._m13(m13 * rm11)
        ._m30(m20 * rm32)
        ._m31(m21 * rm32)
        ._m32(m22 * rm32)
        ._m33(m23 * rm32)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d frustumLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        return frustumLH(left, right, bottom, top, zNear, zFar, zZeroToOne, this);
    }
    public Matrix4d frustumLH(double left, double right, double bottom, double top, double zNear, double zFar, Matrix4d dest) {
        return frustumLH(left, right, bottom, top, zNear, zFar, false, dest);
    }
    public Matrix4d frustumLH(double left, double right, double bottom, double top, double zNear, double zFar) {
        return frustumLH(left, right, bottom, top, zNear, zFar, this);
    }
    public Matrix4d setFrustumLH(double left, double right, double bottom, double top, double zNear, double zFar, boolean zZeroToOne) {
        if ((properties & PROPERTY_IDENTITY) == 0)
            _identity();
        _m00((zNear + zNear) / (right - left)).
        _m11((zNear + zNear) / (top - bottom)).
        _m20((right + left) / (right - left)).
        _m21((top + bottom) / (top - bottom));
        boolean farInf = zFar > 0 && Double.isInfinite(zFar);
        boolean nearInf = zNear > 0 && Double.isInfinite(zNear);
        if (farInf) {
            double e = 1E-6;
            _m22(1.0 - e).
            _m32((e - (zZeroToOne ? 1.0 : 2.0)) * zNear);
        } else if (nearInf) {
            double e = 1E-6;
            _m22((zZeroToOne ? 0.0 : 1.0) - e).
            _m32(((zZeroToOne ? 1.0 : 2.0) - e) * zFar);
        } else {
            _m22((zZeroToOne ? zFar : zFar + zNear) / (zFar - zNear)).
            _m32((zZeroToOne ? zFar : zFar + zFar) * zNear / (zNear - zFar));
        }
        _m23(1.0).
        _m33(0.0).
        properties = this.m20 == 0.0 && this.m21 == 0.0 ? PROPERTY_PERSPECTIVE : 0;
        return this;
    }
    public Matrix4d setFrustumLH(double left, double right, double bottom, double top, double zNear, double zFar) {
        return setFrustumLH(left, right, bottom, top, zNear, zFar, false);
    }
    public Matrix4d setFromIntrinsic(double alphaX, double alphaY, double gamma, double u0, double v0, int imgWidth, int imgHeight, double near, double far) {
        double l00 = 2.0 / imgWidth;
        double l11 = 2.0 / imgHeight;
        double invNearFar = 1.0 / (near - far);
        double l22 = 2.0 * invNearFar;
        this.m00 = l00 * alphaX;
        this.m01 = 0.0;
        this.m02 = 0.0;
        this.m03 = 0.0;
        this.m10 = l00 * gamma;
        this.m11 = l11 * alphaY;
        this.m12 = 0.0;
        this.m13 = 0.0;
        this.m20 = l00 * u0 - 1.0;
        this.m21 = l11 * v0 - 1.0;
        this.m22 = l22 * -(near + far) + (far + near) * invNearFar;
        this.m23 = -1.0;
        this.m30 = 0.0;
        this.m31 = 0.0;
        this.m32 = l22 * -near * far;
        this.m33 = 0.0;
        this.properties = PROPERTY_PERSPECTIVE;
        return this;
    }
    public Vector4d frustumPlane(int plane, Vector4d dest) {
        switch (plane) {
        case PLANE_NX:
            dest.set(m03 + m00, m13 + m10, m23 + m20, m33 + m30).normalize3();
            break;
        case PLANE_PX:
            dest.set(m03 - m00, m13 - m10, m23 - m20, m33 - m30).normalize3();
            break;
        case PLANE_NY:
            dest.set(m03 + m01, m13 + m11, m23 + m21, m33 + m31).normalize3();
            break;
        case PLANE_PY:
            dest.set(m03 - m01, m13 - m11, m23 - m21, m33 - m31).normalize3();
            break;
        case PLANE_NZ:
            dest.set(m03 + m02, m13 + m12, m23 + m22, m33 + m32).normalize3();
            break;
        case PLANE_PZ:
            dest.set(m03 - m02, m13 - m12, m23 - m22, m33 - m32).normalize3();
            break;
        default:
            throw new IllegalArgumentException("dest"); 
        }
        return dest;
    }
    public Vector3d frustumCorner(int corner, Vector3d dest) {
        double d1, d2, d3;
        double n1x, n1y, n1z, n2x, n2y, n2z, n3x, n3y, n3z;
        switch (corner) {
        case CORNER_NXNYNZ: 
            n1x = m03 + m00; n1y = m13 + m10; n1z = m23 + m20; d1 = m33 + m30; 
            n2x = m03 + m01; n2y = m13 + m11; n2z = m23 + m21; d2 = m33 + m31; 
            n3x = m03 + m02; n3y = m13 + m12; n3z = m23 + m22; d3 = m33 + m32; 
            break;
        case CORNER_PXNYNZ: 
            n1x = m03 - m00; n1y = m13 - m10; n1z = m23 - m20; d1 = m33 - m30; 
            n2x = m03 + m01; n2y = m13 + m11; n2z = m23 + m21; d2 = m33 + m31; 
            n3x = m03 + m02; n3y = m13 + m12; n3z = m23 + m22; d3 = m33 + m32; 
            break;
        case CORNER_PXPYNZ: 
            n1x = m03 - m00; n1y = m13 - m10; n1z = m23 - m20; d1 = m33 - m30; 
            n2x = m03 - m01; n2y = m13 - m11; n2z = m23 - m21; d2 = m33 - m31; 
            n3x = m03 + m02; n3y = m13 + m12; n3z = m23 + m22; d3 = m33 + m32; 
            break;
        case CORNER_NXPYNZ: 
            n1x = m03 + m00; n1y = m13 + m10; n1z = m23 + m20; d1 = m33 + m30; 
            n2x = m03 - m01; n2y = m13 - m11; n2z = m23 - m21; d2 = m33 - m31; 
            n3x = m03 + m02; n3y = m13 + m12; n3z = m23 + m22; d3 = m33 + m32; 
            break;
        case CORNER_PXNYPZ: 
            n1x = m03 - m00; n1y = m13 - m10; n1z = m23 - m20; d1 = m33 - m30; 
            n2x = m03 + m01; n2y = m13 + m11; n2z = m23 + m21; d2 = m33 + m31; 
            n3x = m03 - m02; n3y = m13 - m12; n3z = m23 - m22; d3 = m33 - m32; 
            break;
        case CORNER_NXNYPZ: 
            n1x = m03 + m00; n1y = m13 + m10; n1z = m23 + m20; d1 = m33 + m30; 
            n2x = m03 + m01; n2y = m13 + m11; n2z = m23 + m21; d2 = m33 + m31; 
            n3x = m03 - m02; n3y = m13 - m12; n3z = m23 - m22; d3 = m33 - m32; 
            break;
        case CORNER_NXPYPZ: 
            n1x = m03 + m00; n1y = m13 + m10; n1z = m23 + m20; d1 = m33 + m30; 
            n2x = m03 - m01; n2y = m13 - m11; n2z = m23 - m21; d2 = m33 - m31; 
            n3x = m03 - m02; n3y = m13 - m12; n3z = m23 - m22; d3 = m33 - m32; 
            break;
        case CORNER_PXPYPZ: 
            n1x = m03 - m00; n1y = m13 - m10; n1z = m23 - m20; d1 = m33 - m30; 
            n2x = m03 - m01; n2y = m13 - m11; n2z = m23 - m21; d2 = m33 - m31; 
            n3x = m03 - m02; n3y = m13 - m12; n3z = m23 - m22; d3 = m33 - m32; 
            break;
        default:
            throw new IllegalArgumentException("corner"); 
        }
        double c23x, c23y, c23z;
        c23x = n2y * n3z - n2z * n3y;
        c23y = n2z * n3x - n2x * n3z;
        c23z = n2x * n3y - n2y * n3x;
        double c31x, c31y, c31z;
        c31x = n3y * n1z - n3z * n1y;
        c31y = n3z * n1x - n3x * n1z;
        c31z = n3x * n1y - n3y * n1x;
        double c12x, c12y, c12z;
        c12x = n1y * n2z - n1z * n2y;
        c12y = n1z * n2x - n1x * n2z;
        c12z = n1x * n2y - n1y * n2x;
        double invDot = 1.0 / (n1x * c23x + n1y * c23y + n1z * c23z);
        dest.x = (-c23x * d1 - c31x * d2 - c12x * d3) * invDot;
        dest.y = (-c23y * d1 - c31y * d2 - c12y * d3) * invDot;
        dest.z = (-c23z * d1 - c31z * d2 - c12z * d3) * invDot;
        return dest;
    }
    public Vector3d perspectiveOrigin(Vector3d dest) {
        double d1, d2, d3;
        double n1x, n1y, n1z, n2x, n2y, n2z, n3x, n3y, n3z;
        n1x = m03 + m00; n1y = m13 + m10; n1z = m23 + m20; d1 = m33 + m30; 
        n2x = m03 - m00; n2y = m13 - m10; n2z = m23 - m20; d2 = m33 - m30; 
        n3x = m03 - m01; n3y = m13 - m11; n3z = m23 - m21; d3 = m33 - m31; 
        double c23x, c23y, c23z;
        c23x = n2y * n3z - n2z * n3y;
        c23y = n2z * n3x - n2x * n3z;
        c23z = n2x * n3y - n2y * n3x;
        double c31x, c31y, c31z;
        c31x = n3y * n1z - n3z * n1y;
        c31y = n3z * n1x - n3x * n1z;
        c31z = n3x * n1y - n3y * n1x;
        double c12x, c12y, c12z;
        c12x = n1y * n2z - n1z * n2y;
        c12y = n1z * n2x - n1x * n2z;
        c12z = n1x * n2y - n1y * n2x;
        double invDot = 1.0 / (n1x * c23x + n1y * c23y + n1z * c23z);
        dest.x = (-c23x * d1 - c31x * d2 - c12x * d3) * invDot;
        dest.y = (-c23y * d1 - c31y * d2 - c12y * d3) * invDot;
        dest.z = (-c23z * d1 - c31z * d2 - c12z * d3) * invDot;
        return dest;
    }
    public Vector3d perspectiveInvOrigin(Vector3d dest) {
        double invW = 1.0 / m23;
        dest.x = m20 * invW;
        dest.y = m21 * invW;
        dest.z = m22 * invW;
        return dest;
    }
    public double perspectiveFov() {
        double n1x, n1y, n1z, n2x, n2y, n2z;
        n1x = m03 + m01; n1y = m13 + m11; n1z = m23 + m21; 
        n2x = m01 - m03; n2y = m11 - m13; n2z = m21 - m23; 
        double n1len = Math.sqrt(n1x * n1x + n1y * n1y + n1z * n1z);
        double n2len = Math.sqrt(n2x * n2x + n2y * n2y + n2z * n2z);
        return Math.acos((n1x * n2x + n1y * n2y + n1z * n2z) / (n1len * n2len));
    }
    public double perspectiveNear() {
        return m32 / (m23 + m22);
    }
    public double perspectiveFar() {
        return m32 / (m22 - m23);
    }
    public Vector3d frustumRayDir(double x, double y, Vector3d dest) {
        double a = m10 * m23, b = m13 * m21, c = m10 * m21, d = m11 * m23, e = m13 * m20, f = m11 * m20;
        double g = m03 * m20, h = m01 * m23, i = m01 * m20, j = m03 * m21, k = m00 * m23, l = m00 * m21;
        double m = m00 * m13, n = m03 * m11, o = m00 * m11, p = m01 * m13, q = m03 * m10, r = m01 * m10;
        double m1x, m1y, m1z;
        m1x = (d + e + f - a - b - c) * (1.0 - y) + (a - b - c + d - e + f) * y;
        m1y = (j + k + l - g - h - i) * (1.0 - y) + (g - h - i + j - k + l) * y;
        m1z = (p + q + r - m - n - o) * (1.0 - y) + (m - n - o + p - q + r) * y;
        double m2x, m2y, m2z;
        m2x = (b - c - d + e + f - a) * (1.0 - y) + (a + b - c - d - e + f) * y;
        m2y = (h - i - j + k + l - g) * (1.0 - y) + (g + h - i - j - k + l) * y;
        m2z = (n - o - p + q + r - m) * (1.0 - y) + (m + n - o - p - q + r) * y;
        dest.x = m1x * (1.0 - x) + m2x * x;
        dest.y = m1y * (1.0 - x) + m2y * x;
        dest.z = m1z * (1.0 - x) + m2z * x;
        return dest.normalize(dest);
    }
    public Vector3d positiveZ(Vector3d dir) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalizedPositiveZ(dir);
        return positiveZGeneric(dir);
    }
    private Vector3d positiveZGeneric(Vector3d dir) {
        return dir.set(m10 * m21 - m11 * m20, m20 * m01 - m21 * m00, m00 * m11 - m01 * m10).normalize();
    }
    public Vector3d normalizedPositiveZ(Vector3d dir) {
        return dir.set(m02, m12, m22);
    }
    public Vector3d positiveX(Vector3d dir) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalizedPositiveX(dir);
        return positiveXGeneric(dir);
    }
    private Vector3d positiveXGeneric(Vector3d dir) {
        return dir.set(m11 * m22 - m12 * m21, m02 * m21 - m01 * m22, m01 * m12 - m02 * m11).normalize();
    }
    public Vector3d normalizedPositiveX(Vector3d dir) {
        return dir.set(m00, m10, m20);
    }
    public Vector3d positiveY(Vector3d dir) {
        if ((properties & PROPERTY_ORTHONORMAL) != 0)
            return normalizedPositiveY(dir);
        return positiveYGeneric(dir);
    }
    private Vector3d positiveYGeneric(Vector3d dir) {
        return dir.set(m12 * m20 - m10 * m22, m00 * m22 - m02 * m20, m02 * m10 - m00 * m12).normalize();
    }
    public Vector3d normalizedPositiveY(Vector3d dir) {
        return dir.set(m01, m11, m21);
    }
    public Vector3d originAffine(Vector3d dest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double d = m01 * m12 - m02 * m11;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double j = m21 * m32 - m22 * m31;
        dest.x = -m10 * j + m11 * h - m12 * g;
        dest.y =  m00 * j - m01 * h + m02 * g;
        dest.z = -m30 * d + m31 * b - m32 * a;
        return dest;
    }
    public Vector3d origin(Vector3d dest) {
        if ((properties & PROPERTY_AFFINE) != 0)
            return originAffine(dest);
        return originGeneric(dest);
    }
    private Vector3d originGeneric(Vector3d dest) {
        double a = m00 * m11 - m01 * m10;
        double b = m00 * m12 - m02 * m10;
        double c = m00 * m13 - m03 * m10;
        double d = m01 * m12 - m02 * m11;
        double e = m01 * m13 - m03 * m11;
        double f = m02 * m13 - m03 * m12;
        double g = m20 * m31 - m21 * m30;
        double h = m20 * m32 - m22 * m30;
        double i = m20 * m33 - m23 * m30;
        double j = m21 * m32 - m22 * m31;
        double k = m21 * m33 - m23 * m31;
        double l = m22 * m33 - m23 * m32;
        double det = a * l - b * k + c * j + d * i - e * h + f * g;
        double invDet = 1.0 / det;
        double nm30 = (-m10 * j + m11 * h - m12 * g) * invDet;
        double nm31 = ( m00 * j - m01 * h + m02 * g) * invDet;
        double nm32 = (-m30 * d + m31 * b - m32 * a) * invDet;
        double nm33 = det / ( m20 * d - m21 * b + m22 * a);
        double x = nm30 * nm33;
        double y = nm31 * nm33;
        double z = nm32 * nm33;
        return dest.set(x, y, z);
    }
    public Matrix4d shadow(Vector4dc light, double a, double b, double c, double d) {
        return shadow(light.x(), light.y(), light.z(), light.w(), a, b, c, d, this);
    }
    public Matrix4d shadow(Vector4dc light, double a, double b, double c, double d, Matrix4d dest) {
        return shadow(light.x(), light.y(), light.z(), light.w(), a, b, c, d, dest);
    }
    public Matrix4d shadow(double lightX, double lightY, double lightZ, double lightW, double a, double b, double c, double d) {
        return shadow(lightX, lightY, lightZ, lightW, a, b, c, d, this);
    }
    public Matrix4d shadow(double lightX, double lightY, double lightZ, double lightW, double a, double b, double c, double d, Matrix4d dest) {
        double invPlaneLen = Math.invsqrt(a*a + b*b + c*c);
        double an = a * invPlaneLen;
        double bn = b * invPlaneLen;
        double cn = c * invPlaneLen;
        double dn = d * invPlaneLen;
        double dot = an * lightX + bn * lightY + cn * lightZ + dn * lightW;
        double rm00 = dot - an * lightX;
        double rm01 = -an * lightY;
        double rm02 = -an * lightZ;
        double rm03 = -an * lightW;
        double rm10 = -bn * lightX;
        double rm11 = dot - bn * lightY;
        double rm12 = -bn * lightZ;
        double rm13 = -bn * lightW;
        double rm20 = -cn * lightX;
        double rm21 = -cn * lightY;
        double rm22 = dot - cn * lightZ;
        double rm23 = -cn * lightW;
        double rm30 = -dn * lightX;
        double rm31 = -dn * lightY;
        double rm32 = -dn * lightZ;
        double rm33 = dot - dn * lightW;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02 + m30 * rm03;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02 + m31 * rm03;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02 + m32 * rm03;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02 + m33 * rm03;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12 + m30 * rm13;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12 + m31 * rm13;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12 + m32 * rm13;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12 + m33 * rm13;
        double nm20 = m00 * rm20 + m10 * rm21 + m20 * rm22 + m30 * rm23;
        double nm21 = m01 * rm20 + m11 * rm21 + m21 * rm22 + m31 * rm23;
        double nm22 = m02 * rm20 + m12 * rm21 + m22 * rm22 + m32 * rm23;
        double nm23 = m03 * rm20 + m13 * rm21 + m23 * rm22 + m33 * rm23;
        dest._m30(m00 * rm30 + m10 * rm31 + m20 * rm32 + m30 * rm33)
        ._m31(m01 * rm30 + m11 * rm31 + m21 * rm32 + m31 * rm33)
        ._m32(m02 * rm30 + m12 * rm31 + m22 * rm32 + m32 * rm33)
        ._m33(m03 * rm30 + m13 * rm31 + m23 * rm32 + m33 * rm33)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d shadow(Vector4dc light, Matrix4dc planeTransform, Matrix4d dest) {
        double a = planeTransform.m10();
        double b = planeTransform.m11();
        double c = planeTransform.m12();
        double d = -a * planeTransform.m30() - b * planeTransform.m31() - c * planeTransform.m32();
        return shadow(light.x(), light.y(), light.z(), light.w(), a, b, c, d, dest);
    }
    public Matrix4d shadow(Vector4d light, Matrix4d planeTransform) {
        return shadow(light, planeTransform, this);
    }
    public Matrix4d shadow(double lightX, double lightY, double lightZ, double lightW, Matrix4dc planeTransform, Matrix4d dest) {
        double a = planeTransform.m10();
        double b = planeTransform.m11();
        double c = planeTransform.m12();
        double d = -a * planeTransform.m30() - b * planeTransform.m31() - c * planeTransform.m32();
        return shadow(lightX, lightY, lightZ, lightW, a, b, c, d, dest);
    }
    public Matrix4d shadow(double lightX, double lightY, double lightZ, double lightW, Matrix4dc planeTransform) {
        return shadow(lightX, lightY, lightZ, lightW, planeTransform, this);
    }
    public Matrix4d billboardCylindrical(Vector3dc objPos, Vector3dc targetPos, Vector3dc up) {
        double dirX = targetPos.x() - objPos.x();
        double dirY = targetPos.y() - objPos.y();
        double dirZ = targetPos.z() - objPos.z();
        double leftX = up.y() * dirZ - up.z() * dirY;
        double leftY = up.z() * dirX - up.x() * dirZ;
        double leftZ = up.x() * dirY - up.y() * dirX;
        double invLeftLen = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLen;
        leftY *= invLeftLen;
        leftZ *= invLeftLen;
        dirX = leftY * up.z() - leftZ * up.y();
        dirY = leftZ * up.x() - leftX * up.z();
        dirZ = leftX * up.y() - leftY * up.x();
        double invDirLen = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLen;
        dirY *= invDirLen;
        dirZ *= invDirLen;
        _m00(leftX).
        _m01(leftY).
        _m02(leftZ).
        _m03(0.0).
        _m10(up.x()).
        _m11(up.y()).
        _m12(up.z()).
        _m13(0.0).
        _m20(dirX).
        _m21(dirY).
        _m22(dirZ).
        _m23(0.0).
        _m30(objPos.x()).
        _m31(objPos.y()).
        _m32(objPos.z()).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d billboardSpherical(Vector3dc objPos, Vector3dc targetPos, Vector3dc up) {
        double dirX = targetPos.x() - objPos.x();
        double dirY = targetPos.y() - objPos.y();
        double dirZ = targetPos.z() - objPos.z();
        double invDirLen = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= invDirLen;
        dirY *= invDirLen;
        dirZ *= invDirLen;
        double leftX = up.y() * dirZ - up.z() * dirY;
        double leftY = up.z() * dirX - up.x() * dirZ;
        double leftZ = up.x() * dirY - up.y() * dirX;
        double invLeftLen = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLen;
        leftY *= invLeftLen;
        leftZ *= invLeftLen;
        double upX = dirY * leftZ - dirZ * leftY;
        double upY = dirZ * leftX - dirX * leftZ;
        double upZ = dirX * leftY - dirY * leftX;
        _m00(leftX).
        _m01(leftY).
        _m02(leftZ).
        _m03(0.0).
        _m10(upX).
        _m11(upY).
        _m12(upZ).
        _m13(0.0).
        _m20(dirX).
        _m21(dirY).
        _m22(dirZ).
        _m23(0.0).
        _m30(objPos.x()).
        _m31(objPos.y()).
        _m32(objPos.z()).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d billboardSpherical(Vector3dc objPos, Vector3dc targetPos) {
        double toDirX = targetPos.x() - objPos.x();
        double toDirY = targetPos.y() - objPos.y();
        double toDirZ = targetPos.z() - objPos.z();
        double x = -toDirY;
        double y = toDirX;
        double w = Math.sqrt(toDirX * toDirX + toDirY * toDirY + toDirZ * toDirZ) + toDirZ;
        double invNorm = Math.invsqrt(x * x + y * y + w * w);
        x *= invNorm;
        y *= invNorm;
        w *= invNorm;
        double q00 = (x + x) * x;
        double q11 = (y + y) * y;
        double q01 = (x + x) * y;
        double q03 = (x + x) * w;
        double q13 = (y + y) * w;
        _m00(1.0 - q11).
        _m01(q01).
        _m02(-q13).
        _m03(0.0).
        _m10(q01).
        _m11(1.0 - q00).
        _m12(q03).
        _m13(0.0).
        _m20(q13).
        _m21(-q03).
        _m22(1.0 - q11 - q00).
        _m23(0.0).
        _m30(objPos.x()).
        _m31(objPos.y()).
        _m32(objPos.z()).
        _m33(1.0).
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(m00);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m01);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m02);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m03);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m10);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m11);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m12);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m13);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m20);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m21);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m22);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m23);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m30);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m31);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m32);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m33);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix4d))
            return false;
        Matrix4d other = (Matrix4d) obj;
        if (Double.doubleToLongBits(m00) != Double.doubleToLongBits(other.m00))
            return false;
        if (Double.doubleToLongBits(m01) != Double.doubleToLongBits(other.m01))
            return false;
        if (Double.doubleToLongBits(m02) != Double.doubleToLongBits(other.m02))
            return false;
        if (Double.doubleToLongBits(m03) != Double.doubleToLongBits(other.m03))
            return false;
        if (Double.doubleToLongBits(m10) != Double.doubleToLongBits(other.m10))
            return false;
        if (Double.doubleToLongBits(m11) != Double.doubleToLongBits(other.m11))
            return false;
        if (Double.doubleToLongBits(m12) != Double.doubleToLongBits(other.m12))
            return false;
        if (Double.doubleToLongBits(m13) != Double.doubleToLongBits(other.m13))
            return false;
        if (Double.doubleToLongBits(m20) != Double.doubleToLongBits(other.m20))
            return false;
        if (Double.doubleToLongBits(m21) != Double.doubleToLongBits(other.m21))
            return false;
        if (Double.doubleToLongBits(m22) != Double.doubleToLongBits(other.m22))
            return false;
        if (Double.doubleToLongBits(m23) != Double.doubleToLongBits(other.m23))
            return false;
        if (Double.doubleToLongBits(m30) != Double.doubleToLongBits(other.m30))
            return false;
        if (Double.doubleToLongBits(m31) != Double.doubleToLongBits(other.m31))
            return false;
        if (Double.doubleToLongBits(m32) != Double.doubleToLongBits(other.m32))
            return false;
        if (Double.doubleToLongBits(m33) != Double.doubleToLongBits(other.m33))
            return false;
        return true;
    }
    public boolean equals(Matrix4dc m, double delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m02, m.m02(), delta))
            return false;
        if (!Runtime.equals(m03, m.m03(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        if (!Runtime.equals(m12, m.m12(), delta))
            return false;
        if (!Runtime.equals(m13, m.m13(), delta))
            return false;
        if (!Runtime.equals(m20, m.m20(), delta))
            return false;
        if (!Runtime.equals(m21, m.m21(), delta))
            return false;
        if (!Runtime.equals(m22, m.m22(), delta))
            return false;
        if (!Runtime.equals(m23, m.m23(), delta))
            return false;
        if (!Runtime.equals(m30, m.m30(), delta))
            return false;
        if (!Runtime.equals(m31, m.m31(), delta))
            return false;
        if (!Runtime.equals(m32, m.m32(), delta))
            return false;
        if (!Runtime.equals(m33, m.m33(), delta))
            return false;
        return true;
    }
    public Matrix4d pick(double x, double y, double width, double height, int[] viewport, Matrix4d dest) {
        double sx = viewport[2] / width;
        double sy = viewport[3] / height;
        double tx = (viewport[2] + 2.0 * (viewport[0] - x)) / width;
        double ty = (viewport[3] + 2.0 * (viewport[1] - y)) / height;
        dest._m30(m00 * tx + m10 * ty + m30)
        ._m31(m01 * tx + m11 * ty + m31)
        ._m32(m02 * tx + m12 * ty + m32)
        ._m33(m03 * tx + m13 * ty + m33)
        ._m00(m00 * sx)
        ._m01(m01 * sx)
        ._m02(m02 * sx)
        ._m03(m03 * sx)
        ._m10(m10 * sy)
        ._m11(m11 * sy)
        ._m12(m12 * sy)
        ._m13(m13 * sy)
        ._properties(PROPERTY_UNKNOWN);
        return dest;
    }
    public Matrix4d pick(double x, double y, double width, double height, int[] viewport) {
        return pick(x, y, width, height, viewport, this);
    }
    public boolean isAffine() {
        return m03 == 0.0 && m13 == 0.0 && m23 == 0.0 && m33 == 1.0;
    }
    public Matrix4d swap(Matrix4d other) {
        double tmp;
        tmp = m00; m00 = other.m00; other.m00 = tmp;
        tmp = m01; m01 = other.m01; other.m01 = tmp;
        tmp = m02; m02 = other.m02; other.m02 = tmp;
        tmp = m03; m03 = other.m03; other.m03 = tmp;
        tmp = m10; m10 = other.m10; other.m10 = tmp;
        tmp = m11; m11 = other.m11; other.m11 = tmp;
        tmp = m12; m12 = other.m12; other.m12 = tmp;
        tmp = m13; m13 = other.m13; other.m13 = tmp;
        tmp = m20; m20 = other.m20; other.m20 = tmp;
        tmp = m21; m21 = other.m21; other.m21 = tmp;
        tmp = m22; m22 = other.m22; other.m22 = tmp;
        tmp = m23; m23 = other.m23; other.m23 = tmp;
        tmp = m30; m30 = other.m30; other.m30 = tmp;
        tmp = m31; m31 = other.m31; other.m31 = tmp;
        tmp = m32; m32 = other.m32; other.m32 = tmp;
        tmp = m33; m33 = other.m33; other.m33 = tmp;
        int props = properties;
        this.properties = other.properties;
        other.properties = props;
        return this;
    }
    public Matrix4d arcball(double radius, double centerX, double centerY, double centerZ, double angleX, double angleY, Matrix4d dest) {
        double m30 = m20 * -radius + this.m30;
        double m31 = m21 * -radius + this.m31;
        double m32 = m22 * -radius + this.m32;
        double m33 = m23 * -radius + this.m33;
        double sin = Math.sin(angleX);
        double cos = Math.cosFromSin(sin, angleX);
        double nm10 = m10 * cos + m20 * sin;
        double nm11 = m11 * cos + m21 * sin;
        double nm12 = m12 * cos + m22 * sin;
        double nm13 = m13 * cos + m23 * sin;
        double m20 = this.m20 * cos - m10 * sin;
        double m21 = this.m21 * cos - m11 * sin;
        double m22 = this.m22 * cos - m12 * sin;
        double m23 = this.m23 * cos - m13 * sin;
        sin = Math.sin(angleY);
        cos = Math.cosFromSin(sin, angleY);
        double nm00 = m00 * cos - m20 * sin;
        double nm01 = m01 * cos - m21 * sin;
        double nm02 = m02 * cos - m22 * sin;
        double nm03 = m03 * cos - m23 * sin;
        double nm20 = m00 * sin + m20 * cos;
        double nm21 = m01 * sin + m21 * cos;
        double nm22 = m02 * sin + m22 * cos;
        double nm23 = m03 * sin + m23 * cos;
        dest._m30(-nm00 * centerX - nm10 * centerY - nm20 * centerZ + m30)
        ._m31(-nm01 * centerX - nm11 * centerY - nm21 * centerZ + m31)
        ._m32(-nm02 * centerX - nm12 * centerY - nm22 * centerZ + m32)
        ._m33(-nm03 * centerX - nm13 * centerY - nm23 * centerZ + m33)
        ._m20(nm20)
        ._m21(nm21)
        ._m22(nm22)
        ._m23(nm23)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d arcball(double radius, Vector3dc center, double angleX, double angleY, Matrix4d dest) {
        return arcball(radius, center.x(), center.y(), center.z(), angleX, angleY, dest);
    }
    public Matrix4d arcball(double radius, double centerX, double centerY, double centerZ, double angleX, double angleY) {
        return arcball(radius, centerX, centerY, centerZ, angleX, angleY, this);
    }
    public Matrix4d arcball(double radius, Vector3dc center, double angleX, double angleY) {
        return arcball(radius, center.x(), center.y(), center.z(), angleX, angleY, this);
    }
    public Matrix4d frustumAabb(Vector3d min, Vector3d max) {
        double minX = Double.POSITIVE_INFINITY;
        double minY = Double.POSITIVE_INFINITY;
        double minZ = Double.POSITIVE_INFINITY;
        double maxX = Double.NEGATIVE_INFINITY;
        double maxY = Double.NEGATIVE_INFINITY;
        double maxZ = Double.NEGATIVE_INFINITY;
        for (int t = 0; t < 8; t++) {
            double x = ((t & 1) << 1) - 1.0;
            double y = (((t >>> 1) & 1) << 1) - 1.0;
            double z = (((t >>> 2) & 1) << 1) - 1.0;
            double invW = 1.0 / (m03 * x + m13 * y + m23 * z + m33);
            double nx = (m00 * x + m10 * y + m20 * z + m30) * invW;
            double ny = (m01 * x + m11 * y + m21 * z + m31) * invW;
            double nz = (m02 * x + m12 * y + m22 * z + m32) * invW;
            minX = minX < nx ? minX : nx;
            minY = minY < ny ? minY : ny;
            minZ = minZ < nz ? minZ : nz;
            maxX = maxX > nx ? maxX : nx;
            maxY = maxY > ny ? maxY : ny;
            maxZ = maxZ > nz ? maxZ : nz;
        }
        min.x = minX;
        min.y = minY;
        min.z = minZ;
        max.x = maxX;
        max.y = maxY;
        max.z = maxZ;
        return this;
    }
    public Matrix4d projectedGridRange(Matrix4dc projector, double sLower, double sUpper, Matrix4d dest) {
        double minX = Double.POSITIVE_INFINITY, minY = Double.POSITIVE_INFINITY;
        double maxX = Double.NEGATIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;
        boolean intersection = false;
        for (int t = 0; t < 3 * 4; t++) {
            double c0X, c0Y, c0Z;
            double c1X, c1Y, c1Z;
            if (t < 4) {
                c0X = -1; c1X = +1;
                c0Y = c1Y = ((t & 1) << 1) - 1.0;
                c0Z = c1Z = (((t >>> 1) & 1) << 1) - 1.0;
            } else if (t < 8) {
                c0Y = -1; c1Y = +1;
                c0X = c1X = ((t & 1) << 1) - 1.0;
                c0Z = c1Z = (((t >>> 1) & 1) << 1) - 1.0;
            } else {
                c0Z = -1; c1Z = +1;
                c0X = c1X = ((t & 1) << 1) - 1.0;
                c0Y = c1Y = (((t >>> 1) & 1) << 1) - 1.0;
            }
            double invW = 1.0 / (m03 * c0X + m13 * c0Y + m23 * c0Z + m33);
            double p0x = (m00 * c0X + m10 * c0Y + m20 * c0Z + m30) * invW;
            double p0y = (m01 * c0X + m11 * c0Y + m21 * c0Z + m31) * invW;
            double p0z = (m02 * c0X + m12 * c0Y + m22 * c0Z + m32) * invW;
            invW = 1.0 / (m03 * c1X + m13 * c1Y + m23 * c1Z + m33);
            double p1x = (m00 * c1X + m10 * c1Y + m20 * c1Z + m30) * invW;
            double p1y = (m01 * c1X + m11 * c1Y + m21 * c1Z + m31) * invW;
            double p1z = (m02 * c1X + m12 * c1Y + m22 * c1Z + m32) * invW;
            double dirX = p1x - p0x;
            double dirY = p1y - p0y;
            double dirZ = p1z - p0z;
            double invDenom = 1.0 / dirY;
            for (int s = 0; s < 2; s++) {
                double isectT = -(p0y + (s == 0 ? sLower : sUpper)) * invDenom;
                if (isectT >= 0.0 && isectT <= 1.0) {
                    intersection = true;
                    double ix = p0x + isectT * dirX;
                    double iz = p0z + isectT * dirZ;
                    invW = 1.0 / (projector.m03() * ix + projector.m23() * iz + projector.m33());
                    double px = (projector.m00() * ix + projector.m20() * iz + projector.m30()) * invW;
                    double py = (projector.m01() * ix + projector.m21() * iz + projector.m31()) * invW;
                    minX = minX < px ? minX : px;
                    minY = minY < py ? minY : py;
                    maxX = maxX > px ? maxX : px;
                    maxY = maxY > py ? maxY : py;
                }
            }
        }
        if (!intersection)
            return null; 
        dest.set(maxX - minX, 0, 0, 0, 0, maxY - minY, 0, 0, 0, 0, 1, 0, minX, minY, 0, 1)
        ._properties(PROPERTY_AFFINE);
        return dest;
    }
    public Matrix4d perspectiveFrustumSlice(double near, double far, Matrix4d dest) {
        double invOldNear = (m23 + m22) / m32;
        double invNearFar = 1.0 / (near - far);
        dest._m00(m00 * invOldNear * near)
        ._m01(m01)
        ._m02(m02)
        ._m03(m03)
        ._m10(m10)
        ._m11(m11 * invOldNear * near)
        ._m12(m12)
        ._m13(m13)
        ._m20(m20)
        ._m21(m21)
        ._m22((far + near) * invNearFar)
        ._m23(m23)
        ._m30(m30)
        ._m31(m31)
        ._m32((far + far) * near * invNearFar)
        ._m33(m33)
        ._properties(properties & ~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION | PROPERTY_ORTHONORMAL));
        return dest;
    }
    public Matrix4d orthoCrop(Matrix4dc view, Matrix4d dest) {
        double minX = Double.POSITIVE_INFINITY, maxX = Double.NEGATIVE_INFINITY;
        double minY = Double.POSITIVE_INFINITY, maxY = Double.NEGATIVE_INFINITY;
        double minZ = Double.POSITIVE_INFINITY, maxZ = Double.NEGATIVE_INFINITY;
        for (int t = 0; t < 8; t++) {
            double x = ((t & 1) << 1) - 1.0;
            double y = (((t >>> 1) & 1) << 1) - 1.0;
            double z = (((t >>> 2) & 1) << 1) - 1.0;
            double invW = 1.0 / (m03 * x + m13 * y + m23 * z + m33);
            double wx = (m00 * x + m10 * y + m20 * z + m30) * invW;
            double wy = (m01 * x + m11 * y + m21 * z + m31) * invW;
            double wz = (m02 * x + m12 * y + m22 * z + m32) * invW;
            invW = 1.0 / (view.m03() * wx + view.m13() * wy + view.m23() * wz + view.m33());
            double vx = view.m00() * wx + view.m10() * wy + view.m20() * wz + view.m30();
            double vy = view.m01() * wx + view.m11() * wy + view.m21() * wz + view.m31();
            double vz = (view.m02() * wx + view.m12() * wy + view.m22() * wz + view.m32()) * invW;
            minX = minX < vx ? minX : vx;
            maxX = maxX > vx ? maxX : vx;
            minY = minY < vy ? minY : vy;
            maxY = maxY > vy ? maxY : vy;
            minZ = minZ < vz ? minZ : vz;
            maxZ = maxZ > vz ? maxZ : vz;
        }
        return dest.setOrtho(minX, maxX, minY, maxY, -maxZ, -minZ);
    }
    public Matrix4d trapezoidCrop(double p0x, double p0y, double p1x, double p1y, double p2x, double p2y, double p3x, double p3y) {
        double aX = p1y - p0y, aY = p0x - p1x;
        double nm00 = aY;
        double nm10 = -aX;
        double nm30 = aX * p0y - aY * p0x;
        double nm01 = aX;
        double nm11 = aY;
        double nm31 = -(aX * p0x + aY * p0y);
        double c3x = nm00 * p3x + nm10 * p3y + nm30;
        double c3y = nm01 * p3x + nm11 * p3y + nm31;
        double s = -c3x / c3y;
        nm00 += s * nm01;
        nm10 += s * nm11;
        nm30 += s * nm31;
        double d1x = nm00 * p1x + nm10 * p1y + nm30;
        double d2x = nm00 * p2x + nm10 * p2y + nm30;
        double d = d1x * c3y / (d2x - d1x);
        nm31 += d;
        double sx = 2.0 / d2x;
        double sy = 1.0 / (c3y + d);
        double u = (sy + sy) * d / (1.0 - sy * d);
        double m03 = nm01 * sy;
        double m13 = nm11 * sy;
        double m33 = nm31 * sy;
        nm01 = (u + 1.0) * m03;
        nm11 = (u + 1.0) * m13;
        nm31 = (u + 1.0) * m33 - u;
        nm00 = sx * nm00 - m03;
        nm10 = sx * nm10 - m13;
        nm30 = sx * nm30 - m33;
        set(nm00, nm01, 0, m03,
            nm10, nm11, 0, m13,
              0,   0, 1,   0,
            nm30, nm31, 0, m33);
        properties = PROPERTY_UNKNOWN;
        return this;
    }
    public Matrix4d transformAab(double minX, double minY, double minZ, double maxX, double maxY, double maxZ, Vector3d outMin, Vector3d outMax) {
        double xax = m00 * minX, xay = m01 * minX, xaz = m02 * minX;
        double xbx = m00 * maxX, xby = m01 * maxX, xbz = m02 * maxX;
        double yax = m10 * minY, yay = m11 * minY, yaz = m12 * minY;
        double ybx = m10 * maxY, yby = m11 * maxY, ybz = m12 * maxY;
        double zax = m20 * minZ, zay = m21 * minZ, zaz = m22 * minZ;
        double zbx = m20 * maxZ, zby = m21 * maxZ, zbz = m22 * maxZ;
        double xminx, xminy, xminz, yminx, yminy, yminz, zminx, zminy, zminz;
        double xmaxx, xmaxy, xmaxz, ymaxx, ymaxy, ymaxz, zmaxx, zmaxy, zmaxz;
        if (xax < xbx) {
            xminx = xax;
            xmaxx = xbx;
        } else {
            xminx = xbx;
            xmaxx = xax;
        }
        if (xay < xby) {
            xminy = xay;
            xmaxy = xby;
        } else {
            xminy = xby;
            xmaxy = xay;
        }
        if (xaz < xbz) {
            xminz = xaz;
            xmaxz = xbz;
        } else {
            xminz = xbz;
            xmaxz = xaz;
        }
        if (yax < ybx) {
            yminx = yax;
            ymaxx = ybx;
        } else {
            yminx = ybx;
            ymaxx = yax;
        }
        if (yay < yby) {
            yminy = yay;
            ymaxy = yby;
        } else {
            yminy = yby;
            ymaxy = yay;
        }
        if (yaz < ybz) {
            yminz = yaz;
            ymaxz = ybz;
        } else {
            yminz = ybz;
            ymaxz = yaz;
        }
        if (zax < zbx) {
            zminx = zax;
            zmaxx = zbx;
        } else {
            zminx = zbx;
            zmaxx = zax;
        }
        if (zay < zby) {
            zminy = zay;
            zmaxy = zby;
        } else {
            zminy = zby;
            zmaxy = zay;
        }
        if (zaz < zbz) {
            zminz = zaz;
            zmaxz = zbz;
        } else {
            zminz = zbz;
            zmaxz = zaz;
        }
        outMin.x = xminx + yminx + zminx + m30;
        outMin.y = xminy + yminy + zminy + m31;
        outMin.z = xminz + yminz + zminz + m32;
        outMax.x = xmaxx + ymaxx + zmaxx + m30;
        outMax.y = xmaxy + ymaxy + zmaxy + m31;
        outMax.z = xmaxz + ymaxz + zmaxz + m32;
        return this;
    }
    public Matrix4d transformAab(Vector3dc min, Vector3dc max, Vector3d outMin, Vector3d outMax) {
        return transformAab(min.x(), min.y(), min.z(), max.x(), max.y(), max.z(), outMin, outMax);
    }
    public Matrix4d lerp(Matrix4dc other, double t) {
        return lerp(other, t, this);
    }
    public Matrix4d lerp(Matrix4dc other, double t, Matrix4d dest) {
        dest._m00(Math.fma(other.m00() - m00, t, m00))
        ._m01(Math.fma(other.m01() - m01, t, m01))
        ._m02(Math.fma(other.m02() - m02, t, m02))
        ._m03(Math.fma(other.m03() - m03, t, m03))
        ._m10(Math.fma(other.m10() - m10, t, m10))
        ._m11(Math.fma(other.m11() - m11, t, m11))
        ._m12(Math.fma(other.m12() - m12, t, m12))
        ._m13(Math.fma(other.m13() - m13, t, m13))
        ._m20(Math.fma(other.m20() - m20, t, m20))
        ._m21(Math.fma(other.m21() - m21, t, m21))
        ._m22(Math.fma(other.m22() - m22, t, m22))
        ._m23(Math.fma(other.m23() - m23, t, m23))
        ._m30(Math.fma(other.m30() - m30, t, m30))
        ._m31(Math.fma(other.m31() - m31, t, m31))
        ._m32(Math.fma(other.m32() - m32, t, m32))
        ._m33(Math.fma(other.m33() - m33, t, m33))
        ._properties(properties & other.properties());
        return dest;
    }
    public Matrix4d rotateTowards(Vector3dc direction, Vector3dc up, Matrix4d dest) {
        return rotateTowards(direction.x(), direction.y(), direction.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix4d rotateTowards(Vector3dc direction, Vector3dc up) {
        return rotateTowards(direction.x(), direction.y(), direction.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix4d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ) {
        return rotateTowards(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix4d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix4d dest) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        double ndirX = dirX * invDirLength;
        double ndirY = dirY * invDirLength;
        double ndirZ = dirZ * invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = ndirY * leftZ - ndirZ * leftY;
        double upnY = ndirZ * leftX - ndirX * leftZ;
        double upnZ = ndirX * leftY - ndirY * leftX;
        double rm00 = leftX;
        double rm01 = leftY;
        double rm02 = leftZ;
        double rm10 = upnX;
        double rm11 = upnY;
        double rm12 = upnZ;
        double rm20 = ndirX;
        double rm21 = ndirY;
        double rm22 = ndirZ;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm03 = m03 * rm00 + m13 * rm01 + m23 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        double nm13 = m03 * rm10 + m13 * rm11 + m23 * rm12;
        dest._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m23(m03 * rm20 + m13 * rm21 + m23 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m03(nm03)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12)
        ._m13(nm13)
        ._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d rotationTowards(Vector3dc dir, Vector3dc up) {
        return rotationTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4d rotationTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        double ndirX = dirX * invDirLength;
        double ndirY = dirY * invDirLength;
        double ndirZ = dirZ * invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = ndirY * leftZ - ndirZ * leftY;
        double upnY = ndirZ * leftX - ndirX * leftZ;
        double upnZ = ndirX * leftY - ndirY * leftX;
        if ((properties & PROPERTY_IDENTITY) == 0)
            this._identity();
        this.m00 = leftX;
        this.m01 = leftY;
        this.m02 = leftZ;
        this.m10 = upnX;
        this.m11 = upnY;
        this.m12 = upnZ;
        this.m20 = ndirX;
        this.m21 = ndirY;
        this.m22 = ndirZ;
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Matrix4d translationRotateTowards(Vector3dc pos, Vector3dc dir, Vector3dc up) {
        return translationRotateTowards(pos.x(), pos.y(), pos.z(), dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix4d translationRotateTowards(double posX, double posY, double posZ, double dirX, double dirY, double dirZ, double upX, double upY, double upZ) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        double ndirX = dirX * invDirLength;
        double ndirY = dirY * invDirLength;
        double ndirZ = dirZ * invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = ndirY * leftZ - ndirZ * leftY;
        double upnY = ndirZ * leftX - ndirX * leftZ;
        double upnZ = ndirX * leftY - ndirY * leftX;
        this.m00 = leftX;
        this.m01 = leftY;
        this.m02 = leftZ;
        this.m03 = 0.0;
        this.m10 = upnX;
        this.m11 = upnY;
        this.m12 = upnZ;
        this.m13 = 0.0;
        this.m20 = ndirX;
        this.m21 = ndirY;
        this.m22 = ndirZ;
        this.m23 = 0.0;
        this.m30 = posX;
        this.m31 = posY;
        this.m32 = posZ;
        this.m33 = 1.0;
        properties = PROPERTY_AFFINE | PROPERTY_ORTHONORMAL;
        return this;
    }
    public Vector3d getEulerAnglesZYX(Vector3d dest) {
        dest.x = Math.atan2(m12, m22);
        dest.y = Math.atan2(-m02, Math.sqrt(1.0 - m02 * m02));
        dest.z = Math.atan2(m01, m00);
        return dest;
    }
    public Vector3d getEulerAnglesXYZ(Vector3d dest) {
        dest.x = Math.atan2(-m21, m22);
        dest.y = Math.atan2(m20, Math.sqrt(1.0 - m20 * m20));
        dest.z = Math.atan2(-m10, m00);
        return dest;
    }
    public Vector3d getEulerAnglesYXZ(Vector3d dest) {
        dest.x = Math.atan2(-m21(), Math.sqrt(1.0 - m21() * m21()));
        dest.y = Math.atan2(m20(), m22());
        dest.z = Math.atan2(m01(), m11());
        return dest;
    }
    public Matrix4d affineSpan(Vector3d corner, Vector3d xDir, Vector3d yDir, Vector3d zDir) {
        double a = m10 * m22, b = m10 * m21, c = m10 * m02, d = m10 * m01;
        double e = m11 * m22, f = m11 * m20, g = m11 * m02, h = m11 * m00;
        double i = m12 * m21, j = m12 * m20, k = m12 * m01, l = m12 * m00;
        double m = m20 * m02, n = m20 * m01, o = m21 * m02, p = m21 * m00;
        double q = m22 * m01, r = m22 * m00;
        double s = 1.0 / (m00 * m11 - m01 * m10) * m22 + (m02 * m10 - m00 * m12) * m21 + (m01 * m12 - m02 * m11) * m20;
        double nm00 = (e - i) * s, nm01 = (o - q) * s, nm02 = (k - g) * s;
        double nm10 = (j - a) * s, nm11 = (r - m) * s, nm12 = (c - l) * s;
        double nm20 = (b - f) * s, nm21 = (n - p) * s, nm22 = (h - d) * s;
        corner.x = -nm00 - nm10 - nm20 + (a * m31 - b * m32 + f * m32 - e * m30 + i * m30 - j * m31) * s;
        corner.y = -nm01 - nm11 - nm21 + (m * m31 - n * m32 + p * m32 - o * m30 + q * m30 - r * m31) * s;
        corner.z = -nm02 - nm12 - nm22 + (g * m30 - k * m30 + l * m31 - c * m31 + d * m32 - h * m32) * s;
        xDir.x = 2.0 * nm00; xDir.y = 2.0 * nm01; xDir.z = 2.0 * nm02;
        yDir.x = 2.0 * nm10; yDir.y = 2.0 * nm11; yDir.z = 2.0 * nm12;
        zDir.x = 2.0 * nm20; zDir.y = 2.0 * nm21; zDir.z = 2.0 * nm22;
        return this;
    }
    public boolean testPoint(double x, double y, double z) {
        double nxX = m03 + m00, nxY = m13 + m10, nxZ = m23 + m20, nxW = m33 + m30;
        double pxX = m03 - m00, pxY = m13 - m10, pxZ = m23 - m20, pxW = m33 - m30;
        double nyX = m03 + m01, nyY = m13 + m11, nyZ = m23 + m21, nyW = m33 + m31;
        double pyX = m03 - m01, pyY = m13 - m11, pyZ = m23 - m21, pyW = m33 - m31;
        double nzX = m03 + m02, nzY = m13 + m12, nzZ = m23 + m22, nzW = m33 + m32;
        double pzX = m03 - m02, pzY = m13 - m12, pzZ = m23 - m22, pzW = m33 - m32;
        return nxX * x + nxY * y + nxZ * z + nxW >= 0 && pxX * x + pxY * y + pxZ * z + pxW >= 0 &&
               nyX * x + nyY * y + nyZ * z + nyW >= 0 && pyX * x + pyY * y + pyZ * z + pyW >= 0 &&
               nzX * x + nzY * y + nzZ * z + nzW >= 0 && pzX * x + pzY * y + pzZ * z + pzW >= 0;
    }
    public boolean testSphere(double x, double y, double z, double r) {
        double invl;
        double nxX = m03 + m00, nxY = m13 + m10, nxZ = m23 + m20, nxW = m33 + m30;
        invl = Math.invsqrt(nxX * nxX + nxY * nxY + nxZ * nxZ);
        nxX *= invl; nxY *= invl; nxZ *= invl; nxW *= invl;
        double pxX = m03 - m00, pxY = m13 - m10, pxZ = m23 - m20, pxW = m33 - m30;
        invl = Math.invsqrt(pxX * pxX + pxY * pxY + pxZ * pxZ);
        pxX *= invl; pxY *= invl; pxZ *= invl; pxW *= invl;
        double nyX = m03 + m01, nyY = m13 + m11, nyZ = m23 + m21, nyW = m33 + m31;
        invl = Math.invsqrt(nyX * nyX + nyY * nyY + nyZ * nyZ);
        nyX *= invl; nyY *= invl; nyZ *= invl; nyW *= invl;
        double pyX = m03 - m01, pyY = m13 - m11, pyZ = m23 - m21, pyW = m33 - m31;
        invl = Math.invsqrt(pyX * pyX + pyY * pyY + pyZ * pyZ);
        pyX *= invl; pyY *= invl; pyZ *= invl; pyW *= invl;
        double nzX = m03 + m02, nzY = m13 + m12, nzZ = m23 + m22, nzW = m33 + m32;
        invl = Math.invsqrt(nzX * nzX + nzY * nzY + nzZ * nzZ);
        nzX *= invl; nzY *= invl; nzZ *= invl; nzW *= invl;
        double pzX = m03 - m02, pzY = m13 - m12, pzZ = m23 - m22, pzW = m33 - m32;
        invl = Math.invsqrt(pzX * pzX + pzY * pzY + pzZ * pzZ);
        pzX *= invl; pzY *= invl; pzZ *= invl; pzW *= invl;
        return nxX * x + nxY * y + nxZ * z + nxW >= -r && pxX * x + pxY * y + pxZ * z + pxW >= -r &&
               nyX * x + nyY * y + nyZ * z + nyW >= -r && pyX * x + pyY * y + pyZ * z + pyW >= -r &&
               nzX * x + nzY * y + nzZ * z + nzW >= -r && pzX * x + pzY * y + pzZ * z + pzW >= -r;
    }
    public boolean testAab(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
        double nxX = m03 + m00, nxY = m13 + m10, nxZ = m23 + m20, nxW = m33 + m30;
        double pxX = m03 - m00, pxY = m13 - m10, pxZ = m23 - m20, pxW = m33 - m30;
        double nyX = m03 + m01, nyY = m13 + m11, nyZ = m23 + m21, nyW = m33 + m31;
        double pyX = m03 - m01, pyY = m13 - m11, pyZ = m23 - m21, pyW = m33 - m31;
        double nzX = m03 + m02, nzY = m13 + m12, nzZ = m23 + m22, nzW = m33 + m32;
        double pzX = m03 - m02, pzY = m13 - m12, pzZ = m23 - m22, pzW = m33 - m32;
        return nxX * (nxX < 0 ? minX : maxX) + nxY * (nxY < 0 ? minY : maxY) + nxZ * (nxZ < 0 ? minZ : maxZ) >= -nxW &&
               pxX * (pxX < 0 ? minX : maxX) + pxY * (pxY < 0 ? minY : maxY) + pxZ * (pxZ < 0 ? minZ : maxZ) >= -pxW &&
               nyX * (nyX < 0 ? minX : maxX) + nyY * (nyY < 0 ? minY : maxY) + nyZ * (nyZ < 0 ? minZ : maxZ) >= -nyW &&
               pyX * (pyX < 0 ? minX : maxX) + pyY * (pyY < 0 ? minY : maxY) + pyZ * (pyZ < 0 ? minZ : maxZ) >= -pyW &&
               nzX * (nzX < 0 ? minX : maxX) + nzY * (nzY < 0 ? minY : maxY) + nzZ * (nzZ < 0 ? minZ : maxZ) >= -nzW &&
               pzX * (pzX < 0 ? minX : maxX) + pzY * (pzY < 0 ? minY : maxY) + pzZ * (pzZ < 0 ? minZ : maxZ) >= -pzW;
    }
    public Matrix4d obliqueZ(double a, double b) {
        this.m20 = m00 * a + m10 * b + m20;
        this.m21 = m01 * a + m11 * b + m21;
        this.m22 = m02 * a + m12 * b + m22;
        this.properties &= PROPERTY_AFFINE;
        return this;
    }
    public Matrix4d obliqueZ(double a, double b, Matrix4d dest) {
        dest._m00(m00)
        ._m01(m01)
        ._m02(m02)
        ._m03(m03)
        ._m10(m10)
        ._m11(m11)
        ._m12(m12)
        ._m13(m13)
        ._m20(m00 * a + m10 * b + m20)
        ._m21(m01 * a + m11 * b + m21)
        ._m22(m02 * a + m12 * b + m22)
        ._m23(m23)
        ._m30(m30)
        ._m31(m31)
        ._m32(m32)
        ._m33(m33)
        ._properties(properties & PROPERTY_AFFINE);
        return dest;
    }
    public static void perspectiveOffCenterViewFromRectangle(
            Vector3d eye, Vector3d p, Vector3d x, Vector3d y, double nearFarDist, boolean zeroToOne,
            Matrix4d projDest, Matrix4d viewDest) {
        double zx = y.y * x.z - y.z * x.y, zy = y.z * x.x - y.x * x.z, zz = y.x * x.y - y.y * x.x;
        double zd = zx * (p.x - eye.x) + zy * (p.y - eye.y) + zz * (p.z - eye.z);
        double zs = zd >= 0 ? 1 : -1; zx *= zs; zy *= zs; zz *= zs; zd *= zs; 
        viewDest.setLookAt(eye.x, eye.y, eye.z, eye.x + zx, eye.y + zy, eye.z + zz, y.x, y.y, y.z);
        double px = viewDest.m00 * p.x + viewDest.m10 * p.y + viewDest.m20 * p.z + viewDest.m30;
        double py = viewDest.m01 * p.x + viewDest.m11 * p.y + viewDest.m21 * p.z + viewDest.m31;
        double tx = viewDest.m00 * x.x + viewDest.m10 * x.y + viewDest.m20 * x.z;
        double ty = viewDest.m01 * y.x + viewDest.m11 * y.y + viewDest.m21 * y.z;
        double len = Math.sqrt(zx * zx + zy * zy + zz * zz);
        double near = zd / len, far;
        if (Double.isInfinite(nearFarDist) && nearFarDist < 0.0) {
            far = near;
            near = Double.POSITIVE_INFINITY;
        } else if (Double.isInfinite(nearFarDist) && nearFarDist > 0.0) {
            far = Double.POSITIVE_INFINITY;
        } else if (nearFarDist < 0.0) {
            far = near;
            near = near + nearFarDist;
        } else {
            far = near + nearFarDist;
        }
        projDest.setFrustum(px, px + tx, py, py + ty, near, far, zeroToOne);
    }
    public Matrix4d withLookAtUp(Vector3dc up) {
        return withLookAtUp(up.x(), up.y(), up.z(), this);
    }
    public Matrix4d withLookAtUp(Vector3dc up, Matrix4d dest) {
        return withLookAtUp(up.x(), up.y(), up.z());
    }
    public Matrix4d withLookAtUp(double upX, double upY, double upZ) {
        return withLookAtUp(upX, upY, upZ, this);
    }
    public Matrix4d withLookAtUp(double upX, double upY, double upZ, Matrix4d dest) {
        double y = (upY * m21 - upZ * m11) * m02 +
                   (upZ * m01 - upX * m21) * m12 +
                   (upX * m11 - upY * m01) * m22;
        double x = upX * m01 + upY * m11 + upZ * m21;
        if ((properties & PROPERTY_ORTHONORMAL) == 0)
            x *= Math.sqrt(m01 * m01 + m11 * m11 + m21 * m21);
        double invsqrt = Math.invsqrt(y * y + x * x);
        double c = x * invsqrt, s = y * invsqrt;
        double nm00 = c * m00 - s * m01, nm10 = c * m10 - s * m11, nm20 = c * m20 - s * m21, nm31 = s * m30 + c * m31;
        double nm01 = s * m00 + c * m01, nm11 = s * m10 + c * m11, nm21 = s * m20 + c * m21, nm30 = c * m30 - s * m31;
        dest._m00(nm00)._m10(nm10)._m20(nm20)._m30(nm30)
        ._m01(nm01)._m11(nm11)._m21(nm21)._m31(nm31);
        if (dest != this) {
            dest
            ._m02(m02)._m12(m12)._m22(m22)._m32(m32)
            ._m03(m03)._m13(m13)._m23(m23)._m33(m33);
        }
        dest._properties(properties & ~(PROPERTY_PERSPECTIVE | PROPERTY_IDENTITY | PROPERTY_TRANSLATION));
        return dest;
    }
    public Matrix4d mapXZY() {
        return mapXZY(this);
    }
    public Matrix4d mapXZY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapXZnY() {
        return mapXZnY(this);
    }
    public Matrix4d mapXZnY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapXnYnZ() {
        return mapXnYnZ(this);
    }
    public Matrix4d mapXnYnZ(Matrix4d dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapXnZY() {
        return mapXnZY(this);
    }
    public Matrix4d mapXnZY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapXnZnY() {
        return mapXnZnY(this);
    }
    public Matrix4d mapXnZnY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYXZ() {
        return mapYXZ(this);
    }
    public Matrix4d mapYXZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYXnZ() {
        return mapYXnZ(this);
    }
    public Matrix4d mapYXnZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYZX() {
        return mapYZX(this);
    }
    public Matrix4d mapYZX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYZnX() {
        return mapYZnX(this);
    }
    public Matrix4d mapYZnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYnXZ() {
        return mapYnXZ(this);
    }
    public Matrix4d mapYnXZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYnXnZ() {
        return mapYnXnZ(this);
    }
    public Matrix4d mapYnXnZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYnZX() {
        return mapYnZX(this);
    }
    public Matrix4d mapYnZX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapYnZnX() {
        return mapYnZnX(this);
    }
    public Matrix4d mapYnZnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZXY() {
        return mapZXY(this);
    }
    public Matrix4d mapZXY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZXnY() {
        return mapZXnY(this);
    }
    public Matrix4d mapZXnY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZYX() {
        return mapZYX(this);
    }
    public Matrix4d mapZYX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZYnX() {
        return mapZYnX(this);
    }
    public Matrix4d mapZYnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZnXY() {
        return mapZnXY(this);
    }
    public Matrix4d mapZnXY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZnXnY() {
        return mapZnXnY(this);
    }
    public Matrix4d mapZnXnY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZnYX() {
        return mapZnYX(this);
    }
    public Matrix4d mapZnYX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapZnYnX() {
        return mapZnYnX(this);
    }
    public Matrix4d mapZnYnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXYnZ() {
        return mapnXYnZ(this);
    }
    public Matrix4d mapnXYnZ(Matrix4d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXZY() {
        return mapnXZY(this);
    }
    public Matrix4d mapnXZY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXZnY() {
        return mapnXZnY(this);
    }
    public Matrix4d mapnXZnY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXnYZ() {
        return mapnXnYZ(this);
    }
    public Matrix4d mapnXnYZ(Matrix4d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXnYnZ() {
        return mapnXnYnZ(this);
    }
    public Matrix4d mapnXnYnZ(Matrix4d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXnZY() {
        return mapnXnZY(this);
    }
    public Matrix4d mapnXnZY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnXnZnY() {
        return mapnXnZnY(this);
    }
    public Matrix4d mapnXnZnY(Matrix4d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYXZ() {
        return mapnYXZ(this);
    }
    public Matrix4d mapnYXZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYXnZ() {
        return mapnYXnZ(this);
    }
    public Matrix4d mapnYXnZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYZX() {
        return mapnYZX(this);
    }
    public Matrix4d mapnYZX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYZnX() {
        return mapnYZnX(this);
    }
    public Matrix4d mapnYZnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(m20)._m11(m21)._m12(m22)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYnXZ() {
        return mapnYnXZ(this);
    }
    public Matrix4d mapnYnXZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYnXnZ() {
        return mapnYnXnZ(this);
    }
    public Matrix4d mapnYnXnZ(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYnZX() {
        return mapnYnZX(this);
    }
    public Matrix4d mapnYnZX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnYnZnX() {
        return mapnYnZnX(this);
    }
    public Matrix4d mapnYnZnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m03(m03)._m10(-m20)._m11(-m21)._m12(-m22)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZXY() {
        return mapnZXY(this);
    }
    public Matrix4d mapnZXY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZXnY() {
        return mapnZXnY(this);
    }
    public Matrix4d mapnZXnY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(m00)._m11(m01)._m12(m02)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZYX() {
        return mapnZYX(this);
    }
    public Matrix4d mapnZYX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZYnX() {
        return mapnZYnX(this);
    }
    public Matrix4d mapnZYnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZnXY() {
        return mapnZnXY(this);
    }
    public Matrix4d mapnZnXY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(m10)._m21(m11)._m22(m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZnXnY() {
        return mapnZnXnY(this);
    }
    public Matrix4d mapnZnXnY(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(-m00)._m11(-m01)._m12(-m02)._m13(m13)._m20(-m10)._m21(-m11)._m22(-m12)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZnYX() {
        return mapnZnYX(this);
    }
    public Matrix4d mapnZnYX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(m00)._m21(m01)._m22(m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d mapnZnYnX() {
        return mapnZnYnX(this);
    }
    public Matrix4d mapnZnYnX(Matrix4d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(-m00)._m21(-m01)._m22(-m02)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d negateX() {
        return _m00(-m00)._m01(-m01)._m02(-m02)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d negateX(Matrix4d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d negateY() {
        return _m10(-m10)._m11(-m11)._m12(-m12)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d negateY(Matrix4d dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(-m10)._m11(-m11)._m12(-m12)._m13(m13)._m20(m20)._m21(m21)._m22(m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d negateZ() {
        return _m20(-m20)._m21(-m21)._m22(-m22)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public Matrix4d negateZ(Matrix4d dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m03(m03)._m10(m10)._m11(m11)._m12(m12)._m13(m13)._m20(-m20)._m21(-m21)._m22(-m22)._m23(m23)._m30(m30)._m31(m31)._m32(m32)._m33(m33)._properties(properties & (PROPERTY_AFFINE | PROPERTY_ORTHONORMAL));
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) && Math.isFinite(m02) && Math.isFinite(m03) &&
               Math.isFinite(m10) && Math.isFinite(m11) && Math.isFinite(m12) && Math.isFinite(m13) &&
               Math.isFinite(m20) && Math.isFinite(m21) && Math.isFinite(m22) && Math.isFinite(m23) &&
               Math.isFinite(m30) && Math.isFinite(m31) && Math.isFinite(m32) && Math.isFinite(m33);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix3d implements Externalizable, Cloneable, Matrix3dc {
    private static final long serialVersionUID = 1L;
    public double m00, m01, m02;
    public double m10, m11, m12;
    public double m20, m21, m22;
    public Matrix3d() {
        m00 = 1.0;
        m11 = 1.0;
        m22 = 1.0;
    }
    public Matrix3d(Matrix2dc mat) {
        set(mat);
    }
    public Matrix3d(Matrix2fc mat) {
        set(mat);
    }
    public Matrix3d(Matrix3dc mat) {
        set(mat);
    }
    public Matrix3d(Matrix3fc mat) {
        set(mat);
    }
    public Matrix3d(Matrix4fc mat) {
        set(mat);
    }
    public Matrix3d(Matrix4dc mat) {
        set(mat);
    }
    public Matrix3d(double m00, double m01, double m02,
                    double m10, double m11, double m12, 
                    double m20, double m21, double m22) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
    }
    public Matrix3d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Matrix3d(Vector3dc col0, Vector3dc col1, Vector3dc col2) {
        set(col0, col1, col2);
    }
    public double m00() {
        return m00;
    }
    public double m01() {
        return m01;
    }
    public double m02() {
        return m02;
    }
    public double m10() {
        return m10;
    }
    public double m11() {
        return m11;
    }
    public double m12() {
        return m12;
    }
    public double m20() {
        return m20;
    }
    public double m21() {
        return m21;
    }
    public double m22() {
        return m22;
    }
    public Matrix3d m00(double m00) {
        this.m00 = m00;
        return this;
    }
    public Matrix3d m01(double m01) {
        this.m01 = m01;
        return this;
    }
    public Matrix3d m02(double m02) {
        this.m02 = m02;
        return this;
    }
    public Matrix3d m10(double m10) {
        this.m10 = m10;
        return this;
    }
    public Matrix3d m11(double m11) {
        this.m11 = m11;
        return this;
    }
    public Matrix3d m12(double m12) {
        this.m12 = m12;
        return this;
    }
    public Matrix3d m20(double m20) {
        this.m20 = m20;
        return this;
    }
    public Matrix3d m21(double m21) {
        this.m21 = m21;
        return this;
    }
    public Matrix3d m22(double m22) {
        this.m22 = m22;
        return this;
    }
    Matrix3d _m00(double m00) {
        this.m00 = m00;
        return this;
    }
    Matrix3d _m01(double m01) {
        this.m01 = m01;
        return this;
    }
    Matrix3d _m02(double m02) {
        this.m02 = m02;
        return this;
    }
    Matrix3d _m10(double m10) {
        this.m10 = m10;
        return this;
    }
    Matrix3d _m11(double m11) {
        this.m11 = m11;
        return this;
    }
    Matrix3d _m12(double m12) {
        this.m12 = m12;
        return this;
    }
    Matrix3d _m20(double m20) {
        this.m20 = m20;
        return this;
    }
    Matrix3d _m21(double m21) {
        this.m21 = m21;
        return this;
    }
    Matrix3d _m22(double m22) {
        this.m22 = m22;
        return this;
    }
    public Matrix3d set(Matrix3dc m) {
        if (m == this)
            return this;
        m00 = m.m00();
        m01 = m.m01();
        m02 = m.m02();
        m10 = m.m10();
        m11 = m.m11();
        m12 = m.m12();
        m20 = m.m20();
        m21 = m.m21();
        m22 = m.m22();
        return this;
    }
    public Matrix3d setTransposed(Matrix3dc m) {
        double nm10 = m.m01(), nm12 = m.m21();
        double nm20 = m.m02(), nm21 = m.m12();
        return this
        ._m00(m.m00())._m01(m.m10())._m02(m.m20())
        ._m10(nm10)._m11(m.m11())._m12(nm12)
        ._m20(nm20)._m21(nm21)._m22(m.m22());
    }
    public Matrix3d set(Matrix3fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m02 = m.m02();
        m10 = m.m10();
        m11 = m.m11();
        m12 = m.m12();
        m20 = m.m20();
        m21 = m.m21();
        m22 = m.m22();
        return this;
    }
    public Matrix3d setTransposed(Matrix3fc m) {
        float nm10 = m.m01(), nm12 = m.m21();
        float nm20 = m.m02(), nm21 = m.m12();
        return this
        ._m00(m.m00())._m01(m.m10())._m02(m.m20())
        ._m10(nm10)._m11(m.m11())._m12(nm12)
        ._m20(nm20)._m21(nm21)._m22(m.m22());
    }
    public Matrix3d set(Matrix4x3dc m) {
        m00 = m.m00();
        m01 = m.m01();
        m02 = m.m02();
        m10 = m.m10();
        m11 = m.m11();
        m12 = m.m12();
        m20 = m.m20();
        m21 = m.m21();
        m22 = m.m22();
        return this;
    }
    public Matrix3d set(Matrix4fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = mat.m02();
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = mat.m12();
        m20 = mat.m20();
        m21 = mat.m21();
        m22 = mat.m22();
        return this;
    }
    public Matrix3d set(Matrix4dc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = mat.m02();
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = mat.m12();
        m20 = mat.m20();
        m21 = mat.m21();
        m22 = mat.m22();
        return this;
    }
    public Matrix3d set(Matrix2fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = 0.0;
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = 1.0;
        return this;
    }
    public Matrix3d set(Matrix2dc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m02 = 0.0;
        m10 = mat.m10();
        m11 = mat.m11();
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = 1.0;
        return this;
    }
    public Matrix3d set(AxisAngle4f axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double invLength = Math.invsqrt(x*x + y*y + z*z);
        x *= invLength;
        y *= invLength;
        z *= invLength;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0 - c;
        m00 = c + x*x*omc;
        m11 = c + y*y*omc;
        m22 = c + z*z*omc;
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        m10 = tmp1 - tmp2;
        m01 = tmp1 + tmp2;
        tmp1 = x*z*omc;
        tmp2 = y*s;
        m20 = tmp1 + tmp2;
        m02 = tmp1 - tmp2;
        tmp1 = y*z*omc;
        tmp2 = x*s;
        m21 = tmp1 - tmp2;
        m12 = tmp1 + tmp2;
        return this;
    }
    public Matrix3d set(AxisAngle4d axisAngle) {
        double x = axisAngle.x;
        double y = axisAngle.y;
        double z = axisAngle.z;
        double angle = axisAngle.angle;
        double invLength = Math.invsqrt(x*x + y*y + z*z);
        x *= invLength;
        y *= invLength;
        z *= invLength;
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double omc = 1.0 - c;
        m00 = c + x*x*omc;
        m11 = c + y*y*omc;
        m22 = c + z*z*omc;
        double tmp1 = x*y*omc;
        double tmp2 = z*s;
        m10 = tmp1 - tmp2;
        m01 = tmp1 + tmp2;
        tmp1 = x*z*omc;
        tmp2 = y*s;
        m20 = tmp1 + tmp2;
        m02 = tmp1 - tmp2;
        tmp1 = y*z*omc;
        tmp2 = x*s;
        m21 = tmp1 - tmp2;
        m12 = tmp1 + tmp2;
        return this;
    }
    public Matrix3d set(Quaternionfc q) {
        return rotation(q);
    }
    public Matrix3d set(Quaterniondc q) {
        return rotation(q);
    }
    public Matrix3d mul(Matrix3dc right) {
        return mul(right, this);
    }
    public Matrix3d mul(Matrix3dc right, Matrix3d dest) {
        double nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), m20 * right.m02()));
        double nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), m21 * right.m02()));
        double nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), m22 * right.m02()));
        double nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), m20 * right.m12()));
        double nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), m21 * right.m12()));
        double nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), m22 * right.m12()));
        double nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), m20 * right.m22()));
        double nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), m21 * right.m22()));
        double nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), m22 * right.m22()));
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d mulLocal(Matrix3dc left) {
       return mulLocal(left, this);
    }
    public Matrix3d mulLocal(Matrix3dc left, Matrix3d dest) {
        double nm00 = left.m00() * m00 + left.m10() * m01 + left.m20() * m02;
        double nm01 = left.m01() * m00 + left.m11() * m01 + left.m21() * m02;
        double nm02 = left.m02() * m00 + left.m12() * m01 + left.m22() * m02;
        double nm10 = left.m00() * m10 + left.m10() * m11 + left.m20() * m12;
        double nm11 = left.m01() * m10 + left.m11() * m11 + left.m21() * m12;
        double nm12 = left.m02() * m10 + left.m12() * m11 + left.m22() * m12;
        double nm20 = left.m00() * m20 + left.m10() * m21 + left.m20() * m22;
        double nm21 = left.m01() * m20 + left.m11() * m21 + left.m21() * m22;
        double nm22 = left.m02() * m20 + left.m12() * m21 + left.m22() * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d mul(Matrix3fc right) {
        return mul(right, this);
    }
    public Matrix3d mul(Matrix3fc right, Matrix3d dest) {
        double nm00 = Math.fma(m00, right.m00(), Math.fma(m10, right.m01(), m20 * right.m02()));
        double nm01 = Math.fma(m01, right.m00(), Math.fma(m11, right.m01(), m21 * right.m02()));
        double nm02 = Math.fma(m02, right.m00(), Math.fma(m12, right.m01(), m22 * right.m02()));
        double nm10 = Math.fma(m00, right.m10(), Math.fma(m10, right.m11(), m20 * right.m12()));
        double nm11 = Math.fma(m01, right.m10(), Math.fma(m11, right.m11(), m21 * right.m12()));
        double nm12 = Math.fma(m02, right.m10(), Math.fma(m12, right.m11(), m22 * right.m12()));
        double nm20 = Math.fma(m00, right.m20(), Math.fma(m10, right.m21(), m20 * right.m22()));
        double nm21 = Math.fma(m01, right.m20(), Math.fma(m11, right.m21(), m21 * right.m22()));
        double nm22 = Math.fma(m02, right.m20(), Math.fma(m12, right.m21(), m22 * right.m22()));
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d set(double m00, double m01, double m02, 
                        double m10, double m11, double m12, 
                        double m20, double m21, double m22) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        return this;
    }
    public Matrix3d set(double m[]) {
        m00 = m[0];
        m01 = m[1];
        m02 = m[2];
        m10 = m[3];
        m11 = m[4];
        m12 = m[5];
        m20 = m[6];
        m21 = m[7];
        m22 = m[8];
        return this;
    }
    public Matrix3d set(double m[], int off) {
        m00 = m[off+0];
        m01 = m[off+1];
        m02 = m[off+2];
        m10 = m[off+3];
        m11 = m[off+4];
        m12 = m[off+5];
        m20 = m[off+6];
        m21 = m[off+7];
        m22 = m[off+8];
        return this;
    }
    public Matrix3d set(float m[]) {
        m00 = m[0];
        m01 = m[1];
        m02 = m[2];
        m10 = m[3];
        m11 = m[4];
        m12 = m[5];
        m20 = m[6];
        m21 = m[7];
        m22 = m[8];
        return this;
    }
    public Matrix3d set(float m[], int off) {
        m00 = m[off+0];
        m01 = m[off+1];
        m02 = m[off+2];
        m10 = m[off+3];
        m11 = m[off+4];
        m12 = m[off+5];
        m20 = m[off+6];
        m21 = m[off+7];
        m22 = m[off+8];
        return this;
    }
    public double determinant() {
        return (m00 * m11 - m01 * m10) * m22
             + (m02 * m10 - m00 * m12) * m21
             + (m01 * m12 - m02 * m11) * m20;
    }
    public Matrix3d invert() {
        return invert(this);
    }
    public Matrix3d invert(Matrix3d dest) {
        double a = Math.fma(m00, m11, -m01 * m10);
        double b = Math.fma(m02, m10, -m00 * m12);
        double c = Math.fma(m01, m12, -m02 * m11);
        double d = Math.fma(a, m22, Math.fma(b, m21, c * m20));
        double s = 1.0 / d;
        double nm00 = Math.fma(m11, m22, -m21 * m12) * s;
        double nm01 = Math.fma(m21, m02, -m01 * m22) * s;
        double nm02 = c * s;
        double nm10 = Math.fma(m20, m12, -m10 * m22) * s;
        double nm11 = Math.fma(m00, m22, -m20 * m02) * s;
        double nm12 = b * s;
        double nm20 = Math.fma(m10, m21, -m20 * m11) * s;
        double nm21 = Math.fma(m20, m01, -m00 * m21) * s;
        double nm22 = a * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d transpose() {
        return transpose(this);
    }
    public Matrix3d transpose(Matrix3d dest) {
        dest.set(m00, m10, m20,
                 m01, m11, m21,
                 m02, m12, m22);
        return dest;
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + " " + Runtime.format(m20, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + " " + Runtime.format(m21, formatter) + "\n"
             + Runtime.format(m02, formatter) + " " + Runtime.format(m12, formatter) + " " + Runtime.format(m22, formatter) + "\n";
    }
    public Matrix3d get(Matrix3d dest) {
        return dest.set(this);
    }
    public AxisAngle4f getRotation(AxisAngle4f dest) {
        return dest.set(this);
    }
    public Quaternionf getUnnormalizedRotation(Quaternionf dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaternionf getNormalizedRotation(Quaternionf dest) {
        return dest.setFromNormalized(this);
    }
    public Quaterniond getUnnormalizedRotation(Quaterniond dest) {
        return dest.setFromUnnormalized(this);
    }
    public Quaterniond getNormalizedRotation(Quaterniond dest) {
        return dest.setFromNormalized(this);
    }
    public DoubleBuffer get(DoubleBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public DoubleBuffer get(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get(FloatBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putf(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getFloats(ByteBuffer buffer) {
        return getFloats(buffer.position(), buffer);
    }
    public ByteBuffer getFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putf(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer getTransposed(DoubleBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public DoubleBuffer getTransposed(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposedFloats(ByteBuffer buffer) {
        return getTransposedFloats(buffer.position(), buffer);
    }
    public ByteBuffer getTransposedFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public Matrix3dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix3dc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public double[] get(double[] arr, int offset) {
        arr[offset+0] = m00;
        arr[offset+1] = m01;
        arr[offset+2] = m02;
        arr[offset+3] = m10;
        arr[offset+4] = m11;
        arr[offset+5] = m12;
        arr[offset+6] = m20;
        arr[offset+7] = m21;
        arr[offset+8] = m22;
        return arr;
    }
    public double[] get(double[] arr) {
        return get(arr, 0);
    }
    public float[] get(float[] arr, int offset) {
        arr[offset+0] = (float)m00;
        arr[offset+1] = (float)m01;
        arr[offset+2] = (float)m02;
        arr[offset+3] = (float)m10;
        arr[offset+4] = (float)m11;
        arr[offset+5] = (float)m12;
        arr[offset+6] = (float)m20;
        arr[offset+7] = (float)m21;
        arr[offset+8] = (float)m22;
        return arr;
    }
    public float[] get(float[] arr) {
        return get(arr, 0);
    }
    public Matrix3d set(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3d set(FloatBuffer buffer) {
        MemUtil.INSTANCE.getf(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3d set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3d setFloats(ByteBuffer buffer) {
        MemUtil.INSTANCE.getf(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3d set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.getf(this, index, buffer);
        return this;
    }
    public Matrix3d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3d setFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.getf(this, index, buffer);
        return this;
    }
    public Matrix3d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Matrix3d setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return this;
    }
    public Matrix3d set(Vector3dc col0,
                        Vector3dc col1, 
                        Vector3dc col2) {
        this.m00 = col0.x();
        this.m01 = col0.y();
        this.m02 = col0.z();
        this.m10 = col1.x();
        this.m11 = col1.y();
        this.m12 = col1.z();
        this.m20 = col2.x();
        this.m21 = col2.y();
        this.m22 = col2.z();
        return this;
    }
    public Matrix3d zero() {
        m00 = 0.0;
        m01 = 0.0;
        m02 = 0.0;
        m10 = 0.0;
        m11 = 0.0;
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = 0.0;
        return this;
    }
    public Matrix3d identity() {
        m00 = 1.0;
        m01 = 0.0;
        m02 = 0.0;
        m10 = 0.0;
        m11 = 1.0;
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = 1.0;
        return this;
    }
    public Matrix3d scaling(double factor) {
        m00 = factor;
        m01 = 0.0;
        m02 = 0.0;
        m10 = 0.0;
        m11 = factor;
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = factor;
        return this;
    }
    public Matrix3d scaling(double x, double y, double z) {
        m00 = x;
        m01 = 0.0;
        m02 = 0.0;
        m10 = 0.0;
        m11 = y;
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = z;
        return this;
    }
    public Matrix3d scaling(Vector3dc xyz) {
        m00 = xyz.x();
        m01 = 0.0;
        m02 = 0.0;
        m10 = 0.0;
        m11 = xyz.y();
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = xyz.z();
        return this;
    }
    public Matrix3d scale(Vector3dc xyz, Matrix3d dest) {
        return scale(xyz.x(), xyz.y(), xyz.z(), dest);
    }
    public Matrix3d scale(Vector3dc xyz) {
        return scale(xyz.x(), xyz.y(), xyz.z(), this);
    }
    public Matrix3d scale(double x, double y, double z, Matrix3d dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m02 = m02 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        dest.m12 = m12 * y;
        dest.m20 = m20 * z;
        dest.m21 = m21 * z;
        dest.m22 = m22 * z;
        return dest;
    }
    public Matrix3d scale(double x, double y, double z) {
        return scale(x, y, z, this);
    }
    public Matrix3d scale(double xyz, Matrix3d dest) {
        return scale(xyz, xyz, xyz, dest);
    }
    public Matrix3d scale(double xyz) {
        return scale(xyz, xyz, xyz);
    }
    public Matrix3d scaleLocal(double x, double y, double z, Matrix3d dest) {
        double nm00 = x * m00;
        double nm01 = y * m01;
        double nm02 = z * m02;
        double nm10 = x * m10;
        double nm11 = y * m11;
        double nm12 = z * m12;
        double nm20 = x * m20;
        double nm21 = y * m21;
        double nm22 = z * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d scaleLocal(double x, double y, double z) {
        return scaleLocal(x, y, z, this);
    }
    public Matrix3d rotation(double angle, Vector3dc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix3d rotation(double angle, Vector3fc axis) {
        return rotation(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix3d rotation(AxisAngle4f axisAngle) {
        return rotation(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix3d rotation(AxisAngle4d axisAngle) {
        return rotation(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix3d rotation(double angle, double x, double y, double z) {
        double sin = Math.sin(angle);
        double cos = Math.cosFromSin(sin, angle);
        double C = 1.0 - cos;
        double xy = x * y, xz = x * z, yz = y * z;
        m00 = cos + x * x * C;
        m10 = xy * C - z * sin;
        m20 = xz * C + y * sin;
        m01 = xy * C + z * sin;
        m11 = cos + y * y * C;
        m21 = yz * C - x * sin;
        m02 = xz * C - y * sin;
        m12 = yz * C + x * sin;
        m22 = cos + z * z * C;
        return this;
    }
    public Matrix3d rotationX(double ang) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = 1.0;
        m01 = 0.0;
        m02 = 0.0;
        m10 = 0.0;
        m11 = cos;
        m12 = sin;
        m20 = 0.0;
        m21 = -sin;
        m22 = cos;
        return this;
    }
    public Matrix3d rotationY(double ang) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = cos;
        m01 = 0.0;
        m02 = -sin;
        m10 = 0.0;
        m11 = 1.0;
        m12 = 0.0;
        m20 = sin;
        m21 = 0.0;
        m22 = cos;
        return this;
    }
    public Matrix3d rotationZ(double ang) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        m00 = cos;
        m01 = sin;
        m02 = 0.0;
        m10 = -sin;
        m11 = cos;
        m12 = 0.0;
        m20 = 0.0;
        m21 = 0.0;
        m22 = 1.0;
        return this;
    }
    public Matrix3d rotationXYZ(double angleX, double angleY, double angleZ) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinX = -sinX;
        double m_sinY = -sinY;
        double m_sinZ = -sinZ;
        double nm11 = cosX;
        double nm12 = sinX;
        double nm21 = m_sinX;
        double nm22 = cosX;
        double nm00 = cosY;
        double nm01 = nm21 * m_sinY;
        double nm02 = nm22 * m_sinY;
        m20 = sinY;
        m21 = nm21 * cosY;
        m22 = nm22 * cosY;
        m00 = nm00 * cosZ;
        m01 = nm01 * cosZ + nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ;
        m11 = nm01 * m_sinZ + nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        return this;
    }
    public Matrix3d rotationZYX(double angleZ, double angleY, double angleX) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinZ = -sinZ;
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double nm00 = cosZ;
        double nm01 = sinZ;
        double nm10 = m_sinZ;
        double nm11 = cosZ;
        double nm20 = nm00 * sinY;
        double nm21 = nm01 * sinY;
        double nm22 = cosY;
        m00 = nm00 * cosY;
        m01 = nm01 * cosY;
        m02 = m_sinY;
        m10 = nm10 * cosX + nm20 * sinX;
        m11 = nm11 * cosX + nm21 * sinX;
        m12 = nm22 * sinX;
        m20 = nm10 * m_sinX + nm20 * cosX;
        m21 = nm11 * m_sinX + nm21 * cosX;
        m22 = nm22 * cosX;
        return this;
    }
    public Matrix3d rotationYXZ(double angleY, double angleX, double angleZ) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double m_sinZ = -sinZ;
        double nm00 = cosY;
        double nm02 = m_sinY;
        double nm20 = sinY;
        double nm22 = cosY;
        double nm10 = nm20 * sinX;
        double nm11 = cosX;
        double nm12 = nm22 * sinX;
        m20 = nm20 * cosX;
        m21 = m_sinX;
        m22 = nm22 * cosX;
        m00 = nm00 * cosZ + nm10 * sinZ;
        m01 = nm11 * sinZ;
        m02 = nm02 * cosZ + nm12 * sinZ;
        m10 = nm00 * m_sinZ + nm10 * cosZ;
        m11 = nm11 * cosZ;
        m12 = nm02 * m_sinZ + nm12 * cosZ;
        return this;
    }
    public Matrix3d rotation(Quaterniondc quat) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw;
        double xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz;
        double yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz;
        double xw = quat.x() * quat.w(), dxw = xw + xw;
        m00 = w2 + x2 - z2 - y2;
        m01 = dxy + dzw;
        m02 = dxz - dyw;
        m10 = -dzw + dxy;
        m11 = y2 - z2 + w2 - x2;
        m12 = dyz + dxw;
        m20 = dyw + dxz;
        m21 = dyz - dxw;
        m22 = z2 - y2 - x2 + w2;
        return this;
    }
    public Matrix3d rotation(Quaternionfc quat) {
        double w2 = quat.w() * quat.w();
        double x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y();
        double z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw;
        double xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz;
        double yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz;
        double xw = quat.x() * quat.w(), dxw = xw + xw;
        m00 = w2 + x2 - z2 - y2;
        m01 = dxy + dzw;
        m02 = dxz - dyw;
        m10 = -dzw + dxy;
        m11 = y2 - z2 + w2 - x2;
        m12 = dyz + dxw;
        m20 = dyw + dxz;
        m21 = dyz - dxw;
        m22 = z2 - y2 - x2 + w2;
        return this;
    }
    public Vector3d transform(Vector3d v) {
        return v.mul(this);
    }
    public Vector3d transform(Vector3dc v, Vector3d dest) {
        v.mul(this, dest);
        return dest;
    }
    public Vector3f transform(Vector3f v) {
        return v.mul(this);
    }
    public Vector3f transform(Vector3fc v, Vector3f dest) {
        return v.mul(this, dest);
    }
    public Vector3d transform(double x, double y, double z, Vector3d dest) {
        return dest.set(Math.fma(m00, x, Math.fma(m10, y, m20 * z)),
                        Math.fma(m01, x, Math.fma(m11, y, m21 * z)),
                        Math.fma(m02, x, Math.fma(m12, y, m22 * z)));
    }
    public Vector3d transformTranspose(Vector3d v) {
        return v.mulTranspose(this);
    }
    public Vector3d transformTranspose(Vector3dc v, Vector3d dest) {
        return v.mulTranspose(this, dest);
    }
    public Vector3d transformTranspose(double x, double y, double z, Vector3d dest) {
        return dest.set(Math.fma(m00, x, Math.fma(m01, y, m02 * z)),
                        Math.fma(m10, x, Math.fma(m11, y, m12 * z)),
                        Math.fma(m20, x, Math.fma(m21, y, m22 * z)));
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(m00);
        out.writeDouble(m01);
        out.writeDouble(m02);
        out.writeDouble(m10);
        out.writeDouble(m11);
        out.writeDouble(m12);
        out.writeDouble(m20);
        out.writeDouble(m21);
        out.writeDouble(m22);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readDouble();
        m01 = in.readDouble();
        m02 = in.readDouble();
        m10 = in.readDouble();
        m11 = in.readDouble();
        m12 = in.readDouble();
        m20 = in.readDouble();
        m21 = in.readDouble();
        m22 = in.readDouble();
    }
    public Matrix3d rotateX(double ang, Matrix3d dest) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        double rm11 = cos;
        double rm21 = -sin;
        double rm12 = sin;
        double rm22 = cos;
        double nm10 = m10 * rm11 + m20 * rm12;
        double nm11 = m11 * rm11 + m21 * rm12;
        double nm12 = m12 * rm11 + m22 * rm12;
        dest.m20 = m10 * rm21 + m20 * rm22;
        dest.m21 = m11 * rm21 + m21 * rm22;
        dest.m22 = m12 * rm21 + m22 * rm22;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        return dest;
    }
    public Matrix3d rotateX(double ang) {
        return rotateX(ang, this);
    }
    public Matrix3d rotateY(double ang, Matrix3d dest) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        double rm00 = cos;
        double rm20 = sin;
        double rm02 = -sin;
        double rm22 = cos;
        double nm00 = m00 * rm00 + m20 * rm02;
        double nm01 = m01 * rm00 + m21 * rm02;
        double nm02 = m02 * rm00 + m22 * rm02;
        dest.m20 = m00 * rm20 + m20 * rm22;
        dest.m21 = m01 * rm20 + m21 * rm22;
        dest.m22 = m02 * rm20 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        return dest;
    }
    public Matrix3d rotateY(double ang) {
        return rotateY(ang, this);
    }
    public Matrix3d rotateZ(double ang, Matrix3d dest) {
        double sin, cos;
        sin = Math.sin(ang);
        cos = Math.cosFromSin(sin, ang);
        double rm00 = cos;
        double rm10 = -sin;
        double rm01 = sin;
        double rm11 = cos;
        double nm00 = m00 * rm00 + m10 * rm01;
        double nm01 = m01 * rm00 + m11 * rm01;
        double nm02 = m02 * rm00 + m12 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m12 = m02 * rm10 + m12 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m20 = m20;
        dest.m21 = m21;
        dest.m22 = m22;
        return dest;
    }
    public Matrix3d rotateZ(double ang) {
        return rotateZ(ang, this);
    }
    public Matrix3d rotateXYZ(double angleX, double angleY, double angleZ) {
        return rotateXYZ(angleX, angleY, angleZ, this);
    }
    public Matrix3d rotateXYZ(double angleX, double angleY, double angleZ, Matrix3d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinX = -sinX;
        double m_sinY = -sinY;
        double m_sinZ = -sinZ;
        double nm10 = m10 * cosX + m20 * sinX;
        double nm11 = m11 * cosX + m21 * sinX;
        double nm12 = m12 * cosX + m22 * sinX;
        double nm20 = m10 * m_sinX + m20 * cosX;
        double nm21 = m11 * m_sinX + m21 * cosX;
        double nm22 = m12 * m_sinX + m22 * cosX;
        double nm00 = m00 * cosY + nm20 * m_sinY;
        double nm01 = m01 * cosY + nm21 * m_sinY;
        double nm02 = m02 * cosY + nm22 * m_sinY;
        dest.m20 = m00 * sinY + nm20 * cosY;
        dest.m21 = m01 * sinY + nm21 * cosY;
        dest.m22 = m02 * sinY + nm22 * cosY;
        dest.m00 = nm00 * cosZ + nm10 * sinZ;
        dest.m01 = nm01 * cosZ + nm11 * sinZ;
        dest.m02 = nm02 * cosZ + nm12 * sinZ;
        dest.m10 = nm00 * m_sinZ + nm10 * cosZ;
        dest.m11 = nm01 * m_sinZ + nm11 * cosZ;
        dest.m12 = nm02 * m_sinZ + nm12 * cosZ;
        return dest;
    }
    public Matrix3d rotateZYX(double angleZ, double angleY, double angleX) {
        return rotateZYX(angleZ, angleY, angleX, this);
    }
    public Matrix3d rotateZYX(double angleZ, double angleY, double angleX, Matrix3d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinZ = -sinZ;
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double nm00 = m00 * cosZ + m10 * sinZ;
        double nm01 = m01 * cosZ + m11 * sinZ;
        double nm02 = m02 * cosZ + m12 * sinZ;
        double nm10 = m00 * m_sinZ + m10 * cosZ;
        double nm11 = m01 * m_sinZ + m11 * cosZ;
        double nm12 = m02 * m_sinZ + m12 * cosZ;
        double nm20 = nm00 * sinY + m20 * cosY;
        double nm21 = nm01 * sinY + m21 * cosY;
        double nm22 = nm02 * sinY + m22 * cosY;
        dest.m00 = nm00 * cosY + m20 * m_sinY;
        dest.m01 = nm01 * cosY + m21 * m_sinY;
        dest.m02 = nm02 * cosY + m22 * m_sinY;
        dest.m10 = nm10 * cosX + nm20 * sinX;
        dest.m11 = nm11 * cosX + nm21 * sinX;
        dest.m12 = nm12 * cosX + nm22 * sinX;
        dest.m20 = nm10 * m_sinX + nm20 * cosX;
        dest.m21 = nm11 * m_sinX + nm21 * cosX;
        dest.m22 = nm12 * m_sinX + nm22 * cosX;
        return dest;
    }
    public Matrix3d rotateYXZ(Vector3d angles) {
        return rotateYXZ(angles.y, angles.x, angles.z);
    }
    public Matrix3d rotateYXZ(double angleY, double angleX, double angleZ) {
        return rotateYXZ(angleY, angleX, angleZ, this);
    }
    public Matrix3d rotateYXZ(double angleY, double angleX, double angleZ, Matrix3d dest) {
        double sinX = Math.sin(angleX);
        double cosX = Math.cosFromSin(sinX, angleX);
        double sinY = Math.sin(angleY);
        double cosY = Math.cosFromSin(sinY, angleY);
        double sinZ = Math.sin(angleZ);
        double cosZ = Math.cosFromSin(sinZ, angleZ);
        double m_sinY = -sinY;
        double m_sinX = -sinX;
        double m_sinZ = -sinZ;
        double nm20 = m00 * sinY + m20 * cosY;
        double nm21 = m01 * sinY + m21 * cosY;
        double nm22 = m02 * sinY + m22 * cosY;
        double nm00 = m00 * cosY + m20 * m_sinY;
        double nm01 = m01 * cosY + m21 * m_sinY;
        double nm02 = m02 * cosY + m22 * m_sinY;
        double nm10 = m10 * cosX + nm20 * sinX;
        double nm11 = m11 * cosX + nm21 * sinX;
        double nm12 = m12 * cosX + nm22 * sinX;
        dest.m20 = m10 * m_sinX + nm20 * cosX;
        dest.m21 = m11 * m_sinX + nm21 * cosX;
        dest.m22 = m12 * m_sinX + nm22 * cosX;
        dest.m00 = nm00 * cosZ + nm10 * sinZ;
        dest.m01 = nm01 * cosZ + nm11 * sinZ;
        dest.m02 = nm02 * cosZ + nm12 * sinZ;
        dest.m10 = nm00 * m_sinZ + nm10 * cosZ;
        dest.m11 = nm01 * m_sinZ + nm11 * cosZ;
        dest.m12 = nm02 * m_sinZ + nm12 * cosZ;
        return dest;
    }
    public Matrix3d rotate(double ang, double x, double y, double z) {
        return rotate(ang, x, y, z, this);
    }
    public Matrix3d rotate(double ang, double x, double y, double z, Matrix3d dest) {
        double s = Math.sin(ang);
        double c = Math.cosFromSin(s, ang);
        double C = 1.0 - c;
        double xx = x * x, xy = x * y, xz = x * z;
        double yy = y * y, yz = y * z;
        double zz = z * z;
        double rm00 = xx * C + c;
        double rm01 = xy * C + z * s;
        double rm02 = xz * C - y * s;
        double rm10 = xy * C - z * s;
        double rm11 = yy * C + c;
        double rm12 = yz * C + x * s;
        double rm20 = xz * C + y * s;
        double rm21 = yz * C - x * s;
        double rm22 = zz * C + c;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3d rotateLocal(double ang, double x, double y, double z, Matrix3d dest) {
        double s = Math.sin(ang);
        double c = Math.cosFromSin(s, ang);
        double C = 1.0 - c;
        double xx = x * x, xy = x * y, xz = x * z;
        double yy = y * y, yz = y * z;
        double zz = z * z;
        double lm00 = xx * C + c;
        double lm01 = xy * C + z * s;
        double lm02 = xz * C - y * s;
        double lm10 = xy * C - z * s;
        double lm11 = yy * C + c;
        double lm12 = yz * C + x * s;
        double lm20 = xz * C + y * s;
        double lm21 = yz * C - x * s;
        double lm22 = zz * C + c;
        double nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        double nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        double nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        double nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        double nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        double nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        double nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        double nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        double nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d rotateLocal(double ang, double x, double y, double z) {
        return rotateLocal(ang, x, y, z, this);
    }
    public Matrix3d rotateLocalX(double ang, Matrix3d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm01 = cos * m01 - sin * m02;
        double nm02 = sin * m01 + cos * m02;
        double nm11 = cos * m11 - sin * m12;
        double nm12 = sin * m11 + cos * m12;
        double nm21 = cos * m21 - sin * m22;
        double nm22 = sin * m21 + cos * m22;
        dest.m00 = m00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = m10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = m20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d rotateLocalX(double ang) {
        return rotateLocalX(ang, this);
    }
    public Matrix3d rotateLocalY(double ang, Matrix3d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm00 =  cos * m00 + sin * m02;
        double nm02 = -sin * m00 + cos * m02;
        double nm10 =  cos * m10 + sin * m12;
        double nm12 = -sin * m10 + cos * m12;
        double nm20 =  cos * m20 + sin * m22;
        double nm22 = -sin * m20 + cos * m22;
        dest.m00 = nm00;
        dest.m01 = m01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = m11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = m21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d rotateLocalY(double ang) {
        return rotateLocalY(ang, this);
    }
    public Matrix3d rotateLocalZ(double ang, Matrix3d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm00 = cos * m00 - sin * m01;
        double nm01 = sin * m00 + cos * m01;
        double nm10 = cos * m10 - sin * m11;
        double nm11 = sin * m10 + cos * m11;
        double nm20 = cos * m20 - sin * m21;
        double nm21 = sin * m20 + cos * m21;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = m02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = m12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = m22;
        return dest;
    }
    public Matrix3d rotateLocalZ(double ang) {
        return rotateLocalZ(ang, this);
    }
    public Matrix3d rotateLocal(Quaterniondc quat, Matrix3d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double lm00 = w2 + x2 - z2 - y2;
        double lm01 = dxy + dzw;
        double lm02 = dxz - dyw;
        double lm10 = dxy - dzw;
        double lm11 = y2 - z2 + w2 - x2;
        double lm12 = dyz + dxw;
        double lm20 = dyw + dxz;
        double lm21 = dyz - dxw;
        double lm22 = z2 - y2 - x2 + w2;
        double nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        double nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        double nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        double nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        double nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        double nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        double nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        double nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        double nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d rotateLocal(Quaterniondc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix3d rotateLocal(Quaternionfc quat, Matrix3d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double lm00 = w2 + x2 - z2 - y2;
        double lm01 = dxy + dzw;
        double lm02 = dxz - dyw;
        double lm10 = dxy - dzw;
        double lm11 = y2 - z2 + w2 - x2;
        double lm12 = dyz + dxw;
        double lm20 = dyw + dxz;
        double lm21 = dyz - dxw;
        double lm22 = z2 - y2 - x2 + w2;
        double nm00 = lm00 * m00 + lm10 * m01 + lm20 * m02;
        double nm01 = lm01 * m00 + lm11 * m01 + lm21 * m02;
        double nm02 = lm02 * m00 + lm12 * m01 + lm22 * m02;
        double nm10 = lm00 * m10 + lm10 * m11 + lm20 * m12;
        double nm11 = lm01 * m10 + lm11 * m11 + lm21 * m12;
        double nm12 = lm02 * m10 + lm12 * m11 + lm22 * m12;
        double nm20 = lm00 * m20 + lm10 * m21 + lm20 * m22;
        double nm21 = lm01 * m20 + lm11 * m21 + lm21 * m22;
        double nm22 = lm02 * m20 + lm12 * m21 + lm22 * m22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d rotateLocal(Quaternionfc quat) {
        return rotateLocal(quat, this);
    }
    public Matrix3d rotate(Quaterniondc quat) {
        return rotate(quat, this);
    }
    public Matrix3d rotate(Quaterniondc quat, Matrix3d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = dxy - dzw;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3d rotate(Quaternionfc quat) {
        return rotate(quat, this);
    }
    public Matrix3d rotate(Quaternionfc quat, Matrix3d dest) {
        double w2 = quat.w() * quat.w(), x2 = quat.x() * quat.x();
        double y2 = quat.y() * quat.y(), z2 = quat.z() * quat.z();
        double zw = quat.z() * quat.w(), dzw = zw + zw, xy = quat.x() * quat.y(), dxy = xy + xy;
        double xz = quat.x() * quat.z(), dxz = xz + xz, yw = quat.y() * quat.w(), dyw = yw + yw;
        double yz = quat.y() * quat.z(), dyz = yz + yz, xw = quat.x() * quat.w(), dxw = xw + xw;
        double rm00 = w2 + x2 - z2 - y2;
        double rm01 = dxy + dzw;
        double rm02 = dxz - dyw;
        double rm10 = dxy - dzw;
        double rm11 = y2 - z2 + w2 - x2;
        double rm12 = dyz + dxw;
        double rm20 = dyw + dxz;
        double rm21 = dyz - dxw;
        double rm22 = z2 - y2 - x2 + w2;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3d rotate(AxisAngle4f axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix3d rotate(AxisAngle4f axisAngle, Matrix3d dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix3d rotate(AxisAngle4d axisAngle) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z);
    }
    public Matrix3d rotate(AxisAngle4d axisAngle, Matrix3d dest) {
        return rotate(axisAngle.angle, axisAngle.x, axisAngle.y, axisAngle.z, dest);
    }
    public Matrix3d rotate(double angle, Vector3dc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix3d rotate(double angle, Vector3dc axis, Matrix3d dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Matrix3d rotate(double angle, Vector3fc axis) {
        return rotate(angle, axis.x(), axis.y(), axis.z());
    }
    public Matrix3d rotate(double angle, Vector3fc axis, Matrix3d dest) {
        return rotate(angle, axis.x(), axis.y(), axis.z(), dest);
    }
    public Vector3d getRow(int row, Vector3d dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            return dest.set(m00, m10, m20);
        case 1:
            return dest.set(m01, m11, m21);
        case 2:
            return dest.set(m02, m12, m22);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Matrix3d setRow(int row, Vector3dc src) throws IndexOutOfBoundsException {
        return setRow(row, src.x(), src.y(), src.z());
    }
    public Matrix3d setRow(int row, double x, double y, double z) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            this.m00 = x;
            this.m10 = y;
            this.m20 = z;
            break;
        case 1:
            this.m01 = x;
            this.m11 = y;
            this.m21 = z;
            break;
        case 2:
            this.m02 = x;
            this.m12 = y;
            this.m22 = z;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public Vector3d getColumn(int column, Vector3d dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            return dest.set(m00, m01, m02);
        case 1:
            return dest.set(m10, m11, m12);
        case 2:
            return dest.set(m20, m21, m22);
        default:
            throw new IndexOutOfBoundsException();
        }
    }
    public Matrix3d setColumn(int column, Vector3dc src) throws IndexOutOfBoundsException {
        return setColumn(column, src.x(), src.y(), src.z());
    }
    public Matrix3d setColumn(int column, double x, double y, double z) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            this.m00 = x;
            this.m01 = y;
            this.m02 = z;
            break;
        case 1:
            this.m10 = x;
            this.m11 = y;
            this.m12 = z;
            break;
        case 2:
            this.m20 = x;
            this.m21 = y;
            this.m22 = z;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public double get(int column, int row) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix3d set(int column, int row, double value) {
        return MemUtil.INSTANCE.set(this, column, row, value);
    }
    public double getRowColumn(int row, int column) {
        return MemUtil.INSTANCE.get(this, column, row);
    }
    public Matrix3d setRowColumn(int row, int column, double value) {
        return MemUtil.INSTANCE.set(this, column, row, value);
    }
    public Matrix3d normal() {
        return normal(this);
    }
    public Matrix3d normal(Matrix3d dest) {
        double m00m11 = m00 * m11;
        double m01m10 = m01 * m10;
        double m02m10 = m02 * m10;
        double m00m12 = m00 * m12;
        double m01m12 = m01 * m12;
        double m02m11 = m02 * m11;
        double det = (m00m11 - m01m10) * m22 + (m02m10 - m00m12) * m21 + (m01m12 - m02m11) * m20;
        double s = 1.0 / det;
        double nm00 = (m11 * m22 - m21 * m12) * s;
        double nm01 = (m20 * m12 - m10 * m22) * s;
        double nm02 = (m10 * m21 - m20 * m11) * s;
        double nm10 = (m21 * m02 - m01 * m22) * s;
        double nm11 = (m00 * m22 - m20 * m02) * s;
        double nm12 = (m20 * m01 - m00 * m21) * s;
        double nm20 = (m01m12 - m02m11) * s;
        double nm21 = (m02m10 - m00m12) * s;
        double nm22 = (m00m11 - m01m10) * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d cofactor() {
        return cofactor(this);
    }
    public Matrix3d cofactor(Matrix3d dest) {
        double nm00 = m11 * m22 - m21 * m12;
        double nm01 = m20 * m12 - m10 * m22;
        double nm02 = m10 * m21 - m20 * m11;
        double nm10 = m21 * m02 - m01 * m22;
        double nm11 = m00 * m22 - m20 * m02;
        double nm12 = m20 * m01 - m00 * m21;
        double nm20 = m01 * m12 - m11 * m02;
        double nm21 = m02 * m10 - m12 * m00;
        double nm22 = m00 * m11 - m10 * m01;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        dest.m20 = nm20;
        dest.m21 = nm21;
        dest.m22 = nm22;
        return dest;
    }
    public Matrix3d lookAlong(Vector3dc dir, Vector3dc up) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix3d lookAlong(Vector3dc dir, Vector3dc up, Matrix3d dest) {
        return lookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix3d lookAlong(double dirX, double dirY, double dirZ,
                              double upX, double upY, double upZ, Matrix3d dest) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        double rm00 = leftX;
        double rm01 = upnX;
        double rm02 = dirX;
        double rm10 = leftY;
        double rm11 = upnY;
        double rm12 = dirY;
        double rm20 = leftZ;
        double rm21 = upnZ;
        double rm22 = dirZ;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3d lookAlong(double dirX, double dirY, double dirZ,
                              double upX, double upY, double upZ) {
        return lookAlong(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix3d setLookAlong(Vector3dc dir, Vector3dc up) {
        return setLookAlong(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix3d setLookAlong(double dirX, double dirY, double dirZ,
                                 double upX, double upY, double upZ) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        dirX *= -invDirLength;
        dirY *= -invDirLength;
        dirZ *= -invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * dirZ - upZ * dirY;
        leftY = upZ * dirX - upX * dirZ;
        leftZ = upX * dirY - upY * dirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = dirY * leftZ - dirZ * leftY;
        double upnY = dirZ * leftX - dirX * leftZ;
        double upnZ = dirX * leftY - dirY * leftX;
        m00 = leftX;
        m01 = upnX;
        m02 = dirX;
        m10 = leftY;
        m11 = upnY;
        m12 = dirY;
        m20 = leftZ;
        m21 = upnZ;
        m22 = dirZ;
        return this;
    }
    public Vector3d getScale(Vector3d dest) {
        dest.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
        dest.y = Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
        dest.z = Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
        return dest;
    }
    public Vector3d positiveZ(Vector3d dir) {
        dir.x = m10 * m21 - m11 * m20;
        dir.y = m20 * m01 - m21 * m00;
        dir.z = m00 * m11 - m01 * m10;
        return dir.normalize(dir);
    }
    public Vector3d normalizedPositiveZ(Vector3d dir) {
        dir.x = m02;
        dir.y = m12;
        dir.z = m22;
        return dir;
    }
    public Vector3d positiveX(Vector3d dir) {
        dir.x = m11 * m22 - m12 * m21;
        dir.y = m02 * m21 - m01 * m22;
        dir.z = m01 * m12 - m02 * m11;
        return dir.normalize(dir);
    }
    public Vector3d normalizedPositiveX(Vector3d dir) {
        dir.x = m00;
        dir.y = m10;
        dir.z = m20;
        return dir;
    }
    public Vector3d positiveY(Vector3d dir) {
        dir.x = m12 * m20 - m10 * m22;
        dir.y = m00 * m22 - m02 * m20;
        dir.z = m02 * m10 - m00 * m12;
        return dir.normalize(dir);
    }
    public Vector3d normalizedPositiveY(Vector3d dir) {
        dir.x = m01;
        dir.y = m11;
        dir.z = m21;
        return dir;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(m00);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m01);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m02);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m10);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m11);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m12);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m20);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m21);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m22);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix3d))
            return false;
        Matrix3d other = (Matrix3d) obj;
        if (Double.doubleToLongBits(m00) != Double.doubleToLongBits(other.m00))
            return false;
        if (Double.doubleToLongBits(m01) != Double.doubleToLongBits(other.m01))
            return false;
        if (Double.doubleToLongBits(m02) != Double.doubleToLongBits(other.m02))
            return false;
        if (Double.doubleToLongBits(m10) != Double.doubleToLongBits(other.m10))
            return false;
        if (Double.doubleToLongBits(m11) != Double.doubleToLongBits(other.m11))
            return false;
        if (Double.doubleToLongBits(m12) != Double.doubleToLongBits(other.m12))
            return false;
        if (Double.doubleToLongBits(m20) != Double.doubleToLongBits(other.m20))
            return false;
        if (Double.doubleToLongBits(m21) != Double.doubleToLongBits(other.m21))
            return false;
        if (Double.doubleToLongBits(m22) != Double.doubleToLongBits(other.m22))
            return false;
        return true;
    }
    public boolean equals(Matrix3dc m, double delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m02, m.m02(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        if (!Runtime.equals(m12, m.m12(), delta))
            return false;
        if (!Runtime.equals(m20, m.m20(), delta))
            return false;
        if (!Runtime.equals(m21, m.m21(), delta))
            return false;
        if (!Runtime.equals(m22, m.m22(), delta))
            return false;
        return true;
    }
    public Matrix3d swap(Matrix3d other) {
        double tmp;
        tmp = m00; m00 = other.m00; other.m00 = tmp;
        tmp = m01; m01 = other.m01; other.m01 = tmp;
        tmp = m02; m02 = other.m02; other.m02 = tmp;
        tmp = m10; m10 = other.m10; other.m10 = tmp;
        tmp = m11; m11 = other.m11; other.m11 = tmp;
        tmp = m12; m12 = other.m12; other.m12 = tmp;
        tmp = m20; m20 = other.m20; other.m20 = tmp;
        tmp = m21; m21 = other.m21; other.m21 = tmp;
        tmp = m22; m22 = other.m22; other.m22 = tmp;
        return this;
    }
    public Matrix3d add(Matrix3dc other) {
        return add(other, this);
    }
    public Matrix3d add(Matrix3dc other, Matrix3d dest) {
        dest.m00 = m00 + other.m00();
        dest.m01 = m01 + other.m01();
        dest.m02 = m02 + other.m02();
        dest.m10 = m10 + other.m10();
        dest.m11 = m11 + other.m11();
        dest.m12 = m12 + other.m12();
        dest.m20 = m20 + other.m20();
        dest.m21 = m21 + other.m21();
        dest.m22 = m22 + other.m22();
        return dest;
    }
    public Matrix3d sub(Matrix3dc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix3d sub(Matrix3dc subtrahend, Matrix3d dest) {
        dest.m00 = m00 - subtrahend.m00();
        dest.m01 = m01 - subtrahend.m01();
        dest.m02 = m02 - subtrahend.m02();
        dest.m10 = m10 - subtrahend.m10();
        dest.m11 = m11 - subtrahend.m11();
        dest.m12 = m12 - subtrahend.m12();
        dest.m20 = m20 - subtrahend.m20();
        dest.m21 = m21 - subtrahend.m21();
        dest.m22 = m22 - subtrahend.m22();
        return dest;
    }
    public Matrix3d mulComponentWise(Matrix3dc other) {
        return mulComponentWise(other, this);
    }
    public Matrix3d mulComponentWise(Matrix3dc other, Matrix3d dest) {
        dest.m00 = m00 * other.m00();
        dest.m01 = m01 * other.m01();
        dest.m02 = m02 * other.m02();
        dest.m10 = m10 * other.m10();
        dest.m11 = m11 * other.m11();
        dest.m12 = m12 * other.m12();
        dest.m20 = m20 * other.m20();
        dest.m21 = m21 * other.m21();
        dest.m22 = m22 * other.m22();
        return dest;
    }
    public Matrix3d setSkewSymmetric(double a, double b, double c) {
        m00 = m11 = m22 = 0;
        m01 = -a;
        m02 = b;
        m10 = a;
        m12 = -c;
        m20 = -b;
        m21 = c;
        return this;
    }
    public Matrix3d lerp(Matrix3dc other, double t) {
        return lerp(other, t, this);
    }
    public Matrix3d lerp(Matrix3dc other, double t, Matrix3d dest) {
        dest.m00 = Math.fma(other.m00() - m00, t, m00);
        dest.m01 = Math.fma(other.m01() - m01, t, m01);
        dest.m02 = Math.fma(other.m02() - m02, t, m02);
        dest.m10 = Math.fma(other.m10() - m10, t, m10);
        dest.m11 = Math.fma(other.m11() - m11, t, m11);
        dest.m12 = Math.fma(other.m12() - m12, t, m12);
        dest.m20 = Math.fma(other.m20() - m20, t, m20);
        dest.m21 = Math.fma(other.m21() - m21, t, m21);
        dest.m22 = Math.fma(other.m22() - m22, t, m22);
        return dest;
    }
    public Matrix3d rotateTowards(Vector3dc direction, Vector3dc up, Matrix3d dest) {
        return rotateTowards(direction.x(), direction.y(), direction.z(), up.x(), up.y(), up.z(), dest);
    }
    public Matrix3d rotateTowards(Vector3dc direction, Vector3dc up) {
        return rotateTowards(direction.x(), direction.y(), direction.z(), up.x(), up.y(), up.z(), this);
    }
    public Matrix3d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ) {
        return rotateTowards(dirX, dirY, dirZ, upX, upY, upZ, this);
    }
    public Matrix3d rotateTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ, Matrix3d dest) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        double ndirX = dirX * invDirLength;
        double ndirY = dirY * invDirLength;
        double ndirZ = dirZ * invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = ndirY * leftZ - ndirZ * leftY;
        double upnY = ndirZ * leftX - ndirX * leftZ;
        double upnZ = ndirX * leftY - ndirY * leftX;
        double rm00 = leftX;
        double rm01 = leftY;
        double rm02 = leftZ;
        double rm10 = upnX;
        double rm11 = upnY;
        double rm12 = upnZ;
        double rm20 = ndirX;
        double rm21 = ndirY;
        double rm22 = ndirZ;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20 * rm22;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21 * rm22;
        dest.m22 = m02 * rm20 + m12 * rm21 + m22 * rm22;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m02 = nm02;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m12 = nm12;
        return dest;
    }
    public Matrix3d rotationTowards(Vector3dc dir, Vector3dc up) {
        return rotationTowards(dir.x(), dir.y(), dir.z(), up.x(), up.y(), up.z());
    }
    public Matrix3d rotationTowards(double dirX, double dirY, double dirZ, double upX, double upY, double upZ) {
        double invDirLength = Math.invsqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);
        double ndirX = dirX * invDirLength;
        double ndirY = dirY * invDirLength;
        double ndirZ = dirZ * invDirLength;
        double leftX, leftY, leftZ;
        leftX = upY * ndirZ - upZ * ndirY;
        leftY = upZ * ndirX - upX * ndirZ;
        leftZ = upX * ndirY - upY * ndirX;
        double invLeftLength = Math.invsqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);
        leftX *= invLeftLength;
        leftY *= invLeftLength;
        leftZ *= invLeftLength;
        double upnX = ndirY * leftZ - ndirZ * leftY;
        double upnY = ndirZ * leftX - ndirX * leftZ;
        double upnZ = ndirX * leftY - ndirY * leftX;
        this.m00 = leftX;
        this.m01 = leftY;
        this.m02 = leftZ;
        this.m10 = upnX;
        this.m11 = upnY;
        this.m12 = upnZ;
        this.m20 = ndirX;
        this.m21 = ndirY;
        this.m22 = ndirZ;
        return this;
    }
    public Vector3d getEulerAnglesZYX(Vector3d dest) {
        dest.x = Math.atan2(m12, m22);
        dest.y = Math.atan2(-m02, Math.sqrt(1.0 - m02 * m02));
        dest.z = Math.atan2(m01, m00);
        return dest;
    }
    public Vector3d getEulerAnglesXYZ(Vector3d dest) {
        dest.x = Math.atan2(-m21, m22);
        dest.y = Math.atan2(m20, Math.sqrt(1.0 - m20 * m20));
        dest.z = Math.atan2(-m10, m00);
        return dest;
    }
    public Vector3d getEulerAnglesYXZ(Vector3d dest) {
        dest.x = Math.atan2(-m21, Math.sqrt(1.0 - m21 * m21));
        dest.y = Math.atan2(m20, m22);
        dest.z = Math.atan2(m01, m11);
        return dest;
    }
    public Matrix3d obliqueZ(double a, double b) {
        this.m20 = m00 * a + m10 * b + m20;
        this.m21 = m01 * a + m11 * b + m21;
        this.m22 = m02 * a + m12 * b + m22;
        return this;
    }
    public Matrix3d obliqueZ(double a, double b, Matrix3d dest) {
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m02 = m02;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m12 = m12;
        dest.m20 = m00 * a + m10 * b + m20;
        dest.m21 = m01 * a + m11 * b + m21;
        dest.m22 = m02 * a + m12 * b + m22;
        return dest;
    }
    public Matrix3d reflect(double nx, double ny, double nz, Matrix3d dest) {
        double da = nx + nx, db = ny + ny, dc = nz + nz;
        double rm00 = 1.0 - da * nx;
        double rm01 = -da * ny;
        double rm02 = -da * nz;
        double rm10 = -db * nx;
        double rm11 = 1.0 - db * ny;
        double rm12 = -db * nz;
        double rm20 = -dc * nx;
        double rm21 = -dc * ny;
        double rm22 = 1.0 - dc * nz;
        double nm00 = m00 * rm00 + m10 * rm01 + m20 * rm02;
        double nm01 = m01 * rm00 + m11 * rm01 + m21 * rm02;
        double nm02 = m02 * rm00 + m12 * rm01 + m22 * rm02;
        double nm10 = m00 * rm10 + m10 * rm11 + m20 * rm12;
        double nm11 = m01 * rm10 + m11 * rm11 + m21 * rm12;
        double nm12 = m02 * rm10 + m12 * rm11 + m22 * rm12;
        return dest
        ._m20(m00 * rm20 + m10 * rm21 + m20 * rm22)
        ._m21(m01 * rm20 + m11 * rm21 + m21 * rm22)
        ._m22(m02 * rm20 + m12 * rm21 + m22 * rm22)
        ._m00(nm00)
        ._m01(nm01)
        ._m02(nm02)
        ._m10(nm10)
        ._m11(nm11)
        ._m12(nm12);
    }
    public Matrix3d reflect(double nx, double ny, double nz) {
        return reflect(nx, ny, nz, this);
    }
    public Matrix3d reflect(Vector3dc normal) {
        return reflect(normal.x(), normal.y(), normal.z());
    }
    public Matrix3d reflect(Quaterniondc orientation) {
        return reflect(orientation, this);
    }
    public Matrix3d reflect(Quaterniondc orientation, Matrix3d dest) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        double normalX = (double) (orientation.x() * num3 + orientation.w() * num2);
        double normalY = (double) (orientation.y() * num3 - orientation.w() * num1);
        double normalZ = (double) (1.0 - (orientation.x() * num1 + orientation.y() * num2));
        return reflect(normalX, normalY, normalZ, dest);
    }
    public Matrix3d reflect(Vector3dc normal, Matrix3d dest) {
        return reflect(normal.x(), normal.y(), normal.z(), dest);
    }
    public Matrix3d reflection(double nx, double ny, double nz) {
        double da = nx + nx, db = ny + ny, dc = nz + nz;
        this._m00(1.0 - da * nx);
        this._m01(-da * ny);
        this._m02(-da * nz);
        this._m10(-db * nx);
        this._m11(1.0 - db * ny);
        this._m12(-db * nz);
        this._m20(-dc * nx);
        this._m21(-dc * ny);
        this._m22(1.0 - dc * nz);
        return this;
    }
    public Matrix3d reflection(Vector3dc normal) {
        return reflection(normal.x(), normal.y(), normal.z());
    }
    public Matrix3d reflection(Quaterniondc orientation) {
        double num1 = orientation.x() + orientation.x();
        double num2 = orientation.y() + orientation.y();
        double num3 = orientation.z() + orientation.z();
        double normalX = orientation.x() * num3 + orientation.w() * num2;
        double normalY = orientation.y() * num3 - orientation.w() * num1;
        double normalZ = 1.0 - (orientation.x() * num1 + orientation.y() * num2);
        return reflection(normalX, normalY, normalZ);
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) && Math.isFinite(m02) &&
               Math.isFinite(m10) && Math.isFinite(m11) && Math.isFinite(m12) &&
               Math.isFinite(m20) && Math.isFinite(m21) && Math.isFinite(m22);
    }
    public double quadraticFormProduct(double x, double y, double z) {
        double Axx = m00 * x + m10 * y + m20 * z;
        double Axy = m01 * x + m11 * y + m21 * z;
        double Axz = m02 * x + m12 * y + m22 * z;
        return x * Axx + y * Axy + z * Axz; 
    }
    public double quadraticFormProduct(Vector3dc v) {
        return quadraticFormProduct(v.x(), v.y(), v.z()); 
    }
    public double quadraticFormProduct(Vector3fc v) {
        return quadraticFormProduct(v.x(), v.y(), v.z()); 
    }
    public Matrix3d mapXZY() {
        return mapXZY(this);
    }
    public Matrix3d mapXZY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m20)._m11(m21)._m12(m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapXZnY() {
        return mapXZnY(this);
    }
    public Matrix3d mapXZnY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m20)._m11(m21)._m12(m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapXnYnZ() {
        return mapXnYnZ(this);
    }
    public Matrix3d mapXnYnZ(Matrix3d dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapXnZY() {
        return mapXnZY(this);
    }
    public Matrix3d mapXnZY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapXnZnY() {
        return mapXnZnY(this);
    }
    public Matrix3d mapXnZnY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapYXZ() {
        return mapYXZ(this);
    }
    public Matrix3d mapYXZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m00)._m11(m01)._m12(m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d mapYXnZ() {
        return mapYXnZ(this);
    }
    public Matrix3d mapYXnZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m00)._m11(m01)._m12(m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapYZX() {
        return mapYZX(this);
    }
    public Matrix3d mapYZX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m20)._m11(m21)._m12(m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapYZnX() {
        return mapYZnX(this);
    }
    public Matrix3d mapYZnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(m20)._m11(m21)._m12(m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapYnXZ() {
        return mapYnXZ(this);
    }
    public Matrix3d mapYnXZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d mapYnXnZ() {
        return mapYnXnZ(this);
    }
    public Matrix3d mapYnXnZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapYnZX() {
        return mapYnZX(this);
    }
    public Matrix3d mapYnZX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapYnZnX() {
        return mapYnZnX(this);
    }
    public Matrix3d mapYnZnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m10)._m01(m11)._m02(m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapZXY() {
        return mapZXY(this);
    }
    public Matrix3d mapZXY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m00)._m11(m01)._m12(m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapZXnY() {
        return mapZXnY(this);
    }
    public Matrix3d mapZXnY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m00)._m11(m01)._m12(m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapZYX() {
        return mapZYX(this);
    }
    public Matrix3d mapZYX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m10)._m11(m11)._m12(m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapZYnX() {
        return mapZYnX(this);
    }
    public Matrix3d mapZYnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(m10)._m11(m11)._m12(m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapZnXY() {
        return mapZnXY(this);
    }
    public Matrix3d mapZnXY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapZnXnY() {
        return mapZnXnY(this);
    }
    public Matrix3d mapZnXnY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapZnYX() {
        return mapZnYX(this);
    }
    public Matrix3d mapZnYX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapZnYnX() {
        return mapZnYnX(this);
    }
    public Matrix3d mapZnYnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(m20)._m01(m21)._m02(m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapnXYnZ() {
        return mapnXYnZ(this);
    }
    public Matrix3d mapnXYnZ(Matrix3d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m10)._m11(m11)._m12(m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapnXZY() {
        return mapnXZY(this);
    }
    public Matrix3d mapnXZY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m20)._m11(m21)._m12(m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapnXZnY() {
        return mapnXZnY(this);
    }
    public Matrix3d mapnXZnY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m20)._m11(m21)._m12(m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapnXnYZ() {
        return mapnXnYZ(this);
    }
    public Matrix3d mapnXnYZ(Matrix3d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d mapnXnYnZ() {
        return mapnXnYnZ(this);
    }
    public Matrix3d mapnXnYnZ(Matrix3d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapnXnZY() {
        return mapnXnZY(this);
    }
    public Matrix3d mapnXnZY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapnXnZnY() {
        return mapnXnZnY(this);
    }
    public Matrix3d mapnXnZnY(Matrix3d dest) {
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapnYXZ() {
        return mapnYXZ(this);
    }
    public Matrix3d mapnYXZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m00)._m11(m01)._m12(m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d mapnYXnZ() {
        return mapnYXnZ(this);
    }
    public Matrix3d mapnYXnZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m00)._m11(m01)._m12(m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapnYZX() {
        return mapnYZX(this);
    }
    public Matrix3d mapnYZX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m20)._m11(m21)._m12(m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapnYZnX() {
        return mapnYZnX(this);
    }
    public Matrix3d mapnYZnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(m20)._m11(m21)._m12(m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapnYnXZ() {
        return mapnYnXZ(this);
    }
    public Matrix3d mapnYnXZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d mapnYnXnZ() {
        return mapnYnXnZ(this);
    }
    public Matrix3d mapnYnXnZ(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d mapnYnZX() {
        return mapnYnZX(this);
    }
    public Matrix3d mapnYnZX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapnYnZnX() {
        return mapnYnZnX(this);
    }
    public Matrix3d mapnYnZnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m10)._m01(-m11)._m02(-m12)._m10(-m20)._m11(-m21)._m12(-m22)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapnZXY() {
        return mapnZXY(this);
    }
    public Matrix3d mapnZXY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m00)._m11(m01)._m12(m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapnZXnY() {
        return mapnZXnY(this);
    }
    public Matrix3d mapnZXnY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m00)._m11(m01)._m12(m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapnZYX() {
        return mapnZYX(this);
    }
    public Matrix3d mapnZYX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m10)._m11(m11)._m12(m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapnZYnX() {
        return mapnZYnX(this);
    }
    public Matrix3d mapnZYnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(m10)._m11(m11)._m12(m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d mapnZnXY() {
        return mapnZnXY(this);
    }
    public Matrix3d mapnZnXY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(m10)._m21(m11)._m22(m12);
    }
    public Matrix3d mapnZnXnY() {
        return mapnZnXnY(this);
    }
    public Matrix3d mapnZnXnY(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        double m10 = this.m10, m11 = this.m11, m12 = this.m12;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m00)._m11(-m01)._m12(-m02)._m20(-m10)._m21(-m11)._m22(-m12);
    }
    public Matrix3d mapnZnYX() {
        return mapnZnYX(this);
    }
    public Matrix3d mapnZnYX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m00)._m21(m01)._m22(m02);
    }
    public Matrix3d mapnZnYnX() {
        return mapnZnYnX(this);
    }
    public Matrix3d mapnZnYnX(Matrix3d dest) {
        double m00 = this.m00, m01 = this.m01, m02 = this.m02;
        return dest._m00(-m20)._m01(-m21)._m02(-m22)._m10(-m10)._m11(-m11)._m12(-m12)._m20(-m00)._m21(-m01)._m22(-m02);
    }
    public Matrix3d negateX() {
        return _m00(-m00)._m01(-m01)._m02(-m02);
    }
    public Matrix3d negateX(Matrix3d dest) {
        return dest._m00(-m00)._m01(-m01)._m02(-m02)._m10(m10)._m11(m11)._m12(m12)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d negateY() {
        return _m10(-m10)._m11(-m11)._m12(-m12);
    }
    public Matrix3d negateY(Matrix3d dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(-m10)._m11(-m11)._m12(-m12)._m20(m20)._m21(m21)._m22(m22);
    }
    public Matrix3d negateZ() {
        return _m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Matrix3d negateZ(Matrix3d dest) {
        return dest._m00(m00)._m01(m01)._m02(m02)._m10(m10)._m11(m11)._m12(m12)._m20(-m20)._m21(-m21)._m22(-m22);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix2fc {
    float m00();
    float m01();
    float m10();
    float m11();
    Matrix2f mul(Matrix2fc right, Matrix2f dest);
    Matrix2f mulLocal(Matrix2fc left, Matrix2f dest);
    float determinant();
    Matrix2f invert(Matrix2f dest);
    Matrix2f transpose(Matrix2f dest);
    Matrix2f get(Matrix2f dest);
    Matrix3x2f get(Matrix3x2f dest);
    Matrix3f get(Matrix3f dest);
    float getRotation();
    FloatBuffer get(FloatBuffer buffer);
    FloatBuffer get(int index, FloatBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    Matrix2fc getToAddress(long address);
    Matrix2fc getTransposedToAddress(long address);
    float[] get(float[] arr, int offset);
    float[] get(float[] arr);
    Matrix2f scale(Vector2fc xy, Matrix2f dest);
    Matrix2f scale(float x, float y, Matrix2f dest);
    Matrix2f scale(float xy, Matrix2f dest);
    Matrix2f scaleLocal(float x, float y, Matrix2f dest);
    Vector2f transform(Vector2f v);
    Vector2f transform(Vector2fc v, Vector2f dest);
    Vector2f transform(float x, float y, Vector2f dest);
    Vector2f transformTranspose(Vector2f v);
    Vector2f transformTranspose(Vector2fc v, Vector2f dest);
    Vector2f transformTranspose(float x, float y, Vector2f dest);
    Matrix2f rotate(float ang, Matrix2f dest);
    Matrix2f rotateLocal(float ang, Matrix2f dest);
    Vector2f getRow(int row, Vector2f dest) throws IndexOutOfBoundsException;
    Vector2f getColumn(int column, Vector2f dest) throws IndexOutOfBoundsException;
    float get(int column, int row);
    Matrix2f normal(Matrix2f dest);
    Vector2f getScale(Vector2f dest);
    Vector2f positiveX(Vector2f dest);
    Vector2f normalizedPositiveX(Vector2f dest);
    Vector2f positiveY(Vector2f dest);
    Vector2f normalizedPositiveY(Vector2f dest);
    Matrix2f add(Matrix2fc other, Matrix2f dest);
    Matrix2f sub(Matrix2fc subtrahend, Matrix2f dest);
    Matrix2f mulComponentWise(Matrix2fc other, Matrix2f dest);
    Matrix2f lerp(Matrix2fc other, float t, Matrix2f dest);
    boolean equals(Matrix2fc m, float delta);
    boolean isFinite();
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.util.*;
public interface Matrix2dc {
    double m00();
    double m01();
    double m10();
    double m11();
    Matrix2d mul(Matrix2dc right, Matrix2d dest);
    Matrix2d mul(Matrix2fc right, Matrix2d dest);
    Matrix2d mulLocal(Matrix2dc left, Matrix2d dest);
    double determinant();
    Matrix2d invert(Matrix2d dest);
    Matrix2d transpose(Matrix2d dest);
    Matrix2d get(Matrix2d dest);
    Matrix3x2d get(Matrix3x2d dest);
    Matrix3d get(Matrix3d dest);
    double getRotation();
    DoubleBuffer get(DoubleBuffer buffer);
    DoubleBuffer get(int index, DoubleBuffer buffer);
    ByteBuffer get(ByteBuffer buffer);
    ByteBuffer get(int index, ByteBuffer buffer);
    ByteBuffer getFloats(ByteBuffer buffer);
    ByteBuffer getFloats(int index, ByteBuffer buffer);
    DoubleBuffer getTransposed(DoubleBuffer buffer);
    DoubleBuffer getTransposed(int index, DoubleBuffer buffer);
    ByteBuffer getTransposed(ByteBuffer buffer);
    ByteBuffer getTransposed(int index, ByteBuffer buffer);
    FloatBuffer getTransposed(FloatBuffer buffer);
    FloatBuffer getTransposed(int index, FloatBuffer buffer);
    ByteBuffer getTransposedFloats(ByteBuffer buffer);
    ByteBuffer getTransposedFloats(int index, ByteBuffer buffer);
    Matrix2dc getToAddress(long address);
    Matrix2dc getTransposedToAddress(long address);
    double[] get(double[] arr, int offset);
    double[] get(double[] arr);
    Matrix2d scale(Vector2dc xy, Matrix2d dest);
    Matrix2d scale(double x, double y, Matrix2d dest);
    Matrix2d scale(double xy, Matrix2d dest);
    Matrix2d scaleLocal(double x, double y, Matrix2d dest);
    Vector2d transform(Vector2d v);
    Vector2d transform(Vector2dc v, Vector2d dest);
    Vector2d transform(double x, double y, Vector2d dest);
    Vector2d transformTranspose(Vector2d v);
    Vector2d transformTranspose(Vector2dc v, Vector2d dest);
    Vector2d transformTranspose(double x, double y, Vector2d dest);
    Matrix2d rotate(double ang, Matrix2d dest);
    Matrix2d rotateLocal(double ang, Matrix2d dest);
    Vector2d getRow(int row, Vector2d dest) throws IndexOutOfBoundsException;
    Vector2d getColumn(int column, Vector2d dest) throws IndexOutOfBoundsException;
    double get(int column, int row);
    Matrix2d normal(Matrix2d dest);
    Vector2d getScale(Vector2d dest);
    Vector2d positiveX(Vector2d dest);
    Vector2d normalizedPositiveX(Vector2d dest);
    Vector2d positiveY(Vector2d dest);
    Vector2d normalizedPositiveY(Vector2d dest);
    Matrix2d add(Matrix2dc other, Matrix2d dest);
    Matrix2d sub(Matrix2dc subtrahend, Matrix2d dest);
    Matrix2d mulComponentWise(Matrix2dc other, Matrix2d dest);
    Matrix2d lerp(Matrix2dc other, double t, Matrix2d dest);
    boolean equals(Matrix2dc m, double delta);
    boolean isFinite();
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix3x2d implements Matrix3x2dc, Cloneable, Externalizable {
    private static final long serialVersionUID = 1L;
    public double m00, m01;
    public double m10, m11;
    public double m20, m21;
    public Matrix3x2d() {
        this.m00 = 1.0;
        this.m11 = 1.0;
    }
    public Matrix3x2d(Matrix2dc mat) {
        MemUtil.INSTANCE.copy(mat, this);
    }
    public Matrix3x2d(Matrix2fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m10 = mat.m10();
        m11 = mat.m11();
    }
    public Matrix3x2d(Matrix3x2dc mat) {
        if (mat != this) {
            MemUtil.INSTANCE.copy(mat, this);
        }
    }
    public Matrix3x2d(double m00, double m01,
                      double m10, double m11,
                      double m20, double m21) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
        this.m20 = m20;
        this.m21 = m21;
    }
    public Matrix3x2d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public double m00() {
        return m00;
    }
    public double m01() {
        return m01;
    }
    public double m10() {
        return m10;
    }
    public double m11() {
        return m11;
    }
    public double m20() {
        return m20;
    }
    public double m21() {
        return m21;
    }
    Matrix3x2d _m00(double m00) {
        this.m00 = m00;
        return this;
    }
    Matrix3x2d _m01(double m01) {
        this.m01 = m01;
        return this;
    }
    Matrix3x2d _m10(double m10) {
        this.m10 = m10;
        return this;
    }
    Matrix3x2d _m11(double m11) {
        this.m11 = m11;
        return this;
    }
    Matrix3x2d _m20(double m20) {
        this.m20 = m20;
        return this;
    }
    Matrix3x2d _m21(double m21) {
        this.m21 = m21;
        return this;
    }
    public Matrix3x2d set(Matrix3x2dc m) {
        if (m != this) {
            MemUtil.INSTANCE.copy(m, this);
        }
        return this;
    }
    public Matrix3x2d set(Matrix2dc m) {
        MemUtil.INSTANCE.copy(m, this);
        return this;
    }
    public Matrix3x2d set(Matrix2fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m10 = m.m10();
        m11 = m.m11();
        return this;
    }
    public Matrix3x2d mul(Matrix3x2dc right) {
        return mul(right, this);
    }
    public Matrix3x2d mul(Matrix3x2dc right, Matrix3x2d dest) {
        double nm00 = m00 * right.m00() + m10 * right.m01();
        double nm01 = m01 * right.m00() + m11 * right.m01();
        double nm10 = m00 * right.m10() + m10 * right.m11();
        double nm11 = m01 * right.m10() + m11 * right.m11();
        double nm20 = m00 * right.m20() + m10 * right.m21() + m20;
        double nm21 = m01 * right.m20() + m11 * right.m21() + m21;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2d mulLocal(Matrix3x2dc left) {
       return mulLocal(left, this);
    }
    public Matrix3x2d mulLocal(Matrix3x2dc left, Matrix3x2d dest) {
        double nm00 = left.m00() * m00 + left.m10() * m01;
        double nm01 = left.m01() * m00 + left.m11() * m01;
        double nm10 = left.m00() * m10 + left.m10() * m11;
        double nm11 = left.m01() * m10 + left.m11() * m11;
        double nm20 = left.m00() * m20 + left.m10() * m21 + left.m20();
        double nm21 = left.m01() * m20 + left.m11() * m21 + left.m21();
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2d set(double m00, double m01, 
                          double m10, double m11, 
                          double m20, double m21) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
        this.m20 = m20;
        this.m21 = m21;
        return this;
    }
    public Matrix3x2d set(float m[]) {
        return set(m, 0);
    }
    public Matrix3x2d set(float m[], int off) {
        MemUtil.INSTANCE.copy(m, off, this);
        return this;
    }
    public Matrix3x2d set(double m[]) {
        return set(m, 0);
    }
    public Matrix3x2d set(double m[], int off) {
        MemUtil.INSTANCE.copy(m, off, this);
        return this;
    }
    public double determinant() {
        return m00 * m11 - m01 * m10;
    }
    public Matrix3x2d invert() {
        return invert(this);
    }
    public Matrix3x2d invert(Matrix3x2d dest) {
        double s = 1.0 / (m00 * m11 - m01 * m10);
        double nm00 =  m11 * s;
        double nm01 = -m01 * s;
        double nm10 = -m10 * s;
        double nm11 =  m00 * s;
        double nm20 = (m10 * m21 - m20 * m11) * s;
        double nm21 = (m20 * m01 - m00 * m21) * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2d translation(double x, double y) {
        m00 = 1.0;
        m01 = 0.0;
        m10 = 0.0;
        m11 = 1.0;
        m20 = x;
        m21 = y;
        return this;
    }
    public Matrix3x2d translation(Vector2dc offset) {
        return translation(offset.x(), offset.y());
    }
    public Matrix3x2d setTranslation(double x, double y) {
        m20 = x;
        m21 = y;
        return this;
    }
    public Matrix3x2d setTranslation(Vector2dc offset) {
        return setTranslation(offset.x(), offset.y());
    }
    public Matrix3x2d translate(double x, double y, Matrix3x2d dest) {
        double rm20 = x;
        double rm21 = y;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21;
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m10 = m10;
        dest.m11 = m11;
        return dest;
    }
    public Matrix3x2d translate(double x, double y) {
        return translate(x, y, this);
    }
    public Matrix3x2d translate(Vector2dc offset, Matrix3x2d dest) {
        return translate(offset.x(), offset.y(), dest);
    }
    public Matrix3x2d translate(Vector2dc offset) {
        return translate(offset.x(), offset.y(), this);
    }
    public Matrix3x2d translateLocal(Vector2dc offset) {
        return translateLocal(offset.x(), offset.y());
    }
    public Matrix3x2d translateLocal(Vector2dc offset, Matrix3x2d dest) {
        return translateLocal(offset.x(), offset.y(), dest);
    }
    public Matrix3x2d translateLocal(double x, double y, Matrix3x2d dest) {
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m20 = m20 + x;
        dest.m21 = m21 + y;
        return dest;
    }
    public Matrix3x2d translateLocal(double x, double y) {
        return translateLocal(x, y, this);
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + " " + Runtime.format(m20, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + " " + Runtime.format(m21, formatter) + "\n";
    }
    public Matrix3x2d get(Matrix3x2d dest) {
        return dest.set(this);
    }
    public DoubleBuffer get(DoubleBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public DoubleBuffer get(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer get3x3(DoubleBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, 0, buffer);
        return buffer;
    }
    public DoubleBuffer get3x3(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get3x3(ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, 0, buffer);
        return buffer;
    }
    public ByteBuffer get3x3(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer get4x4(DoubleBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, 0, buffer);
        return buffer;
    }
    public DoubleBuffer get4x4(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get4x4(ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, 0, buffer);
        return buffer;
    }
    public ByteBuffer get4x4(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer getTransposed(DoubleBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public DoubleBuffer getTransposed(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposedFloats(ByteBuffer buffer) {
        return getTransposedFloats(buffer.position(), buffer);
    }
    public ByteBuffer getTransposedFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public Matrix3x2dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix3x2dc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public double[] get(double[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public double[] get(double[] arr) {
        return get(arr, 0);
    }
    public double[] get3x3(double[] arr, int offset) {
        MemUtil.INSTANCE.copy3x3(this, arr, offset);
        return arr;
    }
    public double[] get3x3(double[] arr) {
        return get3x3(arr, 0);
    }
    public double[] get4x4(double[] arr, int offset) {
        MemUtil.INSTANCE.copy4x4(this, arr, offset);
        return arr;
    }
    public double[] get4x4(double[] arr) {
        return get4x4(arr, 0);
    }
    public Matrix3x2d set(DoubleBuffer buffer) {
        int pos = buffer.position();
        MemUtil.INSTANCE.get(this, pos, buffer);
        return this;
    }
    public Matrix3x2d set(ByteBuffer buffer) {
        int pos = buffer.position();
        MemUtil.INSTANCE.get(this, pos, buffer);
        return this;
    }
    public Matrix3x2d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3x2d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3x2d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Matrix3x2d setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return this;
    }
    public Matrix3x2d zero() {
        MemUtil.INSTANCE.zero(this);
        return this;
    }
    public Matrix3x2d identity() {
        MemUtil.INSTANCE.identity(this);
        return this;
    }
    public Matrix3x2d scale(double x, double y, Matrix3x2d dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2d scale(double x, double y) {
        return scale(x, y, this);
    }
    public Matrix3x2d scale(Vector2dc xy) {
        return scale(xy.x(), xy.y(), this);
    }
    public Matrix3x2d scale(Vector2dc xy, Matrix3x2d dest) {
        return scale(xy.x(), xy.y(), dest);
    }
    public Matrix3x2d scale(Vector2fc xy) {
        return scale(xy.x(), xy.y(), this);
    }
    public Matrix3x2d scale(Vector2fc xy, Matrix3x2d dest) {
        return scale(xy.x(), xy.y(), dest);
    }
    public Matrix3x2d scale(double xy, Matrix3x2d dest) {
        return scale(xy, xy, dest);
    }
    public Matrix3x2d scale(double xy) {
        return scale(xy, xy);
    }
    public Matrix3x2d scaleLocal(double x, double y, Matrix3x2d dest) {
        dest.m00 = x * m00;
        dest.m01 = y * m01;
        dest.m10 = x * m10;
        dest.m11 = y * m11;
        dest.m20 = x * m20;
        dest.m21 = y * m21;
        return dest;
    }
    public Matrix3x2d scaleLocal(double x, double y) {
        return scaleLocal(x, y, this);
    }
    public Matrix3x2d scaleLocal(double xy, Matrix3x2d dest) {
        return scaleLocal(xy, xy, dest);
    }
    public Matrix3x2d scaleLocal(double xy) {
        return scaleLocal(xy, xy, this);
    }
    public Matrix3x2d scaleAround(double sx, double sy, double ox, double oy, Matrix3x2d dest) {
        double nm20 = m00 * ox + m10 * oy + m20;
        double nm21 = m01 * ox + m11 * oy + m21;
        dest.m00 = m00 * sx;
        dest.m01 = m01 * sx;
        dest.m10 = m10 * sy;
        dest.m11 = m11 * sy;
        dest.m20 = dest.m00 * -ox + dest.m10 * -oy + nm20;
        dest.m21 = dest.m01 * -ox + dest.m11 * -oy + nm21;
        return dest;
    }
    public Matrix3x2d scaleAround(double sx, double sy, double ox, double oy) {
        return scaleAround(sx, sy, ox, oy, this);
    }
    public Matrix3x2d scaleAround(double factor, double ox, double oy, Matrix3x2d dest) {
        return scaleAround(factor, factor, ox, oy, this);
    }
    public Matrix3x2d scaleAround(double factor, double ox, double oy) {
        return scaleAround(factor, factor, ox, oy, this);
    }
    public Matrix3x2d scaleAroundLocal(double sx, double sy, double ox, double oy, Matrix3x2d dest) {
        dest.m00 = sx * m00;
        dest.m01 = sy * m01;
        dest.m10 = sx * m10;
        dest.m11 = sy * m11;
        dest.m20 = sx * m20 - sx * ox + ox;
        dest.m21 = sy * m21 - sy * oy + oy;
        return dest;
    }
    public Matrix3x2d scaleAroundLocal(double factor, double ox, double oy, Matrix3x2d dest) {
        return scaleAroundLocal(factor, factor, ox, oy, dest);
    }
    public Matrix3x2d scaleAroundLocal(double sx, double sy, double sz, double ox, double oy, double oz) {
        return scaleAroundLocal(sx, sy, ox, oy, this);
    }
    public Matrix3x2d scaleAroundLocal(double factor, double ox, double oy) {
        return scaleAroundLocal(factor, factor, ox, oy, this);
    }
    public Matrix3x2d scaling(double factor) {
        return scaling(factor, factor);
    }
    public Matrix3x2d scaling(double x, double y) {
        m00 = x;
        m01 = 0.0;
        m10 = 0.0;
        m11 = y;
        m20 = 0.0;
        m21 = 0.0;
        return this;
    }
    public Matrix3x2d rotation(double angle) {
        double cos = Math.cos(angle);
        double sin = Math.sin(angle);
        m00 = cos;
        m10 = -sin;
        m20 = 0.0;
        m01 = sin;
        m11 = cos;
        m21 = 0.0;
        return this;
    }
    public Vector3d transform(Vector3d v) {
        return v.mul(this);
    }
    public Vector3d transform(Vector3dc v, Vector3d dest) {
        return v.mul(this, dest);
    }
    public Vector3d transform(double x, double y, double z, Vector3d dest) {
       return dest.set(m00 * x + m10 * y + m20 * z, m01 * x + m11 * y + m21 * z, z);
    }
    public Vector2d transformPosition(Vector2d v) {
        v.set(m00 * v.x + m10 * v.y + m20,
              m01 * v.x + m11 * v.y + m21);
        return v;
    }
    public Vector2d transformPosition(Vector2dc v, Vector2d dest) {
        dest.set(m00 * v.x() + m10 * v.y() + m20,
                 m01 * v.x() + m11 * v.y() + m21);
        return dest;
    }
    public Vector2d transformPosition(double x, double y, Vector2d dest) {
        return dest.set(m00 * x + m10 * y + m20, m01 * x + m11 * y + m21);
    }
    public Vector2d transformDirection(Vector2d v) {
        v.set(m00 * v.x + m10 * v.y,
              m01 * v.x + m11 * v.y);
        return v;
    }
    public Vector2d transformDirection(Vector2dc v, Vector2d dest) {
        dest.set(m00 * v.x() + m10 * v.y(),
                 m01 * v.x() + m11 * v.y());
        return dest;
    }
    public Vector2d transformDirection(double x, double y, Vector2d dest) {
        return dest.set(m00 * x + m10 * y, m01 * x + m11 * y);
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(m00);
        out.writeDouble(m01);
        out.writeDouble(m10);
        out.writeDouble(m11);
        out.writeDouble(m20);
        out.writeDouble(m21);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readDouble();
        m01 = in.readDouble();
        m10 = in.readDouble();
        m11 = in.readDouble();
        m20 = in.readDouble();
        m21 = in.readDouble();
    }
    public Matrix3x2d rotate(double ang) {
        return rotate(ang, this);
    }
    public Matrix3x2d rotate(double ang, Matrix3x2d dest) {
        double cos = Math.cos(ang);
        double sin = Math.sin(ang);
        double rm00 = cos;
        double rm01 = sin;
        double rm10 = -sin;
        double rm11 = cos;
        double nm00 = m00 * rm00 + m10 * rm01;
        double nm01 = m01 * rm00 + m11 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2d rotateLocal(double ang, Matrix3x2d dest) {
        double sin = Math.sin(ang);
        double cos = Math.cosFromSin(sin, ang);
        double nm00 = cos * m00 - sin * m01;
        double nm01 = sin * m00 + cos * m01;
        double nm10 = cos * m10 - sin * m11;
        double nm11 = sin * m10 + cos * m11;
        double nm20 = cos * m20 - sin * m21;
        double nm21 = sin * m20 + cos * m21;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2d rotateLocal(double ang) {
        return rotateLocal(ang, this);
    }
    public Matrix3x2d rotateAbout(double ang, double x, double y) {
        return rotateAbout(ang, x, y, this);
    }
    public Matrix3x2d rotateAbout(double ang, double x, double y, Matrix3x2d dest) {
        double tm20 = m00 * x + m10 * y + m20;
        double tm21 = m01 * x + m11 * y + m21;
        double cos = Math.cos(ang);
        double sin = Math.sin(ang);
        double nm00 = m00 * cos + m10 * sin;
        double nm01 = m01 * cos + m11 * sin;
        dest.m10 = m00 * -sin + m10 * cos;
        dest.m11 = m01 * -sin + m11 * cos;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m20 = dest.m00 * -x + dest.m10 * -y + tm20;
        dest.m21 = dest.m01 * -x + dest.m11 * -y + tm21;
        return dest;
    }
    public Matrix3x2d rotateTo(Vector2dc fromDir, Vector2dc toDir, Matrix3x2d dest) {
        double dot = fromDir.x() * toDir.x() + fromDir.y() * toDir.y();
        double det = fromDir.x() * toDir.y() - fromDir.y() * toDir.x();
        double rm00 = dot;
        double rm01 = det;
        double rm10 = -det;
        double rm11 = dot;
        double nm00 = m00 * rm00 + m10 * rm01;
        double nm01 = m01 * rm00 + m11 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2d rotateTo(Vector2dc fromDir, Vector2dc toDir) {
        return rotateTo(fromDir, toDir, this);
    }
    public Matrix3x2d view(double left, double right, double bottom, double top, Matrix3x2d dest) {
        double rm00 = 2.0 / (right - left);
        double rm11 = 2.0 / (top - bottom);
        double rm20 = (left + right) / (left - right);
        double rm21 = (bottom + top) / (bottom - top);
        dest.m20 = m00 * rm20 + m10 * rm21 + m20;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        return dest;
    }
    public Matrix3x2d view(double left, double right, double bottom, double top) {
        return view(left, right, bottom, top, this);
    }
    public Matrix3x2d setView(double left, double right, double bottom, double top) {
        m00 = 2.0 / (right - left);
        m01 = 0.0;
        m10 = 0.0;
        m11 = 2.0 / (top - bottom);
        m20 = (left + right) / (left - right);
        m21 = (bottom + top) / (bottom - top);
        return this;
    }
    public Vector2d origin(Vector2d origin) {
        double s = 1.0 / (m00 * m11 - m01 * m10);
        origin.x = (m10 * m21 - m20 * m11) * s;
        origin.y = (m20 * m01 - m00 * m21) * s;
        return origin;
    }
    public double[] viewArea(double[] area) {
        double s = 1.0 / (m00 * m11 - m01 * m10);
        double rm00 =  m11 * s;
        double rm01 = -m01 * s;
        double rm10 = -m10 * s;
        double rm11 =  m00 * s;
        double rm20 = (m10 * m21 - m20 * m11) * s;
        double rm21 = (m20 * m01 - m00 * m21) * s;
        double nxnyX = -rm00 - rm10;
        double nxnyY = -rm01 - rm11;
        double pxnyX =  rm00 - rm10;
        double pxnyY =  rm01 - rm11;
        double nxpyX = -rm00 + rm10;
        double nxpyY = -rm01 + rm11;
        double pxpyX =  rm00 + rm10;
        double pxpyY =  rm01 + rm11;
        double minX = nxnyX;
        minX = minX < nxpyX ? minX : nxpyX;
        minX = minX < pxnyX ? minX : pxnyX;
        minX = minX < pxpyX ? minX : pxpyX;
        double minY = nxnyY;
        minY = minY < nxpyY ? minY : nxpyY;
        minY = minY < pxnyY ? minY : pxnyY;
        minY = minY < pxpyY ? minY : pxpyY;
        double maxX = nxnyX;
        maxX = maxX > nxpyX ? maxX : nxpyX;
        maxX = maxX > pxnyX ? maxX : pxnyX;
        maxX = maxX > pxpyX ? maxX : pxpyX;
        double maxY = nxnyY;
        maxY = maxY > nxpyY ? maxY : nxpyY;
        maxY = maxY > pxnyY ? maxY : pxnyY;
        maxY = maxY > pxpyY ? maxY : pxpyY;
        area[0] = minX + rm20;
        area[1] = minY + rm21;
        area[2] = maxX + rm20;
        area[3] = maxY + rm21;
        return area;
    }
    public Vector2d positiveX(Vector2d dir) {
        double s = m00 * m11 - m01 * m10;
        s = 1.0 / s;
        dir.x =  m11 * s;
        dir.y = -m01 * s;
        return dir.normalize(dir);
    }
    public Vector2d normalizedPositiveX(Vector2d dir) {
        dir.x =  m11;
        dir.y = -m01;
        return dir;
    }
    public Vector2d positiveY(Vector2d dir) {
        double s = m00 * m11 - m01 * m10;
        s = 1.0 / s;
        dir.x = -m10 * s;
        dir.y =  m00 * s;
        return dir.normalize(dir);
    }
    public Vector2d normalizedPositiveY(Vector2d dir) {
        dir.x = -m10;
        dir.y =  m00;
        return dir;
    }
    public Vector2d unproject(double winX, double winY, int[] viewport, Vector2d dest) {
        double s = 1.0 / (m00 * m11 - m01 * m10);
        double im00 =  m11 * s;
        double im01 = -m01 * s;
        double im10 = -m10 * s;
        double im11 =  m00 * s;
        double im20 = (m10 * m21 - m20 * m11) * s;
        double im21 = (m20 * m01 - m00 * m21) * s;
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        dest.x = im00 * ndcX + im10 * ndcY + im20;
        dest.y = im01 * ndcX + im11 * ndcY + im21;
        return dest;
    }
    public Vector2d unprojectInv(double winX, double winY, int[] viewport, Vector2d dest) {
        double ndcX = (winX-viewport[0])/viewport[2]*2.0-1.0;
        double ndcY = (winY-viewport[1])/viewport[3]*2.0-1.0;
        dest.x = m00 * ndcX + m10 * ndcY + m20;
        dest.y = m01 * ndcX + m11 * ndcY + m21;
        return dest;
    }
    public Matrix3x2d span(Vector2d corner, Vector2d xDir, Vector2d yDir) {
        double s = 1.0 / (m00 * m11 - m01 * m10);
        double nm00 =  m11 * s, nm01 = -m01 * s, nm10 = -m10 * s, nm11 =  m00 * s;
        corner.x = -nm00 - nm10 + (m10 * m21 - m20 * m11) * s;
        corner.y = -nm01 - nm11 + (m20 * m01 - m00 * m21) * s;
        xDir.x = 2.0 * nm00; xDir.y = 2.0 * nm01;
        yDir.x = 2.0 * nm10; yDir.y = 2.0 * nm11;
        return this;
    }
    public boolean testPoint(double x, double y) {
        double nxX = +m00, nxY = +m10, nxW = 1.0f + m20;
        double pxX = -m00, pxY = -m10, pxW = 1.0f - m20;
        double nyX = +m01, nyY = +m11, nyW = 1.0f + m21;
        double pyX = -m01, pyY = -m11, pyW = 1.0f - m21;
        return nxX * x + nxY * y + nxW >= 0 && pxX * x + pxY * y + pxW >= 0 &&
               nyX * x + nyY * y + nyW >= 0 && pyX * x + pyY * y + pyW >= 0;
    }
    public boolean testCircle(double x, double y, double r) {
        double invl;
        double nxX = +m00, nxY = +m10, nxW = 1.0f + m20;
        invl = Math.invsqrt(nxX * nxX + nxY * nxY);
        nxX *= invl; nxY *= invl; nxW *= invl;
        double pxX = -m00, pxY = -m10, pxW = 1.0f - m20;
        invl = Math.invsqrt(pxX * pxX + pxY * pxY);
        pxX *= invl; pxY *= invl; pxW *= invl;
        double nyX = +m01, nyY = +m11, nyW = 1.0f + m21;
        invl = Math.invsqrt(nyX * nyX + nyY * nyY);
        nyX *= invl; nyY *= invl; nyW *= invl;
        double pyX = -m01, pyY = -m11, pyW = 1.0f - m21;
        invl = Math.invsqrt(pyX * pyX + pyY * pyY);
        pyX *= invl; pyY *= invl; pyW *= invl;
        return nxX * x + nxY * y + nxW >= -r && pxX * x + pxY * y + pxW >= -r &&
               nyX * x + nyY * y + nyW >= -r && pyX * x + pyY * y + pyW >= -r;
    }
    public boolean testAar(double minX, double minY, double maxX, double maxY) {
        double nxX = +m00, nxY = +m10, nxW = 1.0f + m20;
        double pxX = -m00, pxY = -m10, pxW = 1.0f - m20;
        double nyX = +m01, nyY = +m11, nyW = 1.0f + m21;
        double pyX = -m01, pyY = -m11, pyW = 1.0f - m21;
        return nxX * (nxX < 0 ? minX : maxX) + nxY * (nxY < 0 ? minY : maxY) >= -nxW &&
               pxX * (pxX < 0 ? minX : maxX) + pxY * (pxY < 0 ? minY : maxY) >= -pxW &&
               nyX * (nyX < 0 ? minX : maxX) + nyY * (nyY < 0 ? minY : maxY) >= -nyW &&
               pyX * (pyX < 0 ? minX : maxX) + pyY * (pyY < 0 ? minY : maxY) >= -pyW;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(m00);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m01);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m10);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m11);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m20);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(m21);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix3x2d))
            return false;
        Matrix3x2d other = (Matrix3x2d) obj;
        if (Double.doubleToLongBits(m00) != Double.doubleToLongBits(other.m00))
            return false;
        if (Double.doubleToLongBits(m01) != Double.doubleToLongBits(other.m01))
            return false;
        if (Double.doubleToLongBits(m10) != Double.doubleToLongBits(other.m10))
            return false;
        if (Double.doubleToLongBits(m11) != Double.doubleToLongBits(other.m11))
            return false;
        if (Double.doubleToLongBits(m20) != Double.doubleToLongBits(other.m20))
            return false;
        if (Double.doubleToLongBits(m21) != Double.doubleToLongBits(other.m21))
            return false;
        return true;
    }
    public boolean equals(Matrix3x2dc m, double delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        if (!Runtime.equals(m20, m.m20(), delta))
            return false;
        if (!Runtime.equals(m21, m.m21(), delta))
            return false;
        return true;
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) &&
               Math.isFinite(m10) && Math.isFinite(m11) &&
               Math.isFinite(m20) && Math.isFinite(m21);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix2f implements Externalizable, Cloneable, Matrix2fc {
    private static final long serialVersionUID = 1L;
    public float m00, m01;
    public float m10, m11;
    public Matrix2f() {
        m00 = 1.0f;
        m11 = 1.0f;
    }
    public Matrix2f(Matrix2fc mat) {
        if (mat != this) {
            MemUtil.INSTANCE.copy(mat, this);
        }
    }
    public Matrix2f(Matrix3fc mat) {
        MemUtil.INSTANCE.copy(mat, this);
    }
    public Matrix2f(float m00, float m01,
                    float m10, float m11) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
    }
    public Matrix2f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Matrix2f(Vector2fc col0, Vector2fc col1) {
        m00 = col0.x();
        m01 = col0.y();
        m10 = col1.x();
        m11 = col1.y();
    }
    public float m00() {
        return m00;
    }
    public float m01() {
        return m01;
    }
    public float m10() {
        return m10;
    }
    public float m11() {
        return m11;
    }
    public Matrix2f m00(float m00) {
        this.m00 = m00;
        return this;
    }
    public Matrix2f m01(float m01) {
        this.m01 = m01;
        return this;
    }
    public Matrix2f m10(float m10) {
        this.m10 = m10;
        return this;
    }
    public Matrix2f m11(float m11) {
        this.m11 = m11;
        return this;
    }
    Matrix2f _m00(float m00) {
        this.m00 = m00;
        return this;
    }
    Matrix2f _m01(float m01) {
        this.m01 = m01;
        return this;
    }
    Matrix2f _m10(float m10) {
        this.m10 = m10;
        return this;
    }
    Matrix2f _m11(float m11) {
        this.m11 = m11;
        return this;
    }
    public Matrix2f set(Matrix2fc m) {
        if (m != this) {
            MemUtil.INSTANCE.copy(m, this);
        }
        return this;
    }
    private void setMatrix2fc(Matrix2fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m10 = mat.m10();
        m11 = mat.m11();
    }
    public Matrix2f set(Matrix3x2fc m) {
        MemUtil.INSTANCE.copy(m, this);
        return this;
    }
    public Matrix2f set(Matrix3fc m) {
        MemUtil.INSTANCE.copy(m, this);
        return this;
    }
    public Matrix2f mul(Matrix2fc right) {
        return mul(right, this);
    }
    public Matrix2f mul(Matrix2fc right, Matrix2f dest) {
        float nm00 = m00 * right.m00() + m10 * right.m01();
        float nm01 = m01 * right.m00() + m11 * right.m01();
        float nm10 = m00 * right.m10() + m10 * right.m11();
        float nm11 = m01 * right.m10() + m11 * right.m11();
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2f mulLocal(Matrix2fc left) {
        return mulLocal(left, this);
    }
    public Matrix2f mulLocal(Matrix2fc left, Matrix2f dest) {
        float nm00 = left.m00() * m00 + left.m10() * m01;
        float nm01 = left.m01() * m00 + left.m11() * m01;
        float nm10 = left.m00() * m10 + left.m10() * m11;
        float nm11 = left.m01() * m10 + left.m11() * m11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2f set(float m00, float m01,
                        float m10, float m11) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
        return this;
    }
    public Matrix2f set(float m[]) {
        m00 = m[0];
        m01 = m[1];
        m10 = m[3];
        m11 = m[4];
        return this;
    }
    public Matrix2f set(float m[], int off) {
        m00 = m[off+0];
        m01 = m[off+1];
        m10 = m[off+3];
        m11 = m[off+4];
        return this;
    }
    public Matrix2f set(Vector2fc col0, Vector2fc col1) {
        m00 = col0.x();
        m01 = col0.y();
        m10 = col1.x();
        m11 = col1.y();
        return this;
    }
    public float determinant() {
        return m00 * m11 - m10 * m01;
    }
    public Matrix2f invert() {
        return invert(this);
    }
    public Matrix2f invert(Matrix2f dest) {
        float s = 1.0f / determinant();
        float nm00 = m11 * s;
        float nm01 = -m01 * s;
        float nm10 = -m10 * s;
        float nm11 = m00 * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2f transpose() {
        return transpose(this);
    }
    public Matrix2f transpose(Matrix2f dest) {
        dest.set(m00, m10,
                 m01, m11);
        return dest;
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + "\n";
    }
    public Matrix2f get(Matrix2f dest) {
        return dest.set(this);
    }
    public Matrix3x2f get(Matrix3x2f dest) {
        return dest.set(this);
    }
    public Matrix3f get(Matrix3f dest) {
        return dest.set(this);
    }
    public float getRotation() {
        return Math.atan2(m01, m11);
    }
    public FloatBuffer get(FloatBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public Matrix2fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix2fc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public float[] get(float[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public float[] get(float[] arr) {
        return get(arr, 0);
    }
    public Matrix2f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix2f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix2f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix2f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix2f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Matrix2f setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return this;
    }
    public Matrix2f zero() {
        MemUtil.INSTANCE.zero(this);
        return this;
    }
    public Matrix2f identity() {
        MemUtil.INSTANCE.identity(this);
        return this;
    }
    public Matrix2f scale(Vector2fc xy, Matrix2f dest) {
        return scale(xy.x(), xy.y(), dest);
    }
    public Matrix2f scale(Vector2fc xy) {
        return scale(xy.x(), xy.y(), this);
    }
    public Matrix2f scale(float x, float y, Matrix2f dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        return dest;
    }
    public Matrix2f scale(float x, float y) {
        return scale(x, y, this);
    }
    public Matrix2f scale(float xy, Matrix2f dest) {
        return scale(xy, xy, dest);
    }
    public Matrix2f scale(float xy) {
        return scale(xy, xy);
    }
    public Matrix2f scaleLocal(float x, float y, Matrix2f dest) {
        dest.m00 = x * m00;
        dest.m01 = y * m01;
        dest.m10 = x * m10;
        dest.m11 = y * m11;
        return dest;
    }
    public Matrix2f scaleLocal(float x, float y) {
        return scaleLocal(x, y, this);
    }
    public Matrix2f scaling(float factor) {
        MemUtil.INSTANCE.zero(this);
        m00 = factor;
        m11 = factor;
        return this;
    }
    public Matrix2f scaling(float x, float y) {
        MemUtil.INSTANCE.zero(this);
        m00 = x;
        m11 = y;
        return this;
    }
    public Matrix2f scaling(Vector2fc xy) {
        return scaling(xy.x(), xy.y());
    }
    public Matrix2f rotation(float angle) {
        float sin = Math.sin(angle);
        float cos = Math.cosFromSin(sin, angle);
        m00 = cos;
        m01 = sin;
        m10 = -sin;
        m11 = cos;
        return this;
    }
    public Vector2f transform(Vector2f v) {
        return v.mul(this);
    }
    public Vector2f transform(Vector2fc v, Vector2f dest) {
        v.mul(this, dest);
        return dest;
    }
    public Vector2f transform(float x, float y, Vector2f dest) {
        dest.set(m00 * x + m10 * y,
                 m01 * x + m11 * y);
        return dest;
    }
    public Vector2f transformTranspose(Vector2f v) {
        return v.mulTranspose(this);
    }
    public Vector2f transformTranspose(Vector2fc v, Vector2f dest) {
        v.mulTranspose(this, dest);
        return dest;
    }
    public Vector2f transformTranspose(float x, float y, Vector2f dest) {
        dest.set(m00 * x + m01 * y,
                 m10 * x + m11 * y);
        return dest;
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(m00);
        out.writeFloat(m01);
        out.writeFloat(m10);
        out.writeFloat(m11);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readFloat();
        m01 = in.readFloat();
        m10 = in.readFloat();
        m11 = in.readFloat();
    }
    public Matrix2f rotate(float angle) {
        return rotate(angle, this);
    }
    public Matrix2f rotate(float angle, Matrix2f dest) {
        float s = Math.sin(angle);
        float c = Math.cosFromSin(s, angle);
        float nm00 = m00 * c + m10 * s;
        float nm01 = m01 * c + m11 * s;
        float nm10 = m10 * c - m00 * s;
        float nm11 = m11 * c - m01 * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2f rotateLocal(float angle) {
        return rotateLocal(angle, this);
    }
    public Matrix2f rotateLocal(float angle, Matrix2f dest) {
        float s = Math.sin(angle);
        float c = Math.cosFromSin(s, angle);
        float nm00 = c * m00 - s * m01;
        float nm01 = s * m00 + c * m01;
        float nm10 = c * m10 - s * m11;
        float nm11 = s * m10 + c * m11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Vector2f getRow(int row, Vector2f dest) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            dest.x = m00;
            dest.y = m10;
            break;
        case 1:
            dest.x = m01;
            dest.y = m11;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix2f setRow(int row, Vector2fc src) throws IndexOutOfBoundsException {
        return setRow(row, src.x(), src.y());
    }
    public Matrix2f setRow(int row, float x, float y) throws IndexOutOfBoundsException {
        switch (row) {
        case 0:
            this.m00 = x;
            this.m10 = y;
            break;
        case 1:
            this.m01 = x;
            this.m11 = y;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public Vector2f getColumn(int column, Vector2f dest) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            dest.x = m00;
            dest.y = m01;
            break;
        case 1:
            dest.x = m10;
            dest.y = m11;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix2f setColumn(int column, Vector2fc src) throws IndexOutOfBoundsException {
        return setColumn(column, src.x(), src.y());
    }
    public Matrix2f setColumn(int column, float x, float y) throws IndexOutOfBoundsException {
        switch (column) {
        case 0:
            this.m00 = x;
            this.m01 = y;
            break;
        case 1:
            this.m10 = x;
            this.m11 = y;
            break;
        default:
            throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public float get(int column, int row) {
        switch (column) {
        case 0:
            switch (row) {
            case 0:
                return m00;
            case 1:
                return m01;
            default:
                break;
            }
            break;
        case 1:
            switch (row) {
            case 0:
                return m10;
            case 1:
                return m11;
            default:
                break;
            }
            break;
        default:
            break;
        }
        throw new IndexOutOfBoundsException();
    }
    public Matrix2f set(int column, int row, float value) {
        switch (column) {
            case 0:
                switch (row) {
                    case 0:
                        this.m00 = value;
                        return this;
                    case 1:
                        this.m01 = value;
                        return this;
                    default:
                        break;
                }
                break;
            case 1:
                switch (row) {
                    case 0:
                        this.m10 = value;
                        return this;
                    case 1:
                        this.m11 = value;
                        return this;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        throw new IndexOutOfBoundsException();
    }
    public Matrix2f normal() {
        return normal(this);
    }
    public Matrix2f normal(Matrix2f dest) {
        float det = m00 * m11 - m10 * m01;
        float s = 1.0f / det;
        float nm00 = m11 * s;
        float nm01 = -m10 * s;
        float nm10 = -m01 * s;
        float nm11 = m00 * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Vector2f getScale(Vector2f dest) {
        dest.x = Math.sqrt(m00 * m00 + m01 * m01);
        dest.y = Math.sqrt(m10 * m10 + m11 * m11);
        return dest;
    }
    public Vector2f positiveX(Vector2f dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = -m11;
            dir.y = m01;
        } else {
            dir.x = m11;
            dir.y = -m01;
        }
        return dir.normalize(dir);
    }
    public Vector2f normalizedPositiveX(Vector2f dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = -m11;
            dir.y = m01;
        } else {
            dir.x = m11;
            dir.y = -m01;
        }
        return dir;
    }
    public Vector2f positiveY(Vector2f dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = m10;
            dir.y = -m00;
        } else {
            dir.x = -m10;
            dir.y = m00;
        }
        return dir.normalize(dir);
    }
    public Vector2f normalizedPositiveY(Vector2f dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = m10;
            dir.y = -m00;
        } else {
            dir.x = -m10;
            dir.y = m00;
        }
        return dir;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(m00);
        result = prime * result + Float.floatToIntBits(m01);
        result = prime * result + Float.floatToIntBits(m10);
        result = prime * result + Float.floatToIntBits(m11);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix2f))
            return false;
        Matrix2f other = (Matrix2f) obj;
        if (Float.floatToIntBits(m00) != Float.floatToIntBits(other.m00))
            return false;
        if (Float.floatToIntBits(m01) != Float.floatToIntBits(other.m01))
            return false;
        if (Float.floatToIntBits(m10) != Float.floatToIntBits(other.m10))
            return false;
        if (Float.floatToIntBits(m11) != Float.floatToIntBits(other.m11))
            return false;
        return true;
    }
    public boolean equals(Matrix2fc m, float delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        return true;
    }
    public Matrix2f swap(Matrix2f other) {
        MemUtil.INSTANCE.swap(this, other);
        return this;
    }
    public Matrix2f add(Matrix2fc other) {
        return add(other, this);
    }
    public Matrix2f add(Matrix2fc other, Matrix2f dest) {
        dest.m00 = m00 + other.m00();
        dest.m01 = m01 + other.m01();
        dest.m10 = m10 + other.m10();
        dest.m11 = m11 + other.m11();
        return dest;
    }
    public Matrix2f sub(Matrix2fc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix2f sub(Matrix2fc other, Matrix2f dest) {
        dest.m00 = m00 - other.m00();
        dest.m01 = m01 - other.m01();
        dest.m10 = m10 - other.m10();
        dest.m11 = m11 - other.m11();
        return dest;
    }
    public Matrix2f mulComponentWise(Matrix2fc other) {
        return mulComponentWise(other, this);
    }
    public Matrix2f mulComponentWise(Matrix2fc other, Matrix2f dest) {
        dest.m00 = m00 * other.m00();
        dest.m01 = m01 * other.m01();
        dest.m10 = m10 * other.m10();
        dest.m11 = m11 * other.m11();
        return dest;
    }
    public Matrix2f lerp(Matrix2fc other, float t) {
        return lerp(other, t, this);
    }
    public Matrix2f lerp(Matrix2fc other, float t, Matrix2f dest) {
        dest.m00 = Math.fma(other.m00() - m00, t, m00);
        dest.m01 = Math.fma(other.m01() - m01, t, m01);
        dest.m10 = Math.fma(other.m10() - m10, t, m10);
        dest.m11 = Math.fma(other.m11() - m11, t, m11);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) &&
               Math.isFinite(m10) && Math.isFinite(m11);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix3x2f implements Matrix3x2fc, Externalizable, Cloneable {
    private static final long serialVersionUID = 1L;
    public float m00, m01;
    public float m10, m11;
    public float m20, m21;
    public Matrix3x2f() {
        this.m00 = 1.0f;
        this.m11 = 1.0f;
    }
    public Matrix3x2f(Matrix3x2fc mat) {
        if (mat != this) {
            MemUtil.INSTANCE.copy(mat, this);
        }
    }
    public Matrix3x2f(Matrix2fc mat) {
        MemUtil.INSTANCE.copy(mat, this);
    }
    public Matrix3x2f(float m00, float m01,
                      float m10, float m11,
                      float m20, float m21) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
        this.m20 = m20;
        this.m21 = m21;
    }
    public Matrix3x2f(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public float m00() {
        return m00;
    }
    public float m01() {
        return m01;
    }
    public float m10() {
        return m10;
    }
    public float m11() {
        return m11;
    }
    public float m20() {
        return m20;
    }
    public float m21() {
        return m21;
    }
    Matrix3x2f _m00(float m00) {
        this.m00 = m00;
        return this;
    }
    Matrix3x2f _m01(float m01) {
        this.m01 = m01;
        return this;
    }
    Matrix3x2f _m10(float m10) {
        this.m10 = m10;
        return this;
    }
    Matrix3x2f _m11(float m11) {
        this.m11 = m11;
        return this;
    }
    Matrix3x2f _m20(float m20) {
        this.m20 = m20;
        return this;
    }
    Matrix3x2f _m21(float m21) {
        this.m21 = m21;
        return this;
    }
    public Matrix3x2f set(Matrix3x2fc m) {
        if (m != this) {
            MemUtil.INSTANCE.copy(m, this);
        }
        return this;
    }
    private void setMatrix3x2fc(Matrix3x2fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m10 = mat.m10();
        m11 = mat.m11();
        m20 = mat.m20();
        m21 = mat.m21();
    }
    public Matrix3x2f set(Matrix2fc m) {
        MemUtil.INSTANCE.copy(m, this);
        return this;
    }
    public Matrix3x2f mul(Matrix3x2fc right) {
        return mul(right, this);
    }
    public Matrix3x2f mul(Matrix3x2fc right, Matrix3x2f dest) {
        float nm00 = m00 * right.m00() + m10 * right.m01();
        float nm01 = m01 * right.m00() + m11 * right.m01();
        float nm10 = m00 * right.m10() + m10 * right.m11();
        float nm11 = m01 * right.m10() + m11 * right.m11();
        float nm20 = m00 * right.m20() + m10 * right.m21() + m20;
        float nm21 = m01 * right.m20() + m11 * right.m21() + m21;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2f mulLocal(Matrix3x2fc left) {
       return mulLocal(left, this);
    }
    public Matrix3x2f mulLocal(Matrix3x2fc left, Matrix3x2f dest) {
        float nm00 = left.m00() * m00 + left.m10() * m01;
        float nm01 = left.m01() * m00 + left.m11() * m01;
        float nm10 = left.m00() * m10 + left.m10() * m11;
        float nm11 = left.m01() * m10 + left.m11() * m11;
        float nm20 = left.m00() * m20 + left.m10() * m21 + left.m20();
        float nm21 = left.m01() * m20 + left.m11() * m21 + left.m21();
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2f set(float m00, float m01, 
                          float m10, float m11, 
                          float m20, float m21) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
        this.m20 = m20;
        this.m21 = m21;
        return this;
    }
    public Matrix3x2f set(float m[]) {
        MemUtil.INSTANCE.copy(m, 0, this);
        return this;
    }
    public Matrix3x2f set(float m[], int off) {
        MemUtil.INSTANCE.copy(m, off, this);
        return this;
    }
    public float determinant() {
        return m00 * m11 - m01 * m10;
    }
    public Matrix3x2f invert() {
        return invert(this);
    }
    public Matrix3x2f invert(Matrix3x2f dest) {
        float s = 1.0f / (m00 * m11 - m01 * m10);
        float nm00 =  m11 * s;
        float nm01 = -m01 * s;
        float nm10 = -m10 * s;
        float nm11 =  m00 * s;
        float nm20 = (m10 * m21 - m20 * m11) * s;
        float nm21 = (m20 * m01 - m00 * m21) * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2f translation(float x, float y) {
        m00 = 1.0f;
        m01 = 0.0f;
        m10 = 0.0f;
        m11 = 1.0f;
        m20 = x;
        m21 = y;
        return this;
    }
    public Matrix3x2f translation(Vector2fc offset) {
        return translation(offset.x(), offset.y());
    }
    public Matrix3x2f setTranslation(float x, float y) {
        m20 = x;
        m21 = y;
        return this;
    }
    public Matrix3x2f setTranslation(Vector2f offset) {
        return setTranslation(offset.x, offset.y);
    }
    public Matrix3x2f translate(float x, float y, Matrix3x2f dest) {
        float rm20 = x;
        float rm21 = y;
        dest.m20 = m00 * rm20 + m10 * rm21 + m20;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21;
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m10 = m10;
        dest.m11 = m11;
        return dest;
    }
    public Matrix3x2f translate(float x, float y) {
        return translate(x, y, this);
    }
    public Matrix3x2f translate(Vector2fc offset, Matrix3x2f dest) {
        return translate(offset.x(), offset.y(), dest);
    }
    public Matrix3x2f translate(Vector2fc offset) {
        return translate(offset.x(), offset.y(), this);
    }
    public Matrix3x2f translateLocal(Vector2fc offset) {
        return translateLocal(offset.x(), offset.y());
    }
    public Matrix3x2f translateLocal(Vector2fc offset, Matrix3x2f dest) {
        return translateLocal(offset.x(), offset.y(), dest);
    }
    public Matrix3x2f translateLocal(float x, float y, Matrix3x2f dest) {
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m20 = m20 + x;
        dest.m21 = m21 + y;
        return dest;
    }
    public Matrix3x2f translateLocal(float x, float y) {
        return translateLocal(x, y, this);
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + " " + Runtime.format(m20, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + " " + Runtime.format(m21, formatter) + "\n";
    }
    public Matrix3x2f get(Matrix3x2f dest) {
        return dest.set(this);
    }
    public FloatBuffer get(FloatBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get3x3(FloatBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, 0, buffer);
        return buffer;
    }
    public FloatBuffer get3x3(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get3x3(ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, 0, buffer);
        return buffer;
    }
    public ByteBuffer get3x3(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put3x3(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get4x4(FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, 0, buffer);
        return buffer;
    }
    public FloatBuffer get4x4(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get4x4(ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, 0, buffer);
        return buffer;
    }
    public ByteBuffer get4x4(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put4x4(this, index, buffer);
        return buffer;
    }
    public Matrix3x2fc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix3x2fc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public float[] get(float[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public float[] get(float[] arr) {
        return get(arr, 0);
    }
    public float[] get3x3(float[] arr, int offset) {
        MemUtil.INSTANCE.copy3x3(this, arr, offset);
        return arr;
    }
    public float[] get3x3(float[] arr) {
        return get3x3(arr, 0);
    }
    public float[] get4x4(float[] arr, int offset) {
        MemUtil.INSTANCE.copy4x4(this, arr, offset);
        return arr;
    }
    public float[] get4x4(float[] arr) {
        return get4x4(arr, 0);
    }
    public Matrix3x2f set(FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3x2f set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix3x2f set(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3x2f set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix3x2f setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Matrix3x2f setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return this;
    }
    public Matrix3x2f zero() {
        MemUtil.INSTANCE.zero(this);
        return this;
    }
    public Matrix3x2f identity() {
        MemUtil.INSTANCE.identity(this);
        return this;
    }
    public Matrix3x2f scale(float x, float y, Matrix3x2f dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2f scale(float x, float y) {
        return scale(x, y, this);
    }
    public Matrix3x2f scale(Vector2fc xy) {
        return scale(xy.x(), xy.y(), this);
    }
    public Matrix3x2f scale(Vector2fc xy, Matrix3x2f dest) {
        return scale(xy.x(), xy.y(), dest);
    }
    public Matrix3x2f scale(float xy, Matrix3x2f dest) {
        return scale(xy, xy, dest);
    }
    public Matrix3x2f scale(float xy) {
        return scale(xy, xy);
    }
    public Matrix3x2f scaleLocal(float x, float y, Matrix3x2f dest) {
        dest.m00 = x * m00;
        dest.m01 = y * m01;
        dest.m10 = x * m10;
        dest.m11 = y * m11;
        dest.m20 = x * m20;
        dest.m21 = y * m21;
        return dest;
    }
    public Matrix3x2f scaleLocal(float x, float y) {
        return scaleLocal(x, y, this);
    }
    public Matrix3x2f scaleLocal(float xy, Matrix3x2f dest) {
        return scaleLocal(xy, xy, dest);
    }
    public Matrix3x2f scaleLocal(float xy) {
        return scaleLocal(xy, xy, this);
    }
    public Matrix3x2f scaleAround(float sx, float sy, float ox, float oy, Matrix3x2f dest) {
        float nm20 = m00 * ox + m10 * oy + m20;
        float nm21 = m01 * ox + m11 * oy + m21;
        dest.m00 = m00 * sx;
        dest.m01 = m01 * sx;
        dest.m10 = m10 * sy;
        dest.m11 = m11 * sy;
        dest.m20 = dest.m00 * -ox + dest.m10 * -oy + nm20;
        dest.m21 = dest.m01 * -ox + dest.m11 * -oy + nm21;
        return dest;
    }
    public Matrix3x2f scaleAround(float sx, float sy, float ox, float oy) {
        return scaleAround(sx, sy, ox, oy, this);
    }
    public Matrix3x2f scaleAround(float factor, float ox, float oy, Matrix3x2f dest) {
        return scaleAround(factor, factor, ox, oy, this);
    }
    public Matrix3x2f scaleAround(float factor, float ox, float oy) {
        return scaleAround(factor, factor, ox, oy, this);
    }
    public Matrix3x2f scaleAroundLocal(float sx, float sy, float ox, float oy, Matrix3x2f dest) {
        dest.m00 = sx * m00;
        dest.m01 = sy * m01;
        dest.m10 = sx * m10;
        dest.m11 = sy * m11;
        dest.m20 = sx * m20 - sx * ox + ox;
        dest.m21 = sy * m21 - sy * oy + oy;
        return dest;
    }
    public Matrix3x2f scaleAroundLocal(float factor, float ox, float oy, Matrix3x2f dest) {
        return scaleAroundLocal(factor, factor, ox, oy, dest);
    }
    public Matrix3x2f scaleAroundLocal(float sx, float sy, float sz, float ox, float oy, float oz) {
        return scaleAroundLocal(sx, sy, ox, oy, this);
    }
    public Matrix3x2f scaleAroundLocal(float factor, float ox, float oy) {
        return scaleAroundLocal(factor, factor, ox, oy, this);
    }
    public Matrix3x2f scaling(float factor) {
        return scaling(factor, factor);
    }
    public Matrix3x2f scaling(float x, float y) {
        m00 = x;
        m01 = 0.0f;
        m10 = 0.0f;
        m11 = y;
        m20 = 0.0f;
        m21 = 0.0f;
        return this;
    }
    public Matrix3x2f rotation(float angle) {
        float cos = Math.cos(angle);
        float sin = Math.sin(angle);
        m00 = cos;
        m10 = -sin;
        m20 = 0.0f;
        m01 = sin;
        m11 = cos;
        m21 = 0.0f;
        return this;
    }
    public Vector3f transform(Vector3f v) {
        return v.mul(this);
    }
    public Vector3f transform(Vector3fc v, Vector3f dest) {
        return v.mul(this, dest);
    }
    public Vector3f transform(float x, float y, float z, Vector3f dest) {
       return dest.set(m00 * x + m10 * y + m20 * z, m01 * x + m11 * y + m21 * z, z);
    }
    public Vector2f transformPosition(Vector2f v) {
        v.set(m00 * v.x + m10 * v.y + m20,
              m01 * v.x + m11 * v.y + m21);
        return v;
    }
    public Vector2f transformPosition(Vector2fc v, Vector2f dest) {
        dest.set(m00 * v.x() + m10 * v.y() + m20,
                 m01 * v.x() + m11 * v.y() + m21);
        return dest;
    }
    public Vector2f transformPosition(float x, float y, Vector2f dest) {
        return dest.set(m00 * x + m10 * y + m20, m01 * x + m11 * y + m21);
    }
    public Vector2f transformDirection(Vector2f v) {
        v.set(m00 * v.x + m10 * v.y,
              m01 * v.x + m11 * v.y);
        return v;
    }
    public Vector2f transformDirection(Vector2fc v, Vector2f dest) {
        dest.set(m00 * v.x() + m10 * v.y(),
                 m01 * v.x() + m11 * v.y());
        return dest;
    }
    public Vector2f transformDirection(float x, float y, Vector2f dest) {
        return dest.set(m00 * x + m10 * y, m01 * x + m11 * y);
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeFloat(m00);
        out.writeFloat(m01);
        out.writeFloat(m10);
        out.writeFloat(m11);
        out.writeFloat(m20);
        out.writeFloat(m21);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readFloat();
        m01 = in.readFloat();
        m10 = in.readFloat();
        m11 = in.readFloat();
        m20 = in.readFloat();
        m21 = in.readFloat();
    }
    public Matrix3x2f rotate(float ang) {
        return rotate(ang, this);
    }
    public Matrix3x2f rotate(float ang, Matrix3x2f dest) {
        float cos = Math.cos(ang);
        float sin = Math.sin(ang);
        float rm00 = cos;
        float rm01 = sin;
        float rm10 = -sin;
        float rm11 = cos;
        float nm00 = m00 * rm00 + m10 * rm01;
        float nm01 = m01 * rm00 + m11 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2f rotateLocal(float ang, Matrix3x2f dest) {
        float sin = Math.sin(ang);
        float cos = Math.cosFromSin(sin, ang);
        float nm00 = cos * m00 - sin * m01;
        float nm01 = sin * m00 + cos * m01;
        float nm10 = cos * m10 - sin * m11;
        float nm11 = sin * m10 + cos * m11;
        float nm20 = cos * m20 - sin * m21;
        float nm21 = sin * m20 + cos * m21;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = nm20;
        dest.m21 = nm21;
        return dest;
    }
    public Matrix3x2f rotateLocal(float ang) {
        return rotateLocal(ang, this);
    }
    public Matrix3x2f rotateAbout(float ang, float x, float y) {
        return rotateAbout(ang, x, y, this);
    }
    public Matrix3x2f rotateAbout(float ang, float x, float y, Matrix3x2f dest) {
        float tm20 = m00 * x + m10 * y + m20;
        float tm21 = m01 * x + m11 * y + m21;
        float cos = Math.cos(ang);
        float sin = Math.sin(ang);
        float nm00 = m00 * cos + m10 * sin;
        float nm01 = m01 * cos + m11 * sin;
        dest.m10 = m00 * -sin + m10 * cos;
        dest.m11 = m01 * -sin + m11 * cos;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m20 = dest.m00 * -x + dest.m10 * -y + tm20;
        dest.m21 = dest.m01 * -x + dest.m11 * -y + tm21;
        return dest;
    }
    public Matrix3x2f rotateTo(Vector2fc fromDir, Vector2fc toDir, Matrix3x2f dest) {
        float dot = fromDir.x() * toDir.x() + fromDir.y() * toDir.y();
        float det = fromDir.x() * toDir.y() - fromDir.y() * toDir.x();
        float rm00 = dot;
        float rm01 = det;
        float rm10 = -det;
        float rm11 = dot;
        float nm00 = m00 * rm00 + m10 * rm01;
        float nm01 = m01 * rm00 + m11 * rm01;
        dest.m10 = m00 * rm10 + m10 * rm11;
        dest.m11 = m01 * rm10 + m11 * rm11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2f rotateTo(Vector2fc fromDir, Vector2fc toDir) {
        return rotateTo(fromDir, toDir, this);
    }
    public Matrix3x2f view(float left, float right, float bottom, float top, Matrix3x2f dest) {
        float rm00 = 2.0f / (right - left);
        float rm11 = 2.0f / (top - bottom);
        float rm20 = (left + right) / (left - right);
        float rm21 = (bottom + top) / (bottom - top);
        dest.m20 = m00 * rm20 + m10 * rm21 + m20;
        dest.m21 = m01 * rm20 + m11 * rm21 + m21;
        dest.m00 = m00 * rm00;
        dest.m01 = m01 * rm00;
        dest.m10 = m10 * rm11;
        dest.m11 = m11 * rm11;
        return dest;
    }
    public Matrix3x2f view(float left, float right, float bottom, float top) {
        return view(left, right, bottom, top, this);
    }
    public Matrix3x2f setView(float left, float right, float bottom, float top) {
        m00 = 2.0f / (right - left);
        m01 = 0.0f;
        m10 = 0.0f;
        m11 = 2.0f / (top - bottom);
        m20 = (left + right) / (left - right);
        m21 = (bottom + top) / (bottom - top);
        return this;
    }
    public Vector2f origin(Vector2f origin) {
        float s = 1.0f / (m00 * m11 - m01 * m10);
        origin.x = (m10 * m21 - m20 * m11) * s;
        origin.y = (m20 * m01 - m00 * m21) * s;
        return origin;
    }
    public float[] viewArea(float[] area) {
        float s = 1.0f / (m00 * m11 - m01 * m10);
        float rm00 =  m11 * s;
        float rm01 = -m01 * s;
        float rm10 = -m10 * s;
        float rm11 =  m00 * s;
        float rm20 = (m10 * m21 - m20 * m11) * s;
        float rm21 = (m20 * m01 - m00 * m21) * s;
        float nxnyX = -rm00 - rm10;
        float nxnyY = -rm01 - rm11;
        float pxnyX =  rm00 - rm10;
        float pxnyY =  rm01 - rm11;
        float nxpyX = -rm00 + rm10;
        float nxpyY = -rm01 + rm11;
        float pxpyX =  rm00 + rm10;
        float pxpyY =  rm01 + rm11;
        float minX = nxnyX;
        minX = minX < nxpyX ? minX : nxpyX;
        minX = minX < pxnyX ? minX : pxnyX;
        minX = minX < pxpyX ? minX : pxpyX;
        float minY = nxnyY;
        minY = minY < nxpyY ? minY : nxpyY;
        minY = minY < pxnyY ? minY : pxnyY;
        minY = minY < pxpyY ? minY : pxpyY;
        float maxX = nxnyX;
        maxX = maxX > nxpyX ? maxX : nxpyX;
        maxX = maxX > pxnyX ? maxX : pxnyX;
        maxX = maxX > pxpyX ? maxX : pxpyX;
        float maxY = nxnyY;
        maxY = maxY > nxpyY ? maxY : nxpyY;
        maxY = maxY > pxnyY ? maxY : pxnyY;
        maxY = maxY > pxpyY ? maxY : pxpyY;
        area[0] = minX + rm20;
        area[1] = minY + rm21;
        area[2] = maxX + rm20;
        area[3] = maxY + rm21;
        return area;
    }
    public Vector2f positiveX(Vector2f dir) {
        float s = m00 * m11 - m01 * m10;
        s = 1.0f / s;
        dir.x =  m11 * s;
        dir.y = -m01 * s;
        return dir.normalize(dir);
    }
    public Vector2f normalizedPositiveX(Vector2f dir) {
        dir.x =  m11;
        dir.y = -m01;
        return dir;
    }
    public Vector2f positiveY(Vector2f dir) {
        float s = m00 * m11 - m01 * m10;
        s = 1.0f / s;
        dir.x = -m10 * s;
        dir.y =  m00 * s;
        return dir.normalize(dir);
    }
    public Vector2f normalizedPositiveY(Vector2f dir) {
        dir.x = -m10;
        dir.y =  m00;
        return dir;
    }
    public Vector2f unproject(float winX, float winY, int[] viewport, Vector2f dest) {
        float s = 1.0f / (m00 * m11 - m01 * m10);
        float im00 =  m11 * s;
        float im01 = -m01 * s;
        float im10 = -m10 * s;
        float im11 =  m00 * s;
        float im20 = (m10 * m21 - m20 * m11) * s;
        float im21 = (m20 * m01 - m00 * m21) * s;
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        dest.x = im00 * ndcX + im10 * ndcY + im20;
        dest.y = im01 * ndcX + im11 * ndcY + im21;
        return dest;
    }
    public Vector2f unprojectInv(float winX, float winY, int[] viewport, Vector2f dest) {
        float ndcX = (winX-viewport[0])/viewport[2]*2.0f-1.0f;
        float ndcY = (winY-viewport[1])/viewport[3]*2.0f-1.0f;
        dest.x = m00 * ndcX + m10 * ndcY + m20;
        dest.y = m01 * ndcX + m11 * ndcY + m21;
        return dest;
    }
    public Matrix3x2f shearX(float yFactor) {
        return shearX(yFactor, this);
    }
    public Matrix3x2f shearX(float yFactor, Matrix3x2f dest) {
        float nm10 = m00 * yFactor + m10;
        float nm11 = m01 * yFactor + m11;
        dest.m00 = m00;
        dest.m01 = m01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2f shearY(float xFactor) {
        return shearY(xFactor, this);
    }
    public Matrix3x2f shearY(float xFactor, Matrix3x2f dest) {
        float nm00 = m00 + m10 * xFactor;
        float nm01 = m01 + m11 * xFactor;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = m10;
        dest.m11 = m11;
        dest.m20 = m20;
        dest.m21 = m21;
        return dest;
    }
    public Matrix3x2f span(Vector2f corner, Vector2f xDir, Vector2f yDir) {
        float s = 1.0f / (m00 * m11 - m01 * m10);
        float nm00 =  m11 * s, nm01 = -m01 * s, nm10 = -m10 * s, nm11 =  m00 * s;
        corner.x = -nm00 - nm10 + (m10 * m21 - m20 * m11) * s;
        corner.y = -nm01 - nm11 + (m20 * m01 - m00 * m21) * s;
        xDir.x = 2.0f * nm00; xDir.y = 2.0f * nm01;
        yDir.x = 2.0f * nm10; yDir.y = 2.0f * nm11;
        return this;
    }
    public boolean testPoint(float x, float y) {
        float nxX = +m00, nxY = +m10, nxW = 1.0f + m20;
        float pxX = -m00, pxY = -m10, pxW = 1.0f - m20;
        float nyX = +m01, nyY = +m11, nyW = 1.0f + m21;
        float pyX = -m01, pyY = -m11, pyW = 1.0f - m21;
        return nxX * x + nxY * y + nxW >= 0 && pxX * x + pxY * y + pxW >= 0 &&
               nyX * x + nyY * y + nyW >= 0 && pyX * x + pyY * y + pyW >= 0;
    }
    public boolean testCircle(float x, float y, float r) {
        float invl;
        float nxX = +m00, nxY = +m10, nxW = 1.0f + m20;
        invl = Math.invsqrt(nxX * nxX + nxY * nxY);
        nxX *= invl; nxY *= invl; nxW *= invl;
        float pxX = -m00, pxY = -m10, pxW = 1.0f - m20;
        invl = Math.invsqrt(pxX * pxX + pxY * pxY);
        pxX *= invl; pxY *= invl; pxW *= invl;
        float nyX = +m01, nyY = +m11, nyW = 1.0f + m21;
        invl = Math.invsqrt(nyX * nyX + nyY * nyY);
        nyX *= invl; nyY *= invl; nyW *= invl;
        float pyX = -m01, pyY = -m11, pyW = 1.0f - m21;
        invl = Math.invsqrt(pyX * pyX + pyY * pyY);
        pyX *= invl; pyY *= invl; pyW *= invl;
        return nxX * x + nxY * y + nxW >= -r && pxX * x + pxY * y + pxW >= -r &&
               nyX * x + nyY * y + nyW >= -r && pyX * x + pyY * y + pyW >= -r;
    }
    public boolean testAar(float minX, float minY, float maxX, float maxY) {
        float nxX = +m00, nxY = +m10, nxW = 1.0f + m20;
        float pxX = -m00, pxY = -m10, pxW = 1.0f - m20;
        float nyX = +m01, nyY = +m11, nyW = 1.0f + m21;
        float pyX = -m01, pyY = -m11, pyW = 1.0f - m21;
        return nxX * (nxX < 0 ? minX : maxX) + nxY * (nxY < 0 ? minY : maxY) >= -nxW &&
               pxX * (pxX < 0 ? minX : maxX) + pxY * (pxY < 0 ? minY : maxY) >= -pxW &&
               nyX * (nyX < 0 ? minX : maxX) + nyY * (nyY < 0 ? minY : maxY) >= -nyW &&
               pyX * (pyX < 0 ? minX : maxX) + pyY * (pyY < 0 ? minY : maxY) >= -pyW;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Float.floatToIntBits(m00);
        result = prime * result + Float.floatToIntBits(m01);
        result = prime * result + Float.floatToIntBits(m10);
        result = prime * result + Float.floatToIntBits(m11);
        result = prime * result + Float.floatToIntBits(m20);
        result = prime * result + Float.floatToIntBits(m21);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix3x2f))
            return false;
        Matrix3x2f other = (Matrix3x2f) obj;
        if (Float.floatToIntBits(m00) != Float.floatToIntBits(other.m00))
            return false;
        if (Float.floatToIntBits(m01) != Float.floatToIntBits(other.m01))
            return false;
        if (Float.floatToIntBits(m10) != Float.floatToIntBits(other.m10))
            return false;
        if (Float.floatToIntBits(m11) != Float.floatToIntBits(other.m11))
            return false;
        if (Float.floatToIntBits(m20) != Float.floatToIntBits(other.m20))
            return false;
        if (Float.floatToIntBits(m21) != Float.floatToIntBits(other.m21))
            return false;
        return true;
    }
    public boolean equals(Matrix3x2fc m, float delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        if (!Runtime.equals(m20, m.m20(), delta))
            return false;
        if (!Runtime.equals(m21, m.m21(), delta))
            return false;
        return true;
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) &&
               Math.isFinite(m10) && Math.isFinite(m11) &&
               Math.isFinite(m20) && Math.isFinite(m21);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Matrix2d implements Externalizable, Cloneable, Matrix2dc {
    private static final long serialVersionUID = 1L;
    public double m00, m01;
    public double m10, m11;
    public Matrix2d() {
        m00 = 1.0;
        m11 = 1.0;
    }
    public Matrix2d(Matrix2dc mat) {
        if (mat != this) {
            MemUtil.INSTANCE.copy(mat, this);
        }
    }
    public Matrix2d(Matrix2fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m10 = mat.m10();
        m11 = mat.m11();
    }
    public Matrix2d(Matrix3dc mat) {
        MemUtil.INSTANCE.copy(mat, this);
    }
    public Matrix2d(Matrix3fc mat) {
        m00 = mat.m00();
        m01 = mat.m01();
        m10 = mat.m10();
        m11 = mat.m11();
    }
    public Matrix2d(double m00, double m01,
                    double m10, double m11) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
    }
    public Matrix2d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Matrix2d(Vector2dc col0, Vector2dc col1) {
        m00 = col0.x();
        m01 = col0.y();
        m10 = col1.x();
        m11 = col1.y();
    }
    public double m00() {
        return m00;
    }
    public double m01() {
        return m01;
    }
    public double m10() {
        return m10;
    }
    public double m11() {
        return m11;
    }
    public Matrix2d m00(double m00) {
        this.m00 = m00;
        return this;
    }
    public Matrix2d m01(double m01) {
        this.m01 = m01;
        return this;
    }
    public Matrix2d m10(double m10) {
        this.m10 = m10;
        return this;
    }
    public Matrix2d m11(double m11) {
        this.m11 = m11;
        return this;
    }
    Matrix2d _m00(double m00) {
        this.m00 = m00;
        return this;
    }
    Matrix2d _m01(double m01) {
        this.m01 = m01;
        return this;
    }
    Matrix2d _m10(double m10) {
        this.m10 = m10;
        return this;
    }
    Matrix2d _m11(double m11) {
        this.m11 = m11;
        return this;
    }
    public Matrix2d set(Matrix2dc m) {
        if (m != this)
        {
            MemUtil.INSTANCE.copy(m, this);
        }
        return this;
    }
    public Matrix2d set(Matrix2fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m10 = m.m10();
        m11 = m.m11();
        return this;
    }
    public Matrix2d set(Matrix3x2dc m) {
        MemUtil.INSTANCE.copy(m, this);
        return this;
    }
    public Matrix2d set(Matrix3x2fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m10 = m.m10();
        m11 = m.m11();
        return this;
    }
    public Matrix2d set(Matrix3dc m) {
        MemUtil.INSTANCE.copy(m, this);
        return this;
    }
    public Matrix2d set(Matrix3fc m) {
        m00 = m.m00();
        m01 = m.m01();
        m10 = m.m10();
        m11 = m.m11();
        return this;
    }
    public Matrix2d mul(Matrix2dc right) {
        return mul(right, this);
    }
    public Matrix2d mul(Matrix2dc right, Matrix2d dest) {
        double nm00 = m00 * right.m00() + m10 * right.m01();
        double nm01 = m01 * right.m00() + m11 * right.m01();
        double nm10 = m00 * right.m10() + m10 * right.m11();
        double nm11 = m01 * right.m10() + m11 * right.m11();
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2d mul(Matrix2fc right) {
        return mul(right, this);
    }
    public Matrix2d mul(Matrix2fc right, Matrix2d dest) {
        double nm00 = m00 * right.m00() + m10 * right.m01();
        double nm01 = m01 * right.m00() + m11 * right.m01();
        double nm10 = m00 * right.m10() + m10 * right.m11();
        double nm11 = m01 * right.m10() + m11 * right.m11();
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2d mulLocal(Matrix2dc left) {
        return mulLocal(left, this);
    }
    public Matrix2d mulLocal(Matrix2dc left, Matrix2d dest) {
        double nm00 = left.m00() * m00 + left.m10() * m01;
        double nm01 = left.m01() * m00 + left.m11() * m01;
        double nm10 = left.m00() * m10 + left.m10() * m11;
        double nm11 = left.m01() * m10 + left.m11() * m11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2d set(double m00, double m01,
                        double m10, double m11) {
        this.m00 = m00;
        this.m01 = m01;
        this.m10 = m10;
        this.m11 = m11;
        return this;
    }
    public Matrix2d set(float m[]) {
        m00 = m[0];
        m01 = m[1];
        m10 = m[3];
        m11 = m[4];
        return this;
    }
    public Matrix2d set(float m[], int off) {
        m00 = m[off+0];
        m01 = m[off+1];
        m10 = m[off+3];
        m11 = m[off+4];
        return this;
    }
    public Matrix2d set(double m[]) {
        m00 = m[0];
        m01 = m[1];
        m10 = m[3];
        m11 = m[4];
        return this;
    }
    public Matrix2d set(double m[], int off) {
        m00 = m[off+0];
        m01 = m[off+1];
        m10 = m[off+3];
        m11 = m[off+4];
        return this;
    }
    public Matrix2d set(Vector2dc col0, Vector2dc col1) {
        m00 = col0.x();
        m01 = col0.y();
        m10 = col1.x();
        m11 = col1.y();
        return this;
    }
    public double determinant() {
        return m00 * m11 - m10 * m01;
    }
    public Matrix2d invert() {
        return invert(this);
    }
    public Matrix2d invert(Matrix2d dest) {
        double s = 1.0 / determinant();
        double nm00 = m11 * s;
        double nm01 = -m01 * s;
        double nm10 = -m10 * s;
        double nm11 = m00 * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2d transpose() {
        return transpose(this);
    }
    public Matrix2d transpose(Matrix2d dest) {
        dest.set(m00, m10,
                m01, m11);
        return dest;
    }
    public String toString() {
        String str = toString(Options.NUMBER_FORMAT);
        StringBuffer res = new StringBuffer();
        int eIndex = Integer.MIN_VALUE;
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (c == 'E') {
                eIndex = i;
            } else if (c == ' ' && eIndex == i - 1) {
                res.append('+');
                continue;
            } else if (Character.isDigit(c) && eIndex == i - 1) {
                res.append('+');
            }
            res.append(c);
        }
        return res.toString();
    }
    public String toString(NumberFormat formatter) {
        return Runtime.format(m00, formatter) + " " + Runtime.format(m10, formatter) + "\n"
             + Runtime.format(m01, formatter) + " " + Runtime.format(m11, formatter) + "\n";
    }
    public Matrix2d get(Matrix2d dest) {
        return dest.set(this);
    }
    public Matrix3x2d get(Matrix3x2d dest) {
        return dest.set(this);
    }
    public Matrix3d get(Matrix3d dest) {
        return dest.set(this);
    }
    public double getRotation() {
        return (double) Math.atan2(m01, m11);
    }
    public DoubleBuffer get(DoubleBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public DoubleBuffer get(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        return get(buffer.position(), buffer);
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getFloats(ByteBuffer buffer) {
        return getFloats(buffer.position(), buffer);
    }
    public ByteBuffer getFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putf(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer getTransposed(DoubleBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public DoubleBuffer getTransposed(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public FloatBuffer getTransposed(FloatBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public FloatBuffer getTransposed(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposed(ByteBuffer buffer) {
        return getTransposed(buffer.position(), buffer);
    }
    public ByteBuffer getTransposed(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putTransposed(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getTransposedFloats(ByteBuffer buffer) {
        return getTransposedFloats(buffer.position(), buffer);
    }
    public ByteBuffer getTransposedFloats(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putfTransposed(this, index, buffer);
        return buffer;
    }
    public Matrix2dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Matrix2dc getTransposedToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.putTransposed(this, address);
        return this;
    }
    public double[] get(double[] arr, int offset) {
        MemUtil.INSTANCE.copy(this, arr, offset);
        return arr;
    }
    public double[] get(double[] arr) {
        return get(arr, 0);
    }
    public Matrix2d set(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix2d set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Matrix2d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix2d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Matrix2d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Matrix2d setTransposedFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.getTransposed(this, address);
        return this;
    }
    public Matrix2d zero() {
        MemUtil.INSTANCE.zero(this);
        return this;
    }
    public Matrix2d identity() {
        m00 = 1.0;
        m01 = 0.0;
        m10 = 0.0;
        m11 = 1.0;
        return this;
    }
    public Matrix2d scale(Vector2dc xy, Matrix2d dest) {
        return scale(xy.x(), xy.y(), dest);
    }
    public Matrix2d scale(Vector2dc xy) {
        return scale(xy.x(), xy.y(), this);
    }
    public Matrix2d scale(double x, double y, Matrix2d dest) {
        dest.m00 = m00 * x;
        dest.m01 = m01 * x;
        dest.m10 = m10 * y;
        dest.m11 = m11 * y;
        return dest;
    }
    public Matrix2d scale(double x, double y) {
        return scale(x, y, this);
    }
    public Matrix2d scale(double xy, Matrix2d dest) {
        return scale(xy, xy, dest);
    }
    public Matrix2d scale(double xy) {
        return scale(xy, xy);
    }
    public Matrix2d scaleLocal(double x, double y, Matrix2d dest) {
        dest.m00 = x * m00;
        dest.m01 = y * m01;
        dest.m10 = x * m10;
        dest.m11 = y * m11;
        return dest;
    }
    public Matrix2d scaleLocal(double x, double y) {
        return scaleLocal(x, y, this);
    }
    public Matrix2d scaling(double factor) {
        MemUtil.INSTANCE.zero(this);
        m00 = factor;
        m11 = factor;
        return this;
    }
    public Matrix2d scaling(double x, double y) {
        MemUtil.INSTANCE.zero(this);
        m00 = x;
        m11 = y;
        return this;
    }
    public Matrix2d scaling(Vector2dc xy) {
        return scaling(xy.x(), xy.y());
    }
    public Matrix2d rotation(double angle) {
        double sin = Math.sin(angle);
        double cos = Math.cosFromSin(sin, angle);
        m00 = cos;
        m01 = sin;
        m10 = -sin;
        m11 = cos;
        return this;
    }
    public Vector2d transform(Vector2d v) {
        return v.mul(this);
    }
    public Vector2d transform(Vector2dc v, Vector2d dest) {
        v.mul(this, dest);
        return dest;
    }
    public Vector2d transform(double x, double y, Vector2d dest) {
        dest.set(m00 * x + m10 * y,
                m01 * x + m11 * y);
        return dest;
    }
    public Vector2d transformTranspose(Vector2d v) {
        return v.mulTranspose(this);
    }
    public Vector2d transformTranspose(Vector2dc v, Vector2d dest) {
        v.mulTranspose(this, dest);
        return dest;
    }
    public Vector2d transformTranspose(double x, double y, Vector2d dest) {
        dest.set(m00 * x + m01 * y,
                m10 * x + m11 * y);
        return dest;
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(m00);
        out.writeDouble(m01);
        out.writeDouble(m10);
        out.writeDouble(m11);
    }
    public void readExternal(ObjectInput in) throws IOException {
        m00 = in.readDouble();
        m01 = in.readDouble();
        m10 = in.readDouble();
        m11 = in.readDouble();
    }
    public Matrix2d rotate(double angle) {
        return rotate(angle, this);
    }
    public Matrix2d rotate(double angle, Matrix2d dest) {
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double nm00 = m00 * c + m10 * s;
        double nm01 = m01 * c + m11 * s;
        double nm10 = m10 * c - m00 * s;
        double nm11 = m11 * c - m01 * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Matrix2d rotateLocal(double angle) {
        return rotateLocal(angle, this);
    }
    public Matrix2d rotateLocal(double angle, Matrix2d dest) {
        double s = Math.sin(angle);
        double c = Math.cosFromSin(s, angle);
        double nm00 = c * m00 - s * m01;
        double nm01 = s * m00 + c * m01;
        double nm10 = c * m10 - s * m11;
        double nm11 = s * m10 + c * m11;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Vector2d getRow(int row, Vector2d dest) throws IndexOutOfBoundsException {
        switch (row) {
            case 0:
                dest.x = m00;
                dest.y = m10;
                break;
            case 1:
                dest.x = m01;
                dest.y = m11;
                break;
            default:
                throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix2d setRow(int row, Vector2dc src) throws IndexOutOfBoundsException {
        return setRow(row, src.x(), src.y());
    }
    public Matrix2d setRow(int row, double x, double y) throws IndexOutOfBoundsException {
        switch (row) {
            case 0:
                this.m00 = x;
                this.m10 = y;
                break;
            case 1:
                this.m01 = x;
                this.m11 = y;
                break;
            default:
                throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public Vector2d getColumn(int column, Vector2d dest) throws IndexOutOfBoundsException {
        switch (column) {
            case 0:
                dest.x = m00;
                dest.y = m01;
                break;
            case 1:
                dest.x = m10;
                dest.y = m11;
                break;
            default:
                throw new IndexOutOfBoundsException();
        }
        return dest;
    }
    public Matrix2d setColumn(int column, Vector2dc src) throws IndexOutOfBoundsException {
        return setColumn(column, src.x(), src.y());
    }
    public Matrix2d setColumn(int column, double x, double y) throws IndexOutOfBoundsException {
        switch (column) {
            case 0:
                this.m00 = x;
                this.m01 = y;
                break;
            case 1:
                this.m10 = x;
                this.m11 = y;
                break;
            default:
                throw new IndexOutOfBoundsException();
        }
        return this;
    }
    public double get(int column, int row) {
        switch (column) {
            case 0:
                switch (row) {
                    case 0:
                        return m00;
                    case 1:
                        return m01;
                    default:
                        break;
                }
                break;
            case 1:
                switch (row) {
                    case 0:
                        return m10;
                    case 1:
                        return m11;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        throw new IndexOutOfBoundsException();
    }
    public Matrix2d set(int column, int row, double value) {
        switch (column) {
            case 0:
                switch (row) {
                    case 0:
                        this.m00 = value;
                        return this;
                    case 1:
                        this.m01 = value;
                        return this;
                    default:
                        break;
                }
                break;
            case 1:
                switch (row) {
                    case 0:
                        this.m10 = value;
                        return this;
                    case 1:
                        this.m11 = value;
                        return this;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        throw new IndexOutOfBoundsException();
    }
    public Matrix2d normal() {
        return normal(this);
    }
    public Matrix2d normal(Matrix2d dest) {
        double det = m00 * m11 - m10 * m01;
        double s = 1.0 / det;
        double nm00 = m11 * s;
        double nm01 = -m10 * s;
        double nm10 = -m01 * s;
        double nm11 = m00 * s;
        dest.m00 = nm00;
        dest.m01 = nm01;
        dest.m10 = nm10;
        dest.m11 = nm11;
        return dest;
    }
    public Vector2d getScale(Vector2d dest) {
        dest.x = Math.sqrt(m00 * m00 + m01 * m01);
        dest.y = Math.sqrt(m10 * m10 + m11 * m11);
        return dest;
    }
    public Vector2d positiveX(Vector2d dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = -m11;
            dir.y = m01;
        } else {
            dir.x = m11;
            dir.y = -m01;
        }
        return dir.normalize(dir);
    }
    public Vector2d normalizedPositiveX(Vector2d dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = -m11;
            dir.y = m01;
        } else {
            dir.x = m11;
            dir.y = -m01;
        }
        return dir;
    }
    public Vector2d positiveY(Vector2d dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = m10;
            dir.y = -m00;
        } else {
            dir.x = -m10;
            dir.y = m00;
        }
        return dir.normalize(dir);
    }
    public Vector2d normalizedPositiveY(Vector2d dir) {
        if (m00 * m11 < m01 * m10) { 
            dir.x = m10;
            dir.y = -m00;
        } else {
            dir.x = -m10;
            dir.y = m00;
        }
        return dir;
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(m00);
        result = prime * result + (int) ((temp >>> 32) ^ temp);
        temp = Double.doubleToLongBits(m01);
        result = prime * result + (int) ((temp >>> 32) ^ temp);
        temp = Double.doubleToLongBits(m10);
        result = prime * result + (int) ((temp >>> 32) ^ temp);
        temp = Double.doubleToLongBits(m11);
        result = prime * result + (int) ((temp >>> 32) ^ temp);
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Matrix2d))
            return false;
        Matrix2d other = (Matrix2d) obj;
        if (Double.doubleToLongBits(m00) != Double.doubleToLongBits(other.m00))
            return false;
        if (Double.doubleToLongBits(m01) != Double.doubleToLongBits(other.m01))
            return false;
        if (Double.doubleToLongBits(m10) != Double.doubleToLongBits(other.m10))
            return false;
        if (Double.doubleToLongBits(m11) != Double.doubleToLongBits(other.m11))
            return false;
        return true;
    }
    public boolean equals(Matrix2dc m, double delta) {
        if (this == m)
            return true;
        if (m == null)
            return false;
        if (!Runtime.equals(m00, m.m00(), delta))
            return false;
        if (!Runtime.equals(m01, m.m01(), delta))
            return false;
        if (!Runtime.equals(m10, m.m10(), delta))
            return false;
        if (!Runtime.equals(m11, m.m11(), delta))
            return false;
        return true;
    }
    public Matrix2d swap(Matrix2d other) {
        MemUtil.INSTANCE.swap(this, other);
        return this;
    }
    public Matrix2d add(Matrix2dc other) {
        return add(other, this);
    }
    public Matrix2d add(Matrix2dc other, Matrix2d dest) {
        dest.m00 = m00 + other.m00();
        dest.m01 = m01 + other.m01();
        dest.m10 = m10 + other.m10();
        dest.m11 = m11 + other.m11();
        return dest;
    }
    public Matrix2d sub(Matrix2dc subtrahend) {
        return sub(subtrahend, this);
    }
    public Matrix2d sub(Matrix2dc other, Matrix2d dest) {
        dest.m00 = m00 - other.m00();
        dest.m01 = m01 - other.m01();
        dest.m10 = m10 - other.m10();
        dest.m11 = m11 - other.m11();
        return dest;
    }
    public Matrix2d mulComponentWise(Matrix2dc other) {
        return mulComponentWise(other, this);
    }
    public Matrix2d mulComponentWise(Matrix2dc other, Matrix2d dest) {
        dest.m00 = m00 * other.m00();
        dest.m01 = m01 * other.m01();
        dest.m10 = m10 * other.m10();
        dest.m11 = m11 * other.m11();
        return dest;
    }
    public Matrix2d lerp(Matrix2dc other, double t) {
        return lerp(other, t, this);
    }
    public Matrix2d lerp(Matrix2dc other, double t, Matrix2d dest) {
        dest.m00 = Math.fma(other.m00() - m00, t, m00);
        dest.m01 = Math.fma(other.m01() - m01, t, m01);
        dest.m10 = Math.fma(other.m10() - m10, t, m10);
        dest.m11 = Math.fma(other.m11() - m11, t, m11);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(m00) && Math.isFinite(m01) &&
               Math.isFinite(m10) && Math.isFinite(m11);
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
package org.joml;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.nio.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
public class Vector4d implements Externalizable, Cloneable, Vector4dc {
    private static final long serialVersionUID = 1L;
    public double x;
    public double y;
    public double z;
    public double w;
    public Vector4d() {
        this.w = 1.0;
    }
    public Vector4d(Vector4dc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4d(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4d(Vector3dc v, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4d(Vector3ic v, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4d(Vector2dc v, double z, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4d(Vector2ic v, double z, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4d(double d) {
        this.x = d;
        this.y = d;
        this.z = d;
        this.w = d; 
    }
    public Vector4d(Vector4fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
    }
    public Vector4d(Vector3fc v, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
    }
    public Vector4d(Vector2fc v, double z, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
    }
    public Vector4d(double x, double y, double z, double w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    public Vector4d(float[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
    }
    public Vector4d(double[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
    }
    public Vector4d(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4d(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public Vector4d(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
    }
    public Vector4d(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
    }
    public double x() {
        return this.x;
    }
    public double y() {
        return this.y;
    }
    public double z() {
        return this.z;
    }
    public double w() {
        return this.w;
    }
    public Vector3f xyz(Vector3f dest) {
        return dest.set(x, y, z);
    }
    public Vector3d xyz(Vector3d dest) {
        return dest.set(x, y, z);
    }
    public Vector2f xy(Vector2f dest) {
        return dest.set(x, y);
    }
    public Vector2d xy(Vector2d dest) {
        return dest.set(x, y);
    }
    public Vector4d set(Vector4dc v) {
        if (v == this)
            return this;
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4d set(Vector4fc v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4d set(Vector4ic v) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = v.w();
        return this;
    }
    public Vector4d set(Vector3dc v, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4d set(Vector3ic v, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4d set(Vector3fc v, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = v.z();
        this.w = w;
        return this;
    }
    public Vector4d set(Vector2dc v, double z, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4d set(Vector2ic v, double z, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4d set(double d) {
        this.x = d;
        this.y = d;
        this.z = d;
        this.w = d;
        return this;
    }
    public Vector4d set(Vector2fc v, double z, double w) {
        this.x = v.x();
        this.y = v.y();
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4d set(double x, double y, double z, double w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    public Vector4d set(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    public Vector4d set(double[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
        return this;
    }
    public Vector4d set(float[] xyzw) {
        this.x = xyzw[0];
        this.y = xyzw[1];
        this.z = xyzw[2];
        this.w = xyzw[3];
        return this;
    }
    public Vector4d set(ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4d set(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4d set(DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, buffer.position(), buffer);
        return this;
    }
    public Vector4d set(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.get(this, index, buffer);
        return this;
    }
    public Vector4d setFromAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.get(this, address);
        return this;
    }
    public Vector4d setComponent(int component, double value) throws IllegalArgumentException {
        switch (component) {
            case 0:
                x = value;
                break;
            case 1:
                y = value;
                break;
            case 2:
                z = value;
                break;
            case 3:
                w = value;
                break;
            default:
                throw new IllegalArgumentException();
        }
        return this;
    }
    public ByteBuffer get(ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer get(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public DoubleBuffer get(DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public DoubleBuffer get(int index, DoubleBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public ByteBuffer getf(ByteBuffer buffer) {
        MemUtil.INSTANCE.putf(this, buffer.position(), buffer);
        return buffer;
    }
    public ByteBuffer getf(int index, ByteBuffer buffer) {
        MemUtil.INSTANCE.putf(this, index, buffer);
        return buffer;
    }
    public FloatBuffer get(FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, buffer.position(), buffer);
        return buffer;
    }
    public FloatBuffer get(int index, FloatBuffer buffer) {
        MemUtil.INSTANCE.put(this, index, buffer);
        return buffer;
    }
    public Vector4dc getToAddress(long address) {
        if (Options.NO_UNSAFE)
            throw new UnsupportedOperationException("Not supported when using joml.nounsafe");
        MemUtil.MemUtilUnsafe.put(this, address);
        return this;
    }
    public Vector4d sub(Vector4dc v) {
        return sub(v, this);
    }
    public Vector4d sub(Vector4dc v, Vector4d dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        dest.w = w - v.w();
        return dest;
    }
    public Vector4d sub(Vector4fc v) {
        return sub(v, this);
    }
    public Vector4d sub(Vector4fc v, Vector4d dest) {
        dest.x = x - v.x();
        dest.y = y - v.y();
        dest.z = z - v.z();
        dest.w = w - v.w();
        return dest;
    }
    public Vector4d sub(double x, double y, double z, double w) {
        return sub(x, y, z, w, this);
    }
    public Vector4d sub(double x, double y, double z, double w, Vector4d dest) {
        dest.x = this.x - x;
        dest.y = this.y - y;
        dest.z = this.z - z;
        dest.w = this.w - w;
        return dest;
    }
    public Vector4d add(Vector4dc v) {
        return add(v, this);
    }
    public Vector4d add(Vector4dc v, Vector4d dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        dest.w = w + v.w();
        return dest;
    }
    public Vector4d add(Vector4fc v, Vector4d dest) {
        dest.x = x + v.x();
        dest.y = y + v.y();
        dest.z = z + v.z();
        dest.w = w + v.w();
        return dest;
    }
    public Vector4d add(double x, double y, double z, double w) {
        return add(x, y, z, w, this);
    }
    public Vector4d add(double x, double y, double z, double w, Vector4d dest) {
        dest.x = this.x + x;
        dest.y = this.y + y;
        dest.z = this.z + z;
        dest.w = this.w + w;
        return dest;
    }
    public Vector4d add(Vector4fc v) {
        return add(v, this);
    }
    public Vector4d fma(Vector4dc a, Vector4dc b) {
        return fma(a, b, this);
    }
    public Vector4d fma(double a, Vector4dc b) {
        return fma(a, b, this);
    }
    public Vector4d fma(Vector4dc a, Vector4dc b, Vector4d dest) {
        dest.x = Math.fma(a.x(), b.x(), x);
        dest.y = Math.fma(a.y(), b.y(), y);
        dest.z = Math.fma(a.z(), b.z(), z);
        dest.w = Math.fma(a.w(), b.w(), w);
        return dest;
    }
    public Vector4d fma(double a, Vector4dc b, Vector4d dest) {
        dest.x = Math.fma(a, b.x(), x);
        dest.y = Math.fma(a, b.y(), y);
        dest.z = Math.fma(a, b.z(), z);
        dest.w = Math.fma(a, b.w(), w);
        return dest;
    }
    public Vector4d mulAdd(Vector4dc a, Vector4dc b) {
        return mulAdd(a, b, this);
    }
    public Vector4d mulAdd(double a, Vector4dc b) {
        return mulAdd(a, b, this);
    }
    public Vector4d mulAdd(Vector4dc a, Vector4dc b, Vector4d dest) {
        dest.x = Math.fma(x, a.x(), b.x());
        dest.y = Math.fma(y, a.y(), b.y());
        dest.z = Math.fma(z, a.z(), b.z());
        return dest;
    }
    public Vector4d mulAdd(double a, Vector4dc b, Vector4d dest) {
        dest.x = Math.fma(x, a, b.x());
        dest.y = Math.fma(y, a, b.y());
        dest.z = Math.fma(z, a, b.z());
        return dest;
    }
    public Vector4d mul(Vector4dc v) {
        return mul(v, this);
    }
    public Vector4d mul(Vector4dc v, Vector4d dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        dest.w = w * v.w();
        return dest;
    }
    public Vector4d div(Vector4dc v) {
        return div(v, this);
    }
    public Vector4d div(Vector4dc v, Vector4d dest) {
        dest.x = x / v.x();
        dest.y = y / v.y();
        dest.z = z / v.z();
        dest.w = w / v.w();
        return dest;
    }
    public Vector4d mul(Vector4fc v) {
        return mul(v, this);
    }
    public Vector4d mul(Vector4fc v, Vector4d dest) {
        dest.x = x * v.x();
        dest.y = y * v.y();
        dest.z = z * v.z();
        dest.w = w * v.w();
        return dest;
    }
    public Vector4d mul(Matrix4dc mat) {
        return mul(mat, this);
    }
    public Vector4d mul(Matrix4dc mat, Vector4d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4dc.PROPERTY_TRANSLATION) != 0)
            return mulTranslation(mat, dest);
        if ((prop & Matrix4dc.PROPERTY_AFFINE) != 0)
            return mulAffine(mat, dest);
        return mulGeneric(mat, dest);
    }
    public Vector4d mulTranspose(Matrix4dc mat) {
        return mulTranspose(mat, this);
    }
    public Vector4d mulTranspose(Matrix4dc mat, Vector4d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4dc.PROPERTY_AFFINE) != 0)
            return mulAffineTranspose(mat, dest);
        return mulGenericTranspose(mat, dest);
    }
    public Vector4d mulTranslation(Matrix4dc mat, Vector4d dest) {
        double x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m30(), w, x);
        dest.y = Math.fma(mat.m31(), w, y);
        dest.z = Math.fma(mat.m32(), w, z);
        dest.w = w;
        return dest;
    }
    public Vector4d mulTranslation(Matrix4fc mat, Vector4d dest) {
        double x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m30(), w, x);
        dest.y = Math.fma(mat.m31(), w, y);
        dest.z = Math.fma(mat.m32(), w, z);
        dest.w = w;
        return dest;
    }
    public Vector4d mulAffine(Matrix4dc mat, Vector4d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = w;
        return dest;
    }
    public Vector4d mulGeneric(Matrix4dc mat) {
        return mulGeneric(mat, this);
    }
    public Vector4d mulGeneric(Matrix4dc mat, Vector4d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        double rw = Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = rw;
        return dest;
    }
    public Vector4d mulAffineTranspose(Matrix4dc mat, Vector4d dest) {
        double x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, mat.m02() * z));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, mat.m12() * z));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, mat.m22() * z));
        dest.w = Math.fma(mat.m30(), x, Math.fma(mat.m31(), y, mat.m32() * z + w));
        return dest;
    }
    public Vector4d mulGenericTranspose(Matrix4dc mat, Vector4d dest) {
        double x = this.x, y = this.y, z = this.z, w = this.w;
        dest.x = Math.fma(mat.m00(), x, Math.fma(mat.m01(), y, Math.fma(mat.m02(), z, mat.m03() * w)));
        dest.y = Math.fma(mat.m10(), x, Math.fma(mat.m11(), y, Math.fma(mat.m12(), z, mat.m13() * w)));
        dest.z = Math.fma(mat.m20(), x, Math.fma(mat.m21(), y, Math.fma(mat.m22(), z, mat.m23() * w)));
        dest.w = Math.fma(mat.m30(), x, Math.fma(mat.m31(), y, Math.fma(mat.m32(), z, mat.m33() * w)));
        return dest;
    }
    public Vector4d mul(Matrix4x3dc mat) {
        return mul(mat, this);
    }
    public Vector4d mul(Matrix4x3dc mat, Vector4d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4x3dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4x3dc.PROPERTY_TRANSLATION) != 0)
            return mulTranslation(mat, dest);
        return mulGeneric(mat, dest);
    }
    public Vector4d mulGeneric(Matrix4x3dc mat, Vector4d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = w;
        return dest;
    }
    public Vector4d mulTranslation(Matrix4x3dc mat, Vector4d dest) {
        dest.x = Math.fma(mat.m30(), w, x);
        dest.y = Math.fma(mat.m31(), w, y);
        dest.z = Math.fma(mat.m32(), w, z);
        dest.w = w;
        return dest;
    }
    public Vector4d mul(Matrix4x3fc mat) {
        return mul(mat, this);
    }
    public Vector4d mul(Matrix4x3fc mat, Vector4d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4x3dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4x3dc.PROPERTY_TRANSLATION) != 0)
            return mulTranslation(mat, dest);
        return mulGeneric(mat, dest);
    }
    public Vector4d mulGeneric(Matrix4x3fc mat, Vector4d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = w;
        return dest;
    }
    public Vector4d mulTranslation(Matrix4x3fc mat, Vector4d dest) {
        dest.x = Math.fma(mat.m30(), w, x);
        dest.y = Math.fma(mat.m31(), w, y);
        dest.z = Math.fma(mat.m32(), w, z);
        dest.w = w;
        return dest;
    }
    public Vector4d mul(Matrix4fc mat) {
        return mul(mat, this);
    }
    public Vector4d mul(Matrix4fc mat, Vector4d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4fc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4fc.PROPERTY_TRANSLATION) != 0)
            return mulTranslation(mat, dest);
        if ((prop & Matrix4fc.PROPERTY_AFFINE) != 0)
            return mulAffine(mat, dest);
        return mulGeneric(mat, dest);
    }
    public Vector4d mulAffine(Matrix4fc mat) {
        return mulAffine(mat, this);
    }
    public Vector4d mulAffine(Matrix4fc mat, Vector4d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = w;
        return dest;
    }
    public Vector4d mulGeneric(Matrix4fc mat) {
        return mulGeneric(mat, this);
    }
    public Vector4d mulGeneric(Matrix4fc mat, Vector4d dest) {
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w)));
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w)));
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w)));
        double rw = Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = rw;
        return dest;
    }
    public Vector4d mulProjectGeneric(Matrix4dc mat) {
        return mulProjectGeneric(mat, this);
    }
    public Vector4d mulProjectGeneric(Matrix4dc mat, Vector4d dest) {
        double invW = 1.0 / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = 1.0;
        return dest;
    }
    public Vector4d mulProjectTranslation(Matrix4dc mat) {
        return mulProjectTranslation(mat, this);
    }
    public Vector4d mulProjectTranslation(Matrix4dc mat, Vector4d dest) {
        double invW = 1.0 / w;
        double rx = Math.fma(mat.m00(), x, mat.m30() * w) * invW;
        double ry = Math.fma(mat.m11(), y, mat.m31() * w) * invW;
        double rz = Math.fma(mat.m22(), z, mat.m32() * w) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = 1.0;
        return dest;
    }
    public Vector3d mulProjectTranslation(Matrix4dc mat, Vector3d dest) {
        double invW = 1.0 / w;
        double rx = Math.fma(mat.m00(), x, mat.m30() * w) * invW;
        double ry = Math.fma(mat.m11(), y, mat.m31() * w) * invW;
        double rz = Math.fma(mat.m22(), z, mat.m32() * w) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4d mulProjectAffine(Matrix4dc mat) {
        return mulProjectAffine(mat, this);
    }
    public Vector4d mulProjectAffine(Matrix4dc mat, Vector4d dest) {
        double invW = 1.0 / w;
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        dest.w = 1.0;
        return dest;
    }
    public Vector3d mulProjectAffine(Matrix4dc mat, Vector3d dest) {
        double invW = 1.0 / w;
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4d mulProject(Matrix4dc mat) {
        return mulProject(mat, this);
    }
    public Vector4d mulProject(Matrix4dc mat, Vector4d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4dc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4dc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector3d mulProject(Matrix4dc mat, Vector3d dest) {
        int prop = mat.properties();
        if ((prop & Matrix4dc.PROPERTY_IDENTITY) != 0)
            return dest.set(this);
        if ((prop & Matrix4dc.PROPERTY_TRANSLATION) != 0)
            return mulProjectTranslation(mat, dest);
        if ((prop & Matrix4dc.PROPERTY_AFFINE) != 0)
            return mulProjectAffine(mat, dest);
        return mulProjectGeneric(mat, dest);
    }
    public Vector3d mulProjectGeneric(Matrix4dc mat, Vector3d dest) {
        double invW = 1.0 / Math.fma(mat.m03(), x, Math.fma(mat.m13(), y, Math.fma(mat.m23(), z, mat.m33() * w)));
        double rx = Math.fma(mat.m00(), x, Math.fma(mat.m10(), y, Math.fma(mat.m20(), z, mat.m30() * w))) * invW;
        double ry = Math.fma(mat.m01(), x, Math.fma(mat.m11(), y, Math.fma(mat.m21(), z, mat.m31() * w))) * invW;
        double rz = Math.fma(mat.m02(), x, Math.fma(mat.m12(), y, Math.fma(mat.m22(), z, mat.m32() * w))) * invW;
        dest.x = rx;
        dest.y = ry;
        dest.z = rz;
        return dest;
    }
    public Vector4d mul(double scalar) {
        return mul(scalar, this);
    }
    public Vector4d mul(double scalar, Vector4d dest) {
        dest.x = x * scalar;
        dest.y = y * scalar;
        dest.z = z * scalar;
        dest.w = w * scalar;
        return dest;
    }
    public Vector4d div(double scalar) {
        return div(scalar, this);
    }
    public Vector4d div(double scalar, Vector4d dest) {
        double inv = 1.0 / scalar;
        dest.x = x * inv;
        dest.y = y * inv;
        dest.z = z * inv;
        dest.w = w * inv;
        return dest;
    }
    public Vector4d rotate(Quaterniondc quat) {
        quat.transform(this, this);
        return this;
    }
    public Vector4d rotate(Quaterniondc quat, Vector4d dest) {
        quat.transform(this, dest);
        return dest;
    }
    public Vector4d rotateAxis(double angle, double x, double y, double z) {
        return rotateAxis(angle, x, y, z, this);
    }
    public Vector4d rotateAxis(double angle, double aX, double aY, double aZ, Vector4d dest) {
        if (aY == 0.0 && aZ == 0.0 && Math.absEqualsOne(aX))
            return rotateX(aX * angle, dest);
        else if (aX == 0.0 && aZ == 0.0 && Math.absEqualsOne(aY))
            return rotateY(aY * angle, dest);
        else if (aX == 0.0 && aY == 0.0 && Math.absEqualsOne(aZ))
            return rotateZ(aZ * angle, dest);
        return rotateAxisInternal(angle, aX, aY, aZ, dest);
    }
    private Vector4d rotateAxisInternal(double angle, double aX, double aY, double aZ, Vector4d dest) {
        double hangle = angle * 0.5;
        double sinAngle = Math.sin(hangle);
        double qx = aX * sinAngle, qy = aY * sinAngle, qz = aZ * sinAngle;
        double qw = Math.cosFromSin(sinAngle, hangle);
        double w2 = qw * qw, x2 = qx * qx, y2 = qy * qy, z2 = qz * qz, zw = qz * qw;
        double xy = qx * qy, xz = qx * qz, yw = qy * qw, yz = qy * qz, xw = qx * qw;
        double nx = (w2 + x2 - z2 - y2) * x + (-zw + xy - zw + xy) * y + (yw + xz + xz + yw) * z;
        double ny = (xy + zw + zw + xy) * x + ( y2 - z2 + w2 - x2) * y + (yz + yz - xw - xw) * z;
        double nz = (xz - yw + xz - yw) * x + ( yz + yz + xw + xw) * y + (z2 - y2 - x2 + w2) * z;
        dest.x = nx;
        dest.y = ny;
        dest.z = nz;
        return dest;
    }
    public Vector4d rotateX(double angle) {
        return rotateX(angle, this);
    }
    public Vector4d rotateX(double angle, Vector4d dest) {
        double sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        double y = this.y * cos - this.z * sin;
        double z = this.y * sin + this.z * cos;
        dest.x = this.x;
        dest.y = y;
        dest.z = z;
        dest.w = this.w;
        return dest;
    }
    public Vector4d rotateY(double angle) {
        return rotateY(angle, this);
    }
    public Vector4d rotateY(double angle, Vector4d dest) {
        double sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        double x =  this.x * cos + this.z * sin;
        double z = -this.x * sin + this.z * cos;
        dest.x = x;
        dest.y = this.y;
        dest.z = z;
        dest.w = this.w;
        return dest;
    }
    public Vector4d rotateZ(double angle) {
        return rotateZ(angle, this);
    }
    public Vector4d rotateZ(double angle, Vector4d dest) {
        double sin = Math.sin(angle), cos = Math.cosFromSin(sin, angle);
        double x = this.x * cos - this.y * sin;
        double y = this.x * sin + this.y * cos;
        dest.x = x;
        dest.y = y;
        dest.z = this.z;
        dest.w = this.w;
        return dest;
    }
    public double lengthSquared() {
        return Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
    }
    public static double lengthSquared(double x, double y, double z, double w) {
        return Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
    }
    public double length() {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
    }
    public static double length(double x, double y, double z, double w) {
        return Math.sqrt(Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w))));
    }
    public Vector4d normalize() {
        return normalize(this);
    }
    public Vector4d normalize(Vector4d dest) {
        double invLength = 1.0 / length();
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        dest.w = w * invLength;
        return dest;
    }
    public Vector4d normalize(double length) {
        return normalize(length, this);
    }
    public Vector4d normalize(double length, Vector4d dest) {
        double invLength = 1.0 / length() * length;
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        dest.w = w * invLength;
        return dest;
    }
    public Vector4d normalize3() {
        return normalize3(this);
    }
    public Vector4d normalize3(Vector4d dest) {
        double invLength = Math.invsqrt(Math.fma(x, x, Math.fma(y, y, z * z)));
        dest.x = x * invLength;
        dest.y = y * invLength;
        dest.z = z * invLength;
        dest.w = w * invLength;
        return dest;
    }
    public double distance(Vector4dc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        double dz = this.z - v.z();
        double dw = this.w - v.w();
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public double distance(double x, double y, double z, double w) {
        double dx = this.x - x;
        double dy = this.y - y;
        double dz = this.z - z;
        double dw = this.w - w;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public double distanceSquared(Vector4dc v) {
        double dx = this.x - v.x();
        double dy = this.y - v.y();
        double dz = this.z - v.z();
        double dw = this.w - v.w();
        return Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw)));
    }
    public double distanceSquared(double x, double y, double z, double w) {
        double dx = this.x - x;
        double dy = this.y - y;
        double dz = this.z - z;
        double dw = this.w - w;
        return Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw)));
    }
    public static double distance(double x1, double y1, double z1, double w1, double x2, double y2, double z2, double w2) {
        double dx = x1 - x2;
        double dy = y1 - y2;
        double dz = z1 - z2;
        double dw = w1 - w2;
        return Math.sqrt(Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw))));
    }
    public static double distanceSquared(double x1, double y1, double z1, double w1, double x2, double y2, double z2, double w2) {
        double dx = x1 - x2;
        double dy = y1 - y2;
        double dz = z1 - z2;
        double dw = w1 - w2;
        return Math.fma(dx, dx, Math.fma(dy, dy, Math.fma(dz, dz, dw * dw)));
    }
    public double dot(Vector4dc v) {
        return Math.fma(this.x, v.x(), Math.fma(this.y, v.y(), Math.fma(this.z, v.z(), this.w * v.w())));
    }
    public double dot(double x, double y, double z, double w) {
        return Math.fma(this.x, x, Math.fma(this.y, y, Math.fma(this.z, z, this.w * w)));
    }
    public double angleCos(Vector4dc v) {
        double length1Squared = Math.fma(x, x, Math.fma(y, y, Math.fma(z, z, w * w)));
        double length2Squared = Math.fma(v.x(), v.x(), Math.fma(v.y(), v.y(), Math.fma(v.z(), v.z(), v.w() * v.w())));
        double dot = Math.fma(x, v.x(), Math.fma(y, v.y(), Math.fma(z, v.z(), w * v.w())));
        return dot / Math.sqrt(length1Squared * length2Squared);
    }
    public double angle(Vector4dc v) {
        double cos = angleCos(v);
        cos = cos < 1 ? cos : 1;
        cos = cos > -1 ? cos : -1;
        return Math.acos(cos);
    }
    public Vector4d zero() {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
        return this;
    }
    public Vector4d negate() {
        return negate(this);
    }
    public Vector4d negate(Vector4d dest) {
        dest.x = -x;
        dest.y = -y;
        dest.z = -z;
        dest.w = -w;
        return dest;
    }
    public Vector4d min(Vector4dc v) {
        return min(v, this);
    }
    public Vector4d min(Vector4dc v, Vector4d dest) {
        dest.x = x < v.x() ? x : v.x();
        dest.y = y < v.y() ? y : v.y();
        dest.z = z < v.z() ? z : v.z();
        dest.w = w < v.w() ? w : v.w();
        return dest;
    }
    public Vector4d max(Vector4dc v) {
        return max(v, this);
    }
    public Vector4d max(Vector4dc v, Vector4d dest) {
        dest.x = x > v.x() ? x : v.x();
        dest.y = y > v.y() ? y : v.y();
        dest.z = z > v.z() ? z : v.z();
        dest.w = w > v.w() ? w : v.w();
        return dest;
    }
    public String toString() {
        return Runtime.formatNumbers(toString(Options.NUMBER_FORMAT));
    }
    public String toString(NumberFormat formatter) {
        return "(" + Runtime.format(x, formatter) + " " + Runtime.format(y, formatter) + " " + Runtime.format(z, formatter) + " " + Runtime.format(w, formatter) + ")";
    }
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeDouble(x);
        out.writeDouble(y);
        out.writeDouble(z);
        out.writeDouble(w);
    }
    public void readExternal(ObjectInput in) throws IOException,
            ClassNotFoundException {
        x = in.readDouble();
        y = in.readDouble();
        z = in.readDouble();
        w = in.readDouble();
    }
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(w);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(x);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(y);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(z);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector4d other = (Vector4d) obj;
        if (Double.doubleToLongBits(w) != Double.doubleToLongBits(other.w))
            return false;
        if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
            return false;
        if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
            return false;
        if (Double.doubleToLongBits(z) != Double.doubleToLongBits(other.z))
            return false;
        return true;
    }
    public boolean equals(Vector4dc v, double delta) {
        if (this == v)
            return true;
        if (v == null)
            return false;
        if (getClass() != v.getClass())
            return false;
        if (!Runtime.equals(x, v.x(), delta))
            return false;
        if (!Runtime.equals(y, v.y(), delta))
            return false;
        if (!Runtime.equals(z, v.z(), delta))
            return false;
        if (!Runtime.equals(w, v.w(), delta))
            return false;
        return true;
    }
    public boolean equals(double x, double y, double z, double w) {
        if (Double.doubleToLongBits(this.x) != Double.doubleToLongBits(x))
            return false;
        if (Double.doubleToLongBits(this.y) != Double.doubleToLongBits(y))
            return false;
        if (Double.doubleToLongBits(this.z) != Double.doubleToLongBits(z))
            return false;
        if (Double.doubleToLongBits(this.w) != Double.doubleToLongBits(w))
            return false;
        return true;
    }
    public Vector4d smoothStep(Vector4dc v, double t, Vector4d dest) {
        double t2 = t * t;
        double t3 = t2 * t;
        dest.x = (x + x - v.x() - v.x()) * t3 + (3.0 * v.x() - 3.0 * x) * t2 + x * t + x;
        dest.y = (y + y - v.y() - v.y()) * t3 + (3.0 * v.y() - 3.0 * y) * t2 + y * t + y;
        dest.z = (z + z - v.z() - v.z()) * t3 + (3.0 * v.z() - 3.0 * z) * t2 + z * t + z;
        dest.w = (w + w - v.w() - v.w()) * t3 + (3.0 * v.w() - 3.0 * w) * t2 + w * t + w;
        return dest;
    }
    public Vector4d hermite(Vector4dc t0, Vector4dc v1, Vector4dc t1, double t, Vector4d dest) {
        double t2 = t * t;
        double t3 = t2 * t;
        dest.x = (x + x - v1.x() - v1.x() + t1.x() + t0.x()) * t3 + (3.0 * v1.x() - 3.0 * x - t0.x() - t0.x() - t1.x()) * t2 + x * t + x;
        dest.y = (y + y - v1.y() - v1.y() + t1.y() + t0.y()) * t3 + (3.0 * v1.y() - 3.0 * y - t0.y() - t0.y() - t1.y()) * t2 + y * t + y;
        dest.z = (z + z - v1.z() - v1.z() + t1.z() + t0.z()) * t3 + (3.0 * v1.z() - 3.0 * z - t0.z() - t0.z() - t1.z()) * t2 + z * t + z;
        dest.w = (w + w - v1.w() - v1.w() + t1.w() + t0.w()) * t3 + (3.0 * v1.w() - 3.0 * w - t0.w() - t0.w() - t1.w()) * t2 + w * t + w;
        return dest;
    }
    public Vector4d lerp(Vector4dc other, double t) {
        return lerp(other, t, this);
    }
    public Vector4d lerp(Vector4dc other, double t, Vector4d dest) {
        dest.x = Math.fma(other.x() - x, t, x);
        dest.y = Math.fma(other.y() - y, t, y);
        dest.z = Math.fma(other.z() - z, t, z);
        dest.w = Math.fma(other.w() - w, t, w);
        return dest;
    }
    public double get(int component) throws IllegalArgumentException {
        switch (component) {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        case 3:
            return w;
        default:
            throw new IllegalArgumentException();
        }
    }
    public Vector4i get(int mode, Vector4i dest) {
        dest.x = Math.roundUsing(this.x(), mode);
        dest.y = Math.roundUsing(this.y(), mode);
        dest.z = Math.roundUsing(this.z(), mode);
        dest.w = Math.roundUsing(this.w(), mode);
        return dest;
    }
    public Vector4f get(Vector4f dest) {
        dest.x = (float) this.x();
        dest.y = (float) this.y();
        dest.z = (float) this.z();
        dest.w = (float) this.w();
        return dest;
    }
    public Vector4d get(Vector4d dest) {
        dest.x = this.x();
        dest.y = this.y();
        dest.z = this.z();
        dest.w = this.w();
        return dest;
    }
    public int maxComponent() {
        double absX = Math.abs(x);
        double absY = Math.abs(y);
        double absZ = Math.abs(z);
        double absW = Math.abs(w);
        if (absX >= absY && absX >= absZ && absX >= absW) {
            return 0;
        } else if (absY >= absZ && absY >= absW) {
            return 1;
        } else if (absZ >= absW) {
            return 2;
        }
        return 3;
    }
    public int minComponent() {
        double absX = Math.abs(x);
        double absY = Math.abs(y);
        double absZ = Math.abs(z);
        double absW = Math.abs(w);
        if (absX < absY && absX < absZ && absX < absW) {
            return 0;
        } else if (absY < absZ && absY < absW) {
            return 1;
        } else if (absZ < absW) {
            return 2;
        }
        return 3;
    }
    public Vector4d floor() {
        return floor(this);
    }
    public Vector4d floor(Vector4d dest) {
        dest.x = Math.floor(x);
        dest.y = Math.floor(y);
        dest.z = Math.floor(z);
        dest.w = Math.floor(w);
        return dest;
    }
    public Vector4d ceil() {
        return ceil(this);
    }
    public Vector4d ceil(Vector4d dest) {
        dest.x = Math.ceil(x);
        dest.y = Math.ceil(y);
        dest.z = Math.ceil(z);
        dest.w = Math.ceil(w);
        return dest;
    }
    public Vector4d round() {
        return round(this);
    }
    public Vector4d round(Vector4d dest) {
        dest.x = Math.round(x);
        dest.y = Math.round(y);
        dest.z = Math.round(z);
        dest.w = Math.round(w);
        return dest;
    }
    public boolean isFinite() {
        return Math.isFinite(x) && Math.isFinite(y) && Math.isFinite(z) && Math.isFinite(w);
    }
    public Vector4d absolute() {
        return absolute(this);
    }
    public Vector4d absolute(Vector4d dest) {
        dest.x = Math.abs(x);
        dest.y = Math.abs(y);
        dest.z = Math.abs(z);
        dest.w = Math.abs(w);
        return dest;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}