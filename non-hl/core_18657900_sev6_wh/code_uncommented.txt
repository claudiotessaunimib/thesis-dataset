package org.wicketstuff.jquery.ui.form.datepicker;
import java.util.Date;
import org.apache.wicket.Component;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.extensions.markup.html.form.DateTextField;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.ajax.JQueryAjaxPostBehavior;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
public class AjaxDatePicker extends DatePicker implements IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	public AjaxDatePicker(String id)
	{
		super(id);
	}
	public AjaxDatePicker(String id, Options options)
	{
		super(id, options);
	}
	public AjaxDatePicker(String id, String pattern, Options options)
	{
		super(id, pattern, options);
	}
	public AjaxDatePicker(String id, IModel<Date> model)
	{
		super(id, model);
	}
	public AjaxDatePicker(String id, IModel<Date> model, Options options)
	{
		super(id, model, options);
	}
	public AjaxDatePicker(String id, IModel<Date> model, String pattern, Options options)
	{
		super(id, model, pattern, options);
	}
	@Override
	public final boolean isOnSelectEventEnabled()
	{
		return true;
	}
	@Override
	public final void onSelect(AjaxRequestTarget target, String date)
	{
		this.processInput();
		this.onValueChanged(target);
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
}
package org.wicketstuff.kendo.ui.form.datetime;
import java.util.Date;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
public class AjaxTimePicker extends TimePicker implements IValueChangedListener 
{
	private static final long serialVersionUID = 1L;
	public AjaxTimePicker(String id)
	{
		super(id);
	}
	public AjaxTimePicker(String id, Options options)
	{
		super(id, options);
	}
	public AjaxTimePicker(String id, Locale locale)
	{
		super(id, locale);
	}
	public AjaxTimePicker(String id, Locale locale, Options options)
	{
		super(id, locale, options);
	}
	public AjaxTimePicker(String id, String pattern)
	{
		super(id, pattern);
	}
	public AjaxTimePicker(String id, String pattern, Options options)
	{
		super(id, pattern, options);
	}
	public AjaxTimePicker(String id, final Locale locale, String pattern)
	{
		super(id, locale, pattern);
	}
	public AjaxTimePicker(String id, final Locale locale, final String pattern, Options options)
	{
		super(id, locale, pattern, options);
	}
	public AjaxTimePicker(String id, IModel<Date> model)
	{
		super(id, model);
	}
	public AjaxTimePicker(String id, IModel<Date> model, Options options)
	{
		super(id, model, options);
	}
	public AjaxTimePicker(String id, IModel<Date> model, Locale locale)
	{
		super(id, model, locale);
	}
	public AjaxTimePicker(String id, IModel<Date> model, Locale locale, Options options)
	{
		super(id, model, locale, options);
	}
	public AjaxTimePicker(String id, IModel<Date> model, String pattern)
	{
		super(id, model, pattern);
	}
	public AjaxTimePicker(String id, IModel<Date> model, String pattern, Options options)
	{
		super(id, model, pattern, options);
	}
	public AjaxTimePicker(String id, IModel<Date> model, final Locale locale, String pattern)
	{
		super(id, model, locale, pattern);
	}
	public AjaxTimePicker(String id, IModel<Date> model, final Locale locale, final String pattern, Options options)
	{
		super(id, model, locale, pattern, options);
	}
	protected void onError(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		final IValueChangedListener listener = new IValueChangedListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void onValueChanged(IPartialPageRequestHandler handler)
			{
				AjaxTimePicker.this.processInput();
				if (AjaxTimePicker.this.hasErrorMessage())
				{
					AjaxTimePicker.this.onError(handler);
				}
				else
				{
					AjaxTimePicker.this.onValueChanged(handler);
				}
			}
		};
		return new TimePickerBehavior(selector, this.options, listener);
	}
}
package org.wicketstuff.jquery.ui.form.slider;
import org.apache.wicket.Component;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponentPanel;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.JQueryEvent;
import org.wicketstuff.jquery.core.ajax.IJQueryAjaxAware;
import org.wicketstuff.jquery.core.ajax.JQueryAjaxPostBehavior;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.jquery.ui.ajax.OnChangeAjaxBehavior;
import org.wicketstuff.jquery.ui.ajax.OnChangeAjaxBehavior.ChangeEvent;
public class AjaxRangeSlider extends RangeSlider implements IJQueryAjaxAware, IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	public AjaxRangeSlider(String id)
	{
		super(id);
	}
	public AjaxRangeSlider(String id, IModel<RangeValue> model)
	{
		super(id, model);
	}
	public AjaxRangeSlider(String id, IModel<RangeValue> model, Label label)
	{
		super(id, model, label);
	}
	public AjaxRangeSlider(String id, IModel<RangeValue> model, TextField<Integer> lower, TextField<Integer> upper)
	{
		super(id, model, lower, upper);
	}
	@Override
	public void onAjax(AjaxRequestTarget target, JQueryEvent event)
	{
		if (event instanceof ChangeEvent)
		{
			this.lower.processInput();
			this.upper.processInput();
			this.validate();
			if (this.isValid() && this.lower.isValid() && this.upper.isValid())
			{
				this.onValueChanged(target);
			}
			else
			{
				this.onError(target);
			}
		}
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	protected void onError(AjaxRequestTarget target)
	{
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		return new AjaxSliderBehavior(selector, super.options) {
			private static final long serialVersionUID = 1L;
			@Override
			public void onConfigure(Component component)
			{
				super.onConfigure(component);
				AjaxRangeSlider.this.onConfigure(this); 
			}
			@Override
			public void onAjax(AjaxRequestTarget target, JQueryEvent event)
			{
				AjaxRangeSlider.this.onAjax(target, event);
			}
			@Override
			protected JQueryAjaxPostBehavior newOnChangeAjaxBehavior(IJQueryAjaxAware source)
			{
				return new OnChangeAjaxBehavior(source, AjaxRangeSlider.this.lower, AjaxRangeSlider.this.upper);
			}
		};
	}
}
package org.wicketstuff.kendo.ui.form.datetime;
import java.util.Date;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.ajax.IJQueryAjaxAware;
import org.wicketstuff.jquery.core.ajax.JQueryAjaxPostBehavior;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.kendo.ui.ajax.OnChangeAjaxBehavior;
public class AjaxDateTimePicker extends DateTimePicker implements IValueChangedListener 
{
	private static final long serialVersionUID = 1L;
	public AjaxDateTimePicker(String id)
	{
		super(id);
	}
	public AjaxDateTimePicker(String id, Locale locale)
	{
		super(id, locale);
	}
	public AjaxDateTimePicker(String id, String datePattern, String timePattern)
	{
		super(id, datePattern, timePattern);
	}
	public AjaxDateTimePicker(String id, Locale locale, String datePattern, String timePattern)
	{
		super(id, locale, datePattern, timePattern);
	}
	public AjaxDateTimePicker(String id, IModel<Date> model)
	{
		super(id, model);
	}
	public AjaxDateTimePicker(String id, IModel<Date> model, Locale locale)
	{
		super(id, model, locale);
	}
	public AjaxDateTimePicker(String id, IModel<Date> model, String datePattern, String timePattern)
	{
		super(id, model, datePattern, timePattern);
	}
	public AjaxDateTimePicker(String id, IModel<Date> model, Locale locale, String datePattern, String timePattern)
	{
		super(id, model, locale, datePattern, timePattern);
	}
	protected void onError(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	protected DatePicker newDatePicker(String id, IModel<Date> model, Locale locale, String datePattern, Options options)
	{
		return new AjaxDatePicker(id, model, locale, datePattern, options) { 
			private static final long serialVersionUID = 1L;
			@Override
			protected void onConfigure()
			{
				super.onConfigure();
				this.setEnabled(AjaxDateTimePicker.this.isEnabled());
			}
			@Override
			public void convertInput()
			{
			}
			@Override
			public JQueryBehavior newWidgetBehavior(String selector)
			{
				final IValueChangedListener listener = new IValueChangedListener() {
					private static final long serialVersionUID = 1L;
					@Override
					public void onValueChanged(IPartialPageRequestHandler handler)
					{
						AjaxDateTimePicker.this.processInput();
						if (AjaxDateTimePicker.this.hasErrorMessage())
						{
							AjaxDateTimePicker.this.onError(handler);
						}
						else
						{
							AjaxDateTimePicker.this.onValueChanged(handler);
						}
					}
				};
				return new DatePickerBehavior(selector, this.options, listener) { 
					private static final long serialVersionUID = 1L;
					@Override
					protected JQueryAjaxPostBehavior newOnChangeAjaxBehavior(IJQueryAjaxAware source)
					{
						return new OnChangeAjaxBehavior(source, AjaxDateTimePicker.this.datePicker, AjaxDateTimePicker.this.timePicker);
					}
				};
			}
		};
	}
	@Override
	protected TimePicker newTimePicker(String id, IModel<Date> model, Locale locale, String timePattern, Options options)
	{
		return new AjaxTimePicker(id, model, locale, timePattern, options) { 
			private static final long serialVersionUID = 1L;
			@Override
			protected void onConfigure()
			{
				super.onConfigure();
				this.setEnabled(AjaxDateTimePicker.this.isEnabled() && AjaxDateTimePicker.this.isTimePickerEnabled());
			}
			@Override
			public void convertInput()
			{
			}
			@Override
			public JQueryBehavior newWidgetBehavior(String selector)
			{
				final IValueChangedListener listener = new IValueChangedListener() {
					private static final long serialVersionUID = 1L;
					@Override
					public void onValueChanged(IPartialPageRequestHandler handler)
					{
						AjaxDateTimePicker.this.processInput();
						if (AjaxDateTimePicker.this.hasErrorMessage())
						{
							AjaxDateTimePicker.this.onError(handler);
						}
						else
						{
							AjaxDateTimePicker.this.onValueChanged(handler);
						}
					}
				};
				return new TimePickerBehavior(selector, this.options, listener) { 
					private static final long serialVersionUID = 1L;
					@Override
					protected JQueryAjaxPostBehavior newOnChangeAjaxBehavior(IJQueryAjaxAware source)
					{
						return new OnChangeAjaxBehavior(source, AjaxDateTimePicker.this.datePicker, AjaxDateTimePicker.this.timePicker);
					}
				};
			}
		};
	}
}
package org.wicketstuff.kendo.ui.form.datetime;
import java.util.Date;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
public class AjaxDatePicker extends DatePicker implements IValueChangedListener 
{
	private static final long serialVersionUID = 1L;
	public AjaxDatePicker(String id)
	{
		super(id);
	}
	public AjaxDatePicker(String id, Options options)
	{
		super(id, options);
	}
	public AjaxDatePicker(String id, Locale locale)
	{
		super(id, locale);
	}
	public AjaxDatePicker(String id, Locale locale, Options options)
	{
		super(id, locale, options);
	}
	public AjaxDatePicker(String id, String pattern)
	{
		super(id, pattern);
	}
	public AjaxDatePicker(String id, String pattern, Options options)
	{
		super(id, pattern, options);
	}
	public AjaxDatePicker(String id, final Locale locale, String pattern)
	{
		super(id, locale, pattern);
	}
	public AjaxDatePicker(String id, final Locale locale, final String pattern, Options options)
	{
		super(id, locale, pattern, options);
	}
	public AjaxDatePicker(String id, IModel<Date> model)
	{
		super(id, model);
	}
	public AjaxDatePicker(String id, IModel<Date> model, Options options)
	{
		super(id, model, options);
	}
	public AjaxDatePicker(String id, IModel<Date> model, Locale locale)
	{
		super(id, model, locale);
	}
	public AjaxDatePicker(String id, IModel<Date> model, Locale locale, Options options)
	{
		super(id, model, locale, options);
	}
	public AjaxDatePicker(String id, IModel<Date> model, String pattern)
	{
		super(id, model, pattern);
	}
	public AjaxDatePicker(String id, IModel<Date> model, String pattern, Options options)
	{
		super(id, model, pattern, options);
	}
	public AjaxDatePicker(String id, IModel<Date> model, final Locale locale, String pattern)
	{
		super(id, model, locale, pattern);
	}
	public AjaxDatePicker(String id, IModel<Date> model, final Locale locale, final String pattern, Options options)
	{
		super(id, model, locale, pattern, options);
	}
	protected void onError(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		final IValueChangedListener listener = new IValueChangedListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void onValueChanged(IPartialPageRequestHandler handler)
			{
				AjaxDatePicker.this.processInput();
				if (AjaxDatePicker.this.hasErrorMessage())
				{
					AjaxDatePicker.this.onError(handler);
				}
				else
				{
					AjaxDatePicker.this.onValueChanged(handler);
				}
			}
		};
		return new DatePickerBehavior(selector, this.options, listener);
	}
}
package org.wicketstuff.kendo.ui.form.datetime.local;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.ajax.IJQueryAjaxAware;
import org.wicketstuff.jquery.core.ajax.JQueryAjaxPostBehavior;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.kendo.ui.ajax.OnChangeAjaxBehavior;
import org.wicketstuff.kendo.ui.form.datetime.DatePickerBehavior;
import org.wicketstuff.kendo.ui.form.datetime.TimePickerBehavior;
public class AjaxDateTimePicker extends DateTimePicker implements IValueChangedListener 
{
	private static final long serialVersionUID = 1L;
	public AjaxDateTimePicker(String id)
	{
		super(id);
	}
	public AjaxDateTimePicker(String id, Locale locale)
	{
		super(id, locale);
	}
	public AjaxDateTimePicker(String id, String datePattern, String timePattern)
	{
		super(id, datePattern, timePattern);
	}
	public AjaxDateTimePicker(String id, Locale locale, String datePattern, String timePattern)
	{
		super(id, locale, datePattern, timePattern);
	}
	public AjaxDateTimePicker(String id, IModel<LocalDateTime> model)
	{
		super(id, model);
	}
	public AjaxDateTimePicker(String id, IModel<LocalDateTime> model, Locale locale)
	{
		super(id, model, locale);
	}
	public AjaxDateTimePicker(String id, IModel<LocalDateTime> model, String datePattern, String timePattern)
	{
		super(id, model, datePattern, timePattern);
	}
	public AjaxDateTimePicker(String id, IModel<LocalDateTime> model, Locale locale, String datePattern, String timePattern)
	{
		super(id, model, locale, datePattern, timePattern);
	}
	protected void onError(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	protected DatePicker newDatePicker(String id, IModel<LocalDate> model, Locale locale, String datePattern, Options options)
	{
		return new AjaxDatePicker(id, model, locale, datePattern, options) { 
			private static final long serialVersionUID = 1L;
			@Override
			protected void onConfigure()
			{
				super.onConfigure();
				this.setEnabled(AjaxDateTimePicker.this.isEnabled());
			}
			@Override
			public void convertInput()
			{
			}
			@Override
			public JQueryBehavior newWidgetBehavior(String selector)
			{
				final IValueChangedListener listener = new IValueChangedListener() {
					private static final long serialVersionUID = 1L;
					@Override
					public void onValueChanged(IPartialPageRequestHandler handler)
					{
						AjaxDateTimePicker.this.processInput();
						if (AjaxDateTimePicker.this.hasErrorMessage())
						{
							AjaxDateTimePicker.this.onError(handler);
						}
						else
						{
							AjaxDateTimePicker.this.onValueChanged(handler);
						}
					}
				};
				return new DatePickerBehavior(selector, this.options, listener) { 
					private static final long serialVersionUID = 1L;
					@Override
					protected JQueryAjaxPostBehavior newOnChangeAjaxBehavior(IJQueryAjaxAware source)
					{
						return new OnChangeAjaxBehavior(source, AjaxDateTimePicker.this.datePicker, AjaxDateTimePicker.this.timePicker);
					}
				};
			}
		};
	}
	@Override
	protected TimePicker newTimePicker(String id, IModel<LocalTime> model, Locale locale, String timePattern, Options options)
	{
		return new AjaxTimePicker(id, model, locale, timePattern, options) { 
			private static final long serialVersionUID = 1L;
			@Override
			protected void onConfigure()
			{
				super.onConfigure();
				this.setEnabled(AjaxDateTimePicker.this.isEnabled() && AjaxDateTimePicker.this.isTimePickerEnabled());
			}
			@Override
			public void convertInput()
			{
			}
			@Override
			public JQueryBehavior newWidgetBehavior(String selector)
			{
				final IValueChangedListener listener = new IValueChangedListener() {
					private static final long serialVersionUID = 1L;
					@Override
					public void onValueChanged(IPartialPageRequestHandler handler)
					{
						AjaxDateTimePicker.this.processInput();
						if (AjaxDateTimePicker.this.hasErrorMessage())
						{
							AjaxDateTimePicker.this.onError(handler);
						}
						else
						{
							AjaxDateTimePicker.this.onValueChanged(handler);
						}
					}
				};
				return new TimePickerBehavior(selector, this.options, listener) { 
					private static final long serialVersionUID = 1L;
					@Override
					protected JQueryAjaxPostBehavior newOnChangeAjaxBehavior(IJQueryAjaxAware source)
					{
						return new OnChangeAjaxBehavior(source, AjaxDateTimePicker.this.datePicker, AjaxDateTimePicker.this.timePicker);
					}
				};
			}
		};
	}
}
package org.wicketstuff.kendo.ui.form.datetime.local;
import java.time.LocalTime;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.kendo.ui.form.datetime.TimePickerBehavior;
public class AjaxTimePicker extends TimePicker implements IValueChangedListener 
{
	private static final long serialVersionUID = 1L;
	public AjaxTimePicker(String id)
	{
		super(id);
	}
	public AjaxTimePicker(String id, Options options)
	{
		super(id, options);
	}
	public AjaxTimePicker(String id, Locale locale)
	{
		super(id, locale);
	}
	public AjaxTimePicker(String id, Locale locale, Options options)
	{
		super(id, locale, options);
	}
	public AjaxTimePicker(String id, String pattern)
	{
		super(id, pattern);
	}
	public AjaxTimePicker(String id, String pattern, Options options)
	{
		super(id, pattern, options);
	}
	public AjaxTimePicker(String id, final Locale locale, String pattern)
	{
		super(id, locale, pattern);
	}
	public AjaxTimePicker(String id, final Locale locale, final String pattern, Options options)
	{
		super(id, locale, pattern, options);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model)
	{
		super(id, model);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, Options options)
	{
		super(id, model, options);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, Locale locale)
	{
		super(id, model, locale);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, Locale locale, Options options)
	{
		super(id, model, locale, options);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, String pattern)
	{
		super(id, model, pattern);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, String pattern, Options options)
	{
		super(id, model, pattern, options);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, final Locale locale, String pattern)
	{
		super(id, model, locale, pattern);
	}
	public AjaxTimePicker(String id, IModel<LocalTime> model, final Locale locale, final String pattern, Options options)
	{
		super(id, model, locale, pattern, options);
	}
	protected void onError(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		final IValueChangedListener listener = new IValueChangedListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void onValueChanged(IPartialPageRequestHandler handler)
			{
				AjaxTimePicker.this.processInput();
				if (AjaxTimePicker.this.hasErrorMessage())
				{
					AjaxTimePicker.this.onError(handler);
				}
				else
				{
					AjaxTimePicker.this.onValueChanged(handler);
				}
			}
		};
		return new TimePickerBehavior(selector, this.options, listener);
	}
}
package org.wicketstuff.kendo.ui.form.datetime.local;
import java.time.LocalDate;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.kendo.ui.form.datetime.DatePickerBehavior;
public class AjaxDatePicker extends DatePicker implements IValueChangedListener 
{
	private static final long serialVersionUID = 1L;
	public AjaxDatePicker(String id)
	{
		super(id);
	}
	public AjaxDatePicker(String id, Options options)
	{
		super(id, options);
	}
	public AjaxDatePicker(String id, Locale locale)
	{
		super(id, locale);
	}
	public AjaxDatePicker(String id, Locale locale, Options options)
	{
		super(id, locale, options);
	}
	public AjaxDatePicker(String id, String pattern)
	{
		super(id, pattern);
	}
	public AjaxDatePicker(String id, String pattern, Options options)
	{
		super(id, pattern, options);
	}
	public AjaxDatePicker(String id, final Locale locale, String pattern)
	{
		super(id, locale, pattern);
	}
	public AjaxDatePicker(String id, final Locale locale, final String pattern, Options options)
	{
		super(id, locale, pattern, options);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model)
	{
		super(id, model);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, Options options)
	{
		super(id, model, options);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, Locale locale)
	{
		super(id, model, locale);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, Locale locale, Options options)
	{
		super(id, model, locale, options);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, String pattern)
	{
		super(id, model, pattern);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, String pattern, Options options)
	{
		super(id, model, pattern, options);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, final Locale locale, String pattern)
	{
		super(id, model, locale, pattern);
	}
	public AjaxDatePicker(String id, IModel<LocalDate> model, final Locale locale, final String pattern, Options options)
	{
		super(id, model, locale, pattern, options);
	}
	protected void onError(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		final IValueChangedListener listener = new IValueChangedListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void onValueChanged(IPartialPageRequestHandler handler)
			{
				AjaxDatePicker.this.processInput();
				if (AjaxDatePicker.this.hasErrorMessage())
				{
					AjaxDatePicker.this.onError(handler);
				}
				else
				{
					AjaxDatePicker.this.onValueChanged(handler);
				}
			}
		};
		return new DatePickerBehavior(selector, this.options, listener);
	}
}
package org.wicketstuff.jquery.ui.widget.progressbar;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.apache.wicket.util.lang.Args;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.JQueryEvent;
import org.wicketstuff.jquery.core.JQueryGenericContainer;
import org.wicketstuff.jquery.core.ajax.IJQueryAjaxAware;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.jquery.ui.ajax.OnChangeAjaxBehavior.ChangeEvent;
public class ProgressBar extends JQueryGenericContainer<Integer> implements IJQueryAjaxAware, IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	private static final int MIN = 0;
	private static final int MAX = 100;
	public ProgressBar(String id)
	{
		super(id);
	}
	public ProgressBar(String id, IModel<Integer> model)
	{
		super(id, model);
	}
	@Override
	public JQueryGenericContainer<Integer> setModelObject(Integer value)
	{
		Integer v = Args.notNull(value, "value");
		if (v < MIN)
		{
			v = MIN;
		}
		else if (v > MAX)
		{
			v = MAX;
		}
		return super.setModelObject(v);
	}
	public void forward(IPartialPageRequestHandler handler)
	{
		this.forward(handler, 1);
	}
	public final void forward(IPartialPageRequestHandler handler, int step)
	{
		this.setModelObject(this.getModelObject() + step);
		this.refresh(handler);
	}
	public final void backward(IPartialPageRequestHandler handler)
	{
		this.backward(handler, 1);
	}
	public final void backward(IPartialPageRequestHandler handler, int step)
	{
		this.setModelObject(this.getModelObject() - step);
		this.refresh(handler);
	}
	public final void refresh(IPartialPageRequestHandler handler)
	{
		handler.appendJavaScript(this.widgetBehavior.toString()); 
	}
	@Override
	public void onAjax(AjaxRequestTarget target, JQueryEvent event)
	{
		if (event instanceof ChangeEvent)
		{
			this.onValueChanged(target);
			if (this.getModelObject() == ProgressBar.MAX)
			{
				this.onComplete(target);
			}
		}
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	protected void onComplete(AjaxRequestTarget target)
	{
	}
	@Override
	protected void onModelChanged()
	{
		this.widgetBehavior.setOption("value", this.getModelObject()); 
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		return new ProgressBarBehavior(selector) {
			private static final long serialVersionUID = 1L;
			@Override
			public void onAjax(AjaxRequestTarget target, JQueryEvent event)
			{
				ProgressBar.this.onAjax(target, event);
			}
		};
	}
}
package org.wicketstuff.kendo.ui.widget.progressbar;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
public interface IProgressBarListener extends IValueChangedListener
{
	void onComplete(IPartialPageRequestHandler handler);
}
package org.wicketstuff.jquery.ui.plugins.datepicker;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.markup.html.form.FormComponentPanel;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.apache.wicket.util.convert.ConversionException;
import org.apache.wicket.util.convert.IConverter;
import org.apache.wicket.util.lang.Args;
import org.wicketstuff.jquery.core.JQueryAbstractBehavior;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.jquery.core.utils.DateUtils;
@Deprecated
public class RangeDatePickerTextField extends FormComponentPanel<DateRange> implements IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	private static final String SEPARATOR = " - ";
	private TextField<DateRange> input;
	private RangeDatePicker datepicker;
	protected final Options options;
	public RangeDatePickerTextField(String id)
	{
		this(id, new Options("calendars", 3));
	}
	public RangeDatePickerTextField(String id, final Options options)
	{
		super(id);
		this.options = Args.notNull(options, "options");
	}
	public RangeDatePickerTextField(String id, IModel<DateRange> model)
	{
		this(id, model, new Options("calendars", 3));
	}
	public RangeDatePickerTextField(String id, IModel<DateRange> model, final Options options)
	{
		super(id, model);
		this.options = Args.notNull(options, "options");
	}
	@Override
	public void convertInput()
	{
		this.setConvertedInput(this.input.getConvertedInput());
	}
	protected String getSeparator()
	{
		return SEPARATOR;
	}
	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		this.input = this.newTextField("text", this.getModel());
		this.input.setOutputMarkupId(true);
		this.input.add(this.newToggleBehavior());
		this.add(this.input);
		this.datepicker = new RangeDatePicker("datepicker", this.getModel(), this.options) {
			private static final long serialVersionUID = 1L;
			@Override
			public void onValueChanged(IPartialPageRequestHandler handler)
			{
				RangeDatePickerTextField.this.input.modelChanged();
				RangeDatePickerTextField.this.onValueChanged(handler);
				handler.add(RangeDatePickerTextField.this.input);
			}
		};
		this.add(this.datepicker);
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	protected DateFormat newDateFormat(Locale locale)
	{
		DateFormat df = new SimpleDateFormat("dd MMM yyyy", locale);
		df.setTimeZone(DateUtils.UTC);
		return df;
	}
	protected DateRange newDateRange(Date start, Date end)
	{
		return DateRange.of(start.getTime(), end.getTime());
	}
	private TextField<DateRange> newTextField(String id, IModel<DateRange> model)
	{
		return new TextField<DateRange>(id, model, DateRange.class) {
			private static final long serialVersionUID = 1L;
			@Override
			public <C> IConverter<C> getConverter(Class<C> type)
			{
				if (DateRange.class.isAssignableFrom(type))
				{
					return newConverter();
				}
				return super.getConverter(type);
			}
		};
	}
	@SuppressWarnings("unchecked")
	protected <C> IConverter<C> newConverter()
	{
		return (IConverter<C>) new IConverter<DateRange>() {
			private static final long serialVersionUID = 1L;
			@Override
			public DateRange convertToObject(String value, Locale locale)
			{
				DateFormat df = RangeDatePickerTextField.this.newDateFormat(locale);
				String[] dates = value.split(RangeDatePickerTextField.this.getSeparator());
				try
				{
					return RangeDatePickerTextField.this.newDateRange(df.parse(dates[0]), df.parse(dates[1]));
				}
				catch (ParseException e)
				{
					throw new ConversionException(e.getMessage(), e);
				}
				catch (IndexOutOfBoundsException e)
				{
					throw new ConversionException(e.getMessage(), e);
				}
			}
			@Override
			public String convertToString(DateRange value, Locale locale)
			{
				DateFormat df = RangeDatePickerTextField.this.newDateFormat(locale);
				return String.format("%s%s%s", df.format(value.getStart()), RangeDatePickerTextField.this.getSeparator(), df.format(value.getEnd()));
			}
		};
	}
	private JQueryAbstractBehavior newToggleBehavior()
	{
		return new JQueryAbstractBehavior() {
			private static final long serialVersionUID = 1L;
			@Override
			protected String $()
			{
				StringBuilder statements = new StringBuilder();
				statements.append("jQuery('#").append(input.getMarkupId()).append("').on('click', function() { ");
				statements.append("		jQuery('#").append(datepicker.getMarkupId()).append("').DatePickerShow(); ");
				statements.append("} );");
				return statements.toString();
			}
		};
	}
}
package org.wicketstuff.jquery.ui.plugins.datepicker;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.model.IModel;
import org.apache.wicket.util.lang.Args;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.JQueryGenericContainer;
import org.wicketstuff.jquery.core.Options;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
@Deprecated
public class RangeDatePicker extends JQueryGenericContainer<DateRange> implements IRangeDatePickerListener, IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	protected final Options options;
	public RangeDatePicker(String id, Options options)
	{
		super(id);
		this.options = Args.notNull(options, "options");
	}
	public RangeDatePicker(String id, IModel<DateRange> model, Options options)
	{
		super(id, model);
		this.options = Args.notNull(options, "options");
	}
	@Override
	public void onConfigure(JQueryBehavior behavior)
	{
		behavior.setOption("date", this.getModelObject());
		behavior.setOption("mode", Options.asString("range")); 
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	@Override
	public final void onValueChanged(AjaxRequestTarget target, DateRange range)
	{
		this.setModelObject(range);
		this.onValueChanged(target);
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		return new RangeDatePickerBehavior(selector, this.options, this);
	}
}
package org.wicketstuff.jquery.ui.form.slider;
import org.apache.wicket.Component;
import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
import org.apache.wicket.markup.html.basic.Label;
import org.apache.wicket.markup.html.form.FormComponentPanel;
import org.apache.wicket.markup.html.form.TextField;
import org.apache.wicket.model.IModel;
import org.wicketstuff.jquery.core.JQueryBehavior;
import org.wicketstuff.jquery.core.JQueryEvent;
import org.wicketstuff.jquery.core.ajax.IJQueryAjaxAware;
import org.wicketstuff.jquery.core.ajax.JQueryAjaxPostBehavior;
import org.wicketstuff.jquery.core.event.IValueChangedListener;
import org.wicketstuff.jquery.ui.ajax.OnChangeAjaxBehavior;
import org.wicketstuff.jquery.ui.ajax.OnChangeAjaxBehavior.ChangeEvent;
public class AjaxSlider extends Slider implements IJQueryAjaxAware, IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	public AjaxSlider(String id)
	{
		super(id);
	}
	public AjaxSlider(String id, IModel<Integer> model)
	{
		super(id, model);
	}
	public AjaxSlider(String id, IModel<Integer> model, Label label)
	{
		super(id, model, label);
	}
	public AjaxSlider(String id, IModel<Integer> model, TextField<Integer> input)
	{
		super(id, model, input);
	}
	@Override
	public void onAjax(AjaxRequestTarget target, JQueryEvent event)
	{
		if (event instanceof ChangeEvent)
		{
			this.input.processInput();
			this.validate();
			if (this.isValid() && super.input.isValid())
			{
				this.onValueChanged(target);
			}
			else
			{
				this.onError(target);
			}
		}
	}
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
	protected void onError(AjaxRequestTarget target)
	{
	}
	@Override
	public JQueryBehavior newWidgetBehavior(String selector)
	{
		return new AjaxSliderBehavior(selector, this.options) {
			private static final long serialVersionUID = 1L;
			@Override
			public void onConfigure(Component component)
			{
				super.onConfigure(component);
				AjaxSlider.this.onConfigure(this); 
			}
			@Override
			public void onAjax(AjaxRequestTarget target, JQueryEvent event)
			{
				AjaxSlider.this.onAjax(target, event);
			}
			@Override
			protected JQueryAjaxPostBehavior newOnChangeAjaxBehavior(IJQueryAjaxAware source)
			{
				return new OnChangeAjaxBehavior(source, AjaxSlider.this.input);
			}
		};
	}
}
package org.wicketstuff.jquery.core.event;
import org.apache.wicket.core.request.handler.IPartialPageRequestHandler;
public class ValueChangedAdapter implements IValueChangedListener
{
	private static final long serialVersionUID = 1L;
	@Override
	public void onValueChanged(IPartialPageRequestHandler handler)
	{
	}
}