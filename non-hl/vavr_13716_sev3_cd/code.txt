/* ____  ______________  ________________________  __________
 * \   \/   /      \   \/   /   __/   /      \   \/   /      \
 *  \______/___/\___\______/___/_____/___/\___\______/___/\___\
 *
 * Copyright 2014-2025 Vavr, https://vavr.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vavr.collection;
import io.vavr.*;
import io.vavr.collection.CharSeqModule.Combinations;
import io.vavr.collection.JavaConverters.ListView;
import io.vavr.control.Option;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.*;
import java.util.function.*;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Collector;
import static io.vavr.collection.JavaConverters.ChangePolicy.IMMUTABLE;
import static io.vavr.collection.JavaConverters.ChangePolicy.MUTABLE;
/**
 * The CharSeq (read: character sequence) collection essentially is a rich String wrapper having all operations
 * we know from the functional Vavr collections.
 * <p>
 * <strong>Note:</strong>Because CharSeq represents a sequence of primitive characters (i.e. a String),
 * it breaks the Liskov Substitution Principle in the way, that the CharSeq cannot contain {@code null} elements.
 * In future version of Java, CharSeq should extend IndexedSeq&lt;char&gt; instead.
 *
 * @author Ruslan Sennov, Daniel Dietrich
 */
public final class CharSeq implements CharSequence, IndexedSeq<Character>, Serializable, Comparable<CharSeq> {
    private static final long serialVersionUID = 1L;
    private static final CharSeq EMPTY = new CharSeq("");
    private final String back;
    private CharSeq(String javaString) {
        this.back = javaString;
    }
    public static CharSeq empty() {
        return EMPTY;
    }
    /**
     * Returns a {@link java.util.stream.Collector} which may be used in conjunction with
     * {@link java.util.stream.Stream#collect(java.util.stream.Collector)} to obtain a {@link CharSeq}.
     *
     * @return A {@code CharSeq} Collector.
     */
    public static Collector<Character, ArrayList<Character>, CharSeq> collector() {
        final Supplier<ArrayList<Character>> supplier = ArrayList::new;
        final BiConsumer<ArrayList<Character>, Character> accumulator = ArrayList::add;
        final BinaryOperator<ArrayList<Character>> combiner = (left, right) -> {
            left.addAll(right);
            return left;
        };
        final Function<ArrayList<Character>, CharSeq> finisher = CharSeq::ofAll;
        return Collector.of(supplier, accumulator, combiner, finisher);
    }
    /**
     * Creates a String of {@code CharSequence}.
     *
     * @param sequence {@code CharSequence} instance.
     * @return A new {@link io.vavr.collection.CharSeq}
     */
    // DEV-NOTE: Needs to be 'of' instead of 'ofAll' because 'ofAll(CharSeq)' is ambiguous.
    public static CharSeq of(CharSequence sequence) {
        Objects.requireNonNull(sequence, "sequence is null");
        if (sequence instanceof CharSeq) {
            return (CharSeq) sequence;
        } else {
            return sequence.length() == 0 ? empty() : new CharSeq(sequence.toString());
        }
    }
    /**
     * Returns a singleton {@code CharSeq}, i.e. a {@code CharSeq} of one character.
     *
     * @param character A character.
     * @return A new {@code CharSeq} instance containing the given element
     */
    public static CharSeq of(char character) {
        return new CharSeq(new String(new char[] { character }));
    }
    /**
     * Creates a String of the given characters.
     *
     * @param characters Zero or more characters.
     * @return A string containing the given characters in the same order.
     * @throws NullPointerException if {@code elements} is null
     */
    public static CharSeq of(char... characters) {
        Objects.requireNonNull(characters, "characters is null");
        if (characters.length == 0) {
            return empty();
        } else {
            final char[] chrs = new char[characters.length];
            System.arraycopy(characters, 0, chrs, 0, characters.length);
            return new CharSeq(new String(chrs));
        }
    }
    /**
     * Creates a String of the given elements.
     * <p>
     * The resulting string has the same iteration order as the given iterable of elements
     * if the iteration order of the elements is stable.
     *
     * @param elements An Iterable of elements.
     * @return A string containing the given elements in the same order.
     * @throws NullPointerException if {@code elements} is null or {@code elements} contains null
     */
    @SuppressWarnings("unchecked")
    public static CharSeq ofAll(Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (Collections.isEmpty(elements)){
            return EMPTY;
        }
        if (elements instanceof CharSeq) {
            return (CharSeq) elements;
        }
        if (elements instanceof ListView
                && ((ListView<Character, ?>) elements).getDelegate() instanceof CharSeq) {
            return (CharSeq) ((ListView<Character, ?>) elements).getDelegate();
        }
        final StringBuilder sb = new StringBuilder();
        for (char character : elements) {
            sb.append(character);
        }
        return of(sb);
    }
    /**
     * Returns a CharSeq containing {@code n} values of a given Function {@code f}
     * over a range of integer values from 0 to {@code n - 1}.
     *
     * @param n The number of elements in the CharSeq
     * @param f The Function computing element values
     * @return A CharSeq consisting of elements {@code f(0),f(1), ..., f(n - 1)}
     * @throws NullPointerException if {@code f} is null
     */
    public static CharSeq tabulate(int n, Function<? super Integer, ? extends Character> f) {
        Objects.requireNonNull(f, "f is null");
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(f.apply(i).charValue());
        }
        return of(sb);
    }
    /**
     * Returns a CharSeq containing {@code n} values supplied by a given Supplier {@code s}.
     *
     * @param n The number of elements in the CharSeq
     * @param s The Supplier computing element values
     * @return A CharSeq of size {@code n}, where each element contains the result supplied by {@code s}.
     * @throws NullPointerException if {@code s} is null
     */
    public static CharSeq fill(int n, Supplier<? extends Character> s) {
        return tabulate(n, anything -> s.get());
    }
    /**
     * Creates a CharSeq starting from character {@code from}, extending to character {@code toExclusive - 1}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * CharSeq.range('a', 'c')  // = "ab"
     * CharSeq.range('c', 'a')  // = ""
     * </code>
     * </pre>
     *
     * @param from        the first character
     * @param toExclusive the successor of the last character
     * @return a range of characters as specified or the empty range if {@code from >= toExclusive}
     */
    public static CharSeq range(char from, char toExclusive) {
        return new CharSeq(io.vavr.collection.Iterator.range(from, toExclusive).mkString());
    }
    public static CharSeq rangeBy(char from, char toExclusive, int step) {
        return new CharSeq(io.vavr.collection.Iterator.rangeBy(from, toExclusive, step).mkString());
    }
    /**
     * Creates a CharSeq starting from character {@code from}, extending to character {@code toInclusive}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * CharSeq.rangeClosed('a', 'c')  // = "abc"
     * CharSeq.rangeClosed('c', 'a')  // = ""
     * </code>
     * </pre>
     *
     * @param from        the first character
     * @param toInclusive the last character
     * @return a range of characters as specified or the empty range if {@code from > toInclusive}
     */
    public static CharSeq rangeClosed(char from, char toInclusive) {
        return new CharSeq(io.vavr.collection.Iterator.rangeClosed(from, toInclusive).mkString());
    }
    /**
     * Creates a CharSeq starting from character {@code from}, extending to character {@code toInclusive},
     * with {@code step}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * CharSeq.rangeClosedBy('a', 'c', 1)  // = ('a', 'b', 'c')
     * CharSeq.rangeClosedBy('a', 'd', 2)  // = ('a', 'c')
     * CharSeq.rangeClosedBy('d', 'a', -2) // = ('d', 'b')
     * CharSeq.rangeClosedBy('d', 'a', 2)  // = ()
     * </code>
     * </pre>
     *
     * @param from        the first character
     * @param toInclusive the last character
     * @param step        the step
     * @return a range of characters as specified or the empty range if {@code step * (from - toInclusive) > 0}.
     * @throws IllegalArgumentException if {@code step} is zero
     */
    public static CharSeq rangeClosedBy(char from, char toInclusive, int step) {
        return new CharSeq(io.vavr.collection.Iterator.rangeClosedBy(from, toInclusive, step).mkString());
    }
    /**
     * Creates a CharSeq from a seed value and a function.
     * The function takes the seed at first.
     * The function should return {@code None} when it's
     * done generating the CharSeq, otherwise {@code Some} {@code Tuple}
     * of the element for the next call and the value to add to the
     * resulting CharSeq.
     * <p>
     * Example:
     * <pre>
     * <code>
     * CharSeq.unfoldRight('j', x -&gt; x == 'a'
     *             ? Option.none()
     *             : Option.of(new Tuple2&lt;&gt;(new Character(x), (char)(x-1))));
     * // CharSeq.of("jihgfedcb"))
     * </code>
     * </pre>
     *
     * @param <T>  type of seeds
     * @param seed the start value for the iteration
     * @param f    the function to get the next step of the iteration
     * @return a CharSeq with the values built up by the iteration
     * @throws NullPointerException if {@code f} is null
     */
    public static <T> CharSeq unfoldRight(T seed, Function<? super T, Option<Tuple2<? extends Character, ? extends T>>> f) {
        return CharSeq.ofAll(io.vavr.collection.Iterator.unfoldRight(seed, f));
    }
    /**
     * Creates a CharSeq from a seed value and a function.
     * The function takes the seed at first.
     * The function should return {@code None} when it's
     * done generating the CharSeq, otherwise {@code Some} {@code Tuple}
     * of the value to add to the resulting CharSeq and
     * the element for the next call.
     * <p>
     * Example:
     * <pre>
     * <code>
     * CharSeq.unfoldLeft('j', x -&gt; x == 'a'
     *             ? Option.none()
     *             : Option.of(new Tuple2&lt;&gt;((char)(x-1), new Character(x))));
     * // CharSeq.of("bcdefghij"))
     * </code>
     * </pre>
     *
     * @param <T>  type of seeds
     * @param seed the start value for the iteration
     * @param f    the function to get the next step of the iteration
     * @return a CharSeq with the values built up by the iteration
     * @throws NullPointerException if {@code f} is null
     */
    public static <T> CharSeq unfoldLeft(T seed, Function<? super T, Option<Tuple2<? extends T, ? extends Character>>> f) {
        return CharSeq.ofAll(io.vavr.collection.Iterator.unfoldLeft(seed, f));
    }
    /**
     * Creates a CharSeq from a seed value and a function.
     * The function takes the seed at first.
     * The function should return {@code None} when it's
     * done generating the CharSeq, otherwise {@code Some} {@code Tuple}
     * of the value to add to the resulting CharSeq and
     * the element for the next call.
     * <p>
     * Example:
     * <pre>
     * <code>
     * CharSeq.unfold('j', x -&gt; x == 'a'
     *                ? Option.none()
     *                : Option.of(new Tuple2&lt;&gt;((char)(x-1), new Character(x))));
     * // CharSeq.of("bcdefghij"))
     * </code>
     * </pre>
     *
     * @param seed the start value for the iteration
     * @param f    the function to get the next step of the iteration
     * @return a CharSeq with the values built up by the iteration
     * @throws NullPointerException if {@code f} is null
     */
    public static CharSeq unfold(Character seed, Function<? super Character, Option<Tuple2<? extends Character, ? extends Character>>> f) {
        return CharSeq.ofAll(io.vavr.collection.Iterator.unfold(seed, f));
    }
    private Tuple2<CharSeq, CharSeq> splitByBuilder(StringBuilder sb) {
        if (sb.length() == 0) {
            return Tuple.of(EMPTY, this);
        } else if (sb.length() == length()) {
            return Tuple.of(this, EMPTY);
        } else {
            return Tuple.of(of(sb), of(back.substring(sb.length())));
        }
    }
    /**
     * Repeats a character {@code times} times.
     *
     * @param character A character
     * @param times     Repetition count
     * @return A CharSeq representing {@code character * times}
     */
    public static CharSeq repeat(char character, int times) {
        final int length = Math.max(times, 0);
        final char[] characters = new char[length];
        java.util.Arrays.fill(characters, character);
        return new CharSeq(String.valueOf(characters));
    }
    /**
     * Repeats this CharSeq {@code times} times.
     * <p>
     * Example: {@code CharSeq.of("ja").repeat(13) = "jajajajajajajajajajajajaja"}
     *
     * @param times Repetition count
     * @return A CharSeq representing {@code this * times}
     */
    public CharSeq repeat(int times) {
        if (times <= 0 || isEmpty()) {
            return empty();
        } else if (times == 1) {
            return this;
        } else {
            final int finalLength = length() * times;
            final char[] result = new char[finalLength];
            back.getChars(0, length(), result, 0);
            int i = length();
            for (; i <= (finalLength >>> 1); i <<= 1) {
                System.arraycopy(result, 0, result, i, i);
            }
            System.arraycopy(result, 0, result, i, finalLength - i);
            return of(new String(result));
        }
    }
    //
    //
    // IndexedSeq
    //
    //
    @Override
    public CharSeq append(Character element) {
        // DEV-NOTE: we need to unbox, otherwise "null" will be appended to back
        final char c = element;
        return of(back + c);
    }
    @Override
    public CharSeq appendAll(Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (Collections.isEmpty(elements)) {
            return this;
        }
        final StringBuilder sb = new StringBuilder(back);
        for (char element : elements) {
            sb.append(element);
        }
        return of(sb);
    }
    @GwtIncompatible
    @Override
    public java.util.List<Character> asJava() {
        return JavaConverters.asJava(this, IMMUTABLE);
    }
    @GwtIncompatible
    @Override
    public CharSeq asJava(Consumer<? super java.util.List<Character>> action) {
        return Collections.asJava(this, action, IMMUTABLE);
    }
    @GwtIncompatible
    @Override
    public java.util.List<Character> asJavaMutable() {
        return JavaConverters.asJava(this, MUTABLE);
    }
    @GwtIncompatible
    @Override
    public CharSeq asJavaMutable(Consumer<? super java.util.List<Character>> action) {
        return Collections.asJava(this, action, MUTABLE);
    }
    @Override
    public <R> IndexedSeq<R> collect(PartialFunction<? super Character, ? extends R> partialFunction) {
        return Vector.ofAll(iterator().<R> collect(partialFunction));
    }
    @Override
    public IndexedSeq<CharSeq> combinations() {
        return Vector.rangeClosed(0, length()).map(this::combinations).flatMap(Function.identity());
    }
    @Override
    public IndexedSeq<CharSeq> combinations(int k) {
        return Combinations.apply(this, Math.max(k, 0));
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> crossProduct(int power) {
        return io.vavr.collection.Collections.crossProduct(CharSeq.empty(), this, power);
    }
    @Override
    public CharSeq distinct() {
        return distinctBy(Function.identity());
    }
    @Override
    public CharSeq distinctBy(Comparator<? super Character> comparator) {
        Objects.requireNonNull(comparator, "comparator is null");
        final java.util.Set<Character> seen = new java.util.TreeSet<>(comparator);
        return filter(seen::add);
    }
    @Override
    public <U> CharSeq distinctBy(Function<? super Character, ? extends U> keyExtractor) {
        Objects.requireNonNull(keyExtractor, "keyExtractor is null");
        final java.util.Set<U> seen = new java.util.HashSet<>();
        return filter(t -> seen.add(keyExtractor.apply(t)));
    }
    @Override
    public CharSeq drop(int n) {
        if (n <= 0) {
            return this;
        } else if (n >= length()) {
            return EMPTY;
        } else {
            return of(back.substring(n));
        }
    }
    @Override
    public CharSeq dropUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.dropUntil(this, predicate);
    }
    @Override
    public CharSeq dropWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return dropUntil(predicate.negate());
    }
    @Override
    public CharSeq dropRight(int n) {
        if (n <= 0) {
            return this;
        } else if (n >= length()) {
            return EMPTY;
        } else {
            return of(back.substring(0, length() - n));
        }
    }
    @Override
    public CharSeq dropRightWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return dropRightUntil(predicate.negate());
    }
    @Override
    public CharSeq dropRightUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.dropRightUntil(this, predicate);
    }
    @Override
    public CharSeq filter(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < back.length(); i++) {
            final char ch = get(i);
            if (predicate.test(ch)) {
                sb.append(ch);
            }
        }
        if (sb.length() == 0) {
            return EMPTY;
        } else if (sb.length() == length()) {
            return this;
        } else {
            return of(sb);
        }
    }
    @Override
    public CharSeq reject(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return Collections.reject(this, predicate);
    }
    @Override
    public <U> IndexedSeq<U> flatMap(Function<? super Character, ? extends Iterable<? extends U>> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        if (isEmpty()) {
            return Vector.empty();
        } else {
            IndexedSeq<U> result = Vector.empty();
            for (int i = 0; i < length(); i++) {
                for (U u : mapper.apply(get(i))) {
                    result = result.append(u);
                }
            }
            return result;
        }
    }
    public CharSeq flatMapChars(CharFunction<? extends CharSequence> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        if (isEmpty()) {
            return this;
        } else {
            final StringBuilder builder = new StringBuilder();
            for (int i = 0; i < back.length(); i++) {
                builder.append(mapper.apply(back.charAt(i)));
            }
            return of(builder);
        }
    }
    @Override
    public <C> Map<C, CharSeq> groupBy(Function<? super Character, ? extends C> classifier) {
        return io.vavr.collection.Collections.groupBy(this, classifier, CharSeq::ofAll);
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> grouped(int size) {
        return sliding(size, size);
    }
    @Override
    public boolean hasDefiniteSize() {
        return true;
    }
    @Override
    public CharSeq init() {
        if (isEmpty()) {
            throw new UnsupportedOperationException("init of empty string");
        } else {
            return of(back.substring(0, length() - 1));
        }
    }
    @Override
    public Option<CharSeq> initOption() {
        return isEmpty() ? Option.none() : Option.some(init());
    }
    @Override
    public CharSeq insert(int index, Character element) {
        if (index < 0) {
            throw new IndexOutOfBoundsException("insert(" + index + ", e)");
        }
        if (index > length()) {
            throw new IndexOutOfBoundsException("insert(" + index + ", e) on String of length " + length());
        }
        final char c = element;
        return of(new StringBuilder(back).insert(index, c).toString());
    }
    @Override
    public CharSeq insertAll(int index, Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (index < 0) {
            throw new IndexOutOfBoundsException("insertAll(" + index + ", elements)");
        }
        if (index > length()) {
            throw new IndexOutOfBoundsException("insertAll(" + index + ", elements) on String of length " + length());
        }
        final StringBuilder sb = new StringBuilder(back.substring(0, index));
        for (char element : elements) {
            sb.append(element);
        }
        sb.append(back.substring(index));
        return of(sb);
    }
    @Override
    public io.vavr.collection.Iterator<Character> iterator() {
        return io.vavr.collection.Iterator.ofAll(toCharArray());
    }
    @Override
    public CharSeq intersperse(Character element) {
        final char c = element; // intentionally throw when element is null
        if (isEmpty()) {
            return EMPTY;
        } else {
            final StringBuilder sb = new StringBuilder().append(head());
            for (int i = 1; i < length(); i++) {
                sb.append(c).append(get(i));
            }
            return of(sb);
        }
    }
    @Override
    public <U> IndexedSeq<U> map(Function<? super Character, ? extends U> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        IndexedSeq<U> result = Vector.empty();
        for (int i = 0; i < length(); i++) {
            result = result.append(mapper.apply(get(i)));
        }
        return result;
    }
    @Override
    public String mkString() {
        return back;
    }
    @Override
    public CharSeq padTo(int length, Character element) {
        final int actualLength = back.length();
        if (length <= actualLength) {
            return this;
        } else {
            return new CharSeq(back + padding(element, length - actualLength));
        }
    }
    @Override
    public CharSeq leftPadTo(int length, Character element) {
        final int actualLength = back.length();
        if (length <= actualLength) {
            return this;
        } else {
            return of(padding(element, length - actualLength).append(back));
        }
    }
    @Override
    public CharSeq orElse(Iterable<? extends Character> other) {
        return isEmpty() ? ofAll(other) : this;
    }
    @Override
    public CharSeq orElse(Supplier<? extends Iterable<? extends Character>> supplier) {
        return isEmpty() ? ofAll(supplier.get()) : this;
    }
    private static StringBuilder padding(char element, int limit) {
        final StringBuilder padding = new StringBuilder();
        for (int i = 0; i < limit; i++) {
            padding.append(element);
        }
        return padding;
    }
    @Override
    public CharSeq patch(int from, Iterable<? extends Character> that, int replaced) {
        from = from < 0 ? 0 : from > length() ? length() : from;
        replaced = replaced < 0 ? 0 : replaced;
        final StringBuilder sb = new StringBuilder(back.substring(0, from));
        for (char character : that) {
            sb.append(character);
        }
        from += replaced;
        if (from < length()) {
            sb.append(back.substring(from));
        }
        return sb.length() == 0 ? EMPTY : of(sb);
    }
    public CharSeq mapChars(CharUnaryOperator mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        if (isEmpty()) {
            return this;
        } else {
            final char[] chars = back.toCharArray();
            for (int i = 0; i < chars.length; i++) {
                chars[i] = mapper.apply(chars[i]);
            }
            return CharSeq.of(chars);
        }
    }
    @Override
    public Tuple2<CharSeq, CharSeq> partition(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        if (isEmpty()) {
            return Tuple.of(EMPTY, EMPTY);
        }
        final StringBuilder left = new StringBuilder();
        final StringBuilder right = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final Character t = get(i);
            (predicate.test(t) ? left : right).append(t);
        }
        if (left.length() == 0) {
            return Tuple.of(EMPTY, of(right.toString()));
        } else if (right.length() == 0) {
            return Tuple.of(of(left.toString()), EMPTY);
        } else {
            return Tuple.of(of(left.toString()), of(right.toString()));
        }
    }
    @Override
    public CharSeq peek(Consumer<? super Character> action) {
        Objects.requireNonNull(action, "action is null");
        if (!isEmpty()) {
            action.accept(get(0));
        }
        return this;
    }
    @Override
    public IndexedSeq<CharSeq> permutations() {
        if (isEmpty()) {
            return Vector.empty();
        } else {
            if (length() == 1) {
                return Vector.of(this);
            } else {
                IndexedSeq<CharSeq> result = Vector.empty();
                for (Character t : distinct()) {
                    for (CharSeq ts : remove(t).permutations()) {
                        result = result.append(CharSeq.of(t).appendAll(ts));
                    }
                }
                return result;
            }
        }
    }
    @Override
    public CharSeq prepend(Character element) {
        final char c = element;
        return of(c + back);
    }
    @Override
    public CharSeq prependAll(Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (Collections.isEmpty(elements)) {
            return this;
        } else if (isEmpty()) {
            return ofAll(elements);
        } else {
            final StringBuilder sb = new StringBuilder();
            for (char element : elements) {
                sb.append(element);
            }
            sb.append(back);
            return CharSeq.of(sb);
        }
    }
    @Override
    public CharSeq remove(Character element) {
        if (element == null) {
            return this;
        }
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (!found && c == element) {
                found = true;
            } else {
                sb.append(c);
            }
        }
        return sb.length() == 0 ? EMPTY : sb.length() == length() ? this : of(sb);
    }
    @Override
    public CharSeq removeFirst(Predicate<Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < back.length(); i++) {
            final char ch = get(i);
            if (predicate.test(ch)) {
                if (found) {
                    sb.append(ch);
                }
                found = true;
            } else {
                sb.append(ch);
            }
        }
        return found ? (sb.length() == 0 ? EMPTY : of(sb.toString())) : this;
    }
    @Override
    public CharSeq removeLast(Predicate<Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        for (int i = length() - 1; i >= 0; i--) {
            if (predicate.test(get(i))) {
                return removeAt(i);
            }
        }
        return this;
    }
    @Override
    public CharSeq removeAt(int index) {
        final String removed = back.substring(0, index) + back.substring(index + 1);
        return removed.isEmpty() ? EMPTY : of(removed);
    }
    @Override
    public CharSeq removeAll(Character element) {
        if (element == null) {
            return this;
        }
        return io.vavr.collection.Collections.removeAll(this, element);
    }
    @Override
    public CharSeq removeAll(Iterable<? extends Character> elements) {
        return io.vavr.collection.Collections.removeAll(this, elements);
    }
    @Override
    @Deprecated
    public CharSeq removeAll(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return reject(predicate);
    }
    @Override
    public CharSeq replace(Character currentElement, Character newElement) {
        if (currentElement == null) {
            return this;
        }
        final char currentChar = currentElement;
        final char newChar = newElement;
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (!found && c == currentChar) {
                sb.append(newChar);
                found = true;
            } else {
                sb.append(c);
            }
        }
        return found ? of(sb) : this;
    }
    @Override
    public CharSeq replaceAll(Character currentElement, Character newElement) {
        if (currentElement == null) {
            return this;
        }
        final char currentChar = currentElement;
        final char newChar = newElement;
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (c == currentChar) {
                sb.append(newChar);
                found = true;
            } else {
                sb.append(c);
            }
        }
        return found ? of(sb) : this;
    }
    @Override
    public CharSeq retainAll(Iterable<? extends Character> elements) {
        return io.vavr.collection.Collections.retainAll(this, elements);
    }
    @Override
    public CharSeq reverse() {
        return of(new StringBuilder(back).reverse().toString());
    }
    @Override
    public CharSeq rotateLeft(int n) {
        return Collections.rotateLeft(this, n);
    }
    @Override
    public CharSeq rotateRight(int n) {
        return Collections.rotateRight(this, n);
    }
    @Override
    public CharSeq scan(Character zero, BiFunction<? super Character, ? super Character, ? extends Character> operation) {
        return io.vavr.collection.Collections.scanLeft(this, zero, operation, io.vavr.collection.Iterator::toCharSeq);
    }
    @Override
    public <U> IndexedSeq<U> scanLeft(U zero, BiFunction<? super U, ? super Character, ? extends U> operation) {
        return io.vavr.collection.Collections.scanLeft(this, zero, operation, io.vavr.collection.Iterator::toVector);
    }
    @Override
    public <U> IndexedSeq<U> scanRight(U zero, BiFunction<? super Character, ? super U, ? extends U> operation) {
        return io.vavr.collection.Collections.scanRight(this, zero, operation, io.vavr.collection.Iterator::toVector);
    }
    @Override
    public CharSeq shuffle() {
        return io.vavr.collection.Collections.shuffle(this, CharSeq::ofAll);
    }
    @Override
    public CharSeq slice(int beginIndex, int endIndex) {
        final int from = beginIndex < 0 ? 0 : beginIndex;
        final int to = endIndex > length() ? length() : endIndex;
        if (from >= to) {
            return EMPTY;
        }
        if (from <= 0 && to >= length()) {
            return this;
        }
        return CharSeq.of(back.substring(from, to));
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> slideBy(Function<? super Character, ?> classifier) {
        return iterator().slideBy(classifier).map(CharSeq::ofAll);
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> sliding(int size) {
        return sliding(size, 1);
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> sliding(int size, int step) {
        return iterator().sliding(size, step).map(CharSeq::ofAll);
    }
    @Override
    public CharSeq sorted() {
        return isEmpty() ? this : toJavaStream().sorted().collect(CharSeq.collector());
    }
    @Override
    public CharSeq sorted(Comparator<? super Character> comparator) {
        Objects.requireNonNull(comparator, "comparator is null");
        return isEmpty() ? this : toJavaStream().sorted(comparator).collect(CharSeq.collector());
    }
    @Override
    public <U extends Comparable<? super U>> CharSeq sortBy(Function<? super Character, ? extends U> mapper) {
        return sortBy(U::compareTo, mapper);
    }
    @Override
    public <U> CharSeq sortBy(Comparator<? super U> comparator, Function<? super Character, ? extends U> mapper) {
        return Collections.sortBy(this, comparator, mapper, collector());
    }
    @Override
    public Tuple2<CharSeq, CharSeq> span(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (predicate.test(c)) {
                sb.append(c);
            } else {
                break;
            }
        }
        return splitByBuilder(sb);
    }
    @Override
    public CharSeq subSequence(int beginIndex) {
        if (beginIndex < 0 || beginIndex > length()) {
            throw new IndexOutOfBoundsException("begin index " + beginIndex + " < 0");
        }
        if (beginIndex == 0) {
            return this;
        } else if (beginIndex == length()) {
            return EMPTY;
        } else {
            return CharSeq.of(back.substring(beginIndex));
        }
    }
    @Override
    public CharSeq tail() {
        if (isEmpty()) {
            throw new UnsupportedOperationException("tail of empty string");
        } else {
            return CharSeq.of(back.substring(1));
        }
    }
    @Override
    public Option<CharSeq> tailOption() {
        return isEmpty() ? Option.none() : Option.some(tail());
    }
    @Override
    public CharSeq take(int n) {
        if (n <= 0) {
            return EMPTY;
        } else if (n >= length()) {
            return this;
        } else {
            return CharSeq.of(back.substring(0, n));
        }
    }
    @Override
    public CharSeq takeUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.takeUntil(this, predicate);
    }
    @Override
    public CharSeq takeWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return takeUntil(predicate.negate());
    }
    @Override
    public CharSeq takeRight(int n) {
        if (n <= 0) {
            return EMPTY;
        } else if (n >= length()) {
            return this;
        } else {
            return CharSeq.of(back.substring(length() - n));
        }
    }
    @Override
    public CharSeq takeRightUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.takeRightUntil(this, predicate);
    }
    @Override
    public CharSeq takeRightWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return takeRightUntil(predicate.negate());
    }
    /**
     * Transforms this {@code CharSeq}.
     *
     * @param f   A transformation
     * @param <U> Type of transformation result
     * @return An instance of type {@code U}
     * @throws NullPointerException if {@code f} is null
     */
    public <U> U transform(Function<? super CharSeq, ? extends U> f) {
        Objects.requireNonNull(f, "f is null");
        return f.apply(this);
    }
    @Override
    public <T1, T2> Tuple2<IndexedSeq<T1>, IndexedSeq<T2>> unzip(Function<? super Character, Tuple2<? extends T1, ? extends T2>> unzipper) {
        Objects.requireNonNull(unzipper, "unzipper is null");
        IndexedSeq<T1> xs = Vector.empty();
        IndexedSeq<T2> ys = Vector.empty();
        for (int i = 0; i < length(); i++) {
            final Tuple2<? extends T1, ? extends T2> t = unzipper.apply(get(i));
            xs = xs.append(t._1);
            ys = ys.append(t._2);
        }
        return Tuple.of(xs, ys);
    }
    @Override
    public <T1, T2, T3> Tuple3<IndexedSeq<T1>, IndexedSeq<T2>, IndexedSeq<T3>> unzip3(Function<? super Character, Tuple3<? extends T1, ? extends T2, ? extends T3>> unzipper) {
        Objects.requireNonNull(unzipper, "unzipper is null");
        IndexedSeq<T1> xs = Vector.empty();
        IndexedSeq<T2> ys = Vector.empty();
        IndexedSeq<T3> zs = Vector.empty();
        for (int i = 0; i < length(); i++) {
            final Tuple3<? extends T1, ? extends T2, ? extends T3> t = unzipper.apply(get(i));
            xs = xs.append(t._1);
            ys = ys.append(t._2);
            zs = zs.append(t._3);
        }
        return Tuple.of(xs, ys, zs);
    }
    @Override
    public CharSeq update(int index, Character element) {
        if ((index < 0) || (index >= length())) {
            throw new IndexOutOfBoundsException("update(" + index + ")");
        } else {
            char c = element;
            return of(back.substring(0, index) + c + back.substring(index + 1));
        }
    }
    @Override
    public CharSeq update(int index, Function<? super Character, ? extends Character> updater) {
        Objects.requireNonNull(updater, "updater is null");
        final char c = updater.apply(get(index));
        return update(index, c);
    }
    @Override
    public <U> IndexedSeq<Tuple2<Character, U>> zip(Iterable<? extends U> that) {
        return zipWith(that, Tuple::of);
    }
    @Override
    public <U, R> IndexedSeq<R> zipWith(Iterable<? extends U> that, BiFunction<? super Character, ? super U, ? extends R> mapper) {
        Objects.requireNonNull(that, "that is null");
        Objects.requireNonNull(mapper, "mapper is null");
        IndexedSeq<R> result = Vector.empty();
        final io.vavr.collection.Iterator<Character> list1 = iterator();
        final java.util.Iterator<? extends U> list2 = that.iterator();
        while (list1.hasNext() && list2.hasNext()) {
            result = result.append(mapper.apply(list1.next(), list2.next()));
        }
        return result;
    }
    @Override
    public <U> IndexedSeq<Tuple2<Character, U>> zipAll(Iterable<? extends U> that, Character thisElem, U thatElem) {
        Objects.requireNonNull(that, "that is null");
        IndexedSeq<Tuple2<Character, U>> result = Vector.empty();
        final io.vavr.collection.Iterator<Character> list1 = iterator();
        final java.util.Iterator<? extends U> list2 = that.iterator();
        while (list1.hasNext() || list2.hasNext()) {
            final Character elem1 = list1.hasNext() ? list1.next() : thisElem;
            final U elem2 = list2.hasNext() ? list2.next() : thatElem;
            result = result.append(Tuple.of(elem1, elem2));
        }
        return result;
    }
    @Override
    public IndexedSeq<Tuple2<Character, Integer>> zipWithIndex() {
        return zipWithIndex(Tuple::of);
    }
    @Override
    public <U> IndexedSeq<U> zipWithIndex(BiFunction<? super Character, ? super Integer, ? extends U> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        IndexedSeq<U> result = Vector.empty();
        for (int i = 0; i < length(); i++) {
            result = result.append(mapper.apply(get(i), i));
        }
        return result;
    }
    @Override
    public Character get(int index) {
        return back.charAt(index);
    }
    @Override
    public int indexOf(Character element, int from) {
        return back.indexOf(element, from);
    }
    @Override
    public int lastIndexOf(Character element, int end) {
        return back.lastIndexOf(element, end);
    }
    @Override
    public Tuple2<CharSeq, CharSeq> splitAt(int n) {
        if (n <= 0) {
            return Tuple.of(EMPTY, this);
        } else if (n >= length()) {
            return Tuple.of(this, EMPTY);
        } else {
            return Tuple.of(of(back.substring(0, n)), of(back.substring(n)));
        }
    }
    @Override
    public Tuple2<CharSeq, CharSeq> splitAt(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        if (isEmpty()) {
            return Tuple.of(EMPTY, EMPTY);
        }
        final StringBuilder left = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final Character t = get(i);
            if (!predicate.test(t)) {
                left.append(t);
            } else {
                break;
            }
        }
        return splitByBuilder(left);
    }
    @Override
    public Tuple2<CharSeq, CharSeq> splitAtInclusive(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        if (isEmpty()) {
            return Tuple.of(EMPTY, EMPTY);
        }
        final StringBuilder left = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final Character t = get(i);
            left.append(t);
            if (predicate.test(t)) {
                break;
            }
        }
        return splitByBuilder(left);
    }
    @Override
    public boolean startsWith(Iterable<? extends Character> that, int offset) {
        return startsWith(CharSeq.ofAll(that), offset);
    }
    @Override
    public Character head() {
        if (isEmpty()) {
            throw new NoSuchElementException("head of empty string");
        } else {
            return get(0);
        }
    }
    /**
     * A {@code CharSeq} is computed synchronously.
     *
     * @return false
     */
    @Override
    public boolean isAsync() {
        return false;
    }
    @Override
    public boolean isEmpty() {
        return back.isEmpty();
    }
    /**
     * A {@code CharSeq} is computed eagerly.
     *
     * @return false
     */
    @Override
    public boolean isLazy() {
        return false;
    }
    @Override
    public boolean isTraversableAgain() {
        return true;
    }
    private Object readResolve() {
        return isEmpty() ? EMPTY : this;
    }
    @Override
    public boolean equals(Object o) {
        return io.vavr.collection.Collections.equals(this, o);
    }
    @Override
    public int hashCode() {
        return io.vavr.collection.Collections.hashOrdered(this);
    }
    //
    //
    // CharSequence
    //
    //
    /**
     * Returns the {@code char} value at the
     * specified index. An index ranges from {@code 0} to
     * {@code length() - 1}. The first {@code char} value of the sequence
     * is at index {@code 0}, the next at index {@code 1},
     * and so on, as for array indexing.
     * <p>
     * If the {@code char} value specified by the index is a
     * <a href="Character.html#unicode">surrogate</a>, the surrogate
     * value is returned.
     *
     * @param index the index of the {@code char} value.
     * @return the {@code char} value at the specified index of this string.
     * The first {@code char} value is at index {@code 0}.
     * @throws IndexOutOfBoundsException if the {@code index}
     *                                   argument is negative or not less than the length of this
     *                                   string.
     */
    @Override
    public char charAt(int index) {
        return get(index);
    }
    /**
     * Returns the length of this string.
     * The length is equal to the number of <a href="Character.html#unicode">Unicode
     * code units</a> in the string.
     *
     * @return the length of the sequence of characters represented by this
     * object.
     */
    @Override
    public int length() {
        return back.length();
    }
    //
    //
    // String
    //
    //
    /**
     * Returns the character (Unicode code point) at the specified
     * index. The index refers to {@code char} values
     * (Unicode code units) and ranges from {@code 0} to
     * {@link #length()}{@code  - 1}.
     * <p>
     * If the {@code char} value specified at the given index
     * is in the high-surrogate range, the following index is less
     * than the length of this {@code CharSeq}, and the
     * {@code char} value at the following index is in the
     * low-surrogate range, then the supplementary code point
     * corresponding to this surrogate pair is returned. Otherwise,
     * the {@code char} value at the given index is returned.
     *
     * @param index the index to the {@code char} values
     * @return the code point value of the character at the
     * {@code index}
     * @throws IndexOutOfBoundsException if the {@code index}
     *                                   argument is negative or not less than the length of this
     *                                   string.
     */
    public int codePointAt(int index) {
        return back.codePointAt(index);
    }
    /**
     * Returns the character (Unicode code point) before the specified
     * index. The index refers to {@code char} values
     * (Unicode code units) and ranges from {@code 1} to {@link
     * CharSequence#length() length}.
     * <p>
     * If the {@code char} value at {@code (index - 1)}
     * is in the low-surrogate range, {@code (index - 2)} is not
     * negative, and the {@code char} value at {@code (index -
     * 2)} is in the high-surrogate range, then the
     * supplementary code point value of the surrogate pair is
     * returned. If the {@code char} value at {@code index -
     * 1} is an unpaired low-surrogate or a high-surrogate, the
     * surrogate value is returned.
     *
     * @param index the index following the code point that should be returned
     * @return the Unicode code point value before the given index.
     * @throws IndexOutOfBoundsException if the {@code index}
     *                                   argument is less than 1 or greater than the length
     *                                   of this string.
     */
    public int codePointBefore(int index) {
        return back.codePointBefore(index);
    }
    /**
     * Returns the number of Unicode code points in the specified text
     * range of this {@code CharSeq}. The text range begins at the
     * specified {@code beginIndex} and extends to the
     * {@code char} at index {@code endIndex - 1}. Thus the
     * length (in {@code char}s) of the text range is
     * {@code endIndex-beginIndex}. Unpaired surrogates within
     * the text range count as one code point each.
     *
     * @param beginIndex the index to the first {@code char} of
     *                   the text range.
     * @param endIndex   the index after the last {@code char} of
     *                   the text range.
     * @return the number of Unicode code points in the specified text
     * range
     * @throws IndexOutOfBoundsException if the
     *                                   {@code beginIndex} is negative, or {@code endIndex}
     *                                   is larger than the length of this {@code CharSeq}, or
     *                                   {@code beginIndex} is larger than {@code endIndex}.
     */
    public int codePointCount(int beginIndex, int endIndex) {
        return back.codePointCount(beginIndex, endIndex);
    }
    /**
     * Returns the index within this {@code CharSeq} that is
     * offset from the given {@code index} by
     * {@code codePointOffset} code points. Unpaired surrogates
     * within the text range given by {@code index} and
     * {@code codePointOffset} count as one code point each.
     *
     * @param index           the index to be offset
     * @param codePointOffset the offset in code points
     * @return the index within this {@code CharSeq}
     * @throws IndexOutOfBoundsException if {@code index}
     *                                   is negative or larger then the length of this
     *                                   {@code CharSeq}, or if {@code codePointOffset} is positive
     *                                   and the substring starting with {@code index} has fewer
     *                                   than {@code codePointOffset} code points,
     *                                   or if {@code codePointOffset} is negative and the substring
     *                                   before {@code index} has fewer than the absolute value
     *                                   of {@code codePointOffset} code points.
     */
    public int offsetByCodePoints(int index, int codePointOffset) {
        return back.offsetByCodePoints(index, codePointOffset);
    }
    /**
     * Copies characters from this string into the destination character
     * array.
     * <p>
     * The first character to be copied is at index {@code srcBegin};
     * the last character to be copied is at index {@code srcEnd-1}
     * (thus the total number of characters to be copied is
     * {@code srcEnd-srcBegin}). The characters are copied into the
     * subarray of {@code dst} starting at index {@code dstBegin}
     * and ending at index:
     * <blockquote><pre>
     *     dstbegin + (srcEnd-srcBegin) - 1
     * </pre></blockquote>
     *
     * @param srcBegin index of the first character in the string
     *                 to copy.
     * @param srcEnd   index after the last character in the string
     *                 to copy.
     * @param dst      the destination array.
     * @param dstBegin the start offset in the destination array.
     * @throws IndexOutOfBoundsException If any of the following
     *                                   is true:
     *                                   <ul><li>{@code srcBegin} is negative.
     *                                   <li>{@code srcBegin} is greater than {@code srcEnd}
     *                                   <li>{@code srcEnd} is greater than the length of this
     *                                   string
     *                                   <li>{@code dstBegin} is negative
     *                                   <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than
     *                                   {@code dst.length}</ul>
     */
    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {
        back.getChars(srcBegin, srcEnd, dst, dstBegin);
    }
    /**
     * Encodes this {@code CharSeq} into a sequence of bytes using the named
     * charset, storing the result into a new byte array.
     * <p>
     * The behavior of this method when this string cannot be encoded in
     * the given charset is unspecified.  The {@link
     * java.nio.charset.CharsetEncoder} class should be used when more control
     * over the encoding process is required.
     *
     * @param charsetName The name of a supported {@linkplain java.nio.charset.Charset
     *                    charset}
     * @return The resultant byte array
     * @throws UnsupportedEncodingException If the named charset is not supported
     */
    public byte[] getBytes(String charsetName) throws UnsupportedEncodingException {
        return back.getBytes(charsetName);
    }
    /**
     * Encodes this {@code CharSeq} into a sequence of bytes using the given
     * {@linkplain java.nio.charset.Charset charset}, storing the result into a
     * new byte array.
     * <p>
     * This method always replaces malformed-input and unmappable-character
     * sequences with this charset's default replacement byte array.  The
     * {@link java.nio.charset.CharsetEncoder} class should be used when more
     * control over the encoding process is required.
     *
     * @param charset The {@linkplain java.nio.charset.Charset} to be used to encode
     *                the {@code CharSeq}
     * @return The resultant byte array
     */
    public byte[] getBytes(Charset charset) {
        return back.getBytes(charset);
    }
    /**
     * Encodes this {@code CharSeq} into a sequence of bytes using the
     * platform's default charset, storing the result into a new byte array.
     * <p>
     * The behavior of this method when this string cannot be encoded in
     * the default charset is unspecified.  The {@link
     * java.nio.charset.CharsetEncoder} class should be used when more control
     * over the encoding process is required.
     *
     * @return The resultant byte array
     */
    public byte[] getBytes() {
        return back.getBytes();
    }
    /**
     * Compares this string to the specified {@code StringBuffer}.  The result
     * is {@code true} if and only if this {@code CharSeq} represents the same
     * sequence of characters as the specified {@code StringBuffer}. This method
     * synchronizes on the {@code StringBuffer}.
     *
     * @param sb The {@code StringBuffer} to compare this {@code CharSeq} against
     * @return {@code true} if this {@code CharSeq} represents the same
     * sequence of characters as the specified {@code StringBuffer},
     * {@code false} otherwise
     */
    public boolean contentEquals(StringBuffer sb) {
        return back.contentEquals(sb);
    }
    /**
     * Compares this string to the specified {@code CharSequence}.  The
     * result is {@code true} if and only if this {@code CharSeq} represents the
     * same sequence of char values as the specified sequence. Note that if the
     * {@code CharSequence} is a {@code StringBuffer} then the method
     * synchronizes on it.
     *
     * @param cs The sequence to compare this {@code CharSeq} against
     * @return {@code true} if this {@code CharSeq} represents the same
     * sequence of char values as the specified sequence, {@code
     * false} otherwise
     */
    public boolean contentEquals(CharSequence cs) {
        return back.contentEquals(cs);
    }
    /**
     * Compares this {@code CharSeq} to another {@code CharSeq}, ignoring case
     * considerations.  Two strings are considered equal ignoring case if they
     * are of the same length and corresponding characters in the two strings
     * are equal ignoring case.
     * <p>
     * Two characters {@code c1} and {@code c2} are considered the same
     * ignoring case if at least one of the following is true:
     * <ul>
     * <li> The two characters are the same (as compared by the
     * {@code ==} operator)
     * <li> Applying the method {@link
     * Character#toUpperCase(char)} to each character
     * produces the same result
     * <li> Applying the method {@link
     * Character#toLowerCase(char)} to each character
     * produces the same result
     * </ul>
     *
     * @param anotherString The {@code CharSeq} to compare this {@code CharSeq} against
     * @return {@code true} if the argument is not {@code null} and it
     * represents an equivalent {@code CharSeq} ignoring case; {@code
     * false} otherwise
     * @see #equals(Object)
     */
    public boolean equalsIgnoreCase(CharSeq anotherString) {
        return back.equalsIgnoreCase(anotherString.back);
    }
    /**
     * Compares two strings lexicographically.
     * The comparison is based on the Unicode value of each character in
     * the strings. The character sequence represented by this
     * {@code CharSeq} object is compared lexicographically to the
     * character sequence represented by the argument string. The result is
     * a negative integer if this {@code CharSeq} object
     * lexicographically precedes the argument string. The result is a
     * positive integer if this {@code CharSeq} object lexicographically
     * follows the argument string. The result is zero if the strings
     * are equal; {@code compareTo} returns {@code 0} exactly when
     * the {@link #equals(Object)} method would return {@code true}.
     * <p>
     * This is the definition of lexicographic ordering. If two strings are
     * different, then either they have different characters at some index
     * that is a valid index for both strings, or their lengths are different,
     * or both. If they have different characters at one or more index
     * positions, let <i>k</i> be the smallest such index; then the string
     * whose character at position <i>k</i> has the smaller value, as
     * determined by using the &lt; operator, lexicographically precedes the
     * other string. In this case, {@code compareTo} returns the
     * difference of the two character values at position {@code k} in
     * the two string -- that is, the value:
     * <blockquote><pre>
     * this.charAt(k)-anotherString.charAt(k)
     * </pre></blockquote>
     * If there is no index position at which they differ, then the shorter
     * string lexicographically precedes the longer string. In this case,
     * {@code compareTo} returns the difference of the lengths of the
     * strings -- that is, the value:
     * <blockquote><pre>
     * this.length()-anotherString.length()
     * </pre></blockquote>
     *
     * @param anotherString the {@code CharSeq} to be compared.
     * @return the value {@code 0} if the argument string is equal to
     * this string; a value less than {@code 0} if this string
     * is lexicographically less than the string argument; and a
     * value greater than {@code 0} if this string is
     * lexicographically greater than the string argument.
     */
    public int compareTo(CharSeq anotherString) {
        return back.compareTo(anotherString.back);
    }
    /**
     * Compares two strings lexicographically, ignoring case
     * differences. This method returns an integer whose sign is that of
     * calling {@code compareTo} with normalized versions of the strings
     * where case differences have been eliminated by calling
     * {@code Character.toLowerCase(Character.toUpperCase(character))} on
     * each character.
     * <p>
     * Note that this method does <em>not</em> take locale into account,
     * and will result in an unsatisfactory ordering for certain locales.
     * The java.text package provides <em>collators</em> to allow
     * locale-sensitive ordering.
     *
     * @param str the {@code CharSeq} to be compared.
     * @return a negative integer, zero, or a positive integer as the
     * specified String is greater than, equal to, or less
     * than this String, ignoring case considerations.
     */
    public int compareToIgnoreCase(CharSeq str) {
        return back.compareToIgnoreCase(str.back);
    }
    /**
     * Tests if two string regions are equal.
     * <p>
     * A substring of this {@code CharSeq} object is compared to a substring
     * of the argument other. The result is true if these substrings
     * represent identical character sequences. The substring of this
     * {@code CharSeq} object to be compared begins at index {@code toffset}
     * and has length {@code len}. The substring of other to be compared
     * begins at index {@code ooffset} and has length {@code len}. The
     * result is {@code false} if and only if at least one of the following
     * is true:
     * <ul><li>{@code toffset} is negative.
     * <li>{@code ooffset} is negative.
     * <li>{@code toffset+len} is greater than the length of this
     * {@code CharSeq} object.
     * <li>{@code ooffset+len} is greater than the length of the other
     * argument.
     * <li>There is some nonnegative integer <i>k</i> less than {@code len}
     * such that:
     * {@code this.charAt(toffset + }<i>k</i>{@code ) != other.charAt(ooffset + }
     * <i>k</i>{@code )}
     * </ul>
     *
     * @param toffset the starting offset of the subregion in this string.
     * @param other   the string argument.
     * @param ooffset the starting offset of the subregion in the string
     *                argument.
     * @param len     the number of characters to compare.
     * @return {@code true} if the specified subregion of this string
     * exactly matches the specified subregion of the string argument;
     * {@code false} otherwise.
     */
    public boolean regionMatches(int toffset, CharSeq other, int ooffset, int len) {
        return back.regionMatches(toffset, other.back, ooffset, len);
    }
    /**
     * Tests if two string regions are equal.
     * <p>
     * A substring of this {@code CharSeq} object is compared to a substring
     * of the argument {@code other}. The result is {@code true} if these
     * substrings represent character sequences that are the same, ignoring
     * case if and only if {@code ignoreCase} is true. The substring of
     * this {@code CharSeq} object to be compared begins at index
     * {@code toffset} and has length {@code len}. The substring of
     * {@code other} to be compared begins at index {@code ooffset} and
     * has length {@code len}. The result is {@code false} if and only if
     * at least one of the following is true:
     * <ul><li>{@code toffset} is negative.
     * <li>{@code ooffset} is negative.
     * <li>{@code toffset+len} is greater than the length of this
     * {@code CharSeq} object.
     * <li>{@code ooffset+len} is greater than the length of the other
     * argument.
     * <li>{@code ignoreCase} is {@code false} and there is some nonnegative
     * integer <i>k</i> less than {@code len} such that:
     * <blockquote><pre>
     * this.charAt(toffset+k) != other.charAt(ooffset+k)
     * </pre></blockquote>
     * <li>{@code ignoreCase} is {@code true} and there is some nonnegative
     * integer <i>k</i> less than {@code len} such that:
     * <blockquote><pre>
     * Character.toLowerCase(this.charAt(toffset+k)) !=
     * Character.toLowerCase(other.charAt(ooffset+k))
     * </pre></blockquote>
     * and:
     * <blockquote><pre>
     * Character.toUpperCase(this.charAt(toffset+k)) !=
     *         Character.toUpperCase(other.charAt(ooffset+k))
     * </pre></blockquote>
     * </ul>
     *
     * @param ignoreCase if {@code true}, ignore case when comparing
     *                   characters.
     * @param toffset    the starting offset of the subregion in this
     *                   string.
     * @param other      the string argument.
     * @param ooffset    the starting offset of the subregion in the string
     *                   argument.
     * @param len        the number of characters to compare.
     * @return {@code true} if the specified subregion of this string
     * matches the specified subregion of the string argument;
     * {@code false} otherwise. Whether the matching is exact
     * or case insensitive depends on the {@code ignoreCase}
     * argument.
     */
    public boolean regionMatches(boolean ignoreCase, int toffset, CharSeq other, int ooffset, int len) {
        return back.regionMatches(ignoreCase, toffset, other.back, ooffset, len);
    }
    @Override
    public CharSeq subSequence(int beginIndex, int endIndex) {
        if (beginIndex < 0) {
            throw new IndexOutOfBoundsException("begin index " + beginIndex + " < 0");
        }
        if (endIndex > length()) {
            throw new IndexOutOfBoundsException("endIndex " + endIndex + " > length " + length());
        }
        final int subLen = endIndex - beginIndex;
        if (subLen < 0) {
            throw new IllegalArgumentException("beginIndex " + beginIndex + " > endIndex " + endIndex);
        }
        if (beginIndex == 0 && endIndex == length()) {
            return this;
        } else {
            return CharSeq.of(back.subSequence(beginIndex, endIndex));
        }
    }
    /**
     * Tests if the substring of this string beginning at the
     * specified index starts with the specified prefix.
     *
     * @param prefix  the prefix.
     * @param toffset where to begin looking in this string.
     * @return {@code true} if the character sequence represented by the
     * argument is a prefix of the substring of this object starting
     * at index {@code toffset}; {@code false} otherwise.
     * The result is {@code false} if {@code toffset} is
     * negative or greater than the length of this
     * {@code CharSeq} object; otherwise the result is the same
     * as the result of the expression
     * <pre>
     *          this.substring(toffset).startsWith(prefix)
     *          </pre>
     */
    public boolean startsWith(CharSeq prefix, int toffset) {
        return back.startsWith(prefix.back, toffset);
    }
    /**
     * Tests if this string starts with the specified prefix.
     *
     * @param prefix the prefix.
     * @return {@code true} if the character sequence represented by the
     * argument is a prefix of the character sequence represented by
     * this string; {@code false} otherwise.
     * Note also that {@code true} will be returned if the
     * argument is an empty string or is equal to this
     * {@code CharSeq} object as determined by the
     * {@link #equals(Object)} method.
     */
    public boolean startsWith(CharSeq prefix) {
        return back.startsWith(prefix.back);
    }
    /**
     * Tests if this string ends with the specified suffix.
     *
     * @param suffix the suffix.
     * @return {@code true} if the character sequence represented by the
     * argument is a suffix of the character sequence represented by
     * this object; {@code false} otherwise. Note that the
     * result will be {@code true} if the argument is the
     * empty string or is equal to this {@code CharSeq} object
     * as determined by the {@link #equals(Object)} method.
     */
    public boolean endsWith(CharSeq suffix) {
        return back.endsWith(suffix.back);
    }
    /**
     * Returns the index within this string of the first occurrence of
     * the specified character. If a character with value
     * {@code ch} occurs in the character sequence represented by
     * this {@code CharSeq} object, then the index (in Unicode
     * code units) of the first such occurrence is returned. For
     * values of {@code ch} in the range from 0 to 0xFFFF
     * (inclusive), this is the smallest value <i>k</i> such that:
     * <blockquote><pre>
     * this.charAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * smallest value <i>k</i> such that:
     * <blockquote><pre>
     * this.codePointAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this
     * string, then {@code -1} is returned.
     *
     * @param ch a character (Unicode code point).
     * @return the index of the first occurrence of the character in the
     * character sequence represented by this object, or
     * {@code -1} if the character does not occur.
     */
    public int indexOf(int ch) {
        return back.indexOf(ch);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option}.
     *
     * @param ch a character (Unicode code point).
     * @return {@code Some(index)} or {@code None} if not found.
     */
    Option<Integer> indexOfOption(int ch) {
        return io.vavr.collection.Collections.indexOption(indexOf(ch));
    }
    /**
     * Returns the index within this string of the first occurrence of the
     * specified character, starting the search at the specified index.
     * <p>
     * If a character with value {@code ch} occurs in the
     * character sequence represented by this {@code CharSeq}
     * object at an index no smaller than {@code fromIndex}, then
     * the index of the first such occurrence is returned. For values
     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),
     * this is the smallest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.charAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &gt;= fromIndex)
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * smallest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.codePointAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &gt;= fromIndex)
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this
     * string at or after position {@code fromIndex}, then
     * {@code -1} is returned.
     * <p>
     * There is no restriction on the value of {@code fromIndex}. If it
     * is negative, it has the same effect as if it were zero: this entire
     * string may be searched. If it is greater than the length of this
     * string, it has the same effect as if it were equal to the length of
     * this string: {@code -1} is returned.
     * <p>
     * All indices are specified in {@code char} values
     * (Unicode code units).
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from.
     * @return the index of the first occurrence of the character in the
     * character sequence represented by this object that is greater
     * than or equal to {@code fromIndex}, or {@code -1}
     * if the character does not occur.
     */
    public int indexOf(int ch, int fromIndex) {
        return back.indexOf(ch, fromIndex);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    Option<Integer> indexOfOption(int ch, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(indexOf(ch, fromIndex));
    }
    /**
     * Returns the index within this string of the last occurrence of
     * the specified character. For values of {@code ch} in the
     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code
     * units) returned is the largest value <i>k</i> such that:
     * <blockquote><pre>
     * this.charAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * largest value <i>k</i> such that:
     * <blockquote><pre>
     * this.codePointAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true.  In either case, if no such character occurs in this
     * string, then {@code -1} is returned.  The
     * {@code CharSeq} is searched backwards starting at the last
     * character.
     *
     * @param ch a character (Unicode code point).
     * @return the index of the last occurrence of the character in the
     * character sequence represented by this object, or
     * {@code -1} if the character does not occur.
     */
    public int lastIndexOf(int ch) {
        return back.lastIndexOf(ch);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option}.
     *
     * @param ch a character (Unicode code point).
     * @return {@code Some(index)} or {@code None} if not found.
     */
    Option<Integer> lastIndexOfOption(int ch) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(ch));
    }
    /**
     * Returns the index within this string of the last occurrence of
     * the specified character, searching backward starting at the
     * specified index. For values of {@code ch} in the range
     * from 0 to 0xFFFF (inclusive), the index returned is the largest
     * value <i>k</i> such that:
     * <blockquote><pre>
     * (this.charAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &lt;= fromIndex)
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * largest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.codePointAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &lt;= fromIndex)
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this
     * string at or before position {@code fromIndex}, then
     * {@code -1} is returned.
     * <p>
     * All indices are specified in {@code char} values
     * (Unicode code units).
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from. There is no
     *                  restriction on the value of {@code fromIndex}. If it is
     *                  greater than or equal to the length of this string, it has
     *                  the same effect as if it were equal to one less than the
     *                  length of this string: this entire string may be searched.
     *                  If it is negative, it has the same effect as if it were -1:
     *                  -1 is returned.
     * @return the index of the last occurrence of the character in the
     * character sequence represented by this object that is less
     * than or equal to {@code fromIndex}, or {@code -1}
     * if the character does not occur before that point.
     */
    public int lastIndexOf(int ch, int fromIndex) {
        return back.lastIndexOf(ch, fromIndex);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> lastIndexOfOption(int ch, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(ch, fromIndex));
    }
    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring.
     * <p>
     * The returned index is the smallest value <i>k</i> for which:
     * <blockquote><pre>
     * this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str the substring to search for.
     * @return the index of the first occurrence of the specified substring,
     * or {@code -1} if there is no such occurrence.
     */
    public int indexOf(CharSeq str) {
        return back.indexOf(str.back);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option}.
     *
     * @param str the substring to search for.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> indexOfOption(CharSeq str) {
        return io.vavr.collection.Collections.indexOption(indexOf(str));
    }
    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring, starting at the specified index.
     * <p>
     * The returned index is the smallest value <i>k</i> for which:
     * <blockquote><pre>
     * <i>k</i> &gt;= fromIndex {@code &&} this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index from which to start the search.
     * @return the index of the first occurrence of the specified substring,
     * starting at the specified index,
     * or {@code -1} if there is no such occurrence.
     */
    public int indexOf(CharSeq str, int fromIndex) {
        return back.indexOf(str.back, fromIndex);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index from which to start the search.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> indexOfOption(CharSeq str, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(indexOf(str, fromIndex));
    }
    /**
     * Returns the index within this string of the last occurrence of the
     * specified substring.  The last occurrence of the empty string ""
     * is considered to occur at the index value {@code this.length()}.
     * <p>
     * The returned index is the largest value <i>k</i> for which:
     * <blockquote><pre>
     * this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str the substring to search for.
     * @return the index of the last occurrence of the specified substring,
     * or {@code -1} if there is no such occurrence.
     */
    public int lastIndexOf(CharSeq str) {
        return back.lastIndexOf(str.back);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option}.
     *
     * @param str the substring to search for.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> lastIndexOfOption(CharSeq str) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(str));
    }
    /**
     * Returns the index within this string of the last occurrence of the
     * specified substring, searching backward starting at the specified index.
     * <p>
     * The returned index is the largest value <i>k</i> for which:
     * <blockquote><pre>
     * <i>k</i> {@code <=} fromIndex {@code &&} this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index to start the search from.
     * @return the index of the last occurrence of the specified substring,
     * searching backward from the specified index,
     * or {@code -1} if there is no such occurrence.
     */
    public int lastIndexOf(CharSeq str, int fromIndex) {
        return back.lastIndexOf(str.back, fromIndex);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index to start the search from.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> lastIndexOfOption(CharSeq str, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(str, fromIndex));
    }
    /**
     * Returns a string that is a substring of this string. The
     * substring begins with the character at the specified index and
     * extends to the end of this string. <p>
     * Examples:
     * <blockquote><pre>
     * "unhappy".substring(2) returns "happy"
     * "Harbison".substring(3) returns "bison"
     * "emptiness".substring(9) returns "" (an empty string)
     * </pre></blockquote>
     *
     * @param beginIndex the beginning index, inclusive.
     * @return the specified substring.
     * @throws IndexOutOfBoundsException if
     *                                   {@code beginIndex} is negative or larger than the
     *                                   length of this {@code CharSeq} object.
     */
    public CharSeq substring(int beginIndex) {
        return CharSeq.of(back.substring(beginIndex));
    }
    /**
     * Returns a string that is a substring of this string. The
     * substring begins at the specified {@code beginIndex} and
     * extends to the character at index {@code endIndex - 1}.
     * Thus the length of the substring is {@code endIndex-beginIndex}.
     * <p>
     * Examples:
     * <blockquote><pre>
     * "hamburger".substring(4, 8) returns "urge"
     * "smiles".substring(1, 5) returns "mile"
     * </pre></blockquote>
     *
     * @param beginIndex the beginning index, inclusive.
     * @param endIndex   the ending index, exclusive.
     * @return the specified substring.
     * @throws IndexOutOfBoundsException if the
     *                                   {@code beginIndex} is negative, or
     *                                   {@code endIndex} is larger than the length of
     *                                   this {@code CharSeq} object, or
     *                                   {@code beginIndex} is larger than
     *                                   {@code endIndex}.
     */
    public CharSeq substring(int beginIndex, int endIndex) {
        return CharSeq.of(back.substring(beginIndex, endIndex));
    }
    @Override
    public String stringPrefix() {
        return "CharSeq";
    }
    /**
     * Returns a string containing the characters in this sequence in the same
     * order as this sequence.  The length of the string will be the length of
     * this sequence.
     *
     * @return a string consisting of exactly this sequence of characters
     */
    @Override
    public String toString() {
        return back;
    }
    /**
     * Concatenates the specified string to the end of this string.
     * <p>
     * If the length of the argument string is {@code 0}, then this
     * {@code CharSeq} object is returned. Otherwise, a
     * {@code CharSeq} object is returned that represents a character
     * sequence that is the concatenation of the character sequence
     * represented by this {@code CharSeq} object and the character
     * sequence represented by the argument string.<p>
     * Examples:
     * <blockquote><pre>
     * "cares".concat("s") returns "caress"
     * "to".concat("get").concat("her") returns "together"
     * </pre></blockquote>
     *
     * @param str the {@code CharSeq} that is concatenated to the end
     *            of this {@code CharSeq}.
     * @return a string that represents the concatenation of this object's
     * characters followed by the string argument's characters.
     */
    public CharSeq concat(CharSeq str) {
        return CharSeq.of(back.concat(str.back));
    }
    /**
     * Tells whether or not this string matches the given <a
     * href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.
     * <p>
     * An invocation of this method of the form
     * <i>str</i>{@code .matches(}<i>regex</i>{@code )} yields exactly the
     * same result as the expression
     * <blockquote>
     * {@link Pattern}.{@link Pattern#matches(String, CharSequence)
     * matches(<i>regex</i>, <i>str</i>)}
     * </blockquote>
     *
     * @param regex the regular expression to which this string is to be matched
     * @return {@code true} if, and only if, this string matches the
     * given regular expression
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public boolean matches(String regex) {
        return back.matches(regex);
    }
    /**
     * Returns true if and only if this string contains the specified
     * sequence of char values.
     *
     * @param s the sequence to search for
     * @return true if this string contains {@code s}, false otherwise
     */
    public boolean contains(CharSequence s) {
        return back.contains(s);
    }
    /**
     * Replaces the first substring of this string that matches the given <a
     * href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
     * given replacement.
     * <p>
     * An invocation of this method of the form
     * <i>str</i>{@code .replaceFirst(}<i>regex</i>{@code ,} <i>repl</i>{@code )}
     * yields exactly the same result as the expression
     * <blockquote>
     * <code>
     * {@link Pattern}.{@link
     * Pattern#compile compile}(<i>regex</i>).{@link
     * Pattern#matcher(CharSequence) matcher}(<i>str</i>).{@link
     * java.util.regex.Matcher#replaceFirst replaceFirst}(<i>repl</i>)
     * </code>
     * </blockquote>
     * Note that backslashes ({@code \}) and dollar signs ({@code $}) in the
     * replacement string may cause the results to be different than if it were
     * being treated as a literal replacement string; see
     * {@link java.util.regex.Matcher#replaceFirst}.
     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
     * meaning of these characters, if desired.
     *
     * @param regex       the regular expression to which this string is to be matched
     * @param replacement the string to be substituted for the first match
     * @return The resulting {@code CharSeq}
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public CharSeq replaceFirst(String regex, String replacement) {
        return CharSeq.of(back.replaceFirst(regex, replacement));
    }
    /**
     * Replaces each substring of this string that matches the given <a
     * href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
     * given replacement.
     * <p>
     * An invocation of this method of the form
     * <i>str</i>{@code .replaceAll(}<i>regex</i>{@code ,} <i>repl</i>{@code )}
     * yields exactly the same result as the expression
     * <blockquote>
     * <code>
     * {@link Pattern}.{@link
     * Pattern#compile compile}(<i>regex</i>).{@link
     * Pattern#matcher(CharSequence) matcher}(<i>str</i>).{@link
     * java.util.regex.Matcher#replaceAll replaceAll}(<i>repl</i>)
     * </code>
     * </blockquote>
     * Note that backslashes ({@code \}) and dollar signs ({@code $}) in the
     * replacement string may cause the results to be different than if it were
     * being treated as a literal replacement string; see
     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.
     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
     * meaning of these characters, if desired.
     *
     * @param regex       the regular expression to which this string is to be matched
     * @param replacement the string to be substituted for each match
     * @return The resulting {@code CharSeq}
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public CharSeq replaceAll(String regex, String replacement) {
        return CharSeq.of(back.replaceAll(regex, replacement));
    }
    /**
     * Replaces each substring of this string that matches the literal target
     * sequence with the specified literal replacement sequence. The
     * replacement proceeds from the beginning of the string to the end, for
     * example, replacing "aa" with "b" in the string "aaa" will result in
     * "ba" rather than "ab".
     *
     * @param target      The sequence of char values to be replaced
     * @param replacement The replacement sequence of char values
     * @return The resulting string
     */
    public CharSeq replace(CharSequence target, CharSequence replacement) {
        return CharSeq.of(back.replace(target, replacement));
    }
    /**
     * Splits this string around matches of the given
     * <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.
     * <p>
     * This method works as if by invoking the two-argument {@link #split(String, int)}
     * method with the given expression and a limit argument of zero.
     * Trailing empty strings are therefore not included in the resulting {@link Seq}.
     * <p>
     * The string {@code "boo:and:foo"}, for example, yields the following results with these expressions:
     * <blockquote>
     * <table style="border-spacing: 0; padding: 1px;">
     * <caption>Split examples showing regex and result</caption>
     * <tr>
     * <th>Regex</th>
     * <th>Result</th>
     * </tr>
     * <tr>
     * <td style="text-align: center;">:</td>
     * <td>{@code { "boo", "and", "foo" }}</td>
     * </tr>
     * <tr>
     * <td style="text-align: center;">o</td>
     * <td>{@code { "b", "", ":and:f" }}</td>
     * </tr>
     * </table>
     * </blockquote>
     *
     * @param regex the delimiting regular expression
     * @return the Seq of strings computed by splitting this string around matches of the given regular expression
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public Seq<CharSeq> split(String regex) {
        return split(regex, 0);
    }
    /**
     * Splits this string around matches of the given
     * <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.
     * <p>
     * The array returned by this method contains each substring of this
     * string that is terminated by another substring that matches the given
     * expression or is terminated by the end of the string.  The substrings in
     * the array are in the order in which they occur in this string.  If the
     * expression does not match any part of the input then the resulting array
     * has just one element, namely this string.
     * <p>
     * When there is a positive-width match at the beginning of this
     * string then an empty leading substring is included at the beginning
     * of the resulting array. A zero-width match at the beginning however
     * never produces such empty leading substring.
     * <p>
     * The {@code limit} parameter controls the number of times the
     * pattern is applied and therefore affects the length of the resulting
     * array.  If the limit <i>n</i> is greater than zero then the pattern
     * will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's
     * length will be no greater than <i>n</i>, and the array's last entry
     * will contain all input beyond the last matched delimiter.  If <i>n</i>
     * is non-positive then the pattern will be applied as many times as
     * possible and the array can have any length.  If <i>n</i> is zero then
     * the pattern will be applied as many times as possible, the array can
     * have any length, and trailing empty strings will be discarded.
     * <p>
     * The string {@code "boo:and:foo"}, for example, yields the
     * following results with these parameters:
     * <blockquote><table style="border-spacing: 0; padding: 1px;">
     * <caption>Split example showing regex, limit, and result</caption>
     * <tr>
     * <th>Regex</th>
     * <th>Limit</th>
     * <th>Result</th>
     * </tr>
     * <tr><td style="text-align: center;">:</td>
     * <td style="text-align: center;">2</td>
     * <td>{@code { "boo", "and:foo" }}</td></tr>
     * <tr><td style="text-align: center;">:</td>
     * <td style="text-align: center;">5</td>
     * <td>{@code { "boo", "and", "foo" }}</td></tr>
     * <tr><td style="text-align: center;">:</td>
     * <td style="text-align: center;">-2</td>
     * <td>{@code { "boo", "and", "foo" }}</td></tr>
     * <tr><td style="text-align: center;">o</td>
     * <td style="text-align: center;">5</td>
     * <td>{@code { "b", "", ":and:f", "", "" }}</td></tr>
     * <tr><td style="text-align: center;">o</td>
     * <td style="text-align: center;">-2</td>
     * <td>{@code { "b", "", ":and:f", "", "" }}</td></tr>
     * <tr><td style="text-align: center;">o</td>
     * <td style="text-align: center;">0</td>
     * <td>{@code { "b", "", ":and:f" }}</td></tr>
     * </table></blockquote>
     * An invocation of this method of the form
     * <i>str.</i>{@code split(}<i>regex</i>{@code ,}&nbsp;<i>n</i>{@code )}
     * yields the same result as the expression
     * <blockquote>
     * <code>
     * {@link Pattern}.{@link
     * Pattern#compile compile}(<i>regex</i>).{@link
     * Pattern#split(CharSequence, int) split}(<i>str</i>,&nbsp;<i>n</i>)
     * </code>
     * </blockquote>
     *
     * @param regex the delimiting regular expression
     * @param limit the result threshold, as described above
     * @return the Seq of strings computed by splitting this string around matches of the given regular expression
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public Seq<CharSeq> split(String regex, int limit) {
        final Seq<String> split = Array.wrap(back.split(regex, limit));
        return split.map(CharSeq::of);
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to lower
     * case using the rules of the given {@code Locale}.  Case mapping is based
     * on the Unicode Standard version specified by the {@link Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * {@code CharSeq} may be a different length than the original {@code CharSeq}.
     * <p>
     * Examples of lowercase  mappings are in the following table:
     * <table border="1">
     * <caption>Lowercase mapping examples showing language code of locale, upper case, lower case, and description</caption>
     * <tr>
     * <th>Language Code of Locale</th>
     * <th>Upper Case</th>
     * <th>Lower Case</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0130</td>
     * <td>&#92;u0069</td>
     * <td>capital letter I with dot above -&gt; small letter i</td>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0049</td>
     * <td>&#92;u0131</td>
     * <td>capital letter I -&gt; small letter dotless i </td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>French Fries</td>
     * <td>french fries</td>
     * <td>lowercased all chars in String</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td><img src="doc-files/capiota.gif" alt="capiota"><img src="doc-files/capchi.gif" alt="capchi">
     * <img src="doc-files/captheta.gif" alt="captheta"><img src="doc-files/capupsil.gif" alt="capupsil">
     * <img src="doc-files/capsigma.gif" alt="capsigma"></td>
     * <td><img src="doc-files/iota.gif" alt="iota"><img src="doc-files/chi.gif" alt="chi">
     * <img src="doc-files/theta.gif" alt="theta"><img src="doc-files/upsilon.gif" alt="upsilon">
     * <img src="doc-files/sigma1.gif" alt="sigma"></td>
     * <td>lowercased all chars in String</td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale
     * @return the {@code CharSeq}, converted to lowercase.
     * @see String#toLowerCase()
     * @see String#toUpperCase()
     * @see String#toUpperCase(Locale)
     */
    public CharSeq toLowerCase(Locale locale) {
        return CharSeq.of(back.toLowerCase(locale));
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to lower
     * case using the rules of the default locale. This is equivalent to calling
     * {@code toLowerCase(Locale.getDefault())}.
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.
     * For instance, {@code "TITLE".toLowerCase()} in a Turkish locale
     * returns {@code "t\u005Cu0131tle"}, where '\u005Cu0131' is the
     * LATIN SMALL LETTER DOTLESS I character.
     * To obtain correct results for locale insensitive strings, use
     * {@code toLowerCase(Locale.ROOT)}.
     * <p>
     *
     * @return the {@code CharSeq}, converted to lowercase.
     * @see String#toLowerCase(Locale)
     */
    public CharSeq toLowerCase() {
        return CharSeq.of(back.toLowerCase(Locale.getDefault()));
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to upper
     * case using the rules of the given {@code Locale}. Case mapping is based
     * on the Unicode Standard version specified by the {@link Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * {@code CharSeq} may be a different length than the original {@code CharSeq}.
     * <p>
     * Examples of locale-sensitive and 1:M case mappings are in the following table.
     *
     * <table border="1">
     * <caption>Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.</caption>
     * <tr>
     * <th>Language Code of Locale</th>
     * <th>Lower Case</th>
     * <th>Upper Case</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0069</td>
     * <td>&#92;u0130</td>
     * <td>small letter i -&gt; capital letter I with dot above</td>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0131</td>
     * <td>&#92;u0049</td>
     * <td>small letter dotless i -&gt; capital letter I</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>&#92;u00df</td>
     * <td>&#92;u0053 &#92;u0053</td>
     * <td>small letter sharp s -&gt; two letters: SS</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>Fahrvergn&uuml;gen</td>
     * <td>FAHRVERGN&Uuml;GEN</td>
     * <td></td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale
     * @return the {@code CharSeq}, converted to uppercase.
     * @see String#toUpperCase()
     * @see String#toLowerCase()
     * @see String#toLowerCase(Locale)
     */
    public CharSeq toUpperCase(Locale locale) {
        return CharSeq.of(back.toUpperCase(locale));
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to upper
     * case using the rules of the default locale. This method is equivalent to
     * {@code toUpperCase(Locale.getDefault())}.
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.
     * For instance, {@code "title".toUpperCase()} in a Turkish locale
     * returns {@code "T\u005Cu0130TLE"}, where '\u005Cu0130' is the
     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.
     * To obtain correct results for locale insensitive strings, use
     * {@code toUpperCase(Locale.ROOT)}.
     * <p>
     *
     * @return the {@code CharSeq}, converted to uppercase.
     * @see String#toUpperCase(Locale)
     */
    public CharSeq toUpperCase() {
        return CharSeq.of(back.toUpperCase(Locale.getDefault()));
    }
    /**
     * Converts the first character in this {@code CharSeq} to upper
     * case using the rules of the given {@code Locale}. If the {@code CharSeq} is
     * empty, it won't have any effect. Case mapping is based
     * on the Unicode Standard version specified by the {@link Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * {@code CharSeq} may be a different length than the original {@code CharSeq}.
     * <p>
     * Examples of locale-sensitive and 1:M case mappings are in the following table.
     *
     * <table border="1">
     * <caption>Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.</caption>
     * <tr>
     * <th>Language Code of Locale</th>
     * <th>Lower Case</th>
     * <th>Upper Case</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0069</td>
     * <td>&#92;u0130</td>
     * <td>small letter i -&gt; capital letter I with dot above</td>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0131</td>
     * <td>&#92;u0049</td>
     * <td>small letter dotless i -&gt; capital letter I</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>&#92;u00df</td>
     * <td>&#92;u0053 &#92;u0053</td>
     * <td>small letter sharp s -&gt; two letters: SS</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>Fahrvergn&uuml;gen</td>
     * <td>FAHRVERGN&Uuml;GEN</td>
     * <td></td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale
     * @return the {@code CharSeq}, capitalized.
     */
    public CharSeq capitalize(Locale locale) {
        if (back.isEmpty()) {
            return this;
        }
        return CharSeq.of(back.substring(0, 1).toUpperCase(locale) + back.substring(1));
    }
    /**
     * Converts the first character in this {@code CharSeq} to upper
     * case using the rules of the default locale. If the {@code CharSeq} is
     * empty, it won't have any effect. This method is equivalent to
     * {@code capitalize(Locale.getDefault())}.
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.
     * For instance, {@code "title".toUpperCase()} in a Turkish locale
     * returns {@code "T\u005Cu0130TLE"}, where '\u005Cu0130' is the
     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.
     * To obtain correct results for locale insensitive strings, use
     * {@code toUpperCase(Locale.ROOT)}.
     * <p>
     *
     * @return the {@code CharSeq}, capitalized.
     */
    public CharSeq capitalize() {
        return capitalize(Locale.getDefault());
    }
    /**
     * Returns a string whose value is this string, with any leading and trailing
     * whitespace removed.
     * <p>
     * If this {@code CharSeq} object represents an empty character
     * sequence, or the first and last characters of character sequence
     * represented by this {@code CharSeq} object both have codes
     * greater than {@code '\u005Cu0020'} (the space character), then a
     * reference to this {@code CharSeq} object is returned.
     * <p>
     * Otherwise, if there is no character with a code greater than
     * {@code '\u005Cu0020'} in the string, then a
     * {@code CharSeq} object representing an empty string is
     * returned.
     * <p>
     * Otherwise, let <i>k</i> be the index of the first character in the
     * string whose code is greater than {@code '\u005Cu0020'}, and let
     * <i>m</i> be the index of the last character in the string whose code
     * is greater than {@code '\u005Cu0020'}. A {@code CharSeq}
     * object is returned, representing the substring of this string that
     * begins with the character at index <i>k</i> and ends with the
     * character at index <i>m</i>-that is, the result of
     * {@code this.substring(k, m + 1)}.
     * <p>
     * This method may be used to trim whitespace (as defined above) from
     * the beginning and end of a string.
     *
     * @return A string whose value is this string, with any leading and trailing white
     * space removed, or this string if it has no leading or
     * trailing white space.
     */
    public CharSeq trim() {
        return of(back.trim());
    }
    /**
     * Converts this string to a new character array.
     *
     * @return a newly allocated character array whose length is the length
     * of this string and whose contents are initialized to contain
     * the character sequence represented by this string.
     */
    public char[] toCharArray() {
        return back.toCharArray();
    }
    // -- number conversion
    /**
     * Decodes this {@code CharSeq} into a {@code Byte} by calling {@link Byte#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Byte value = charSeq.decodeByte();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Byte value = Byte.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Byte} object holding the byte value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable byte.
     */
    public Byte decodeByte() {
        return Byte.decode(back);
    }
    /**
     * Decodes this {@code CharSeq} into an {@code Integer} by calling {@link Integer#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Integer value = charSeq.decodeInteger();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Integer value = Integer.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return an {@code Integer} object holding the int value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable int.
     */
    public Integer decodeInteger() {
        return Integer.decode(back);
    }
    /**
     * Decodes this {@code CharSeq} into a {@code Long} by calling {@link Long#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Long value = charSeq.decodeLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Long value = Long.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Long} object holding the long value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable long.
     */
    public Long decodeLong() {
        return Long.decode(back);
    }
    /**
     * Decodes this {@code CharSeq} into a {@code Short} by calling {@link Short#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Short value = charSeq.decodeShort();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Short value = Short.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Short} object holding the short value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable short.
     */
    public Short decodeShort() {
        return Short.decode(back);
    }
    /**
     * Parses this {@code CharSeq} as a boolean by calling {@link Boolean#parseBoolean(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * boolean value = charSeq.parseBoolean();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * boolean value = Boolean.parseBoolean(charSeq.mkString());
     * </code></pre>
     *
     * @return the boolean represented by this {@code CharSeq}
     */
    public boolean parseBoolean() {
        return Boolean.parseBoolean(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal byte by calling {@link Byte#parseByte(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * byte value = charSeq.parseByte();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * byte value = Byte.parseByte(charSeq.mkString());
     * </code></pre>
     *
     * @return the byte value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public byte parseByte() {
        return Byte.parseByte(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed byte in the specified radix
     * by calling {@link Byte#parseByte(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * byte value = charSeq.parseByte(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * byte value = Byte.parseByte(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the byte value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public byte parseByte(int radix) {
        return Byte.parseByte(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a double by calling {@link Double#parseDouble(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * double value = charSeq.parseDouble();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * double value = Double.parseDouble(charSeq.mkString());
     * </code></pre>
     *
     * @return the double value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable double.
     */
    public double parseDouble() {
        return Double.parseDouble(back);
    }
    /**
     * Parses this {@code CharSeq} as a float by calling {@link Float#parseFloat(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * float value = charSeq.parseFloat();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * float value = Double.parseFloat(charSeq.mkString());
     * </code></pre>
     *
     * @return the float value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable float.
     */
    public float parseFloat() {
        return Float.parseFloat(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal int by calling {@link Integer#parseInt(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseInt();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseInt(charSeq.mkString());
     * </code></pre>
     *
     * @return the int value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public int parseInt() {
        return Integer.parseInt(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed int in the specified radix
     * by calling {@link Integer#parseInt(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseInt(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseInt(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the int value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public int parseInt(int radix) {
        return Integer.parseInt(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned decimal int by calling {@link Integer#parseUnsignedInt(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseUnsignedInt();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseUnsignedInt(charSeq.mkString());
     * </code></pre>
     *
     * @return the unsigned int value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned int.
     */
    @GwtIncompatible
    public int parseUnsignedInt() {
        return Integer.parseUnsignedInt(back);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned int in the specified radix
     * by calling {@link Integer#parseUnsignedInt(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseUnsignedInt(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseUnsignedInt(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the unsigned int value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned int.
     */
    @GwtIncompatible
    public int parseUnsignedInt(int radix) {
        return Integer.parseUnsignedInt(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal long by calling {@link Long#parseLong(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseLong(charSeq.mkString());
     * </code></pre>
     *
     * @return the long value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public long parseLong() {
        return Long.parseLong(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed long in the specified radix
     * by calling {@link Long#parseLong(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseLong(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseLong(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the long value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public long parseLong(int radix) {
        return Long.parseLong(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned decimal long by calling {@link Long#parseUnsignedLong(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseUnsignedLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseUnsignedLong(charSeq.mkString());
     * </code></pre>
     *
     * @return the unsigned long value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned long.
     */
    @GwtIncompatible
    public long parseUnsignedLong() {
        return Long.parseUnsignedLong(back);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned long in the specified radix
     * by calling {@link Long#parseUnsignedLong(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseUnsignedLong(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseUnsignedLong(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the unsigned long value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned long.
     */
    @GwtIncompatible
    public long parseUnsignedLong(int radix) {
        return Long.parseUnsignedLong(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal short by calling {@link Short#parseShort(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * short value = charSeq.parseShort();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * short value = Short.parseShort(charSeq.mkString());
     * </code></pre>
     *
     * @return the short value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public short parseShort() {
        return Short.parseShort(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed short in the specified radix
     * by calling {@link Short#parseShort(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * short value = charSeq.parseShort(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * short value = Short.parseShort(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the short value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public short parseShort(int radix) {
        return Short.parseShort(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Boolean} by calling {@link Boolean#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Boolean value = charSeq.toBoolean();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Boolean value = Boolean.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return the {@code Boolean} value represented by this {@code CharSeq}
     */
    public Boolean toBoolean() {
        return Boolean.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Byte} by calling {@link Byte#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Byte value = charSeq.toByte();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Byte value = Byte.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Byte} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public Byte toByte() {
        return Byte.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Byte} in the specified radix
     * by calling {@link Byte#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Byte value = charSeq.toByte(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Byte value = Byte.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return a {@code Byte} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public Byte toByte(int radix) {
        return Byte.valueOf(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Double} by calling {@link Double#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Double value = charSeq.toDouble();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Double value = Double.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Double} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable double.
     */
    public Double toDouble() {
        return Double.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Float} by calling {@link Float#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Float value = charSeq.toFloat();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Float value = Float.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Float} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable float.
     */
    public Float toFloat() {
        return Float.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to an {@code Integer} by calling {@link Integer#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Integer value = charSeq.toInteger();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Integer value = Integer.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return an {@code Integer} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public Integer toInteger() {
        return Integer.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to an {@code Integer} in the specified radix
     * by calling {@link Integer#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Integer value = charSeq.toInteger(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Integer value = Integer.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return an {@code Integer} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public Integer toInteger(int radix) {
        return Integer.valueOf(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Long} by calling {@link Long#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Long value = charSeq.toLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Long value = Long.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Long} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public Long toLong() {
        return Long.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Long} in the specified radix
     * by calling {@link Long#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Long value = charSeq.toLong(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Long value = Long.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return a {@code Long} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public Long toLong(int radix) {
        return Long.valueOf(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Short} by calling {@link Short#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Short value = charSeq.toShort();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Short value = Short.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Short} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public Short toShort() {
        return Short.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Short} in the specified radix
     * by calling {@link Short#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Short value = charSeq.toShort(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Short value = Short.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return a {@code Short} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public Short toShort(int radix) {
        return Short.valueOf(back, radix);
    }
    // -- conversion overrides
    @Override
    public Character[] toJavaArray() {
        return toJavaList().toArray(new Character[0]);
    }
    // -- functional interfaces
    @FunctionalInterface
    public interface CharUnaryOperator {
        char apply(char c);
    }
    @FunctionalInterface
    public interface CharFunction<R> {
        R apply(char c);
    }
}
interface CharSeqModule {
    interface Combinations {
        static IndexedSeq<CharSeq> apply(CharSeq elements, int k) {
            if (k == 0) {
                return Vector.of(CharSeq.empty());
            } else {
                return elements.zipWithIndex().flatMap(
                        t -> apply(elements.drop(t._2 + 1), (k - 1)).map((CharSeq c) -> c.prepend(t._1))
                );
            }
        }
    }
}
/* ____  ______________  ________________________  __________
 * \   \/   /      \   \/   /   __/   /      \   \/   /      \
 *  \______/___/\___\______/___/_____/___/\___\______/___/\___\
 *
 * Copyright 2014-2025 Vavr, https://vavr.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vavr.collection;
import io.vavr.PartialFunction;
import io.vavr.Tuple2;
import io.vavr.Tuple3;
import io.vavr.Value;
import io.vavr.control.Option;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.function.*;
import java.util.stream.DoubleStream;
/**
 * An interface for inherently recursive, multi-valued data structures. The order of elements is determined by
 * {@link Iterable#iterator()}, which may vary each time it is called.
 *
 * <p>
 * Basic operations:
 *
 * <ul>
 * <li>{@link #collect(PartialFunction)}</li>
 * <li>{@link #contains(Object)}</li>
 * <li>{@link #containsAll(Iterable)}</li>
 * <li>{@link #head()}</li>
 * <li>{@link #headOption()}</li>
 * <li>{@link #init()}</li>
 * <li>{@link #initOption()}</li>
 * <li>{@link #isEmpty()}</li>
 * <li>{@link #last()}</li>
 * <li>{@link #lastOption()}</li>
 * <li>{@link #length()}</li>
 * <li>{@link #size()}</li>
 * <li>{@link #tail()}</li>
 * <li>{@link #tailOption()}</li>
 * </ul>
 *
 * Iteration:
 *
 * <ul>
 * <li>{@link #forEachWithIndex(ObjIntConsumer)}</li>
 * <li>{@link #grouped(int)}</li>
 * <li>{@link #iterator()}</li>
 * <li>{@link #slideBy(Function)}</li>
 * <li>{@link #sliding(int)}</li>
 * <li>{@link #sliding(int, int)}</li>
 * </ul>
 *
 * Numeric operations:
 *
 * <ul>
 * <li>{@link #average()}</li>
 * <li>{@link #max()}</li>
 * <li>{@link #maxBy(Comparator)}</li>
 * <li>{@link #maxBy(Function)}</li>
 * <li>{@link #min()}</li>
 * <li>{@link #minBy(Comparator)}</li>
 * <li>{@link #minBy(Function)}</li>
 * <li>{@link #product()}</li>
 * <li>{@link #sum()}</li>
 * </ul>
 *
 * Reduction/Folding:
 *
 * <ul>
 * <li>{@link #count(Predicate)}</li>
 * <li>{@link #fold(Object, BiFunction)}</li>
 * <li>{@link #foldLeft(Object, BiFunction)}</li>
 * <li>{@link #foldRight(Object, BiFunction)}</li>
 * <li>{@link #mkString()}</li>
 * <li>{@link #mkString(CharSequence)}</li>
 * <li>{@link #mkString(CharSequence, CharSequence, CharSequence)}</li>
 * <li>{@link #reduce(BiFunction)}</li>
 * <li>{@link #reduceOption(BiFunction)}</li>
 * <li>{@link #reduceLeft(BiFunction)}</li>
 * <li>{@link #reduceLeftOption(BiFunction)}</li>
 * <li>{@link #reduceRight(BiFunction)}</li>
 * <li>{@link #reduceRightOption(BiFunction)}</li>
 * </ul>
 *
 * Selection:
 *
 * <ul>
 * <li>{@link #drop(int)}</li>
 * <li>{@link #dropRight(int)}</li>
 * <li>{@link #dropUntil(Predicate)}</li>
 * <li>{@link #dropWhile(Predicate)}</li>
 * <li>{@link #filter(Predicate)}</li>
 * <li>{@link #reject(Predicate)}</li>
 * <li>{@link #find(Predicate)}</li>
 * <li>{@link #findLast(Predicate)}</li>
 * <li>{@link #groupBy(Function)}</li>
 * <li>{@link #partition(Predicate)}</li>
 * <li>{@link #retainAll(Iterable)}</li>
 * <li>{@link #take(int)}</li>
 * <li>{@link #takeRight(int)}</li>
 * <li>{@link #takeUntil(Predicate)}</li>
 * <li>{@link #takeWhile(Predicate)}</li>
 * </ul>
 *
 * Tests:
 *
 * <ul>
 * <li>{@link #existsUnique(Predicate)}</li>
 * <li>{@link #hasDefiniteSize()}</li>
 * <li>{@link #isDistinct()}</li>
 * <li>{@link #isOrdered()}</li>
 * <li>{@link #isSequential()}</li>
 * <li>{@link #isTraversableAgain()}</li>
 * </ul>
 *
 * Transformation:
 *
 * <ul>
 * <li>{@link #distinct()}</li>
 * <li>{@link #distinctBy(Comparator)}</li>
 * <li>{@link #distinctBy(Function)}</li>
 * <li>{@link #flatMap(Function)}</li>
 * <li>{@link #map(Function)}</li>
 * <li>{@link #replace(Object, Object)}</li>
 * <li>{@link #replaceAll(Object, Object)}</li>
 * <li>{@link #scan(Object, BiFunction)}</li>
 * <li>{@link #scanLeft(Object, BiFunction)}</li>
 * <li>{@link #scanRight(Object, BiFunction)}</li>
 * <li>{@link #span(Predicate)}</li>
 * <li>{@link #unzip(Function)}</li>
 * <li>{@link #unzip3(Function)}</li>
 * <li>{@link #zip(Iterable)}</li>
 * <li>{@link #zipAll(Iterable, Object, Object)}</li>
 * <li>{@link #zipWithIndex()}</li>
 * </ul>
 *
 * @param <T> Component type
 * @author Daniel Dietrich and others
 */
public interface Traversable<T> extends Foldable<T>, Value<T> {
    /**
     * Narrows a widened {@code Traversable<? extends T>} to {@code Traversable<T>}
     * by performing a type-safe cast. This is eligible because immutable/read-only
     * collections are covariant.
     *
     * @param traversable An {@code Traversable}.
     * @param <T>         Component type of the {@code Traversable}.
     * @return the given {@code traversable} instance as narrowed type {@code Traversable<T>}.
     */
    @SuppressWarnings("unchecked")
    static <T> Traversable<T> narrow(Traversable<? extends T> traversable) {
        return (Traversable<T>) traversable;
    }
    /**
     * Matches each element with a unique key that you extract from it.
     * If the same key is present twice, the function will return {@code None}.
     *
     * @param getKey A function which extracts a key from elements
     * @param <K>    key class type
     * @return A Map containing the elements arranged by their keys.
     * @throws NullPointerException if {@code getKey} is null.
     * @see #groupBy(Function)
     */
    default <K> Option<Map<K, T>> arrangeBy(Function<? super T, ? extends K> getKey) {
        return Option.of(groupBy(getKey).mapValues(Traversable<T>::singleOption))
                .filter(map -> !map.exists(kv -> kv._2.isEmpty()))
                .map(map -> Map.narrow(map.mapValues(Option::get)));
    }
    /**
     * Calculates the average of this elements, assuming that the element type is {@link Number}.
     *
     * Since we do not know if the component type {@code T} is of type {@code Number}, the
     * {@code average()} call might throw at runtime (see examples below).
     * <p>
     * Examples:
     *
     * <pre>{@code
     * List.empty().average()                       // = None
     * List.of(1, 2, 3).average()                   // = Some(2.0)
     * List.of(1.0, 10e100, 2.0, -10e100).average() // = Some(0.75)
     * List.of(1.0, Double.NaN).average()           // = NaN
     * List.of("apple", "pear").average()           // throws
     * }</pre>
     *
     * Please note that Java's {@link DoubleStream#average()} uses the
     * <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan summation algorithm</a>
     * (also known as compensated summation), which has known limitations.
     * <p>
     * Vavr uses Neumaier's modification of the Kahan algorithm, which yields better results.
     *
     * <pre>{@code
     * // = OptionalDouble(0.0) (wrong)
     * j.u.s.DoubleStream.of(1.0, 10e100, 2.0, -10e100).average()
     *
     * // = Some(0.75) (correct)
     * List.of(1.0, 10e100, 2.0, -10e100).average()
     * }</pre>
     *
     * @return {@code Some(average)} or {@code None}, if there are no elements
     * @throws UnsupportedOperationException if this elements are not numeric
     */
    default Option<Double> average() {
        try {
            final double[] sum = TraversableModule.neumaierSum(this, t -> ((Number) t).doubleValue());
            final double count = sum[1];
            return (count == 0) ? Option.none() : Option.some(sum[0] / count);
        } catch(ClassCastException x) {
            throw new UnsupportedOperationException("not numeric", x);
        }
    }
    /**
     * Collects all elements that are in the domain of the given {@code partialFunction} by mapping the elements to type {@code R}.
     * <p>
     * More specifically, for each of this elements in iteration order first it is checked
     *
     * <pre>{@code
     * partialFunction.isDefinedAt(element)
     * }</pre>
     *
     * If the elements makes it through that filter, the mapped instance is added to the result collection
     *
     * <pre>{@code
     * R newElement = partialFunction.apply(element)
     * }</pre>
     *
     * <strong>Note:</strong>If this {@code Traversable} is ordered (i.e. extends {@link Ordered},
     * the caller of {@code collect} has to ensure that the elements are comparable (i.e. extend {@link Comparable}).
     *
     * @param partialFunction A function that is not necessarily defined of all elements of this traversable.
     * @param <R> The new element type
     * @return A new {@code Traversable} instance containing elements of type {@code R}
     * @throws NullPointerException if {@code partialFunction} is null
     */
    <R> Traversable<R> collect(PartialFunction<? super T, ? extends R> partialFunction);
    /**
     * Tests if this Traversable contains all given elements.
     * <p>
     * The result is equivalent to
     * {@code elements.isEmpty() ? true : contains(elements.head()) && containsAll(elements.tail())} but implemented
     * without recursion.
     *
     * @param elements A List of values of type T.
     * @return true, if this List contains all given elements, false otherwise.
     * @throws NullPointerException if {@code elements} is null
     */
    default boolean containsAll(Iterable<? extends T> elements) {
        Objects.requireNonNull(elements, "elements is null");
        for (T element : elements) {
            if (!contains(element)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Counts the elements which satisfy the given predicate.
     *
     * @param predicate A predicate
     * @return A number {@code >= 0}
     * @throws NullPointerException if {@code predicate} is null.
     */
    default int count(Predicate<? super T> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return foldLeft(0, (i, t) -> predicate.test(t) ? i + 1 : i);
    }
    /**
     * Returns a new version of this which contains no duplicates. Elements are compared using {@code equals}.
     *
     * @return a new {@code Traversable} containing this elements without duplicates
     */
    Traversable<T> distinct();
    /**
     * Returns a new version of this which contains no duplicates. Elements are compared using the given
     * {@code comparator}.
     *
     * @param comparator A comparator
     * @return a new {@code Traversable} containing this elements without duplicates
     * @throws NullPointerException if {@code comparator} is null.
     */
    Traversable<T> distinctBy(Comparator<? super T> comparator);
    /**
     * Returns a new version of this which contains no duplicates. Elements mapped to keys which are compared using
     * {@code equals}.
     * <p>
     * The elements of the result are determined in the order of their occurrence - first match wins.
     *
     * @param keyExtractor A key extractor
     * @param <U>          key type
     * @return a new {@code Traversable} containing this elements without duplicates
     * @throws NullPointerException if {@code keyExtractor} is null
     */
    <U> Traversable<T> distinctBy(Function<? super T, ? extends U> keyExtractor);
    /**
     * Drops the first n elements of this or all elements, if this length &lt; n.
     *
     * @param n The number of elements to drop.
     * @return a new instance consisting of all elements of this except the first n ones, or else the empty instance,
     * if this has less than n elements.
     */
    Traversable<T> drop(int n);
    /**
     * Drops the last n elements of this or all elements, if this length &lt; n.
     *
     * @param n The number of elements to drop.
     * @return a new instance consisting of all elements of this except the last n ones, or else the empty instance,
     * if this has less than n elements.
     */
    Traversable<T> dropRight(int n);
    /**
     * Drops elements until the predicate holds for the current element.
     *
     * @param predicate A condition tested subsequently for this elements.
     * @return a new instance consisting of all elements starting from the first one which does satisfy the given
     * predicate.
     * @throws NullPointerException if {@code predicate} is null
     */
    Traversable<T> dropUntil(Predicate<? super T> predicate);
    /**
     * Drops elements while the predicate holds for the current element.
     * <p>
     * Note: This is essentially the same as {@code dropUntil(predicate.negate())}.
     * It is intended to be used with method references, which cannot be negated directly.
     *
     * @param predicate A condition tested subsequently for this elements.
     * @return a new instance consisting of all elements starting from the first one which does not satisfy the
     * given predicate.
     * @throws NullPointerException if {@code predicate} is null
     */
    Traversable<T> dropWhile(Predicate<? super T> predicate);
    /**
     * In Vavr there are four basic classes of collections:
     *
     * <ul>
     * <li>Seq (sequential elements)</li>
     * <li>Set (distinct elements)</li>
     * <li>Map (indexed elements)</li>
     * <li>Multimap (indexed collections)</li>
     * </ul>
     *
     * Two collection instances of these classes are equal if and only if both collections
     *
     * <ul>
     * <li>belong to the same basic collection class (Seq, Set, Map or Multimap)</li>
     * <li>contain the same elements</li>
     * <li>have the same element order, if the collections are of type Seq</li>
     * </ul>
     *
     * Two Map/Multimap elements, resp. entries, (key1, value1) and (key2, value2) are equal,
     * if the keys are equal and the values are equal.
     * <p>
     * <strong>Notes:</strong>
     *
     * <ul>
     * <li>No collection instance equals null, e.g. Queue(1) not equals null.</li>
     * <li>Nulls are allowed and handled as expected, e.g. List(null, 1) equals Stream(null, 1)
     * and HashMap((null, 1)) equals LinkedHashMap((null, 1)).
     * </li>
     * <li>The element order is taken into account for Seq only.
     * E.g. List(null, 1) not equals Stream(1, null)
     * and HashMap((null, 1), ("a", null)) equals LinkedHashMap(("a", null), (null, 1)).
     * The reason is, that we do not know which implementations we compare when having
     * two instances of type Map, Multimap or Set (see <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>).</li>
     * <li>Other collection classes are equal if their types are equal and their elements are equal (in iteration order).</li>
     * <li>Iterator equality is defined to be object reference equality.</li>
     * </ul>
     *
     * @param obj an object, may be null
     * @return true, if this collection equals the given object according to the rules described above, false otherwise.
     */
    boolean equals(Object obj);
    /**
     * Checks, if a unique elements exists such that the predicate holds.
     *
     * @param predicate A Predicate
     * @return true, if predicate holds for a unique element, false otherwise
     * @throws NullPointerException if {@code predicate} is null
     */
    default boolean existsUnique(Predicate<? super T> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        boolean exists = false;
        for (T t : this) {
            if (predicate.test(t)) {
                if (exists) {
                    return false;
                } else {
                    exists = true;
                }
            }
        }
        return exists;
    }
    /**
     * Returns a new traversable consisting of all elements which satisfy the given predicate.
     *
     * @param predicate A predicate
     * @return a new traversable
     * @throws NullPointerException if {@code predicate} is null
     */
    Traversable<T> filter(Predicate<? super T> predicate);
    /**
     * Returns a new traversable consisting of all elements which do not satisfy the given predicate.
     * <p>
     * The default implementation is equivalent to
     * <pre>{@code filter(predicate.negate()}</pre>
     *
     * @param predicate A predicate
     * @return a new traversable
     * @throws NullPointerException if {@code predicate} is null
     */
    default Traversable<T> reject(Predicate<? super T> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return filter(predicate.negate());
    }
    /**
     * Returns the first element of this which satisfies the given predicate.
     *
     * @param predicate A predicate.
     * @return Some(element) or None, where element may be null (i.e. {@code List.of(null).find(e -> e == null)}).
     * @throws NullPointerException if {@code predicate} is null
     */
    default Option<T> find(Predicate<? super T> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        for (T a : this) {
            if (predicate.test(a)) {
                return Option.some(a); // may be Some(null)
            }
        }
        return Option.none();
    }
    /**
     * Returns the last element of this which satisfies the given predicate.
     * <p>
     * Same as {@code reverse().find(predicate)}.
     *
     * @param predicate A predicate.
     * @return Some(element) or None, where element may be null (i.e. {@code List.of(null).find(e -> e == null)}).
     * @throws NullPointerException if {@code predicate} is null
     */
    default Option<T> findLast(Predicate<? super T> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return iterator().findLast(predicate);
    }
    /**
     * FlatMaps this Traversable.
     *
     * @param mapper A mapper
     * @param <U>    The resulting component type.
     * @return A new Traversable instance.
     */
    <U> Traversable<U> flatMap(Function<? super T, ? extends Iterable<? extends U>> mapper);
    @Override
    default <U> U foldLeft(U zero, BiFunction<? super U, ? super T, ? extends U> f) {
        Objects.requireNonNull(f, "f is null");
        U xs = zero;
        for (T x : this) {
            xs = f.apply(xs, x);
        }
        return xs;
    }
    @Override
    <U> U foldRight(U zero, BiFunction<? super T, ? super U, ? extends U> f);
    /**
     * Performs an action on each element. In contrast to {@link #forEach(Consumer)},
     * additionally the element's index is passed to the given {@code action}.
     * <p>
     * This is essentially the same as {@code iterator().zipWithIndex().forEach()} but performs better because
     * no intermediate {@code Tuple2} instances are created and no boxing of int values takes place.
     * <p>
     * Please note that subsequent calls to {@code forEachWithIndex} might lead to different iteration orders,
     * depending on the underlying {@code Traversable} implementation.
     * <p>
     * Please also note that {@code forEachWithIndex} might loop infinitely if the {@code Traversable} is lazily
     * evaluated, like {@link Stream}.
     *
     * @param action A {@link ObjIntConsumer}
     * @throws NullPointerException if {@code action} is null
     */
    default void forEachWithIndex(ObjIntConsumer<? super T> action) {
        Objects.requireNonNull(action, "action is null");
        int index = 0;
        for (T t : this) {
            action.accept(t, index++);
        }
    }
    /**
     * Gets the first value in iteration order if this {@code Traversable} is not empty, otherwise throws.
     *
     * @return the first value
     * @throws NoSuchElementException if this {@code Traversable} is empty.
     */
    @Override
    default T get() {
        return head();
    }
    /**
     * Groups this elements by classifying the elements.
     *
     * @param classifier A function which classifies elements into classes
     * @param <C>        classified class type
     * @return A Map containing the grouped elements
     * @throws NullPointerException if {@code classifier} is null.
     * @see #arrangeBy(Function)
     */
    <C> Map<C, ? extends Traversable<T>> groupBy(Function<? super T, ? extends C> classifier);
    /**
     * Groups this {@code Traversable} into fixed size blocks.
     * <p>
     * Let length be the length of this Iterable. Then grouped is defined as follows:
     * <ul>
     * <li>If {@code this.isEmpty()}, the resulting {@code Iterator} is empty.</li>
     * <li>If {@code size <= length}, the resulting {@code Iterator} will contain {@code length / size} blocks of size
     * {@code size} and maybe a non-empty block of size {@code length % size}, if there are remaining elements.</li>
     * <li>If {@code size > length}, the resulting {@code Iterator} will contain one block of size {@code length}.</li>
     * </ul>
     * Examples:
     * <pre>
     * <code>
     * [].grouped(1) = []
     * [].grouped(0) throws
     * [].grouped(-1) throws
     * [1,2,3,4].grouped(2) = [[1,2],[3,4]]
     * [1,2,3,4,5].grouped(2) = [[1,2],[3,4],[5]]
     * [1,2,3,4].grouped(5) = [[1,2,3,4]]
     * </code>
     * </pre>
     *
     * Please note that {@code grouped(int)} is a special case of {@linkplain #sliding(int, int)}, i.e.
     * {@code grouped(size)} is the same as {@code sliding(size, size)}.
     *
     * @param size a positive block size
     * @return A new Iterator of grouped blocks of the given size
     * @throws IllegalArgumentException if {@code size} is negative or zero
     */
    Iterator<? extends Traversable<T>> grouped(int size);
    /**
     * Checks if this Traversable is known to have a finite size.
     * <p>
     * This method should be implemented by classes only, i.e. not by interfaces.
     *
     * @return true, if this Traversable is known to have a finite size, false otherwise.
     */
    boolean hasDefiniteSize();
    /**
     * Returns the first element of a non-empty Traversable.
     *
     * @return The first element of this Traversable.
     * @throws NoSuchElementException if this is empty
     */
    T head();
    /**
     * Returns the first element of a non-empty Traversable as {@code Option}.
     *
     * @return {@code Some(element)} or {@code None} if this is empty.
     */
    default Option<T> headOption() {
        return isEmpty() ? Option.none() : Option.some(head());
    }
    /**
     * Returns the hash code of this collection.
     * <br>
     * We distinguish between two types of hashes, those for collections with predictable iteration order (like Seq) and those with arbitrary iteration order (like Set, Map and Multimap).
     * <br>
     * In all cases the hash of an empty collection is defined to be 1.
     * <br>
     * Collections with predictable iteration order are hashed as follows:
     *
     * <pre>{@code
     * int hash = 1;
     * for (T t : this) { hash = hash * 31 + Objects.hashCode(t); }
     * }</pre>
     *
     * Collections with arbitrary iteration order are hashed in a way such that the hash of a fixed number of elements is independent of their iteration order.
     *
     * <pre>{@code
     * int hash = 1;
     * for (T t : this) { hash += Objects.hashCode(t); }
     * }</pre>
     *
     * Please note that the particular hashing algorithms may change in a future version of Vavr.
     * <br>
     * Generally, hash codes of collections aren't cached in Vavr (opposed to the size/length).
     * Storing hash codes in order to reduce the time complexity would increase the memory footprint.
     * Persistent collections are built upon tree structures, it allows us to implement efficient memory sharing.
     * A drawback of tree structures is that they make it necessary to store collection attributes at each tree node (read: element).
     * <br>
     * The computation of the hash code is linear in time, i.e. O(n). If the hash code of a collection is re-calculated often,
     * e.g. when using a List as HashMap key, we might want to cache the hash code.
     * This can be achieved by simply using a wrapper class, which is not included in Vavr but could be implemented like this:
     *
     * <pre>{@code public final class Hashed<K> {
     *
     *     private final K key;
     *     private final Lazy<Integer> hashCode;
     *
     *     public Hashed(K key) {
     *         this.key = key;
     *         this.hashCode = Lazy.of(() -> Objects.hashCode(key));
     *     }
     *
     *     public K key() {
     *         return key;
     *     }
     *
     *     &#64;Override
     *     public boolean equals(Object o) {
     *         if (o == key) {
     *             return true;
     *         } else if (key != null && o instanceof Hashed) {
     *             final Hashed that = (Hashed) o;
     *             return key.equals(that.key);
     *         } else {
     *             return false;
     *         }
     *     }
     *
     *     &#64;Override
     *     public int hashCode() {
     *         return hashCode.get();
     *     }
     *
     *     &#64;Override
     *     public String toString() {
     *         return "Hashed(" + (key == null ? "null" : key.toString()) + ")";
     *     }
     * }}</pre>
     *
     * @return The hash code of this collection
     */
    int hashCode();
    /**
     * Dual of {@linkplain #tail()}, returning all elements except the last.
     *
     * @return a new instance containing all elements except the last.
     * @throws UnsupportedOperationException if this is empty
     */
    Traversable<T> init();
    /**
     * Dual of {@linkplain #tailOption()}, returning all elements except the last as {@code Option}.
     *
     * @return {@code Some(traversable)} or {@code None} if this is empty.
     */
    default Option<? extends Traversable<T>> initOption() {
        return isEmpty() ? Option.none() : Option.some(init());
    }
    /**
     * Checks if this Traversable may consist of distinct elements only.
     *
     * @return true if this Traversable may consist of distinct elements only, false otherwise.
     */
    default boolean isDistinct() {
        return false;
    }
    /**
     * Checks if this Traversable is empty.
     *
     * @return true, if this Traversable contains no elements, false otherwise.
     */
    @Override
    default boolean isEmpty() {
        return length() == 0;
    }
    /**
     * Checks if this Traversable is ordered
     *
     * @return true, if this Traversable is ordered, false otherwise.
     */
    default boolean isOrdered() {
        return false;
    }
    /**
     * Checks if the elements of this Traversable appear in encounter order.
     *
     * @return true, if the insertion order of elements is preserved, false otherwise.
     */
    default boolean isSequential() {
        return false;
    }
    /**
     * Each of Vavr's collections may contain more than one element.
     *
     * @return {@code false}
     */
    @Override
    default boolean isSingleValued() {
        return false;
    }
    /**
     * Checks if this Traversable can be repeatedly traversed.
     * <p>
     * This method should be implemented by classes only, i.e. not by interfaces.
     *
     * @return true, if this Traversable is known to be traversable repeatedly, false otherwise.
     */
    boolean isTraversableAgain();
    /**
     * An iterator by means of head() and tail(). Subclasses may want to override this method.
     *
     * @return A new Iterator of this Traversable elements.
     */
    @Override
    default Iterator<T> iterator() {
        final Traversable<T> that = this;
        return new AbstractIterator<T>() {
            Traversable<T> traversable = that;
            @Override
            public boolean hasNext() {
                return !traversable.isEmpty();
            }
            @Override
            public T getNext() {
                final T result = traversable.head();
                traversable = traversable.tail();
                return result;
            }
        };
    }
    /**
     * Dual of {@linkplain #head()}, returning the last element.
     *
     * @return the last element.
     * @throws NoSuchElementException is this is empty
     */
    T last();
    /**
     * Dual of {@linkplain #headOption()}, returning the last element as {@code Option}.
     *
     * @return {@code Some(element)} or {@code None} if this is empty.
     */
    default Option<T> lastOption() {
        return isEmpty() ? Option.none() : Option.some(last());
    }
    /**
     * Computes the number of elements of this Traversable.
     * <p>
     * Same as {@link #size()}.
     *
     * @return the number of elements
     */
    int length();
    /**
     * Maps the elements of this {@code Traversable} to elements of a new type preserving their order, if any.
     *
     * @param mapper A mapper.
     * @param <U>    Component type of the target Traversable
     * @return a mapped Traversable
     * @throws NullPointerException if {@code mapper} is null
     */
    @Override
    <U> Traversable<U> map(Function<? super T, ? extends U> mapper);
    /**
     * Calculates the maximum of this elements according to their natural order. Especially the underlying
     * order of sorted collections is not taken into account.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * List.empty().max()             // = None
     * List.of(1, 2, 3).max()         // = Some(3)
     * List.of("a", "b", "c").max()   // = Some("c")
     * List.of(1.0, Double.NaN).max() // = NaN
     * List.of(1, "a").max()          // throws
     * </code>
     * </pre>
     *
     * @return {@code Some(maximum)} of this elements or {@code None} if this is empty
     * @throws NullPointerException if an element is null
     * @throws ClassCastException   if the elements do not have a natural order, i.e. they do not implement Comparable
     */
    default Option<T> max() {
        return maxBy(Comparators.naturalComparator());
    }
    /**
     * Calculates the maximum of this elements using a specific comparator.
     *
     * @param comparator A non-null element comparator
     * @return {@code Some(maximum)} of this elements or {@code None} if this is empty
     * @throws NullPointerException if {@code comparator} is null
     */
    default Option<T> maxBy(Comparator<? super T> comparator) {
        Objects.requireNonNull(comparator, "comparator is null");
        if (isEmpty()) {
            return Option.none();
        } else {
            final T value = reduce((t1, t2) -> comparator.compare(t1, t2) >= 0 ? t1 : t2);
            return Option.some(value);
        }
    }
    /**
     * Calculates the maximum of this elements within the co-domain of a specific function.
     *
     * @param f   A function that maps this elements to comparable elements
     * @param <U> The type where elements are compared
     * @return The element of type T which is the maximum within U
     * @throws NullPointerException if {@code f} is null.
     */
    default <U extends Comparable<? super U>> Option<T> maxBy(Function<? super T, ? extends U> f) {
        Objects.requireNonNull(f, "f is null");
        if (isEmpty()) {
            return Option.none();
        } else {
            final Iterator<T> iter = iterator();
            T tm = iter.next();
            U um = f.apply(tm);
            while (iter.hasNext()) {
                final T t = iter.next();
                final U u = f.apply(t);
                if (u.compareTo(um) > 0) {
                    um = u;
                    tm = t;
                }
            }
            return Option.some(tm);
        }
    }
    /**
     * Calculates the minimum of this elements according to their natural order in O(n). Especially the underlying
     * order of sorted collections is not taken into account.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * List.empty().min()             // = None
     * List.of(1, 2, 3).min()         // = Some(1)
     * List.of("a", "b", "c").min()   // = Some("a")
     * List.of(1.0, Double.NaN).min() // = NaN
     * List.of(1, "a").min()          // throws
     * </code>
     * </pre>
     *
     * There is an exception for {@link Double} and {@link Float}: The minimum is defined to be {@code NaN} if
     * this contains {@code NaN}. According to the natural order {@code NaN} would be the maximum element
     * instead.
     *
     * @return {@code Some(minimum)} of this elements or {@code None} if this is empty
     * @throws NullPointerException if an element is null
     * @throws ClassCastException   if the elements do not have a natural order, i.e. they do not implement Comparable
     */
    @SuppressWarnings("unchecked")
    default Option<T> min() {
        // DEV-NOTE: minBy(Comparators.naturalComparator()) does not handle (Double/Float) NaN correctly
        if (isEmpty()) {
            return Option.none();
        } else {
            final T head = head();
            final T min;
            if (head instanceof Double) {
                min = (T) ((Traversable<Double>) this).foldLeft((Double) head, Math::min);
            } else if (head instanceof Float) {
                min = (T) ((Traversable<Float>) this).foldLeft((Float) head, Math::min);
            } else {
                final Comparator<T> comparator = Comparators.naturalComparator();
                min = this.foldLeft(head, (t1, t2) -> comparator.compare(t1, t2) <= 0 ? t1 : t2);
            }
            return Option.some(min);
        }
    }
    /**
     * Calculates the minimum of this elements using a specific comparator.
     *
     * @param comparator A non-null element comparator
     * @return {@code Some(minimum)} of this elements or {@code None} if this is empty
     * @throws NullPointerException if {@code comparator} is null
     */
    default Option<T> minBy(Comparator<? super T> comparator) {
        Objects.requireNonNull(comparator, "comparator is null");
        if (isEmpty()) {
            return Option.none();
        } else {
            final T value = reduce((t1, t2) -> comparator.compare(t1, t2) <= 0 ? t1 : t2);
            return Option.some(value);
        }
    }
    /**
     * Calculates the minimum of this elements within the co-domain of a specific function.
     *
     * @param f   A function that maps this elements to comparable elements
     * @param <U> The type where elements are compared
     * @return The element of type T which is the minimum within U
     * @throws NullPointerException if {@code f} is null.
     */
    default <U extends Comparable<? super U>> Option<T> minBy(Function<? super T, ? extends U> f) {
        Objects.requireNonNull(f, "f is null");
        if (isEmpty()) {
            return Option.none();
        } else {
            final Iterator<T> iter = iterator();
            T tm = iter.next();
            U um = f.apply(tm);
            while (iter.hasNext()) {
                final T t = iter.next();
                final U u = f.apply(t);
                if (u.compareTo(um) < 0) {
                    um = u;
                    tm = t;
                }
            }
            return Option.some(tm);
        }
    }
    /**
     * Joins the elements of this by concatenating their string representations.
     * <p>
     * This has the same effect as calling {@code mkCharSeq("", "", "")}.
     *
     * @return a new {@link CharSeq}
     */
    default CharSeq mkCharSeq() {
        return mkCharSeq("", "", "");
    }
    /**
     * Joins the string representations of this elements using a specific delimiter.
     * <p>
     * This has the same effect as calling {@code mkCharSeq("", delimiter, "")}.
     *
     * @param delimiter A delimiter string put between string representations of elements of this
     * @return A new {@link CharSeq}
     */
    default CharSeq mkCharSeq(CharSequence delimiter) {
        return mkCharSeq("", delimiter, "");
    }
    /**
     * Joins the string representations of this elements using a specific delimiter, prefix and suffix.
     * <p>
     * Example: {@code List.of("a", "b", "c").mkCharSeq("Chars(", ", ", ")") = CharSeq.of("Chars(a, b, c))"}
     *
     * @param prefix    prefix of the resulting {@link CharSeq}
     * @param delimiter A delimiter string put between string representations of elements of this
     * @param suffix    suffix of the resulting {@link CharSeq}
     * @return a new {@link CharSeq}
     */
    default CharSeq mkCharSeq(CharSequence prefix, CharSequence delimiter, CharSequence suffix) {
        return CharSeq.of(mkString(prefix, delimiter, suffix));
    }
    /**
     * Joins the elements of this by concatenating their string representations.
     * <p>
     * This has the same effect as calling {@code mkString("", "", "")}.
     *
     * @return a new String
     */
    default String mkString() {
        return mkString("", "", "");
    }
    /**
     * Joins the string representations of this elements using a specific delimiter.
     * <p>
     * This has the same effect as calling {@code mkString("", delimiter, "")}.
     *
     * @param delimiter A delimiter string put between string representations of elements of this
     * @return A new String
     */
    default String mkString(CharSequence delimiter) {
        return mkString("", delimiter, "");
    }
    /**
     * Joins the string representations of this elements using a specific delimiter, prefix and suffix.
     * <p>
     * Example: {@code List.of("a", "b", "c").mkString("Chars(", ", ", ")") = "Chars(a, b, c)"}
     *
     * @param prefix    prefix of the resulting string
     * @param delimiter A delimiter string put between string representations of elements of this
     * @param suffix    suffix of the resulting string
     * @return a new String
     */
    default String mkString(CharSequence prefix, CharSequence delimiter, CharSequence suffix) {
        final StringBuilder builder = new StringBuilder(prefix);
        iterator().map(String::valueOf).intersperse(String.valueOf(delimiter)).forEach(builder::append);
        return builder.append(suffix).toString();
    }
    /**
     * Checks, this {@code Traversable} is not empty.
     * <p>
     * The call is equivalent to {@code !isEmpty()}.
     *
     * @return true, if an underlying value is present, false otherwise.
     */
    default boolean nonEmpty() {
        return !isEmpty();
    }
    /**
     * Returns this {@code Traversable} if it is nonempty, otherwise return the alternative.
     *
     * @param other An alternative {@code Traversable}
     * @return this {@code Traversable} if it is nonempty, otherwise return the alternative.
     */
    Traversable<T> orElse(Iterable<? extends T> other);
    /**
     * Returns this {@code Traversable} if it is nonempty, otherwise return the result of evaluating supplier.
     *
     * @param supplier An alternative {@code Traversable} supplier
     * @return this {@code Traversable} if it is nonempty, otherwise return the result of evaluating supplier.
     */
    Traversable<T> orElse(Supplier<? extends Iterable<? extends T>> supplier);
    /**
     * Creates a partition of this {@code Traversable} by splitting this elements in two in distinct traversables
     * according to a predicate.
     *
     * @param predicate A predicate which classifies an element if it is in the first or the second traversable.
     * @return A disjoint union of two traversables. The first {@code Traversable} contains all elements that satisfy the given {@code predicate}, the second {@code Traversable} contains all elements that don't. The original order of elements is preserved.
     * @throws NullPointerException if predicate is null
     */
    Tuple2<? extends Traversable<T>, ? extends Traversable<T>> partition(Predicate<? super T> predicate);
    @Override
    Traversable<T> peek(Consumer<? super T> action);
    /**
     * Calculates the product of this elements. Supported component types are {@code Byte}, {@code Double}, {@code Float},
     * {@code Integer}, {@code Long}, {@code Short}, {@code BigInteger} and {@code BigDecimal}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * List.empty().product()              // = 1
     * List.of(1, 2, 3).product()          // = 6L
     * List.of(0.1, 0.2, 0.3).product()    // = 0.006
     * List.of("apple", "pear").product()  // throws
     * </code>
     * </pre>
     *
     * Please also see {@link #fold(Object, BiFunction)}, a way to do a type-safe multiplication of elements.
     *
     * @return a {@code Number} representing the sum of this elements
     * @throws UnsupportedOperationException if this elements are not numeric
     */
    @SuppressWarnings("unchecked")
    default Number product() {
        if (isEmpty()) {
            return 1;
        } else {
            try {
                final Iterator<?> iter = iterator();
                final Object o = iter.next();
                if (o instanceof Integer || o instanceof Long || o instanceof Byte || o instanceof Short) {
                    return ((Iterator<Number>) iter).foldLeft(((Number) o).longValue(), (product, number) -> product * number.longValue());
                } else if (o instanceof BigInteger) {
                    return ((Iterator<BigInteger>) iter).foldLeft(((BigInteger) o), BigInteger::multiply);
                } else if (o instanceof BigDecimal) {
                    return ((Iterator<BigDecimal>) iter).foldLeft(((BigDecimal) o), BigDecimal::multiply);
                } else {
                    return ((Iterator<Number>) iter).toJavaStream().mapToDouble(Number::doubleValue).reduce(((Number) o).doubleValue(), (d1, d2) -> d1 * d2);
                }
            } catch(ClassCastException x) {
                throw new UnsupportedOperationException("not numeric", x);
            }
        }
    }
    /**
     * Accumulates the elements of this Traversable by successively calling the given operation {@code op} from the left.
     *
     * @param op A BiFunction of type T
     * @return the reduced value.
     * @throws NoSuchElementException if this is empty
     * @throws NullPointerException   if {@code op} is null
     */
    @Override
    default T reduceLeft(BiFunction<? super T, ? super T, ? extends T> op) {
        Objects.requireNonNull(op, "op is null");
        return iterator().reduceLeft(op);
    }
    /**
     * Shortcut for {@code isEmpty() ? Option.none() : Option.some(reduceLeft(op))}.
     *
     * @param op A BiFunction of type T
     * @return a reduced value
     * @throws NullPointerException if {@code op} is null
     */
    @Override
    default Option<T> reduceLeftOption(BiFunction<? super T, ? super T, ? extends T> op) {
        Objects.requireNonNull(op, "op is null");
        return isEmpty() ? Option.none() : Option.some(reduceLeft(op));
    }
    /**
     * Accumulates the elements of this Traversable by successively calling the given operation {@code op} from the right.
     *
     * @param op An operation of type T
     * @return the reduced value.
     * @throws NoSuchElementException if this is empty
     * @throws NullPointerException   if {@code op} is null
     */
    @Override
    default T reduceRight(BiFunction<? super T, ? super T, ? extends T> op) {
        Objects.requireNonNull(op, "op is null");
        if (isEmpty()) {
            throw new NoSuchElementException("reduceRight on empty");
        } else {
            return iterator().reduceRight(op);
        }
    }
    /**
     * Shortcut for {@code isEmpty() ? Option.none() : Option.some(reduceRight(op))}.
     *
     * @param op An operation of type T
     * @return a reduced value
     * @throws NullPointerException if {@code op} is null
     */
    @Override
    default Option<T> reduceRightOption(BiFunction<? super T, ? super T, ? extends T> op) {
        Objects.requireNonNull(op, "op is null");
        return isEmpty() ? Option.none() : Option.some(reduceRight(op));
    }
    /**
     * Replaces the first occurrence (if exists) of the given currentElement with newElement.
     *
     * @param currentElement An element to be substituted.
     * @param newElement     A replacement for currentElement.
     * @return a Traversable containing all elements of this where the first occurrence of currentElement is replaced with newElement.
     */
    Traversable<T> replace(T currentElement, T newElement);
    /**
     * Replaces all occurrences of the given currentElement with newElement.
     *
     * @param currentElement An element to be substituted.
     * @param newElement     A replacement for currentElement.
     * @return a Traversable containing all elements of this where all occurrences of currentElement are replaced with newElement.
     */
    Traversable<T> replaceAll(T currentElement, T newElement);
    /**
     * Keeps all occurrences of the given elements from this.
     *
     * @param elements Elements to be kept.
     * @return a Traversable containing all occurrences of the given elements.
     * @throws NullPointerException if {@code elements} is null
     */
    Traversable<T> retainAll(Iterable<? extends T> elements);
    /**
     * Computes a prefix scan of the elements of the collection.
     *
     * Note: The neutral element z may be applied more than once.
     *
     * @param zero      neutral element for the operator op
     * @param operation the associative operator for the scan
     * @return a new traversable collection containing the prefix scan of the elements in this traversable collection
     * @throws NullPointerException if {@code operation} is null.
     */
    Traversable<T> scan(T zero, BiFunction<? super T, ? super T, ? extends T> operation);
    /**
     * Produces a collection containing cumulative results of applying the
     * operator going left to right.
     *
     * Note: will not terminate for infinite-sized collections.
     *
     * Note: might return different results for different runs, unless the
     * underlying collection type is ordered.
     *
     * @param <U>       the type of the elements in the resulting collection
     * @param zero      the initial value
     * @param operation the binary operator applied to the intermediate result and the element
     * @return collection with intermediate results
     * @throws NullPointerException if {@code operation} is null.
     */
    <U> Traversable<U> scanLeft(U zero, BiFunction<? super U, ? super T, ? extends U> operation);
    /**
     * Produces a collection containing cumulative results of applying the
     * operator going right to left. The head of the collection is the last
     * cumulative result.
     *
     * Note: will not terminate for infinite-sized collections.
     *
     * Note: might return different results for different runs, unless the
     * underlying collection type is ordered.
     *
     * @param <U>       the type of the elements in the resulting collection
     * @param zero      the initial value
     * @param operation the binary operator applied to the intermediate result and the element
     * @return collection with intermediate results
     * @throws NullPointerException if {@code operation} is null.
     */
    <U> Traversable<U> scanRight(U zero, BiFunction<? super T, ? super U, ? extends U> operation);
    /**
     * Returns the single element of this Traversable or throws, if this is empty or contains more than one element.
     *
     * @return the single element from the Traversable
     * @throws NoSuchElementException if the Traversable does not contain a single element.
     */
    default T single() {
        return singleOption().getOrElseThrow(() -> new NoSuchElementException("Does not contain a single value"));
    }
    /**
     * Returns the only element of a Traversable as {@code Option}.
     *
     * @return {@code Some(element)} or {@code None} if the Traversable does not contain a single element.
     */
    default Option<T> singleOption() {
        final Iterator<T> it = iterator();
        if (!it.hasNext()) {
            return Option.none();
        }
        final T first = it.next();
        if (it.hasNext()) {
            return Option.none();
        } else {
            return Option.some(first);
        }
    }
    /**
     * Computes the number of elements of this Traversable.
     * <p>
     * Same as {@link #length()}.
     *
     * @return the number of elements
     */
    default int size() {
        return length();
    }
    /**
     * Slides a non-overlapping window of a variable size over this {@code Traversable}.
     * <p>
     * Each window contains elements with the same class, as determined by {@code classifier}. Two consecutive
     * values in this {@code Traversable} will be in the same window only if {@code classifier} returns equal
     * values for them. Otherwise, the values will constitute the last element of the previous window and the
     * first element of the next window.
     * <p>
     * Examples:
     * <pre>{@code
     * [].slideBy(Function.identity()) = []
     * [1,2,3,4,4,5].slideBy(Function.identity()) = [[1],[2],[3],[4,4],[5]]
     * [1,2,3,10,12,5,7,20,29].slideBy(x -> x/10) = [[1,2,3],[10,12],[5,7],[20,29]]
     * }</pre>
     *
     * @param classifier A function which classifies elements into classes
     * @return A new Iterator of windows of the grouped elements
     * @throws NullPointerException if {@code classifier} is null.
     */
    Iterator<? extends Traversable<T>> slideBy(Function<? super T, ?> classifier);
    /**
     * Slides a window of a specific {@code size} and step size 1 over this {@code Traversable} by calling
     * {@link #sliding(int, int)}.
     *
     * @param size a positive window size
     * @return a new Iterator of windows of a specific size using step size 1
     * @throws IllegalArgumentException if {@code size} is negative or zero
     */
    Iterator<? extends Traversable<T>> sliding(int size);
    /**
     * Slides a window of a specific {@code size} and {@code step} size over this {@code Traversable}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * [].sliding(1,1) = []
     * [1,2,3,4,5].sliding(2,3) = [[1,2],[4,5]]
     * [1,2,3,4,5].sliding(2,4) = [[1,2],[5]]
     * [1,2,3,4,5].sliding(2,5) = [[1,2]]
     * [1,2,3,4].sliding(5,3) = [[1,2,3,4],[4]]
     * </code>
     * </pre>
     *
     * @param size a positive window size
     * @param step a positive step size
     * @return a new Iterator of windows of a specific size using a specific step size
     * @throws IllegalArgumentException if {@code size} or {@code step} are negative or zero
     */
    Iterator<? extends Traversable<T>> sliding(int size, int step);
    /**
     * Returns a tuple where the first element is the longest prefix of elements that satisfy the given
     * {@code predicate} and the second element is the remainder.
     *
     * @param predicate A predicate.
     * @return a {@code Tuple} containing the longest prefix of elements that satisfy p and the remainder.
     * @throws NullPointerException if {@code predicate} is null
     */
    Tuple2<? extends Traversable<T>, ? extends Traversable<T>> span(Predicate<? super T> predicate);
    @Override
    default Spliterator<T> spliterator() {
        int characteristics = Spliterator.IMMUTABLE;
        if (isDistinct()) {
            characteristics |= Spliterator.DISTINCT;
        }
        if (isOrdered()) {
            characteristics |= (Spliterator.SORTED | Spliterator.ORDERED);
        }
        if (isSequential()) {
            characteristics |= Spliterator.ORDERED;
        }
        if (hasDefiniteSize()) {
            characteristics |= (Spliterator.SIZED | Spliterator.SUBSIZED);
            return Spliterators.spliterator(iterator(), length(), characteristics);
        } else {
            return Spliterators.spliteratorUnknownSize(iterator(), characteristics);
        }
    }
    /**
     * Calculates the sum of this elements. Supported component types are {@code Byte}, {@code Double}, {@code Float},
     * {@code Integer}, {@code Long}, {@code Short}, {@code BigInteger} and {@code BigDecimal}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * List.empty().sum()              // = 0
     * List.of(1, 2, 3).sum()          // = 6L
     * List.of(0.1, 0.2, 0.3).sum()    // = 0.6
     * List.of("apple", "pear").sum()  // throws
     * </code>
     * </pre>
     *
     * Please also see {@link #fold(Object, BiFunction)}, a way to do a type-safe summation of elements.
     *
     * @return a {@code Number} representing the sum of this elements
     * @throws UnsupportedOperationException if this elements are not numeric
     */
    @SuppressWarnings("unchecked")
    default Number sum() {
        if (isEmpty()) {
            return 0;
        } else {
            try {
                final Iterator<?> iter = iterator();
                final Object o = iter.next();
                if (o instanceof Integer || o instanceof Long || o instanceof Byte || o instanceof Short) {
                    return ((Iterator<Number>) iter).foldLeft(((Number) o).longValue(), (sum, number) -> sum + number.longValue());
                } else if (o instanceof BigInteger) {
                    return ((Iterator<BigInteger>) iter).foldLeft(((BigInteger) o), BigInteger::add);
                } else if (o instanceof BigDecimal) {
                    return ((Iterator<BigDecimal>) iter).foldLeft(((BigDecimal) o), BigDecimal::add);
                } else {
                    return TraversableModule.neumaierSum(Iterator.of(o).concat(iter), t -> ((Number) t).doubleValue())[0];
                }
            } catch(ClassCastException x) {
                throw new UnsupportedOperationException("not numeric", x);
            }
        }
    }
    /**
     * Drops the first element of a non-empty Traversable.
     *
     * @return A new instance of Traversable containing all elements except the first.
     * @throws UnsupportedOperationException if this is empty
     */
    Traversable<T> tail();
    /**
     * Drops the first element of a non-empty Traversable and returns an {@code Option}.
     *
     * @return {@code Some(traversable)} or {@code None} if this is empty.
     */
    Option<? extends Traversable<T>> tailOption();
    /**
     * Takes the first n elements of this or all elements, if this length &lt; n.
     * <p>
     * The result is equivalent to {@code sublist(0, max(0, min(length(), n)))} but does not throw if {@code n < 0} or
     * {@code n > length()}.
     * <p>
     * In the case of {@code n < 0} the empty instance is returned, in the case of {@code n > length()} this is returned.
     *
     * @param n The number of elements to take.
     * @return A new instance consisting of the first n elements of this or all elements, if this has less than n elements.
     */
    Traversable<T> take(int n);
    /**
     * Takes the last n elements of this or all elements, if this length &lt; n.
     * <p>
     * The result is equivalent to {@code sublist(max(0, min(length(), length() - n)), n)}, i.e. takeRight will not
     * throw if {@code n < 0} or {@code n > length()}.
     * <p>
     * In the case of {@code n < 0} the empty instance is returned, in the case of {@code n > length()} this is returned.
     *
     * @param n The number of elements to take.
     * @return A new instance consisting of the last n elements of this or all elements, if this has less than n elements.
     */
    Traversable<T> takeRight(int n);
    /**
     * Takes elements until the predicate holds for the current element.
     * <p>
     * Note: This is essentially the same as {@code takeWhile(predicate.negate())}. It is intended to be used with
     * method references, which cannot be negated directly.
     *
     * @param predicate A condition tested subsequently for this elements.
     * @return a new instance consisting of all elements before the first one which does satisfy the given
     * predicate.
     * @throws NullPointerException if {@code predicate} is null
     */
    Traversable<T> takeUntil(Predicate<? super T> predicate);
    /**
     * Takes elements while the predicate holds for the current element.
     *
     * @param predicate A condition tested subsequently for the contained elements.
     * @return a new instance consisting of all elements before the first one which does not satisfy the
     * given predicate.
     * @throws NullPointerException if {@code predicate} is null
     */
    Traversable<T> takeWhile(Predicate<? super T> predicate);
    /**
     * Unzips this elements by mapping this elements to pairs which are subsequently split into two distinct
     * sets.
     *
     * @param unzipper a function which converts elements of this to pairs
     * @param <T1>     1st element type of a pair returned by unzipper
     * @param <T2>     2nd element type of a pair returned by unzipper
     * @return A pair of set containing elements split by unzipper
     * @throws NullPointerException if {@code unzipper} is null
     */
    <T1, T2> Tuple2<? extends Traversable<T1>, ? extends Traversable<T2>> unzip(
            Function<? super T, Tuple2<? extends T1, ? extends T2>> unzipper);
    /**
     * Unzips this elements by mapping this elements to triples which are subsequently split into three distinct
     * sets.
     *
     * @param unzipper a function which converts elements of this to pairs
     * @param <T1>     1st element type of a triplet returned by unzipper
     * @param <T2>     2nd element type of a triplet returned by unzipper
     * @param <T3>     3rd element type of a triplet returned by unzipper
     * @return A triplet of set containing elements split by unzipper
     * @throws NullPointerException if {@code unzipper} is null
     */
    <T1, T2, T3> Tuple3<? extends Traversable<T1>, ? extends Traversable<T2>, ? extends Traversable<T3>> unzip3(
            Function<? super T, Tuple3<? extends T1, ? extends T2, ? extends T3>> unzipper);
    /**
     * Returns a traversable formed from this traversable and another Iterable collection by combining
     * corresponding elements in pairs. If one of the two iterables is longer than the other, its remaining elements
     * are ignored.
     * <p>
     * The length of the returned traversable is the minimum of the lengths of this traversable and {@code that}
     * iterable.
     *
     * @param <U>  The type of the second half of the returned pairs.
     * @param that The Iterable providing the second half of each result pair.
     * @return a new traversable containing pairs consisting of corresponding elements of this traversable and {@code that} iterable.
     * @throws NullPointerException if {@code that} is null
     */
    <U> Traversable<Tuple2<T, U>> zip(Iterable<? extends U> that);
    /**
     * Returns a traversable formed from this traversable and another Iterable by combining corresponding elements in
     * pairs. If one of the two collections is shorter than the other, placeholder elements are used to extend the
     * shorter collection to the length of the longer.
     * <p>
     * The length of the returned traversable is the maximum of the lengths of this traversable and {@code that}
     * iterable.
     * <p>
     * Special case: if this traversable is shorter than that elements, and that elements contains duplicates, the
     * resulting traversable may be shorter than the maximum of the lengths of this and that because a traversable
     * contains an element at most once.
     * <p>
     * If this Traversable is shorter than that, thisElem values are used to fill the result.
     * If that is shorter than this Traversable, thatElem values are used to fill the result.
     *
     * @param <U>      The type of the second half of the returned pairs.
     * @param that     The Iterable providing the second half of each result pair.
     * @param thisElem The element to be used to fill up the result if this traversable is shorter than that.
     * @param thatElem The element to be used to fill up the result if that is shorter than this traversable.
     * @return A new traversable containing pairs consisting of corresponding elements of this traversable and that.
     * @throws NullPointerException if {@code that} is null
     */
    <U> Traversable<Tuple2<T, U>> zipAll(Iterable<? extends U> that, T thisElem, U thatElem);
    /**
     * Returns a traversable formed from this traversable and another Iterable collection by mapping elements.
     * If one of the two iterables is longer than the other, its remaining elements are ignored.
     * <p>
     * The length of the returned traversable is the minimum of the lengths of this traversable and {@code that}
     * iterable.
     *
     * @param <U>    The type of the second parameter of the mapper.
     * @param <R>    The type of the mapped elements.
     * @param that   The Iterable providing the second parameter of the mapper.
     * @param mapper a mapper.
     * @return a new traversable containing mapped elements of this traversable and {@code that} iterable.
     * @throws NullPointerException if {@code that} or {@code mapper} is null
     */
    <U, R> Traversable<R> zipWith(Iterable<? extends U> that, BiFunction<? super T, ? super U, ? extends R> mapper);
    /**
     * Zips this traversable with its indices.
     *
     * @return A new traversable containing all elements of this traversable paired with their index, starting with 0.
     */
    Traversable<Tuple2<T, Integer>> zipWithIndex();
    /**
     * Zips this traversable with its indices by applying mapper provided.
     *
     * @param <U> The type of the mapped elements.
     * @param mapper a mapper.
     * @return a new traversable containing elements of this traversable, zipped with indices, and mapped with mapper provided.
     * @throws NullPointerException if {@code mapper} is null
     */
    <U> Traversable<U> zipWithIndex(BiFunction<? super T, ? super Integer, ? extends U> mapper);
}
interface TraversableModule {
    /**
     * Uses Neumaier's variant of the Kahan summation algorithm in order to sum double values.
     * <p>
     * See <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm">Kahan summation algorithm</a>.
     *
     * @param <T> element type
     * @param ts the elements
     * @param toDouble function which maps elements to {@code double} values
     * @return A pair {@code [sum, size]}, where {@code sum} is the compensated sum and {@code size} is the number of elements which were summed.
     */
    static <T> double[] neumaierSum(Iterable<T> ts, ToDoubleFunction<T> toDouble) {
        double simpleSum = 0.0;
        double sum = 0.0;
        double compensation = 0.0;
        int size = 0;
        for (T t : ts) {
            final double d = toDouble.applyAsDouble(t);
            final double tmp = sum + d;
            compensation += (Math.abs(sum) >= Math.abs(d)) ? (sum - tmp) + d : (d - tmp) + sum;
            sum = tmp;
            simpleSum += d;
            size++;
        }
        sum += compensation;
        if (size > 0 && Double.isNaN(sum) && Double.isInfinite(simpleSum)) {
            sum = simpleSum;
        }
        return new double[] { sum, size };
    }
}
/* ____  ______________  ________________________  __________
 * \   \/   /      \   \/   /   __/   /      \   \/   /      \
 *  \______/___/\___\______/___/_____/___/\___\______/___/\___\
 *
 * Copyright 2014-2025 Vavr, https://vavr.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vavr.collection;
import io.vavr.*;
import io.vavr.collection.CharSeqModule.Combinations;
import io.vavr.collection.JavaConverters.ListView;
import io.vavr.control.Option;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.*;
import java.util.function.*;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Collector;
import static io.vavr.collection.JavaConverters.ChangePolicy.IMMUTABLE;
import static io.vavr.collection.JavaConverters.ChangePolicy.MUTABLE;
/**
 * The CharSeq (read: character sequence) collection essentially is a rich String wrapper having all operations
 * we know from the functional Vavr collections.
 * <p>
 * <strong>Note:</strong>Because CharSeq represents a sequence of primitive characters (i.e. a String),
 * it breaks the Liskov Substitution Principle in the way, that the CharSeq cannot contain {@code null} elements.
 * In future version of Java, CharSeq should extend IndexedSeq&lt;char&gt; instead.
 *
 * @author Ruslan Sennov, Daniel Dietrich
 */
public final class CharSeq implements CharSequence, IndexedSeq<Character>, Serializable, Comparable<CharSeq> {
    private static final long serialVersionUID = 1L;
    private static final CharSeq EMPTY = new CharSeq("");
    private final String back;
    private CharSeq(String javaString) {
        this.back = javaString;
    }
    public static CharSeq empty() {
        return EMPTY;
    }
    /**
     * Returns a {@link java.util.stream.Collector} which may be used in conjunction with
     * {@link java.util.stream.Stream#collect(java.util.stream.Collector)} to obtain a {@link CharSeq}.
     *
     * @return A {@code CharSeq} Collector.
     */
    public static Collector<Character, ArrayList<Character>, CharSeq> collector() {
        final Supplier<ArrayList<Character>> supplier = ArrayList::new;
        final BiConsumer<ArrayList<Character>, Character> accumulator = ArrayList::add;
        final BinaryOperator<ArrayList<Character>> combiner = (left, right) -> {
            left.addAll(right);
            return left;
        };
        final Function<ArrayList<Character>, CharSeq> finisher = CharSeq::ofAll;
        return Collector.of(supplier, accumulator, combiner, finisher);
    }
    /**
     * Creates a String of {@code CharSequence}.
     *
     * @param sequence {@code CharSequence} instance.
     * @return A new {@link io.vavr.collection.CharSeq}
     */
    // DEV-NOTE: Needs to be 'of' instead of 'ofAll' because 'ofAll(CharSeq)' is ambiguous.
    public static CharSeq of(CharSequence sequence) {
        Objects.requireNonNull(sequence, "sequence is null");
        if (sequence instanceof CharSeq) {
            return (CharSeq) sequence;
        } else {
            return sequence.length() == 0 ? empty() : new CharSeq(sequence.toString());
        }
    }
    /**
     * Returns a singleton {@code CharSeq}, i.e. a {@code CharSeq} of one character.
     *
     * @param character A character.
     * @return A new {@code CharSeq} instance containing the given element
     */
    public static CharSeq of(char character) {
        return new CharSeq(new String(new char[] { character }));
    }
    /**
     * Creates a String of the given characters.
     *
     * @param characters Zero or more characters.
     * @return A string containing the given characters in the same order.
     * @throws NullPointerException if {@code elements} is null
     */
    public static CharSeq of(char... characters) {
        Objects.requireNonNull(characters, "characters is null");
        if (characters.length == 0) {
            return empty();
        } else {
            final char[] chrs = new char[characters.length];
            System.arraycopy(characters, 0, chrs, 0, characters.length);
            return new CharSeq(new String(chrs));
        }
    }
    /**
     * Creates a String of the given elements.
     * <p>
     * The resulting string has the same iteration order as the given iterable of elements
     * if the iteration order of the elements is stable.
     *
     * @param elements An Iterable of elements.
     * @return A string containing the given elements in the same order.
     * @throws NullPointerException if {@code elements} is null or {@code elements} contains null
     */
    @SuppressWarnings("unchecked")
    public static CharSeq ofAll(Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (Collections.isEmpty(elements)){
            return EMPTY;
        }
        if (elements instanceof CharSeq) {
            return (CharSeq) elements;
        }
        if (elements instanceof ListView
                && ((ListView<Character, ?>) elements).getDelegate() instanceof CharSeq) {
            return (CharSeq) ((ListView<Character, ?>) elements).getDelegate();
        }
        final StringBuilder sb = new StringBuilder();
        for (char character : elements) {
            sb.append(character);
        }
        return of(sb);
    }
    /**
     * Returns a CharSeq containing {@code n} values of a given Function {@code f}
     * over a range of integer values from 0 to {@code n - 1}.
     *
     * @param n The number of elements in the CharSeq
     * @param f The Function computing element values
     * @return A CharSeq consisting of elements {@code f(0),f(1), ..., f(n - 1)}
     * @throws NullPointerException if {@code f} is null
     */
    public static CharSeq tabulate(int n, Function<? super Integer, ? extends Character> f) {
        Objects.requireNonNull(f, "f is null");
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(f.apply(i).charValue());
        }
        return of(sb);
    }
    /**
     * Returns a CharSeq containing {@code n} values supplied by a given Supplier {@code s}.
     *
     * @param n The number of elements in the CharSeq
     * @param s The Supplier computing element values
     * @return A CharSeq of size {@code n}, where each element contains the result supplied by {@code s}.
     * @throws NullPointerException if {@code s} is null
     */
    public static CharSeq fill(int n, Supplier<? extends Character> s) {
        return tabulate(n, anything -> s.get());
    }
    /**
     * Creates a CharSeq starting from character {@code from}, extending to character {@code toExclusive - 1}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * CharSeq.range('a', 'c')  // = "ab"
     * CharSeq.range('c', 'a')  // = ""
     * </code>
     * </pre>
     *
     * @param from        the first character
     * @param toExclusive the successor of the last character
     * @return a range of characters as specified or the empty range if {@code from >= toExclusive}
     */
    public static CharSeq range(char from, char toExclusive) {
        return new CharSeq(io.vavr.collection.Iterator.range(from, toExclusive).mkString());
    }
    public static CharSeq rangeBy(char from, char toExclusive, int step) {
        return new CharSeq(io.vavr.collection.Iterator.rangeBy(from, toExclusive, step).mkString());
    }
    /**
     * Creates a CharSeq starting from character {@code from}, extending to character {@code toInclusive}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * CharSeq.rangeClosed('a', 'c')  // = "abc"
     * CharSeq.rangeClosed('c', 'a')  // = ""
     * </code>
     * </pre>
     *
     * @param from        the first character
     * @param toInclusive the last character
     * @return a range of characters as specified or the empty range if {@code from > toInclusive}
     */
    public static CharSeq rangeClosed(char from, char toInclusive) {
        return new CharSeq(io.vavr.collection.Iterator.rangeClosed(from, toInclusive).mkString());
    }
    /**
     * Creates a CharSeq starting from character {@code from}, extending to character {@code toInclusive},
     * with {@code step}.
     * <p>
     * Examples:
     * <pre>
     * <code>
     * CharSeq.rangeClosedBy('a', 'c', 1)  // = ('a', 'b', 'c')
     * CharSeq.rangeClosedBy('a', 'd', 2)  // = ('a', 'c')
     * CharSeq.rangeClosedBy('d', 'a', -2) // = ('d', 'b')
     * CharSeq.rangeClosedBy('d', 'a', 2)  // = ()
     * </code>
     * </pre>
     *
     * @param from        the first character
     * @param toInclusive the last character
     * @param step        the step
     * @return a range of characters as specified or the empty range if {@code step * (from - toInclusive) > 0}.
     * @throws IllegalArgumentException if {@code step} is zero
     */
    public static CharSeq rangeClosedBy(char from, char toInclusive, int step) {
        return new CharSeq(io.vavr.collection.Iterator.rangeClosedBy(from, toInclusive, step).mkString());
    }
    /**
     * Creates a CharSeq from a seed value and a function.
     * The function takes the seed at first.
     * The function should return {@code None} when it's
     * done generating the CharSeq, otherwise {@code Some} {@code Tuple}
     * of the element for the next call and the value to add to the
     * resulting CharSeq.
     * <p>
     * Example:
     * <pre>
     * <code>
     * CharSeq.unfoldRight('j', x -&gt; x == 'a'
     *             ? Option.none()
     *             : Option.of(new Tuple2&lt;&gt;(new Character(x), (char)(x-1))));
     * // CharSeq.of("jihgfedcb"))
     * </code>
     * </pre>
     *
     * @param <T>  type of seeds
     * @param seed the start value for the iteration
     * @param f    the function to get the next step of the iteration
     * @return a CharSeq with the values built up by the iteration
     * @throws NullPointerException if {@code f} is null
     */
    public static <T> CharSeq unfoldRight(T seed, Function<? super T, Option<Tuple2<? extends Character, ? extends T>>> f) {
        return CharSeq.ofAll(io.vavr.collection.Iterator.unfoldRight(seed, f));
    }
    /**
     * Creates a CharSeq from a seed value and a function.
     * The function takes the seed at first.
     * The function should return {@code None} when it's
     * done generating the CharSeq, otherwise {@code Some} {@code Tuple}
     * of the value to add to the resulting CharSeq and
     * the element for the next call.
     * <p>
     * Example:
     * <pre>
     * <code>
     * CharSeq.unfoldLeft('j', x -&gt; x == 'a'
     *             ? Option.none()
     *             : Option.of(new Tuple2&lt;&gt;((char)(x-1), new Character(x))));
     * // CharSeq.of("bcdefghij"))
     * </code>
     * </pre>
     *
     * @param <T>  type of seeds
     * @param seed the start value for the iteration
     * @param f    the function to get the next step of the iteration
     * @return a CharSeq with the values built up by the iteration
     * @throws NullPointerException if {@code f} is null
     */
    public static <T> CharSeq unfoldLeft(T seed, Function<? super T, Option<Tuple2<? extends T, ? extends Character>>> f) {
        return CharSeq.ofAll(io.vavr.collection.Iterator.unfoldLeft(seed, f));
    }
    /**
     * Creates a CharSeq from a seed value and a function.
     * The function takes the seed at first.
     * The function should return {@code None} when it's
     * done generating the CharSeq, otherwise {@code Some} {@code Tuple}
     * of the value to add to the resulting CharSeq and
     * the element for the next call.
     * <p>
     * Example:
     * <pre>
     * <code>
     * CharSeq.unfold('j', x -&gt; x == 'a'
     *                ? Option.none()
     *                : Option.of(new Tuple2&lt;&gt;((char)(x-1), new Character(x))));
     * // CharSeq.of("bcdefghij"))
     * </code>
     * </pre>
     *
     * @param seed the start value for the iteration
     * @param f    the function to get the next step of the iteration
     * @return a CharSeq with the values built up by the iteration
     * @throws NullPointerException if {@code f} is null
     */
    public static CharSeq unfold(Character seed, Function<? super Character, Option<Tuple2<? extends Character, ? extends Character>>> f) {
        return CharSeq.ofAll(io.vavr.collection.Iterator.unfold(seed, f));
    }
    private Tuple2<CharSeq, CharSeq> splitByBuilder(StringBuilder sb) {
        if (sb.length() == 0) {
            return Tuple.of(EMPTY, this);
        } else if (sb.length() == length()) {
            return Tuple.of(this, EMPTY);
        } else {
            return Tuple.of(of(sb), of(back.substring(sb.length())));
        }
    }
    /**
     * Repeats a character {@code times} times.
     *
     * @param character A character
     * @param times     Repetition count
     * @return A CharSeq representing {@code character * times}
     */
    public static CharSeq repeat(char character, int times) {
        final int length = Math.max(times, 0);
        final char[] characters = new char[length];
        java.util.Arrays.fill(characters, character);
        return new CharSeq(String.valueOf(characters));
    }
    /**
     * Repeats this CharSeq {@code times} times.
     * <p>
     * Example: {@code CharSeq.of("ja").repeat(13) = "jajajajajajajajajajajajaja"}
     *
     * @param times Repetition count
     * @return A CharSeq representing {@code this * times}
     */
    public CharSeq repeat(int times) {
        if (times <= 0 || isEmpty()) {
            return empty();
        } else if (times == 1) {
            return this;
        } else {
            final int finalLength = length() * times;
            final char[] result = new char[finalLength];
            back.getChars(0, length(), result, 0);
            int i = length();
            for (; i <= (finalLength >>> 1); i <<= 1) {
                System.arraycopy(result, 0, result, i, i);
            }
            System.arraycopy(result, 0, result, i, finalLength - i);
            return of(new String(result));
        }
    }
    //
    //
    // IndexedSeq
    //
    //
    @Override
    public CharSeq append(Character element) {
        // DEV-NOTE: we need to unbox, otherwise "null" will be appended to back
        final char c = element;
        return of(back + c);
    }
    @Override
    public CharSeq appendAll(Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (Collections.isEmpty(elements)) {
            return this;
        }
        final StringBuilder sb = new StringBuilder(back);
        for (char element : elements) {
            sb.append(element);
        }
        return of(sb);
    }
    @GwtIncompatible
    @Override
    public java.util.List<Character> asJava() {
        return JavaConverters.asJava(this, IMMUTABLE);
    }
    @GwtIncompatible
    @Override
    public CharSeq asJava(Consumer<? super java.util.List<Character>> action) {
        return Collections.asJava(this, action, IMMUTABLE);
    }
    @GwtIncompatible
    @Override
    public java.util.List<Character> asJavaMutable() {
        return JavaConverters.asJava(this, MUTABLE);
    }
    @GwtIncompatible
    @Override
    public CharSeq asJavaMutable(Consumer<? super java.util.List<Character>> action) {
        return Collections.asJava(this, action, MUTABLE);
    }
    @Override
    public <R> IndexedSeq<R> collect(PartialFunction<? super Character, ? extends R> partialFunction) {
        return Vector.ofAll(iterator().<R> collect(partialFunction));
    }
    @Override
    public IndexedSeq<CharSeq> combinations() {
        return Vector.rangeClosed(0, length()).map(this::combinations).flatMap(Function.identity());
    }
    @Override
    public IndexedSeq<CharSeq> combinations(int k) {
        return Combinations.apply(this, Math.max(k, 0));
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> crossProduct(int power) {
        return io.vavr.collection.Collections.crossProduct(CharSeq.empty(), this, power);
    }
    @Override
    public CharSeq distinct() {
        return distinctBy(Function.identity());
    }
    @Override
    public CharSeq distinctBy(Comparator<? super Character> comparator) {
        Objects.requireNonNull(comparator, "comparator is null");
        final java.util.Set<Character> seen = new java.util.TreeSet<>(comparator);
        return filter(seen::add);
    }
    @Override
    public <U> CharSeq distinctBy(Function<? super Character, ? extends U> keyExtractor) {
        Objects.requireNonNull(keyExtractor, "keyExtractor is null");
        final java.util.Set<U> seen = new java.util.HashSet<>();
        return filter(t -> seen.add(keyExtractor.apply(t)));
    }
    @Override
    public CharSeq drop(int n) {
        if (n <= 0) {
            return this;
        } else if (n >= length()) {
            return EMPTY;
        } else {
            return of(back.substring(n));
        }
    }
    @Override
    public CharSeq dropUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.dropUntil(this, predicate);
    }
    @Override
    public CharSeq dropWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return dropUntil(predicate.negate());
    }
    @Override
    public CharSeq dropRight(int n) {
        if (n <= 0) {
            return this;
        } else if (n >= length()) {
            return EMPTY;
        } else {
            return of(back.substring(0, length() - n));
        }
    }
    @Override
    public CharSeq dropRightWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return dropRightUntil(predicate.negate());
    }
    @Override
    public CharSeq dropRightUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.dropRightUntil(this, predicate);
    }
    @Override
    public CharSeq filter(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < back.length(); i++) {
            final char ch = get(i);
            if (predicate.test(ch)) {
                sb.append(ch);
            }
        }
        if (sb.length() == 0) {
            return EMPTY;
        } else if (sb.length() == length()) {
            return this;
        } else {
            return of(sb);
        }
    }
    @Override
    public CharSeq reject(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return Collections.reject(this, predicate);
    }
    @Override
    public <U> IndexedSeq<U> flatMap(Function<? super Character, ? extends Iterable<? extends U>> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        if (isEmpty()) {
            return Vector.empty();
        } else {
            IndexedSeq<U> result = Vector.empty();
            for (int i = 0; i < length(); i++) {
                for (U u : mapper.apply(get(i))) {
                    result = result.append(u);
                }
            }
            return result;
        }
    }
    public CharSeq flatMapChars(CharFunction<? extends CharSequence> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        if (isEmpty()) {
            return this;
        } else {
            final StringBuilder builder = new StringBuilder();
            for (int i = 0; i < back.length(); i++) {
                builder.append(mapper.apply(back.charAt(i)));
            }
            return of(builder);
        }
    }
    @Override
    public <C> Map<C, CharSeq> groupBy(Function<? super Character, ? extends C> classifier) {
        return io.vavr.collection.Collections.groupBy(this, classifier, CharSeq::ofAll);
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> grouped(int size) {
        return sliding(size, size);
    }
    @Override
    public boolean hasDefiniteSize() {
        return true;
    }
    @Override
    public CharSeq init() {
        if (isEmpty()) {
            throw new UnsupportedOperationException("init of empty string");
        } else {
            return of(back.substring(0, length() - 1));
        }
    }
    @Override
    public Option<CharSeq> initOption() {
        return isEmpty() ? Option.none() : Option.some(init());
    }
    @Override
    public CharSeq insert(int index, Character element) {
        if (index < 0) {
            throw new IndexOutOfBoundsException("insert(" + index + ", e)");
        }
        if (index > length()) {
            throw new IndexOutOfBoundsException("insert(" + index + ", e) on String of length " + length());
        }
        final char c = element;
        return of(new StringBuilder(back).insert(index, c).toString());
    }
    @Override
    public CharSeq insertAll(int index, Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (index < 0) {
            throw new IndexOutOfBoundsException("insertAll(" + index + ", elements)");
        }
        if (index > length()) {
            throw new IndexOutOfBoundsException("insertAll(" + index + ", elements) on String of length " + length());
        }
        final StringBuilder sb = new StringBuilder(back.substring(0, index));
        for (char element : elements) {
            sb.append(element);
        }
        sb.append(back.substring(index));
        return of(sb);
    }
    @Override
    public io.vavr.collection.Iterator<Character> iterator() {
        return io.vavr.collection.Iterator.ofAll(toCharArray());
    }
    @Override
    public CharSeq intersperse(Character element) {
        final char c = element; // intentionally throw when element is null
        if (isEmpty()) {
            return EMPTY;
        } else {
            final StringBuilder sb = new StringBuilder().append(head());
            for (int i = 1; i < length(); i++) {
                sb.append(c).append(get(i));
            }
            return of(sb);
        }
    }
    @Override
    public <U> IndexedSeq<U> map(Function<? super Character, ? extends U> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        IndexedSeq<U> result = Vector.empty();
        for (int i = 0; i < length(); i++) {
            result = result.append(mapper.apply(get(i)));
        }
        return result;
    }
    @Override
    public String mkString() {
        return back;
    }
    @Override
    public CharSeq padTo(int length, Character element) {
        final int actualLength = back.length();
        if (length <= actualLength) {
            return this;
        } else {
            return new CharSeq(back + padding(element, length - actualLength));
        }
    }
    @Override
    public CharSeq leftPadTo(int length, Character element) {
        final int actualLength = back.length();
        if (length <= actualLength) {
            return this;
        } else {
            return of(padding(element, length - actualLength).append(back));
        }
    }
    @Override
    public CharSeq orElse(Iterable<? extends Character> other) {
        return isEmpty() ? ofAll(other) : this;
    }
    @Override
    public CharSeq orElse(Supplier<? extends Iterable<? extends Character>> supplier) {
        return isEmpty() ? ofAll(supplier.get()) : this;
    }
    private static StringBuilder padding(char element, int limit) {
        final StringBuilder padding = new StringBuilder();
        for (int i = 0; i < limit; i++) {
            padding.append(element);
        }
        return padding;
    }
    @Override
    public CharSeq patch(int from, Iterable<? extends Character> that, int replaced) {
        from = from < 0 ? 0 : from > length() ? length() : from;
        replaced = replaced < 0 ? 0 : replaced;
        final StringBuilder sb = new StringBuilder(back.substring(0, from));
        for (char character : that) {
            sb.append(character);
        }
        from += replaced;
        if (from < length()) {
            sb.append(back.substring(from));
        }
        return sb.length() == 0 ? EMPTY : of(sb);
    }
    public CharSeq mapChars(CharUnaryOperator mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        if (isEmpty()) {
            return this;
        } else {
            final char[] chars = back.toCharArray();
            for (int i = 0; i < chars.length; i++) {
                chars[i] = mapper.apply(chars[i]);
            }
            return CharSeq.of(chars);
        }
    }
    @Override
    public Tuple2<CharSeq, CharSeq> partition(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        if (isEmpty()) {
            return Tuple.of(EMPTY, EMPTY);
        }
        final StringBuilder left = new StringBuilder();
        final StringBuilder right = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final Character t = get(i);
            (predicate.test(t) ? left : right).append(t);
        }
        if (left.length() == 0) {
            return Tuple.of(EMPTY, of(right.toString()));
        } else if (right.length() == 0) {
            return Tuple.of(of(left.toString()), EMPTY);
        } else {
            return Tuple.of(of(left.toString()), of(right.toString()));
        }
    }
    @Override
    public CharSeq peek(Consumer<? super Character> action) {
        Objects.requireNonNull(action, "action is null");
        if (!isEmpty()) {
            action.accept(get(0));
        }
        return this;
    }
    @Override
    public IndexedSeq<CharSeq> permutations() {
        if (isEmpty()) {
            return Vector.empty();
        } else {
            if (length() == 1) {
                return Vector.of(this);
            } else {
                IndexedSeq<CharSeq> result = Vector.empty();
                for (Character t : distinct()) {
                    for (CharSeq ts : remove(t).permutations()) {
                        result = result.append(CharSeq.of(t).appendAll(ts));
                    }
                }
                return result;
            }
        }
    }
    @Override
    public CharSeq prepend(Character element) {
        final char c = element;
        return of(c + back);
    }
    @Override
    public CharSeq prependAll(Iterable<? extends Character> elements) {
        Objects.requireNonNull(elements, "elements is null");
        if (Collections.isEmpty(elements)) {
            return this;
        } else if (isEmpty()) {
            return ofAll(elements);
        } else {
            final StringBuilder sb = new StringBuilder();
            for (char element : elements) {
                sb.append(element);
            }
            sb.append(back);
            return CharSeq.of(sb);
        }
    }
    @Override
    public CharSeq remove(Character element) {
        if (element == null) {
            return this;
        }
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (!found && c == element) {
                found = true;
            } else {
                sb.append(c);
            }
        }
        return sb.length() == 0 ? EMPTY : sb.length() == length() ? this : of(sb);
    }
    @Override
    public CharSeq removeFirst(Predicate<Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < back.length(); i++) {
            final char ch = get(i);
            if (predicate.test(ch)) {
                if (found) {
                    sb.append(ch);
                }
                found = true;
            } else {
                sb.append(ch);
            }
        }
        return found ? (sb.length() == 0 ? EMPTY : of(sb.toString())) : this;
    }
    @Override
    public CharSeq removeLast(Predicate<Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        for (int i = length() - 1; i >= 0; i--) {
            if (predicate.test(get(i))) {
                return removeAt(i);
            }
        }
        return this;
    }
    @Override
    public CharSeq removeAt(int index) {
        final String removed = back.substring(0, index) + back.substring(index + 1);
        return removed.isEmpty() ? EMPTY : of(removed);
    }
    @Override
    public CharSeq removeAll(Character element) {
        if (element == null) {
            return this;
        }
        return io.vavr.collection.Collections.removeAll(this, element);
    }
    @Override
    public CharSeq removeAll(Iterable<? extends Character> elements) {
        return io.vavr.collection.Collections.removeAll(this, elements);
    }
    @Override
    @Deprecated
    public CharSeq removeAll(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return reject(predicate);
    }
    @Override
    public CharSeq replace(Character currentElement, Character newElement) {
        if (currentElement == null) {
            return this;
        }
        final char currentChar = currentElement;
        final char newChar = newElement;
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (!found && c == currentChar) {
                sb.append(newChar);
                found = true;
            } else {
                sb.append(c);
            }
        }
        return found ? of(sb) : this;
    }
    @Override
    public CharSeq replaceAll(Character currentElement, Character newElement) {
        if (currentElement == null) {
            return this;
        }
        final char currentChar = currentElement;
        final char newChar = newElement;
        final StringBuilder sb = new StringBuilder();
        boolean found = false;
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (c == currentChar) {
                sb.append(newChar);
                found = true;
            } else {
                sb.append(c);
            }
        }
        return found ? of(sb) : this;
    }
    @Override
    public CharSeq retainAll(Iterable<? extends Character> elements) {
        return io.vavr.collection.Collections.retainAll(this, elements);
    }
    @Override
    public CharSeq reverse() {
        return of(new StringBuilder(back).reverse().toString());
    }
    @Override
    public CharSeq rotateLeft(int n) {
        return Collections.rotateLeft(this, n);
    }
    @Override
    public CharSeq rotateRight(int n) {
        return Collections.rotateRight(this, n);
    }
    @Override
    public CharSeq scan(Character zero, BiFunction<? super Character, ? super Character, ? extends Character> operation) {
        return io.vavr.collection.Collections.scanLeft(this, zero, operation, io.vavr.collection.Iterator::toCharSeq);
    }
    @Override
    public <U> IndexedSeq<U> scanLeft(U zero, BiFunction<? super U, ? super Character, ? extends U> operation) {
        return io.vavr.collection.Collections.scanLeft(this, zero, operation, io.vavr.collection.Iterator::toVector);
    }
    @Override
    public <U> IndexedSeq<U> scanRight(U zero, BiFunction<? super Character, ? super U, ? extends U> operation) {
        return io.vavr.collection.Collections.scanRight(this, zero, operation, io.vavr.collection.Iterator::toVector);
    }
    @Override
    public CharSeq shuffle() {
        return io.vavr.collection.Collections.shuffle(this, CharSeq::ofAll);
    }
    @Override
    public CharSeq slice(int beginIndex, int endIndex) {
        final int from = beginIndex < 0 ? 0 : beginIndex;
        final int to = endIndex > length() ? length() : endIndex;
        if (from >= to) {
            return EMPTY;
        }
        if (from <= 0 && to >= length()) {
            return this;
        }
        return CharSeq.of(back.substring(from, to));
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> slideBy(Function<? super Character, ?> classifier) {
        return iterator().slideBy(classifier).map(CharSeq::ofAll);
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> sliding(int size) {
        return sliding(size, 1);
    }
    @Override
    public io.vavr.collection.Iterator<CharSeq> sliding(int size, int step) {
        return iterator().sliding(size, step).map(CharSeq::ofAll);
    }
    @Override
    public CharSeq sorted() {
        return isEmpty() ? this : toJavaStream().sorted().collect(CharSeq.collector());
    }
    @Override
    public CharSeq sorted(Comparator<? super Character> comparator) {
        Objects.requireNonNull(comparator, "comparator is null");
        return isEmpty() ? this : toJavaStream().sorted(comparator).collect(CharSeq.collector());
    }
    @Override
    public <U extends Comparable<? super U>> CharSeq sortBy(Function<? super Character, ? extends U> mapper) {
        return sortBy(U::compareTo, mapper);
    }
    @Override
    public <U> CharSeq sortBy(Comparator<? super U> comparator, Function<? super Character, ? extends U> mapper) {
        return Collections.sortBy(this, comparator, mapper, collector());
    }
    @Override
    public Tuple2<CharSeq, CharSeq> span(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final char c = get(i);
            if (predicate.test(c)) {
                sb.append(c);
            } else {
                break;
            }
        }
        return splitByBuilder(sb);
    }
    @Override
    public CharSeq subSequence(int beginIndex) {
        if (beginIndex < 0 || beginIndex > length()) {
            throw new IndexOutOfBoundsException("begin index " + beginIndex + " < 0");
        }
        if (beginIndex == 0) {
            return this;
        } else if (beginIndex == length()) {
            return EMPTY;
        } else {
            return CharSeq.of(back.substring(beginIndex));
        }
    }
    @Override
    public CharSeq tail() {
        if (isEmpty()) {
            throw new UnsupportedOperationException("tail of empty string");
        } else {
            return CharSeq.of(back.substring(1));
        }
    }
    @Override
    public Option<CharSeq> tailOption() {
        return isEmpty() ? Option.none() : Option.some(tail());
    }
    @Override
    public CharSeq take(int n) {
        if (n <= 0) {
            return EMPTY;
        } else if (n >= length()) {
            return this;
        } else {
            return CharSeq.of(back.substring(0, n));
        }
    }
    @Override
    public CharSeq takeUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.takeUntil(this, predicate);
    }
    @Override
    public CharSeq takeWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return takeUntil(predicate.negate());
    }
    @Override
    public CharSeq takeRight(int n) {
        if (n <= 0) {
            return EMPTY;
        } else if (n >= length()) {
            return this;
        } else {
            return CharSeq.of(back.substring(length() - n));
        }
    }
    @Override
    public CharSeq takeRightUntil(Predicate<? super Character> predicate) {
        return io.vavr.collection.Collections.takeRightUntil(this, predicate);
    }
    @Override
    public CharSeq takeRightWhile(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        return takeRightUntil(predicate.negate());
    }
    /**
     * Transforms this {@code CharSeq}.
     *
     * @param f   A transformation
     * @param <U> Type of transformation result
     * @return An instance of type {@code U}
     * @throws NullPointerException if {@code f} is null
     */
    public <U> U transform(Function<? super CharSeq, ? extends U> f) {
        Objects.requireNonNull(f, "f is null");
        return f.apply(this);
    }
    @Override
    public <T1, T2> Tuple2<IndexedSeq<T1>, IndexedSeq<T2>> unzip(Function<? super Character, Tuple2<? extends T1, ? extends T2>> unzipper) {
        Objects.requireNonNull(unzipper, "unzipper is null");
        IndexedSeq<T1> xs = Vector.empty();
        IndexedSeq<T2> ys = Vector.empty();
        for (int i = 0; i < length(); i++) {
            final Tuple2<? extends T1, ? extends T2> t = unzipper.apply(get(i));
            xs = xs.append(t._1);
            ys = ys.append(t._2);
        }
        return Tuple.of(xs, ys);
    }
    @Override
    public <T1, T2, T3> Tuple3<IndexedSeq<T1>, IndexedSeq<T2>, IndexedSeq<T3>> unzip3(Function<? super Character, Tuple3<? extends T1, ? extends T2, ? extends T3>> unzipper) {
        Objects.requireNonNull(unzipper, "unzipper is null");
        IndexedSeq<T1> xs = Vector.empty();
        IndexedSeq<T2> ys = Vector.empty();
        IndexedSeq<T3> zs = Vector.empty();
        for (int i = 0; i < length(); i++) {
            final Tuple3<? extends T1, ? extends T2, ? extends T3> t = unzipper.apply(get(i));
            xs = xs.append(t._1);
            ys = ys.append(t._2);
            zs = zs.append(t._3);
        }
        return Tuple.of(xs, ys, zs);
    }
    @Override
    public CharSeq update(int index, Character element) {
        if ((index < 0) || (index >= length())) {
            throw new IndexOutOfBoundsException("update(" + index + ")");
        } else {
            char c = element;
            return of(back.substring(0, index) + c + back.substring(index + 1));
        }
    }
    @Override
    public CharSeq update(int index, Function<? super Character, ? extends Character> updater) {
        Objects.requireNonNull(updater, "updater is null");
        final char c = updater.apply(get(index));
        return update(index, c);
    }
    @Override
    public <U> IndexedSeq<Tuple2<Character, U>> zip(Iterable<? extends U> that) {
        return zipWith(that, Tuple::of);
    }
    @Override
    public <U, R> IndexedSeq<R> zipWith(Iterable<? extends U> that, BiFunction<? super Character, ? super U, ? extends R> mapper) {
        Objects.requireNonNull(that, "that is null");
        Objects.requireNonNull(mapper, "mapper is null");
        IndexedSeq<R> result = Vector.empty();
        final io.vavr.collection.Iterator<Character> list1 = iterator();
        final java.util.Iterator<? extends U> list2 = that.iterator();
        while (list1.hasNext() && list2.hasNext()) {
            result = result.append(mapper.apply(list1.next(), list2.next()));
        }
        return result;
    }
    @Override
    public <U> IndexedSeq<Tuple2<Character, U>> zipAll(Iterable<? extends U> that, Character thisElem, U thatElem) {
        Objects.requireNonNull(that, "that is null");
        IndexedSeq<Tuple2<Character, U>> result = Vector.empty();
        final io.vavr.collection.Iterator<Character> list1 = iterator();
        final java.util.Iterator<? extends U> list2 = that.iterator();
        while (list1.hasNext() || list2.hasNext()) {
            final Character elem1 = list1.hasNext() ? list1.next() : thisElem;
            final U elem2 = list2.hasNext() ? list2.next() : thatElem;
            result = result.append(Tuple.of(elem1, elem2));
        }
        return result;
    }
    @Override
    public IndexedSeq<Tuple2<Character, Integer>> zipWithIndex() {
        return zipWithIndex(Tuple::of);
    }
    @Override
    public <U> IndexedSeq<U> zipWithIndex(BiFunction<? super Character, ? super Integer, ? extends U> mapper) {
        Objects.requireNonNull(mapper, "mapper is null");
        IndexedSeq<U> result = Vector.empty();
        for (int i = 0; i < length(); i++) {
            result = result.append(mapper.apply(get(i), i));
        }
        return result;
    }
    @Override
    public Character get(int index) {
        return back.charAt(index);
    }
    @Override
    public int indexOf(Character element, int from) {
        return back.indexOf(element, from);
    }
    @Override
    public int lastIndexOf(Character element, int end) {
        return back.lastIndexOf(element, end);
    }
    @Override
    public Tuple2<CharSeq, CharSeq> splitAt(int n) {
        if (n <= 0) {
            return Tuple.of(EMPTY, this);
        } else if (n >= length()) {
            return Tuple.of(this, EMPTY);
        } else {
            return Tuple.of(of(back.substring(0, n)), of(back.substring(n)));
        }
    }
    @Override
    public Tuple2<CharSeq, CharSeq> splitAt(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        if (isEmpty()) {
            return Tuple.of(EMPTY, EMPTY);
        }
        final StringBuilder left = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final Character t = get(i);
            if (!predicate.test(t)) {
                left.append(t);
            } else {
                break;
            }
        }
        return splitByBuilder(left);
    }
    @Override
    public Tuple2<CharSeq, CharSeq> splitAtInclusive(Predicate<? super Character> predicate) {
        Objects.requireNonNull(predicate, "predicate is null");
        if (isEmpty()) {
            return Tuple.of(EMPTY, EMPTY);
        }
        final StringBuilder left = new StringBuilder();
        for (int i = 0; i < length(); i++) {
            final Character t = get(i);
            left.append(t);
            if (predicate.test(t)) {
                break;
            }
        }
        return splitByBuilder(left);
    }
    @Override
    public boolean startsWith(Iterable<? extends Character> that, int offset) {
        return startsWith(CharSeq.ofAll(that), offset);
    }
    @Override
    public Character head() {
        if (isEmpty()) {
            throw new NoSuchElementException("head of empty string");
        } else {
            return get(0);
        }
    }
    /**
     * A {@code CharSeq} is computed synchronously.
     *
     * @return false
     */
    @Override
    public boolean isAsync() {
        return false;
    }
    @Override
    public boolean isEmpty() {
        return back.isEmpty();
    }
    /**
     * A {@code CharSeq} is computed eagerly.
     *
     * @return false
     */
    @Override
    public boolean isLazy() {
        return false;
    }
    @Override
    public boolean isTraversableAgain() {
        return true;
    }
    private Object readResolve() {
        return isEmpty() ? EMPTY : this;
    }
    @Override
    public boolean equals(Object o) {
        return io.vavr.collection.Collections.equals(this, o);
    }
    @Override
    public int hashCode() {
        return io.vavr.collection.Collections.hashOrdered(this);
    }
    //
    //
    // CharSequence
    //
    //
    /**
     * Returns the {@code char} value at the
     * specified index. An index ranges from {@code 0} to
     * {@code length() - 1}. The first {@code char} value of the sequence
     * is at index {@code 0}, the next at index {@code 1},
     * and so on, as for array indexing.
     * <p>
     * If the {@code char} value specified by the index is a
     * <a href="Character.html#unicode">surrogate</a>, the surrogate
     * value is returned.
     *
     * @param index the index of the {@code char} value.
     * @return the {@code char} value at the specified index of this string.
     * The first {@code char} value is at index {@code 0}.
     * @throws IndexOutOfBoundsException if the {@code index}
     *                                   argument is negative or not less than the length of this
     *                                   string.
     */
    @Override
    public char charAt(int index) {
        return get(index);
    }
    /**
     * Returns the length of this string.
     * The length is equal to the number of <a href="Character.html#unicode">Unicode
     * code units</a> in the string.
     *
     * @return the length of the sequence of characters represented by this
     * object.
     */
    @Override
    public int length() {
        return back.length();
    }
    //
    //
    // String
    //
    //
    /**
     * Returns the character (Unicode code point) at the specified
     * index. The index refers to {@code char} values
     * (Unicode code units) and ranges from {@code 0} to
     * {@link #length()}{@code  - 1}.
     * <p>
     * If the {@code char} value specified at the given index
     * is in the high-surrogate range, the following index is less
     * than the length of this {@code CharSeq}, and the
     * {@code char} value at the following index is in the
     * low-surrogate range, then the supplementary code point
     * corresponding to this surrogate pair is returned. Otherwise,
     * the {@code char} value at the given index is returned.
     *
     * @param index the index to the {@code char} values
     * @return the code point value of the character at the
     * {@code index}
     * @throws IndexOutOfBoundsException if the {@code index}
     *                                   argument is negative or not less than the length of this
     *                                   string.
     */
    public int codePointAt(int index) {
        return back.codePointAt(index);
    }
    /**
     * Returns the character (Unicode code point) before the specified
     * index. The index refers to {@code char} values
     * (Unicode code units) and ranges from {@code 1} to {@link
     * CharSequence#length() length}.
     * <p>
     * If the {@code char} value at {@code (index - 1)}
     * is in the low-surrogate range, {@code (index - 2)} is not
     * negative, and the {@code char} value at {@code (index -
     * 2)} is in the high-surrogate range, then the
     * supplementary code point value of the surrogate pair is
     * returned. If the {@code char} value at {@code index -
     * 1} is an unpaired low-surrogate or a high-surrogate, the
     * surrogate value is returned.
     *
     * @param index the index following the code point that should be returned
     * @return the Unicode code point value before the given index.
     * @throws IndexOutOfBoundsException if the {@code index}
     *                                   argument is less than 1 or greater than the length
     *                                   of this string.
     */
    public int codePointBefore(int index) {
        return back.codePointBefore(index);
    }
    /**
     * Returns the number of Unicode code points in the specified text
     * range of this {@code CharSeq}. The text range begins at the
     * specified {@code beginIndex} and extends to the
     * {@code char} at index {@code endIndex - 1}. Thus the
     * length (in {@code char}s) of the text range is
     * {@code endIndex-beginIndex}. Unpaired surrogates within
     * the text range count as one code point each.
     *
     * @param beginIndex the index to the first {@code char} of
     *                   the text range.
     * @param endIndex   the index after the last {@code char} of
     *                   the text range.
     * @return the number of Unicode code points in the specified text
     * range
     * @throws IndexOutOfBoundsException if the
     *                                   {@code beginIndex} is negative, or {@code endIndex}
     *                                   is larger than the length of this {@code CharSeq}, or
     *                                   {@code beginIndex} is larger than {@code endIndex}.
     */
    public int codePointCount(int beginIndex, int endIndex) {
        return back.codePointCount(beginIndex, endIndex);
    }
    /**
     * Returns the index within this {@code CharSeq} that is
     * offset from the given {@code index} by
     * {@code codePointOffset} code points. Unpaired surrogates
     * within the text range given by {@code index} and
     * {@code codePointOffset} count as one code point each.
     *
     * @param index           the index to be offset
     * @param codePointOffset the offset in code points
     * @return the index within this {@code CharSeq}
     * @throws IndexOutOfBoundsException if {@code index}
     *                                   is negative or larger then the length of this
     *                                   {@code CharSeq}, or if {@code codePointOffset} is positive
     *                                   and the substring starting with {@code index} has fewer
     *                                   than {@code codePointOffset} code points,
     *                                   or if {@code codePointOffset} is negative and the substring
     *                                   before {@code index} has fewer than the absolute value
     *                                   of {@code codePointOffset} code points.
     */
    public int offsetByCodePoints(int index, int codePointOffset) {
        return back.offsetByCodePoints(index, codePointOffset);
    }
    /**
     * Copies characters from this string into the destination character
     * array.
     * <p>
     * The first character to be copied is at index {@code srcBegin};
     * the last character to be copied is at index {@code srcEnd-1}
     * (thus the total number of characters to be copied is
     * {@code srcEnd-srcBegin}). The characters are copied into the
     * subarray of {@code dst} starting at index {@code dstBegin}
     * and ending at index:
     * <blockquote><pre>
     *     dstbegin + (srcEnd-srcBegin) - 1
     * </pre></blockquote>
     *
     * @param srcBegin index of the first character in the string
     *                 to copy.
     * @param srcEnd   index after the last character in the string
     *                 to copy.
     * @param dst      the destination array.
     * @param dstBegin the start offset in the destination array.
     * @throws IndexOutOfBoundsException If any of the following
     *                                   is true:
     *                                   <ul><li>{@code srcBegin} is negative.
     *                                   <li>{@code srcBegin} is greater than {@code srcEnd}
     *                                   <li>{@code srcEnd} is greater than the length of this
     *                                   string
     *                                   <li>{@code dstBegin} is negative
     *                                   <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than
     *                                   {@code dst.length}</ul>
     */
    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {
        back.getChars(srcBegin, srcEnd, dst, dstBegin);
    }
    /**
     * Encodes this {@code CharSeq} into a sequence of bytes using the named
     * charset, storing the result into a new byte array.
     * <p>
     * The behavior of this method when this string cannot be encoded in
     * the given charset is unspecified.  The {@link
     * java.nio.charset.CharsetEncoder} class should be used when more control
     * over the encoding process is required.
     *
     * @param charsetName The name of a supported {@linkplain java.nio.charset.Charset
     *                    charset}
     * @return The resultant byte array
     * @throws UnsupportedEncodingException If the named charset is not supported
     */
    public byte[] getBytes(String charsetName) throws UnsupportedEncodingException {
        return back.getBytes(charsetName);
    }
    /**
     * Encodes this {@code CharSeq} into a sequence of bytes using the given
     * {@linkplain java.nio.charset.Charset charset}, storing the result into a
     * new byte array.
     * <p>
     * This method always replaces malformed-input and unmappable-character
     * sequences with this charset's default replacement byte array.  The
     * {@link java.nio.charset.CharsetEncoder} class should be used when more
     * control over the encoding process is required.
     *
     * @param charset The {@linkplain java.nio.charset.Charset} to be used to encode
     *                the {@code CharSeq}
     * @return The resultant byte array
     */
    public byte[] getBytes(Charset charset) {
        return back.getBytes(charset);
    }
    /**
     * Encodes this {@code CharSeq} into a sequence of bytes using the
     * platform's default charset, storing the result into a new byte array.
     * <p>
     * The behavior of this method when this string cannot be encoded in
     * the default charset is unspecified.  The {@link
     * java.nio.charset.CharsetEncoder} class should be used when more control
     * over the encoding process is required.
     *
     * @return The resultant byte array
     */
    public byte[] getBytes() {
        return back.getBytes();
    }
    /**
     * Compares this string to the specified {@code StringBuffer}.  The result
     * is {@code true} if and only if this {@code CharSeq} represents the same
     * sequence of characters as the specified {@code StringBuffer}. This method
     * synchronizes on the {@code StringBuffer}.
     *
     * @param sb The {@code StringBuffer} to compare this {@code CharSeq} against
     * @return {@code true} if this {@code CharSeq} represents the same
     * sequence of characters as the specified {@code StringBuffer},
     * {@code false} otherwise
     */
    public boolean contentEquals(StringBuffer sb) {
        return back.contentEquals(sb);
    }
    /**
     * Compares this string to the specified {@code CharSequence}.  The
     * result is {@code true} if and only if this {@code CharSeq} represents the
     * same sequence of char values as the specified sequence. Note that if the
     * {@code CharSequence} is a {@code StringBuffer} then the method
     * synchronizes on it.
     *
     * @param cs The sequence to compare this {@code CharSeq} against
     * @return {@code true} if this {@code CharSeq} represents the same
     * sequence of char values as the specified sequence, {@code
     * false} otherwise
     */
    public boolean contentEquals(CharSequence cs) {
        return back.contentEquals(cs);
    }
    /**
     * Compares this {@code CharSeq} to another {@code CharSeq}, ignoring case
     * considerations.  Two strings are considered equal ignoring case if they
     * are of the same length and corresponding characters in the two strings
     * are equal ignoring case.
     * <p>
     * Two characters {@code c1} and {@code c2} are considered the same
     * ignoring case if at least one of the following is true:
     * <ul>
     * <li> The two characters are the same (as compared by the
     * {@code ==} operator)
     * <li> Applying the method {@link
     * Character#toUpperCase(char)} to each character
     * produces the same result
     * <li> Applying the method {@link
     * Character#toLowerCase(char)} to each character
     * produces the same result
     * </ul>
     *
     * @param anotherString The {@code CharSeq} to compare this {@code CharSeq} against
     * @return {@code true} if the argument is not {@code null} and it
     * represents an equivalent {@code CharSeq} ignoring case; {@code
     * false} otherwise
     * @see #equals(Object)
     */
    public boolean equalsIgnoreCase(CharSeq anotherString) {
        return back.equalsIgnoreCase(anotherString.back);
    }
    /**
     * Compares two strings lexicographically.
     * The comparison is based on the Unicode value of each character in
     * the strings. The character sequence represented by this
     * {@code CharSeq} object is compared lexicographically to the
     * character sequence represented by the argument string. The result is
     * a negative integer if this {@code CharSeq} object
     * lexicographically precedes the argument string. The result is a
     * positive integer if this {@code CharSeq} object lexicographically
     * follows the argument string. The result is zero if the strings
     * are equal; {@code compareTo} returns {@code 0} exactly when
     * the {@link #equals(Object)} method would return {@code true}.
     * <p>
     * This is the definition of lexicographic ordering. If two strings are
     * different, then either they have different characters at some index
     * that is a valid index for both strings, or their lengths are different,
     * or both. If they have different characters at one or more index
     * positions, let <i>k</i> be the smallest such index; then the string
     * whose character at position <i>k</i> has the smaller value, as
     * determined by using the &lt; operator, lexicographically precedes the
     * other string. In this case, {@code compareTo} returns the
     * difference of the two character values at position {@code k} in
     * the two string -- that is, the value:
     * <blockquote><pre>
     * this.charAt(k)-anotherString.charAt(k)
     * </pre></blockquote>
     * If there is no index position at which they differ, then the shorter
     * string lexicographically precedes the longer string. In this case,
     * {@code compareTo} returns the difference of the lengths of the
     * strings -- that is, the value:
     * <blockquote><pre>
     * this.length()-anotherString.length()
     * </pre></blockquote>
     *
     * @param anotherString the {@code CharSeq} to be compared.
     * @return the value {@code 0} if the argument string is equal to
     * this string; a value less than {@code 0} if this string
     * is lexicographically less than the string argument; and a
     * value greater than {@code 0} if this string is
     * lexicographically greater than the string argument.
     */
    public int compareTo(CharSeq anotherString) {
        return back.compareTo(anotherString.back);
    }
    /**
     * Compares two strings lexicographically, ignoring case
     * differences. This method returns an integer whose sign is that of
     * calling {@code compareTo} with normalized versions of the strings
     * where case differences have been eliminated by calling
     * {@code Character.toLowerCase(Character.toUpperCase(character))} on
     * each character.
     * <p>
     * Note that this method does <em>not</em> take locale into account,
     * and will result in an unsatisfactory ordering for certain locales.
     * The java.text package provides <em>collators</em> to allow
     * locale-sensitive ordering.
     *
     * @param str the {@code CharSeq} to be compared.
     * @return a negative integer, zero, or a positive integer as the
     * specified String is greater than, equal to, or less
     * than this String, ignoring case considerations.
     */
    public int compareToIgnoreCase(CharSeq str) {
        return back.compareToIgnoreCase(str.back);
    }
    /**
     * Tests if two string regions are equal.
     * <p>
     * A substring of this {@code CharSeq} object is compared to a substring
     * of the argument other. The result is true if these substrings
     * represent identical character sequences. The substring of this
     * {@code CharSeq} object to be compared begins at index {@code toffset}
     * and has length {@code len}. The substring of other to be compared
     * begins at index {@code ooffset} and has length {@code len}. The
     * result is {@code false} if and only if at least one of the following
     * is true:
     * <ul><li>{@code toffset} is negative.
     * <li>{@code ooffset} is negative.
     * <li>{@code toffset+len} is greater than the length of this
     * {@code CharSeq} object.
     * <li>{@code ooffset+len} is greater than the length of the other
     * argument.
     * <li>There is some nonnegative integer <i>k</i> less than {@code len}
     * such that:
     * {@code this.charAt(toffset + }<i>k</i>{@code ) != other.charAt(ooffset + }
     * <i>k</i>{@code )}
     * </ul>
     *
     * @param toffset the starting offset of the subregion in this string.
     * @param other   the string argument.
     * @param ooffset the starting offset of the subregion in the string
     *                argument.
     * @param len     the number of characters to compare.
     * @return {@code true} if the specified subregion of this string
     * exactly matches the specified subregion of the string argument;
     * {@code false} otherwise.
     */
    public boolean regionMatches(int toffset, CharSeq other, int ooffset, int len) {
        return back.regionMatches(toffset, other.back, ooffset, len);
    }
    /**
     * Tests if two string regions are equal.
     * <p>
     * A substring of this {@code CharSeq} object is compared to a substring
     * of the argument {@code other}. The result is {@code true} if these
     * substrings represent character sequences that are the same, ignoring
     * case if and only if {@code ignoreCase} is true. The substring of
     * this {@code CharSeq} object to be compared begins at index
     * {@code toffset} and has length {@code len}. The substring of
     * {@code other} to be compared begins at index {@code ooffset} and
     * has length {@code len}. The result is {@code false} if and only if
     * at least one of the following is true:
     * <ul><li>{@code toffset} is negative.
     * <li>{@code ooffset} is negative.
     * <li>{@code toffset+len} is greater than the length of this
     * {@code CharSeq} object.
     * <li>{@code ooffset+len} is greater than the length of the other
     * argument.
     * <li>{@code ignoreCase} is {@code false} and there is some nonnegative
     * integer <i>k</i> less than {@code len} such that:
     * <blockquote><pre>
     * this.charAt(toffset+k) != other.charAt(ooffset+k)
     * </pre></blockquote>
     * <li>{@code ignoreCase} is {@code true} and there is some nonnegative
     * integer <i>k</i> less than {@code len} such that:
     * <blockquote><pre>
     * Character.toLowerCase(this.charAt(toffset+k)) !=
     * Character.toLowerCase(other.charAt(ooffset+k))
     * </pre></blockquote>
     * and:
     * <blockquote><pre>
     * Character.toUpperCase(this.charAt(toffset+k)) !=
     *         Character.toUpperCase(other.charAt(ooffset+k))
     * </pre></blockquote>
     * </ul>
     *
     * @param ignoreCase if {@code true}, ignore case when comparing
     *                   characters.
     * @param toffset    the starting offset of the subregion in this
     *                   string.
     * @param other      the string argument.
     * @param ooffset    the starting offset of the subregion in the string
     *                   argument.
     * @param len        the number of characters to compare.
     * @return {@code true} if the specified subregion of this string
     * matches the specified subregion of the string argument;
     * {@code false} otherwise. Whether the matching is exact
     * or case insensitive depends on the {@code ignoreCase}
     * argument.
     */
    public boolean regionMatches(boolean ignoreCase, int toffset, CharSeq other, int ooffset, int len) {
        return back.regionMatches(ignoreCase, toffset, other.back, ooffset, len);
    }
    @Override
    public CharSeq subSequence(int beginIndex, int endIndex) {
        if (beginIndex < 0) {
            throw new IndexOutOfBoundsException("begin index " + beginIndex + " < 0");
        }
        if (endIndex > length()) {
            throw new IndexOutOfBoundsException("endIndex " + endIndex + " > length " + length());
        }
        final int subLen = endIndex - beginIndex;
        if (subLen < 0) {
            throw new IllegalArgumentException("beginIndex " + beginIndex + " > endIndex " + endIndex);
        }
        if (beginIndex == 0 && endIndex == length()) {
            return this;
        } else {
            return CharSeq.of(back.subSequence(beginIndex, endIndex));
        }
    }
    /**
     * Tests if the substring of this string beginning at the
     * specified index starts with the specified prefix.
     *
     * @param prefix  the prefix.
     * @param toffset where to begin looking in this string.
     * @return {@code true} if the character sequence represented by the
     * argument is a prefix of the substring of this object starting
     * at index {@code toffset}; {@code false} otherwise.
     * The result is {@code false} if {@code toffset} is
     * negative or greater than the length of this
     * {@code CharSeq} object; otherwise the result is the same
     * as the result of the expression
     * <pre>
     *          this.substring(toffset).startsWith(prefix)
     *          </pre>
     */
    public boolean startsWith(CharSeq prefix, int toffset) {
        return back.startsWith(prefix.back, toffset);
    }
    /**
     * Tests if this string starts with the specified prefix.
     *
     * @param prefix the prefix.
     * @return {@code true} if the character sequence represented by the
     * argument is a prefix of the character sequence represented by
     * this string; {@code false} otherwise.
     * Note also that {@code true} will be returned if the
     * argument is an empty string or is equal to this
     * {@code CharSeq} object as determined by the
     * {@link #equals(Object)} method.
     */
    public boolean startsWith(CharSeq prefix) {
        return back.startsWith(prefix.back);
    }
    /**
     * Tests if this string ends with the specified suffix.
     *
     * @param suffix the suffix.
     * @return {@code true} if the character sequence represented by the
     * argument is a suffix of the character sequence represented by
     * this object; {@code false} otherwise. Note that the
     * result will be {@code true} if the argument is the
     * empty string or is equal to this {@code CharSeq} object
     * as determined by the {@link #equals(Object)} method.
     */
    public boolean endsWith(CharSeq suffix) {
        return back.endsWith(suffix.back);
    }
    /**
     * Returns the index within this string of the first occurrence of
     * the specified character. If a character with value
     * {@code ch} occurs in the character sequence represented by
     * this {@code CharSeq} object, then the index (in Unicode
     * code units) of the first such occurrence is returned. For
     * values of {@code ch} in the range from 0 to 0xFFFF
     * (inclusive), this is the smallest value <i>k</i> such that:
     * <blockquote><pre>
     * this.charAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * smallest value <i>k</i> such that:
     * <blockquote><pre>
     * this.codePointAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this
     * string, then {@code -1} is returned.
     *
     * @param ch a character (Unicode code point).
     * @return the index of the first occurrence of the character in the
     * character sequence represented by this object, or
     * {@code -1} if the character does not occur.
     */
    public int indexOf(int ch) {
        return back.indexOf(ch);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option}.
     *
     * @param ch a character (Unicode code point).
     * @return {@code Some(index)} or {@code None} if not found.
     */
    Option<Integer> indexOfOption(int ch) {
        return io.vavr.collection.Collections.indexOption(indexOf(ch));
    }
    /**
     * Returns the index within this string of the first occurrence of the
     * specified character, starting the search at the specified index.
     * <p>
     * If a character with value {@code ch} occurs in the
     * character sequence represented by this {@code CharSeq}
     * object at an index no smaller than {@code fromIndex}, then
     * the index of the first such occurrence is returned. For values
     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),
     * this is the smallest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.charAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &gt;= fromIndex)
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * smallest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.codePointAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &gt;= fromIndex)
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this
     * string at or after position {@code fromIndex}, then
     * {@code -1} is returned.
     * <p>
     * There is no restriction on the value of {@code fromIndex}. If it
     * is negative, it has the same effect as if it were zero: this entire
     * string may be searched. If it is greater than the length of this
     * string, it has the same effect as if it were equal to the length of
     * this string: {@code -1} is returned.
     * <p>
     * All indices are specified in {@code char} values
     * (Unicode code units).
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from.
     * @return the index of the first occurrence of the character in the
     * character sequence represented by this object that is greater
     * than or equal to {@code fromIndex}, or {@code -1}
     * if the character does not occur.
     */
    public int indexOf(int ch, int fromIndex) {
        return back.indexOf(ch, fromIndex);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    Option<Integer> indexOfOption(int ch, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(indexOf(ch, fromIndex));
    }
    /**
     * Returns the index within this string of the last occurrence of
     * the specified character. For values of {@code ch} in the
     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code
     * units) returned is the largest value <i>k</i> such that:
     * <blockquote><pre>
     * this.charAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * largest value <i>k</i> such that:
     * <blockquote><pre>
     * this.codePointAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true.  In either case, if no such character occurs in this
     * string, then {@code -1} is returned.  The
     * {@code CharSeq} is searched backwards starting at the last
     * character.
     *
     * @param ch a character (Unicode code point).
     * @return the index of the last occurrence of the character in the
     * character sequence represented by this object, or
     * {@code -1} if the character does not occur.
     */
    public int lastIndexOf(int ch) {
        return back.lastIndexOf(ch);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option}.
     *
     * @param ch a character (Unicode code point).
     * @return {@code Some(index)} or {@code None} if not found.
     */
    Option<Integer> lastIndexOfOption(int ch) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(ch));
    }
    /**
     * Returns the index within this string of the last occurrence of
     * the specified character, searching backward starting at the
     * specified index. For values of {@code ch} in the range
     * from 0 to 0xFFFF (inclusive), the index returned is the largest
     * value <i>k</i> such that:
     * <blockquote><pre>
     * (this.charAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &lt;= fromIndex)
     * </pre></blockquote>
     * is true. For other values of {@code ch}, it is the
     * largest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.codePointAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &lt;= fromIndex)
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this
     * string at or before position {@code fromIndex}, then
     * {@code -1} is returned.
     * <p>
     * All indices are specified in {@code char} values
     * (Unicode code units).
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from. There is no
     *                  restriction on the value of {@code fromIndex}. If it is
     *                  greater than or equal to the length of this string, it has
     *                  the same effect as if it were equal to one less than the
     *                  length of this string: this entire string may be searched.
     *                  If it is negative, it has the same effect as if it were -1:
     *                  -1 is returned.
     * @return the index of the last occurrence of the character in the
     * character sequence represented by this object that is less
     * than or equal to {@code fromIndex}, or {@code -1}
     * if the character does not occur before that point.
     */
    public int lastIndexOf(int ch, int fromIndex) {
        return back.lastIndexOf(ch, fromIndex);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param ch        a character (Unicode code point).
     * @param fromIndex the index to start the search from.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> lastIndexOfOption(int ch, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(ch, fromIndex));
    }
    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring.
     * <p>
     * The returned index is the smallest value <i>k</i> for which:
     * <blockquote><pre>
     * this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str the substring to search for.
     * @return the index of the first occurrence of the specified substring,
     * or {@code -1} if there is no such occurrence.
     */
    public int indexOf(CharSeq str) {
        return back.indexOf(str.back);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option}.
     *
     * @param str the substring to search for.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> indexOfOption(CharSeq str) {
        return io.vavr.collection.Collections.indexOption(indexOf(str));
    }
    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring, starting at the specified index.
     * <p>
     * The returned index is the smallest value <i>k</i> for which:
     * <blockquote><pre>
     * <i>k</i> &gt;= fromIndex {@code &&} this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index from which to start the search.
     * @return the index of the first occurrence of the specified substring,
     * starting at the specified index,
     * or {@code -1} if there is no such occurrence.
     */
    public int indexOf(CharSeq str, int fromIndex) {
        return back.indexOf(str.back, fromIndex);
    }
    /**
     * Returns the index of the first occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index from which to start the search.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> indexOfOption(CharSeq str, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(indexOf(str, fromIndex));
    }
    /**
     * Returns the index within this string of the last occurrence of the
     * specified substring.  The last occurrence of the empty string ""
     * is considered to occur at the index value {@code this.length()}.
     * <p>
     * The returned index is the largest value <i>k</i> for which:
     * <blockquote><pre>
     * this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str the substring to search for.
     * @return the index of the last occurrence of the specified substring,
     * or {@code -1} if there is no such occurrence.
     */
    public int lastIndexOf(CharSeq str) {
        return back.lastIndexOf(str.back);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option}.
     *
     * @param str the substring to search for.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> lastIndexOfOption(CharSeq str) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(str));
    }
    /**
     * Returns the index within this string of the last occurrence of the
     * specified substring, searching backward starting at the specified index.
     * <p>
     * The returned index is the largest value <i>k</i> for which:
     * <blockquote><pre>
     * <i>k</i> {@code <=} fromIndex {@code &&} this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index to start the search from.
     * @return the index of the last occurrence of the specified substring,
     * searching backward from the specified index,
     * or {@code -1} if there is no such occurrence.
     */
    public int lastIndexOf(CharSeq str, int fromIndex) {
        return back.lastIndexOf(str.back, fromIndex);
    }
    /**
     * Returns the index of the last occurrence of the given element as an {@code Option},
     * starting the search at the specified index.
     *
     * @param str       the substring to search for.
     * @param fromIndex the index to start the search from.
     * @return {@code Some(index)} or {@code None} if not found.
     */
    public Option<Integer> lastIndexOfOption(CharSeq str, int fromIndex) {
        return io.vavr.collection.Collections.indexOption(lastIndexOf(str, fromIndex));
    }
    /**
     * Returns a string that is a substring of this string. The
     * substring begins with the character at the specified index and
     * extends to the end of this string. <p>
     * Examples:
     * <blockquote><pre>
     * "unhappy".substring(2) returns "happy"
     * "Harbison".substring(3) returns "bison"
     * "emptiness".substring(9) returns "" (an empty string)
     * </pre></blockquote>
     *
     * @param beginIndex the beginning index, inclusive.
     * @return the specified substring.
     * @throws IndexOutOfBoundsException if
     *                                   {@code beginIndex} is negative or larger than the
     *                                   length of this {@code CharSeq} object.
     */
    public CharSeq substring(int beginIndex) {
        return CharSeq.of(back.substring(beginIndex));
    }
    /**
     * Returns a string that is a substring of this string. The
     * substring begins at the specified {@code beginIndex} and
     * extends to the character at index {@code endIndex - 1}.
     * Thus the length of the substring is {@code endIndex-beginIndex}.
     * <p>
     * Examples:
     * <blockquote><pre>
     * "hamburger".substring(4, 8) returns "urge"
     * "smiles".substring(1, 5) returns "mile"
     * </pre></blockquote>
     *
     * @param beginIndex the beginning index, inclusive.
     * @param endIndex   the ending index, exclusive.
     * @return the specified substring.
     * @throws IndexOutOfBoundsException if the
     *                                   {@code beginIndex} is negative, or
     *                                   {@code endIndex} is larger than the length of
     *                                   this {@code CharSeq} object, or
     *                                   {@code beginIndex} is larger than
     *                                   {@code endIndex}.
     */
    public CharSeq substring(int beginIndex, int endIndex) {
        return CharSeq.of(back.substring(beginIndex, endIndex));
    }
    @Override
    public String stringPrefix() {
        return "CharSeq";
    }
    /**
     * Returns a string containing the characters in this sequence in the same
     * order as this sequence.  The length of the string will be the length of
     * this sequence.
     *
     * @return a string consisting of exactly this sequence of characters
     */
    @Override
    public String toString() {
        return back;
    }
    /**
     * Concatenates the specified string to the end of this string.
     * <p>
     * If the length of the argument string is {@code 0}, then this
     * {@code CharSeq} object is returned. Otherwise, a
     * {@code CharSeq} object is returned that represents a character
     * sequence that is the concatenation of the character sequence
     * represented by this {@code CharSeq} object and the character
     * sequence represented by the argument string.<p>
     * Examples:
     * <blockquote><pre>
     * "cares".concat("s") returns "caress"
     * "to".concat("get").concat("her") returns "together"
     * </pre></blockquote>
     *
     * @param str the {@code CharSeq} that is concatenated to the end
     *            of this {@code CharSeq}.
     * @return a string that represents the concatenation of this object's
     * characters followed by the string argument's characters.
     */
    public CharSeq concat(CharSeq str) {
        return CharSeq.of(back.concat(str.back));
    }
    /**
     * Tells whether or not this string matches the given <a
     * href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.
     * <p>
     * An invocation of this method of the form
     * <i>str</i>{@code .matches(}<i>regex</i>{@code )} yields exactly the
     * same result as the expression
     * <blockquote>
     * {@link Pattern}.{@link Pattern#matches(String, CharSequence)
     * matches(<i>regex</i>, <i>str</i>)}
     * </blockquote>
     *
     * @param regex the regular expression to which this string is to be matched
     * @return {@code true} if, and only if, this string matches the
     * given regular expression
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public boolean matches(String regex) {
        return back.matches(regex);
    }
    /**
     * Returns true if and only if this string contains the specified
     * sequence of char values.
     *
     * @param s the sequence to search for
     * @return true if this string contains {@code s}, false otherwise
     */
    public boolean contains(CharSequence s) {
        return back.contains(s);
    }
    /**
     * Replaces the first substring of this string that matches the given <a
     * href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
     * given replacement.
     * <p>
     * An invocation of this method of the form
     * <i>str</i>{@code .replaceFirst(}<i>regex</i>{@code ,} <i>repl</i>{@code )}
     * yields exactly the same result as the expression
     * <blockquote>
     * <code>
     * {@link Pattern}.{@link
     * Pattern#compile compile}(<i>regex</i>).{@link
     * Pattern#matcher(CharSequence) matcher}(<i>str</i>).{@link
     * java.util.regex.Matcher#replaceFirst replaceFirst}(<i>repl</i>)
     * </code>
     * </blockquote>
     * Note that backslashes ({@code \}) and dollar signs ({@code $}) in the
     * replacement string may cause the results to be different than if it were
     * being treated as a literal replacement string; see
     * {@link java.util.regex.Matcher#replaceFirst}.
     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
     * meaning of these characters, if desired.
     *
     * @param regex       the regular expression to which this string is to be matched
     * @param replacement the string to be substituted for the first match
     * @return The resulting {@code CharSeq}
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public CharSeq replaceFirst(String regex, String replacement) {
        return CharSeq.of(back.replaceFirst(regex, replacement));
    }
    /**
     * Replaces each substring of this string that matches the given <a
     * href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
     * given replacement.
     * <p>
     * An invocation of this method of the form
     * <i>str</i>{@code .replaceAll(}<i>regex</i>{@code ,} <i>repl</i>{@code )}
     * yields exactly the same result as the expression
     * <blockquote>
     * <code>
     * {@link Pattern}.{@link
     * Pattern#compile compile}(<i>regex</i>).{@link
     * Pattern#matcher(CharSequence) matcher}(<i>str</i>).{@link
     * java.util.regex.Matcher#replaceAll replaceAll}(<i>repl</i>)
     * </code>
     * </blockquote>
     * Note that backslashes ({@code \}) and dollar signs ({@code $}) in the
     * replacement string may cause the results to be different than if it were
     * being treated as a literal replacement string; see
     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.
     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
     * meaning of these characters, if desired.
     *
     * @param regex       the regular expression to which this string is to be matched
     * @param replacement the string to be substituted for each match
     * @return The resulting {@code CharSeq}
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public CharSeq replaceAll(String regex, String replacement) {
        return CharSeq.of(back.replaceAll(regex, replacement));
    }
    /**
     * Replaces each substring of this string that matches the literal target
     * sequence with the specified literal replacement sequence. The
     * replacement proceeds from the beginning of the string to the end, for
     * example, replacing "aa" with "b" in the string "aaa" will result in
     * "ba" rather than "ab".
     *
     * @param target      The sequence of char values to be replaced
     * @param replacement The replacement sequence of char values
     * @return The resulting string
     */
    public CharSeq replace(CharSequence target, CharSequence replacement) {
        return CharSeq.of(back.replace(target, replacement));
    }
    /**
     * Splits this string around matches of the given
     * <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.
     * <p>
     * This method works as if by invoking the two-argument {@link #split(String, int)}
     * method with the given expression and a limit argument of zero.
     * Trailing empty strings are therefore not included in the resulting {@link Seq}.
     * <p>
     * The string {@code "boo:and:foo"}, for example, yields the following results with these expressions:
     * <blockquote>
     * <table style="border-spacing: 0; padding: 1px;">
     * <caption>Split examples showing regex and result</caption>
     * <tr>
     * <th>Regex</th>
     * <th>Result</th>
     * </tr>
     * <tr>
     * <td style="text-align: center;">:</td>
     * <td>{@code { "boo", "and", "foo" }}</td>
     * </tr>
     * <tr>
     * <td style="text-align: center;">o</td>
     * <td>{@code { "b", "", ":and:f" }}</td>
     * </tr>
     * </table>
     * </blockquote>
     *
     * @param regex the delimiting regular expression
     * @return the Seq of strings computed by splitting this string around matches of the given regular expression
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public Seq<CharSeq> split(String regex) {
        return split(regex, 0);
    }
    /**
     * Splits this string around matches of the given
     * <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.
     * <p>
     * The array returned by this method contains each substring of this
     * string that is terminated by another substring that matches the given
     * expression or is terminated by the end of the string.  The substrings in
     * the array are in the order in which they occur in this string.  If the
     * expression does not match any part of the input then the resulting array
     * has just one element, namely this string.
     * <p>
     * When there is a positive-width match at the beginning of this
     * string then an empty leading substring is included at the beginning
     * of the resulting array. A zero-width match at the beginning however
     * never produces such empty leading substring.
     * <p>
     * The {@code limit} parameter controls the number of times the
     * pattern is applied and therefore affects the length of the resulting
     * array.  If the limit <i>n</i> is greater than zero then the pattern
     * will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's
     * length will be no greater than <i>n</i>, and the array's last entry
     * will contain all input beyond the last matched delimiter.  If <i>n</i>
     * is non-positive then the pattern will be applied as many times as
     * possible and the array can have any length.  If <i>n</i> is zero then
     * the pattern will be applied as many times as possible, the array can
     * have any length, and trailing empty strings will be discarded.
     * <p>
     * The string {@code "boo:and:foo"}, for example, yields the
     * following results with these parameters:
     * <blockquote><table style="border-spacing: 0; padding: 1px;">
     * <caption>Split example showing regex, limit, and result</caption>
     * <tr>
     * <th>Regex</th>
     * <th>Limit</th>
     * <th>Result</th>
     * </tr>
     * <tr><td style="text-align: center;">:</td>
     * <td style="text-align: center;">2</td>
     * <td>{@code { "boo", "and:foo" }}</td></tr>
     * <tr><td style="text-align: center;">:</td>
     * <td style="text-align: center;">5</td>
     * <td>{@code { "boo", "and", "foo" }}</td></tr>
     * <tr><td style="text-align: center;">:</td>
     * <td style="text-align: center;">-2</td>
     * <td>{@code { "boo", "and", "foo" }}</td></tr>
     * <tr><td style="text-align: center;">o</td>
     * <td style="text-align: center;">5</td>
     * <td>{@code { "b", "", ":and:f", "", "" }}</td></tr>
     * <tr><td style="text-align: center;">o</td>
     * <td style="text-align: center;">-2</td>
     * <td>{@code { "b", "", ":and:f", "", "" }}</td></tr>
     * <tr><td style="text-align: center;">o</td>
     * <td style="text-align: center;">0</td>
     * <td>{@code { "b", "", ":and:f" }}</td></tr>
     * </table></blockquote>
     * An invocation of this method of the form
     * <i>str.</i>{@code split(}<i>regex</i>{@code ,}&nbsp;<i>n</i>{@code )}
     * yields the same result as the expression
     * <blockquote>
     * <code>
     * {@link Pattern}.{@link
     * Pattern#compile compile}(<i>regex</i>).{@link
     * Pattern#split(CharSequence, int) split}(<i>str</i>,&nbsp;<i>n</i>)
     * </code>
     * </blockquote>
     *
     * @param regex the delimiting regular expression
     * @param limit the result threshold, as described above
     * @return the Seq of strings computed by splitting this string around matches of the given regular expression
     * @throws PatternSyntaxException if the regular expression's syntax is invalid
     * @see Pattern
     */
    public Seq<CharSeq> split(String regex, int limit) {
        final Seq<String> split = Array.wrap(back.split(regex, limit));
        return split.map(CharSeq::of);
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to lower
     * case using the rules of the given {@code Locale}.  Case mapping is based
     * on the Unicode Standard version specified by the {@link Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * {@code CharSeq} may be a different length than the original {@code CharSeq}.
     * <p>
     * Examples of lowercase  mappings are in the following table:
     * <table border="1">
     * <caption>Lowercase mapping examples showing language code of locale, upper case, lower case, and description</caption>
     * <tr>
     * <th>Language Code of Locale</th>
     * <th>Upper Case</th>
     * <th>Lower Case</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0130</td>
     * <td>&#92;u0069</td>
     * <td>capital letter I with dot above -&gt; small letter i</td>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0049</td>
     * <td>&#92;u0131</td>
     * <td>capital letter I -&gt; small letter dotless i </td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>French Fries</td>
     * <td>french fries</td>
     * <td>lowercased all chars in String</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td><img src="doc-files/capiota.gif" alt="capiota"><img src="doc-files/capchi.gif" alt="capchi">
     * <img src="doc-files/captheta.gif" alt="captheta"><img src="doc-files/capupsil.gif" alt="capupsil">
     * <img src="doc-files/capsigma.gif" alt="capsigma"></td>
     * <td><img src="doc-files/iota.gif" alt="iota"><img src="doc-files/chi.gif" alt="chi">
     * <img src="doc-files/theta.gif" alt="theta"><img src="doc-files/upsilon.gif" alt="upsilon">
     * <img src="doc-files/sigma1.gif" alt="sigma"></td>
     * <td>lowercased all chars in String</td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale
     * @return the {@code CharSeq}, converted to lowercase.
     * @see String#toLowerCase()
     * @see String#toUpperCase()
     * @see String#toUpperCase(Locale)
     */
    public CharSeq toLowerCase(Locale locale) {
        return CharSeq.of(back.toLowerCase(locale));
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to lower
     * case using the rules of the default locale. This is equivalent to calling
     * {@code toLowerCase(Locale.getDefault())}.
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.
     * For instance, {@code "TITLE".toLowerCase()} in a Turkish locale
     * returns {@code "t\u005Cu0131tle"}, where '\u005Cu0131' is the
     * LATIN SMALL LETTER DOTLESS I character.
     * To obtain correct results for locale insensitive strings, use
     * {@code toLowerCase(Locale.ROOT)}.
     * <p>
     *
     * @return the {@code CharSeq}, converted to lowercase.
     * @see String#toLowerCase(Locale)
     */
    public CharSeq toLowerCase() {
        return CharSeq.of(back.toLowerCase(Locale.getDefault()));
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to upper
     * case using the rules of the given {@code Locale}. Case mapping is based
     * on the Unicode Standard version specified by the {@link Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * {@code CharSeq} may be a different length than the original {@code CharSeq}.
     * <p>
     * Examples of locale-sensitive and 1:M case mappings are in the following table.
     *
     * <table border="1">
     * <caption>Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.</caption>
     * <tr>
     * <th>Language Code of Locale</th>
     * <th>Lower Case</th>
     * <th>Upper Case</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0069</td>
     * <td>&#92;u0130</td>
     * <td>small letter i -&gt; capital letter I with dot above</td>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0131</td>
     * <td>&#92;u0049</td>
     * <td>small letter dotless i -&gt; capital letter I</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>&#92;u00df</td>
     * <td>&#92;u0053 &#92;u0053</td>
     * <td>small letter sharp s -&gt; two letters: SS</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>Fahrvergn&uuml;gen</td>
     * <td>FAHRVERGN&Uuml;GEN</td>
     * <td></td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale
     * @return the {@code CharSeq}, converted to uppercase.
     * @see String#toUpperCase()
     * @see String#toLowerCase()
     * @see String#toLowerCase(Locale)
     */
    public CharSeq toUpperCase(Locale locale) {
        return CharSeq.of(back.toUpperCase(locale));
    }
    /**
     * Converts all of the characters in this {@code CharSeq} to upper
     * case using the rules of the default locale. This method is equivalent to
     * {@code toUpperCase(Locale.getDefault())}.
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.
     * For instance, {@code "title".toUpperCase()} in a Turkish locale
     * returns {@code "T\u005Cu0130TLE"}, where '\u005Cu0130' is the
     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.
     * To obtain correct results for locale insensitive strings, use
     * {@code toUpperCase(Locale.ROOT)}.
     * <p>
     *
     * @return the {@code CharSeq}, converted to uppercase.
     * @see String#toUpperCase(Locale)
     */
    public CharSeq toUpperCase() {
        return CharSeq.of(back.toUpperCase(Locale.getDefault()));
    }
    /**
     * Converts the first character in this {@code CharSeq} to upper
     * case using the rules of the given {@code Locale}. If the {@code CharSeq} is
     * empty, it won't have any effect. Case mapping is based
     * on the Unicode Standard version specified by the {@link Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * {@code CharSeq} may be a different length than the original {@code CharSeq}.
     * <p>
     * Examples of locale-sensitive and 1:M case mappings are in the following table.
     *
     * <table border="1">
     * <caption>Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.</caption>
     * <tr>
     * <th>Language Code of Locale</th>
     * <th>Lower Case</th>
     * <th>Upper Case</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0069</td>
     * <td>&#92;u0130</td>
     * <td>small letter i -&gt; capital letter I with dot above</td>
     * </tr>
     * <tr>
     * <td>tr (Turkish)</td>
     * <td>&#92;u0131</td>
     * <td>&#92;u0049</td>
     * <td>small letter dotless i -&gt; capital letter I</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>&#92;u00df</td>
     * <td>&#92;u0053 &#92;u0053</td>
     * <td>small letter sharp s -&gt; two letters: SS</td>
     * </tr>
     * <tr>
     * <td>(all)</td>
     * <td>Fahrvergn&uuml;gen</td>
     * <td>FAHRVERGN&Uuml;GEN</td>
     * <td></td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale
     * @return the {@code CharSeq}, capitalized.
     */
    public CharSeq capitalize(Locale locale) {
        if (back.isEmpty()) {
            return this;
        }
        return CharSeq.of(back.substring(0, 1).toUpperCase(locale) + back.substring(1));
    }
    /**
     * Converts the first character in this {@code CharSeq} to upper
     * case using the rules of the default locale. If the {@code CharSeq} is
     * empty, it won't have any effect. This method is equivalent to
     * {@code capitalize(Locale.getDefault())}.
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.
     * For instance, {@code "title".toUpperCase()} in a Turkish locale
     * returns {@code "T\u005Cu0130TLE"}, where '\u005Cu0130' is the
     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.
     * To obtain correct results for locale insensitive strings, use
     * {@code toUpperCase(Locale.ROOT)}.
     * <p>
     *
     * @return the {@code CharSeq}, capitalized.
     */
    public CharSeq capitalize() {
        return capitalize(Locale.getDefault());
    }
    /**
     * Returns a string whose value is this string, with any leading and trailing
     * whitespace removed.
     * <p>
     * If this {@code CharSeq} object represents an empty character
     * sequence, or the first and last characters of character sequence
     * represented by this {@code CharSeq} object both have codes
     * greater than {@code '\u005Cu0020'} (the space character), then a
     * reference to this {@code CharSeq} object is returned.
     * <p>
     * Otherwise, if there is no character with a code greater than
     * {@code '\u005Cu0020'} in the string, then a
     * {@code CharSeq} object representing an empty string is
     * returned.
     * <p>
     * Otherwise, let <i>k</i> be the index of the first character in the
     * string whose code is greater than {@code '\u005Cu0020'}, and let
     * <i>m</i> be the index of the last character in the string whose code
     * is greater than {@code '\u005Cu0020'}. A {@code CharSeq}
     * object is returned, representing the substring of this string that
     * begins with the character at index <i>k</i> and ends with the
     * character at index <i>m</i>-that is, the result of
     * {@code this.substring(k, m + 1)}.
     * <p>
     * This method may be used to trim whitespace (as defined above) from
     * the beginning and end of a string.
     *
     * @return A string whose value is this string, with any leading and trailing white
     * space removed, or this string if it has no leading or
     * trailing white space.
     */
    public CharSeq trim() {
        return of(back.trim());
    }
    /**
     * Converts this string to a new character array.
     *
     * @return a newly allocated character array whose length is the length
     * of this string and whose contents are initialized to contain
     * the character sequence represented by this string.
     */
    public char[] toCharArray() {
        return back.toCharArray();
    }
    // -- number conversion
    /**
     * Decodes this {@code CharSeq} into a {@code Byte} by calling {@link Byte#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Byte value = charSeq.decodeByte();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Byte value = Byte.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Byte} object holding the byte value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable byte.
     */
    public Byte decodeByte() {
        return Byte.decode(back);
    }
    /**
     * Decodes this {@code CharSeq} into an {@code Integer} by calling {@link Integer#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Integer value = charSeq.decodeInteger();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Integer value = Integer.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return an {@code Integer} object holding the int value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable int.
     */
    public Integer decodeInteger() {
        return Integer.decode(back);
    }
    /**
     * Decodes this {@code CharSeq} into a {@code Long} by calling {@link Long#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Long value = charSeq.decodeLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Long value = Long.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Long} object holding the long value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable long.
     */
    public Long decodeLong() {
        return Long.decode(back);
    }
    /**
     * Decodes this {@code CharSeq} into a {@code Short} by calling {@link Short#decode(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Short value = charSeq.decodeShort();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Short value = Short.decode(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Short} object holding the short value represented by this {@code CharSeq}
     * @throws NumberFormatException if this {@code CharSeq} does not contain a parsable short.
     */
    public Short decodeShort() {
        return Short.decode(back);
    }
    /**
     * Parses this {@code CharSeq} as a boolean by calling {@link Boolean#parseBoolean(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * boolean value = charSeq.parseBoolean();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * boolean value = Boolean.parseBoolean(charSeq.mkString());
     * </code></pre>
     *
     * @return the boolean represented by this {@code CharSeq}
     */
    public boolean parseBoolean() {
        return Boolean.parseBoolean(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal byte by calling {@link Byte#parseByte(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * byte value = charSeq.parseByte();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * byte value = Byte.parseByte(charSeq.mkString());
     * </code></pre>
     *
     * @return the byte value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public byte parseByte() {
        return Byte.parseByte(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed byte in the specified radix
     * by calling {@link Byte#parseByte(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * byte value = charSeq.parseByte(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * byte value = Byte.parseByte(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the byte value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public byte parseByte(int radix) {
        return Byte.parseByte(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a double by calling {@link Double#parseDouble(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * double value = charSeq.parseDouble();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * double value = Double.parseDouble(charSeq.mkString());
     * </code></pre>
     *
     * @return the double value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable double.
     */
    public double parseDouble() {
        return Double.parseDouble(back);
    }
    /**
     * Parses this {@code CharSeq} as a float by calling {@link Float#parseFloat(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * float value = charSeq.parseFloat();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * float value = Double.parseFloat(charSeq.mkString());
     * </code></pre>
     *
     * @return the float value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable float.
     */
    public float parseFloat() {
        return Float.parseFloat(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal int by calling {@link Integer#parseInt(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseInt();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseInt(charSeq.mkString());
     * </code></pre>
     *
     * @return the int value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public int parseInt() {
        return Integer.parseInt(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed int in the specified radix
     * by calling {@link Integer#parseInt(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseInt(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseInt(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the int value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public int parseInt(int radix) {
        return Integer.parseInt(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned decimal int by calling {@link Integer#parseUnsignedInt(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseUnsignedInt();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseUnsignedInt(charSeq.mkString());
     * </code></pre>
     *
     * @return the unsigned int value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned int.
     */
    @GwtIncompatible
    public int parseUnsignedInt() {
        return Integer.parseUnsignedInt(back);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned int in the specified radix
     * by calling {@link Integer#parseUnsignedInt(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * int value = charSeq.parseUnsignedInt(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * int value = Integer.parseUnsignedInt(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the unsigned int value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned int.
     */
    @GwtIncompatible
    public int parseUnsignedInt(int radix) {
        return Integer.parseUnsignedInt(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal long by calling {@link Long#parseLong(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseLong(charSeq.mkString());
     * </code></pre>
     *
     * @return the long value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public long parseLong() {
        return Long.parseLong(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed long in the specified radix
     * by calling {@link Long#parseLong(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseLong(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseLong(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the long value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public long parseLong(int radix) {
        return Long.parseLong(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned decimal long by calling {@link Long#parseUnsignedLong(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseUnsignedLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseUnsignedLong(charSeq.mkString());
     * </code></pre>
     *
     * @return the unsigned long value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned long.
     */
    @GwtIncompatible
    public long parseUnsignedLong() {
        return Long.parseUnsignedLong(back);
    }
    /**
     * Parses this {@code CharSeq} as a unsigned long in the specified radix
     * by calling {@link Long#parseUnsignedLong(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * long value = charSeq.parseUnsignedLong(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * long value = Long.parseUnsignedLong(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the unsigned long value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable unsigned long.
     */
    @GwtIncompatible
    public long parseUnsignedLong(int radix) {
        return Long.parseUnsignedLong(back, radix);
    }
    /**
     * Parses this {@code CharSeq} as a signed decimal short by calling {@link Short#parseShort(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * short value = charSeq.parseShort();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * short value = Short.parseShort(charSeq.mkString());
     * </code></pre>
     *
     * @return the short value represented by this {@code CharSeq} in decimal
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public short parseShort() {
        return Short.parseShort(back);
    }
    /**
     * Parses this {@code CharSeq} as a signed short in the specified radix
     * by calling {@link Short#parseShort(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * short value = charSeq.parseShort(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * short value = Short.parseShort(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this {@code CharSeq}
     * @return the short value represented by this {@code CharSeq} in the specified radix
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public short parseShort(int radix) {
        return Short.parseShort(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Boolean} by calling {@link Boolean#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Boolean value = charSeq.toBoolean();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Boolean value = Boolean.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return the {@code Boolean} value represented by this {@code CharSeq}
     */
    public Boolean toBoolean() {
        return Boolean.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Byte} by calling {@link Byte#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Byte value = charSeq.toByte();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Byte value = Byte.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Byte} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public Byte toByte() {
        return Byte.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Byte} in the specified radix
     * by calling {@link Byte#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Byte value = charSeq.toByte(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Byte value = Byte.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return a {@code Byte} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable byte.
     */
    public Byte toByte(int radix) {
        return Byte.valueOf(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Double} by calling {@link Double#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Double value = charSeq.toDouble();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Double value = Double.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Double} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable double.
     */
    public Double toDouble() {
        return Double.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Float} by calling {@link Float#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Float value = charSeq.toFloat();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Float value = Float.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Float} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable float.
     */
    public Float toFloat() {
        return Float.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to an {@code Integer} by calling {@link Integer#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Integer value = charSeq.toInteger();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Integer value = Integer.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return an {@code Integer} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public Integer toInteger() {
        return Integer.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to an {@code Integer} in the specified radix
     * by calling {@link Integer#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Integer value = charSeq.toInteger(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Integer value = Integer.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return an {@code Integer} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable int.
     */
    public Integer toInteger(int radix) {
        return Integer.valueOf(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Long} by calling {@link Long#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Long value = charSeq.toLong();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Long value = Long.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Long} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public Long toLong() {
        return Long.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Long} in the specified radix
     * by calling {@link Long#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Long value = charSeq.toLong(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Long value = Long.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return a {@code Long} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable long.
     */
    public Long toLong(int radix) {
        return Long.valueOf(back, radix);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Short} by calling {@link Short#valueOf(String)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Short value = charSeq.toShort();
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Short value = Short.valueOf(charSeq.mkString());
     * </code></pre>
     *
     * @return a {@code Short} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public Short toShort() {
        return Short.valueOf(back);
    }
    /**
     * Converts this {@code CharSeq} to a {@code Short} in the specified radix
     * by calling {@link Short#valueOf(String, int)}.
     * <p>
     * We write
     *
     * <pre><code>
     * Short value = charSeq.toShort(radix);
     * </code></pre>
     *
     * instead of
     *
     * <pre><code>
     * Short value = Short.valueOf(charSeq.mkString(), radix);
     * </code></pre>
     *
     * @param radix the radix to be used in interpreting this char sequence
     * @return a {@code Short} object holding the value represented by this {@code CharSeq}
     * @throws NumberFormatException If this {@code CharSeq} does not contain a parsable short.
     */
    public Short toShort(int radix) {
        return Short.valueOf(back, radix);
    }
    // -- conversion overrides
    @Override
    public Character[] toJavaArray() {
        return toJavaList().toArray(new Character[0]);
    }
    // -- functional interfaces
    @FunctionalInterface
    public interface CharUnaryOperator {
        char apply(char c);
    }
    @FunctionalInterface
    public interface CharFunction<R> {
        R apply(char c);
    }
}
interface CharSeqModule {
    interface Combinations {
        static IndexedSeq<CharSeq> apply(CharSeq elements, int k) {
            if (k == 0) {
                return Vector.of(CharSeq.empty());
            } else {
                return elements.zipWithIndex().flatMap(
                        t -> apply(elements.drop(t._2 + 1), (k - 1)).map((CharSeq c) -> c.prepend(t._1))
                );
            }
        }
    }
}